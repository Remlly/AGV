
bin\Debug\AGV.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000108  00800200  00001a4a  00001afe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a4a  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000018  00800308  00800308  00001c06  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  00001c06  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 00000200  00000000  00000000  00001c09  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000035e  00000000  00000000  00001e09  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002ba3  00000000  00000000  00002167  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000169a  00000000  00000000  00004d0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001937  00000000  00000000  000063a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002e0  00000000  00000000  00007cdc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000055a  00000000  00000000  00007fbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009ce  00000000  00000000  00008516  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00008ee4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__vector_23>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	13 e0       	ldi	r17, 0x03	; 3
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ea e4       	ldi	r30, 0x4A	; 74
      fc:	fa e1       	ldi	r31, 0x1A	; 26
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a8 30       	cpi	r26, 0x08	; 8
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	13 e0       	ldi	r17, 0x03	; 3
     110:	a8 e0       	ldi	r26, 0x08	; 8
     112:	b3 e0       	ldi	r27, 0x03	; 3
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a0 32       	cpi	r26, 0x20	; 32
     11a:	b1 07       	cpc	r27, r17
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 95 00 	call	0x12a	; 0x12a <main>
     122:	0c 94 23 0d 	jmp	0x1a46	; 0x1a46 <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <main>:
#include <avr/interrupt.h>

#include "stepper.h"

int main(void)
{
     12a:	df 93       	push	r29
     12c:	cf 93       	push	r28
     12e:	cd b7       	in	r28, 0x3d	; 61
     130:	de b7       	in	r29, 0x3e	; 62
    ///initializing stepper motors///
    construct_stepper(&stepper1, PK0, PK1);
     132:	82 e1       	ldi	r24, 0x12	; 18
     134:	93 e0       	ldi	r25, 0x03	; 3
     136:	60 e0       	ldi	r22, 0x00	; 0
     138:	41 e0       	ldi	r20, 0x01	; 1
     13a:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <construct_stepper>
    construct_stepper(&stepper2, PK2, PK3);
     13e:	88 e0       	ldi	r24, 0x08	; 8
     140:	93 e0       	ldi	r25, 0x03	; 3
     142:	62 e0       	ldi	r22, 0x02	; 2
     144:	43 e0       	ldi	r20, 0x03	; 3
     146:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <construct_stepper>
    initialize_steppers();
     14a:	0e 94 23 02 	call	0x446	; 0x446 <initialize_steppers>
    init_stepper_timer0();
     14e:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <init_stepper_timer0>
    sei();
     152:	78 94       	sei

    ///initializing serial coms
    USART_Init(MYUBRR);
     154:	87 e6       	ldi	r24, 0x67	; 103
     156:	90 e0       	ldi	r25, 0x00	; 0
     158:	0e 94 ff 00 	call	0x1fe	; 0x1fe <USART_Init>

    stepper2.direction = forward;
     15c:	81 e0       	ldi	r24, 0x01	; 1
     15e:	80 93 0d 03 	sts	0x030D, r24
    stepper1.direction = backward;
     162:	82 e0       	ldi	r24, 0x02	; 2
     164:	80 93 17 03 	sts	0x0317, r24
    stepper1.time_profile = 10;
     168:	8a e0       	ldi	r24, 0x0A	; 10
     16a:	80 93 16 03 	sts	0x0316, r24
    stepper2.time_profile = 10;
     16e:	8a e0       	ldi	r24, 0x0A	; 10
     170:	80 93 0c 03 	sts	0x030C, r24


    turn(360, &stepper1, &stepper2);
     174:	22 e1       	ldi	r18, 0x12	; 18
     176:	33 e0       	ldi	r19, 0x03	; 3
     178:	48 e0       	ldi	r20, 0x08	; 8
     17a:	53 e0       	ldi	r21, 0x03	; 3
     17c:	88 e6       	ldi	r24, 0x68	; 104
     17e:	91 e0       	ldi	r25, 0x01	; 1
     180:	b9 01       	movw	r22, r18
     182:	0e 94 cb 04 	call	0x996	; 0x996 <turn>
    while(1)
    {
        //


        Handle_steps(&stepper1);
     186:	82 e1       	ldi	r24, 0x12	; 18
     188:	93 e0       	ldi	r25, 0x03	; 3
     18a:	0e 94 76 04 	call	0x8ec	; 0x8ec <Handle_steps>
        Handle_steps(&stepper2);
     18e:	88 e0       	ldi	r24, 0x08	; 8
     190:	93 e0       	ldi	r25, 0x03	; 3
     192:	0e 94 76 04 	call	0x8ec	; 0x8ec <Handle_steps>
        set_dir(&stepper1);
     196:	82 e1       	ldi	r24, 0x12	; 18
     198:	93 e0       	ldi	r25, 0x03	; 3
     19a:	0e 94 33 02 	call	0x466	; 0x466 <set_dir>
        set_dir(&stepper2);
     19e:	88 e0       	ldi	r24, 0x08	; 8
     1a0:	93 e0       	ldi	r25, 0x03	; 3
     1a2:	0e 94 33 02 	call	0x466	; 0x466 <set_dir>
     1a6:	ef cf       	rjmp	.-34     	; 0x186 <main+0x5c>

000001a8 <__vector_23>:

    return 0;
}

ISR(TIMER0_OVF_vect)
{
     1a8:	1f 92       	push	r1
     1aa:	0f 92       	push	r0
     1ac:	0f b6       	in	r0, 0x3f	; 63
     1ae:	0f 92       	push	r0
     1b0:	11 24       	eor	r1, r1
     1b2:	8f 93       	push	r24
     1b4:	9f 93       	push	r25
     1b6:	af 93       	push	r26
     1b8:	bf 93       	push	r27
     1ba:	df 93       	push	r29
     1bc:	cf 93       	push	r28
     1be:	cd b7       	in	r28, 0x3d	; 61
     1c0:	de b7       	in	r29, 0x3e	; 62
    ms++;
     1c2:	80 91 1c 03 	lds	r24, 0x031C
     1c6:	90 91 1d 03 	lds	r25, 0x031D
     1ca:	a0 91 1e 03 	lds	r26, 0x031E
     1ce:	b0 91 1f 03 	lds	r27, 0x031F
     1d2:	01 96       	adiw	r24, 0x01	; 1
     1d4:	a1 1d       	adc	r26, r1
     1d6:	b1 1d       	adc	r27, r1
     1d8:	80 93 1c 03 	sts	0x031C, r24
     1dc:	90 93 1d 03 	sts	0x031D, r25
     1e0:	a0 93 1e 03 	sts	0x031E, r26
     1e4:	b0 93 1f 03 	sts	0x031F, r27
}
     1e8:	cf 91       	pop	r28
     1ea:	df 91       	pop	r29
     1ec:	bf 91       	pop	r27
     1ee:	af 91       	pop	r26
     1f0:	9f 91       	pop	r25
     1f2:	8f 91       	pop	r24
     1f4:	0f 90       	pop	r0
     1f6:	0f be       	out	0x3f, r0	; 63
     1f8:	0f 90       	pop	r0
     1fa:	1f 90       	pop	r1
     1fc:	18 95       	reti

000001fe <USART_Init>:

#include "serial.h"

void USART_Init( unsigned int ubrr)
{
     1fe:	df 93       	push	r29
     200:	cf 93       	push	r28
     202:	0f 92       	push	r0
     204:	0f 92       	push	r0
     206:	cd b7       	in	r28, 0x3d	; 61
     208:	de b7       	in	r29, 0x3e	; 62
     20a:	9a 83       	std	Y+2, r25	; 0x02
     20c:	89 83       	std	Y+1, r24	; 0x01
    /*Set baud rate */
    UBRR0H = (unsigned char)(ubrr>>8);
     20e:	e5 ec       	ldi	r30, 0xC5	; 197
     210:	f0 e0       	ldi	r31, 0x00	; 0
     212:	89 81       	ldd	r24, Y+1	; 0x01
     214:	9a 81       	ldd	r25, Y+2	; 0x02
     216:	89 2f       	mov	r24, r25
     218:	99 27       	eor	r25, r25
     21a:	80 83       	st	Z, r24
    UBRR0L = (unsigned char)ubrr;
     21c:	e4 ec       	ldi	r30, 0xC4	; 196
     21e:	f0 e0       	ldi	r31, 0x00	; 0
     220:	89 81       	ldd	r24, Y+1	; 0x01
     222:	80 83       	st	Z, r24
    /*Enable receiver and transmitter */
    UCSR0B |= (1<<RXEN0);
     224:	a1 ec       	ldi	r26, 0xC1	; 193
     226:	b0 e0       	ldi	r27, 0x00	; 0
     228:	e1 ec       	ldi	r30, 0xC1	; 193
     22a:	f0 e0       	ldi	r31, 0x00	; 0
     22c:	80 81       	ld	r24, Z
     22e:	80 61       	ori	r24, 0x10	; 16
     230:	8c 93       	st	X, r24
    UCSR0B |= (1<<TXEN0);
     232:	a1 ec       	ldi	r26, 0xC1	; 193
     234:	b0 e0       	ldi	r27, 0x00	; 0
     236:	e1 ec       	ldi	r30, 0xC1	; 193
     238:	f0 e0       	ldi	r31, 0x00	; 0
     23a:	80 81       	ld	r24, Z
     23c:	88 60       	ori	r24, 0x08	; 8
     23e:	8c 93       	st	X, r24
    /* Set frame format: 8data, 2stop bit */
    UCSR0C = (1<<UCSZ01)|(3<<UCSZ00);
     240:	e2 ec       	ldi	r30, 0xC2	; 194
     242:	f0 e0       	ldi	r31, 0x00	; 0
     244:	86 e0       	ldi	r24, 0x06	; 6
     246:	80 83       	st	Z, r24
}
     248:	0f 90       	pop	r0
     24a:	0f 90       	pop	r0
     24c:	cf 91       	pop	r28
     24e:	df 91       	pop	r29
     250:	08 95       	ret

00000252 <recieve_Byte>:


uint8_t recieve_Byte(void)
{
     252:	df 93       	push	r29
     254:	cf 93       	push	r28
     256:	cd b7       	in	r28, 0x3d	; 61
     258:	de b7       	in	r29, 0x3e	; 62
    //moet worden vervangen met if. anders blijft de code hier hangen. als het aankomt blijft het toch in UDR0 staan totdat het wordt uitgelezen.
    loop_until_bit_is_set(UCSR0A, RXC0);
     25a:	e0 ec       	ldi	r30, 0xC0	; 192
     25c:	f0 e0       	ldi	r31, 0x00	; 0
     25e:	80 81       	ld	r24, Z
     260:	88 23       	and	r24, r24
     262:	dc f7       	brge	.-10     	; 0x25a <recieve_Byte+0x8>
    {
     return UDR0;
     264:	e6 ec       	ldi	r30, 0xC6	; 198
     266:	f0 e0       	ldi	r31, 0x00	; 0
     268:	80 81       	ld	r24, Z
    }
    /*else
    {
        return -1;
    }*/
}
     26a:	cf 91       	pop	r28
     26c:	df 91       	pop	r29
     26e:	08 95       	ret

00000270 <transmit_byte>:

void transmit_byte(uint8_t byte)
{
     270:	df 93       	push	r29
     272:	cf 93       	push	r28
     274:	0f 92       	push	r0
     276:	cd b7       	in	r28, 0x3d	; 61
     278:	de b7       	in	r29, 0x3e	; 62
     27a:	89 83       	std	Y+1, r24	; 0x01
    //vervangen met if
    loop_until_bit_is_set(UCSR0A, UDRE0);
     27c:	e0 ec       	ldi	r30, 0xC0	; 192
     27e:	f0 e0       	ldi	r31, 0x00	; 0
     280:	80 81       	ld	r24, Z
     282:	88 2f       	mov	r24, r24
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	80 72       	andi	r24, 0x20	; 32
     288:	90 70       	andi	r25, 0x00	; 0
     28a:	00 97       	sbiw	r24, 0x00	; 0
     28c:	b9 f3       	breq	.-18     	; 0x27c <transmit_byte+0xc>
    UDR0 = byte;
     28e:	e6 ec       	ldi	r30, 0xC6	; 198
     290:	f0 e0       	ldi	r31, 0x00	; 0
     292:	89 81       	ldd	r24, Y+1	; 0x01
     294:	80 83       	st	Z, r24

}
     296:	0f 90       	pop	r0
     298:	cf 91       	pop	r28
     29a:	df 91       	pop	r29
     29c:	08 95       	ret

0000029e <print_byte>:

void print_byte(uint32_t byte)
{
     29e:	df 93       	push	r29
     2a0:	cf 93       	push	r28
     2a2:	00 d0       	rcall	.+0      	; 0x2a4 <print_byte+0x6>
     2a4:	0f 92       	push	r0
     2a6:	cd b7       	in	r28, 0x3d	; 61
     2a8:	de b7       	in	r29, 0x3e	; 62
     2aa:	69 83       	std	Y+1, r22	; 0x01
     2ac:	7a 83       	std	Y+2, r23	; 0x02
     2ae:	8b 83       	std	Y+3, r24	; 0x03
     2b0:	9c 83       	std	Y+4, r25	; 0x04
    //werkt niet zoals het hoort. volgorde verkeert?
    transmit_byte((byte/1000)%10);
     2b2:	89 81       	ldd	r24, Y+1	; 0x01
     2b4:	9a 81       	ldd	r25, Y+2	; 0x02
     2b6:	ab 81       	ldd	r26, Y+3	; 0x03
     2b8:	bc 81       	ldd	r27, Y+4	; 0x04
     2ba:	28 ee       	ldi	r18, 0xE8	; 232
     2bc:	33 e0       	ldi	r19, 0x03	; 3
     2be:	40 e0       	ldi	r20, 0x00	; 0
     2c0:	50 e0       	ldi	r21, 0x00	; 0
     2c2:	bc 01       	movw	r22, r24
     2c4:	cd 01       	movw	r24, r26
     2c6:	0e 94 ca 0c 	call	0x1994	; 0x1994 <__udivmodsi4>
     2ca:	da 01       	movw	r26, r20
     2cc:	c9 01       	movw	r24, r18
     2ce:	2a e0       	ldi	r18, 0x0A	; 10
     2d0:	30 e0       	ldi	r19, 0x00	; 0
     2d2:	40 e0       	ldi	r20, 0x00	; 0
     2d4:	50 e0       	ldi	r21, 0x00	; 0
     2d6:	bc 01       	movw	r22, r24
     2d8:	cd 01       	movw	r24, r26
     2da:	0e 94 ca 0c 	call	0x1994	; 0x1994 <__udivmodsi4>
     2de:	dc 01       	movw	r26, r24
     2e0:	cb 01       	movw	r24, r22
     2e2:	0e 94 38 01 	call	0x270	; 0x270 <transmit_byte>
    transmit_byte((byte/100)%10);
     2e6:	89 81       	ldd	r24, Y+1	; 0x01
     2e8:	9a 81       	ldd	r25, Y+2	; 0x02
     2ea:	ab 81       	ldd	r26, Y+3	; 0x03
     2ec:	bc 81       	ldd	r27, Y+4	; 0x04
     2ee:	24 e6       	ldi	r18, 0x64	; 100
     2f0:	30 e0       	ldi	r19, 0x00	; 0
     2f2:	40 e0       	ldi	r20, 0x00	; 0
     2f4:	50 e0       	ldi	r21, 0x00	; 0
     2f6:	bc 01       	movw	r22, r24
     2f8:	cd 01       	movw	r24, r26
     2fa:	0e 94 ca 0c 	call	0x1994	; 0x1994 <__udivmodsi4>
     2fe:	da 01       	movw	r26, r20
     300:	c9 01       	movw	r24, r18
     302:	2a e0       	ldi	r18, 0x0A	; 10
     304:	30 e0       	ldi	r19, 0x00	; 0
     306:	40 e0       	ldi	r20, 0x00	; 0
     308:	50 e0       	ldi	r21, 0x00	; 0
     30a:	bc 01       	movw	r22, r24
     30c:	cd 01       	movw	r24, r26
     30e:	0e 94 ca 0c 	call	0x1994	; 0x1994 <__udivmodsi4>
     312:	dc 01       	movw	r26, r24
     314:	cb 01       	movw	r24, r22
     316:	0e 94 38 01 	call	0x270	; 0x270 <transmit_byte>
    transmit_byte((byte/10)%10);
     31a:	89 81       	ldd	r24, Y+1	; 0x01
     31c:	9a 81       	ldd	r25, Y+2	; 0x02
     31e:	ab 81       	ldd	r26, Y+3	; 0x03
     320:	bc 81       	ldd	r27, Y+4	; 0x04
     322:	2a e0       	ldi	r18, 0x0A	; 10
     324:	30 e0       	ldi	r19, 0x00	; 0
     326:	40 e0       	ldi	r20, 0x00	; 0
     328:	50 e0       	ldi	r21, 0x00	; 0
     32a:	bc 01       	movw	r22, r24
     32c:	cd 01       	movw	r24, r26
     32e:	0e 94 ca 0c 	call	0x1994	; 0x1994 <__udivmodsi4>
     332:	da 01       	movw	r26, r20
     334:	c9 01       	movw	r24, r18
     336:	2a e0       	ldi	r18, 0x0A	; 10
     338:	30 e0       	ldi	r19, 0x00	; 0
     33a:	40 e0       	ldi	r20, 0x00	; 0
     33c:	50 e0       	ldi	r21, 0x00	; 0
     33e:	bc 01       	movw	r22, r24
     340:	cd 01       	movw	r24, r26
     342:	0e 94 ca 0c 	call	0x1994	; 0x1994 <__udivmodsi4>
     346:	dc 01       	movw	r26, r24
     348:	cb 01       	movw	r24, r22
     34a:	0e 94 38 01 	call	0x270	; 0x270 <transmit_byte>
    transmit_byte((byte%10));
     34e:	89 81       	ldd	r24, Y+1	; 0x01
     350:	9a 81       	ldd	r25, Y+2	; 0x02
     352:	ab 81       	ldd	r26, Y+3	; 0x03
     354:	bc 81       	ldd	r27, Y+4	; 0x04
     356:	2a e0       	ldi	r18, 0x0A	; 10
     358:	30 e0       	ldi	r19, 0x00	; 0
     35a:	40 e0       	ldi	r20, 0x00	; 0
     35c:	50 e0       	ldi	r21, 0x00	; 0
     35e:	bc 01       	movw	r22, r24
     360:	cd 01       	movw	r24, r26
     362:	0e 94 ca 0c 	call	0x1994	; 0x1994 <__udivmodsi4>
     366:	dc 01       	movw	r26, r24
     368:	cb 01       	movw	r24, r22
     36a:	0e 94 38 01 	call	0x270	; 0x270 <transmit_byte>
    transmit_byte(0xA5);
     36e:	85 ea       	ldi	r24, 0xA5	; 165
     370:	0e 94 38 01 	call	0x270	; 0x270 <transmit_byte>
}
     374:	0f 90       	pop	r0
     376:	0f 90       	pop	r0
     378:	0f 90       	pop	r0
     37a:	0f 90       	pop	r0
     37c:	cf 91       	pop	r28
     37e:	df 91       	pop	r29
     380:	08 95       	ret

00000382 <recieve_string>:



void recieve_string(char code[])
{
     382:	df 93       	push	r29
     384:	cf 93       	push	r28
     386:	00 d0       	rcall	.+0      	; 0x388 <recieve_string+0x6>
     388:	0f 92       	push	r0
     38a:	0f 92       	push	r0
     38c:	cd b7       	in	r28, 0x3d	; 61
     38e:	de b7       	in	r29, 0x3e	; 62
     390:	9d 83       	std	Y+5, r25	; 0x05
     392:	8c 83       	std	Y+4, r24	; 0x04
    //code ontworpen voor een GPS module. dollar teken is begin van de string. kan wel gebruikt worden voor het onvangen van complexe instructies.
    char byte = recieve_Byte();
     394:	0e 94 29 01 	call	0x252	; 0x252 <recieve_Byte>
     398:	8b 83       	std	Y+3, r24	; 0x03
    if(byte == '$')
     39a:	8b 81       	ldd	r24, Y+3	; 0x03
     39c:	84 32       	cpi	r24, 0x24	; 36
     39e:	c9 f4       	brne	.+50     	; 0x3d2 <recieve_string+0x50>
    {
        int x = 1;
     3a0:	81 e0       	ldi	r24, 0x01	; 1
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	9a 83       	std	Y+2, r25	; 0x02
     3a6:	89 83       	std	Y+1, r24	; 0x01
     3a8:	11 c0       	rjmp	.+34     	; 0x3cc <recieve_string+0x4a>
        while(byte != '\n')
        {
            byte = recieve_Byte();
     3aa:	0e 94 29 01 	call	0x252	; 0x252 <recieve_Byte>
     3ae:	8b 83       	std	Y+3, r24	; 0x03
            code[x] = byte;
     3b0:	29 81       	ldd	r18, Y+1	; 0x01
     3b2:	3a 81       	ldd	r19, Y+2	; 0x02
     3b4:	8c 81       	ldd	r24, Y+4	; 0x04
     3b6:	9d 81       	ldd	r25, Y+5	; 0x05
     3b8:	fc 01       	movw	r30, r24
     3ba:	e2 0f       	add	r30, r18
     3bc:	f3 1f       	adc	r31, r19
     3be:	8b 81       	ldd	r24, Y+3	; 0x03
     3c0:	80 83       	st	Z, r24
            x++;
     3c2:	89 81       	ldd	r24, Y+1	; 0x01
     3c4:	9a 81       	ldd	r25, Y+2	; 0x02
     3c6:	01 96       	adiw	r24, 0x01	; 1
     3c8:	9a 83       	std	Y+2, r25	; 0x02
     3ca:	89 83       	std	Y+1, r24	; 0x01
    //code ontworpen voor een GPS module. dollar teken is begin van de string. kan wel gebruikt worden voor het onvangen van complexe instructies.
    char byte = recieve_Byte();
    if(byte == '$')
    {
        int x = 1;
        while(byte != '\n')
     3cc:	8b 81       	ldd	r24, Y+3	; 0x03
     3ce:	8a 30       	cpi	r24, 0x0A	; 10
     3d0:	61 f7       	brne	.-40     	; 0x3aa <recieve_string+0x28>
            byte = recieve_Byte();
            code[x] = byte;
            x++;
        }
    }
}
     3d2:	0f 90       	pop	r0
     3d4:	0f 90       	pop	r0
     3d6:	0f 90       	pop	r0
     3d8:	0f 90       	pop	r0
     3da:	0f 90       	pop	r0
     3dc:	cf 91       	pop	r28
     3de:	df 91       	pop	r29
     3e0:	08 95       	ret

000003e2 <construct_stepper>:
#include <avr/interrupt.h>

#include "stepper.h"

void construct_stepper(volatile struct stepper *stepper, uint8_t step_pin, uint8_t dir_pin)
{
     3e2:	df 93       	push	r29
     3e4:	cf 93       	push	r28
     3e6:	00 d0       	rcall	.+0      	; 0x3e8 <construct_stepper+0x6>
     3e8:	0f 92       	push	r0
     3ea:	cd b7       	in	r28, 0x3d	; 61
     3ec:	de b7       	in	r29, 0x3e	; 62
     3ee:	9a 83       	std	Y+2, r25	; 0x02
     3f0:	89 83       	std	Y+1, r24	; 0x01
     3f2:	6b 83       	std	Y+3, r22	; 0x03
     3f4:	4c 83       	std	Y+4, r20	; 0x04
    stepper->last_step = ms;
     3f6:	80 91 1c 03 	lds	r24, 0x031C
     3fa:	90 91 1d 03 	lds	r25, 0x031D
     3fe:	a0 91 1e 03 	lds	r26, 0x031E
     402:	b0 91 1f 03 	lds	r27, 0x031F
     406:	e9 81       	ldd	r30, Y+1	; 0x01
     408:	fa 81       	ldd	r31, Y+2	; 0x02
     40a:	80 83       	st	Z, r24
     40c:	91 83       	std	Z+1, r25	; 0x01
     40e:	a2 83       	std	Z+2, r26	; 0x02
     410:	b3 83       	std	Z+3, r27	; 0x03
    stepper->time_profile = 1;
     412:	e9 81       	ldd	r30, Y+1	; 0x01
     414:	fa 81       	ldd	r31, Y+2	; 0x02
     416:	81 e0       	ldi	r24, 0x01	; 1
     418:	84 83       	std	Z+4, r24	; 0x04
    stepper->steps = 0;
     41a:	e9 81       	ldd	r30, Y+1	; 0x01
     41c:	fa 81       	ldd	r31, Y+2	; 0x02
     41e:	11 86       	std	Z+9, r1	; 0x09
     420:	10 86       	std	Z+8, r1	; 0x08
    stepper->step_pin = step_pin;
     422:	e9 81       	ldd	r30, Y+1	; 0x01
     424:	fa 81       	ldd	r31, Y+2	; 0x02
     426:	8b 81       	ldd	r24, Y+3	; 0x03
     428:	86 83       	std	Z+6, r24	; 0x06
    stepper->dir_pin = dir_pin;
     42a:	e9 81       	ldd	r30, Y+1	; 0x01
     42c:	fa 81       	ldd	r31, Y+2	; 0x02
     42e:	8c 81       	ldd	r24, Y+4	; 0x04
     430:	87 83       	std	Z+7, r24	; 0x07
    stepper->direction = 0;
     432:	e9 81       	ldd	r30, Y+1	; 0x01
     434:	fa 81       	ldd	r31, Y+2	; 0x02
     436:	15 82       	std	Z+5, r1	; 0x05
}
     438:	0f 90       	pop	r0
     43a:	0f 90       	pop	r0
     43c:	0f 90       	pop	r0
     43e:	0f 90       	pop	r0
     440:	cf 91       	pop	r28
     442:	df 91       	pop	r29
     444:	08 95       	ret

00000446 <initialize_steppers>:

void initialize_steppers()
{
     446:	df 93       	push	r29
     448:	cf 93       	push	r28
     44a:	0f 92       	push	r0
     44c:	cd b7       	in	r28, 0x3d	; 61
     44e:	de b7       	in	r29, 0x3e	; 62
    stepper_DDR |= 0xFF;//init all pins in bank C
     450:	e7 e0       	ldi	r30, 0x07	; 7
     452:	f1 e0       	ldi	r31, 0x01	; 1
     454:	80 81       	ld	r24, Z
     456:	e7 e0       	ldi	r30, 0x07	; 7
     458:	f1 e0       	ldi	r31, 0x01	; 1
     45a:	8f ef       	ldi	r24, 0xFF	; 255
     45c:	80 83       	st	Z, r24
}
     45e:	0f 90       	pop	r0
     460:	cf 91       	pop	r28
     462:	df 91       	pop	r29
     464:	08 95       	ret

00000466 <set_dir>:

void set_dir(volatile struct stepper *stepper)
{
     466:	df 93       	push	r29
     468:	cf 93       	push	r28
     46a:	00 d0       	rcall	.+0      	; 0x46c <set_dir+0x6>
     46c:	0f 92       	push	r0
     46e:	cd b7       	in	r28, 0x3d	; 61
     470:	de b7       	in	r29, 0x3e	; 62
     472:	9a 83       	std	Y+2, r25	; 0x02
     474:	89 83       	std	Y+1, r24	; 0x01
    switch(stepper->direction)
     476:	e9 81       	ldd	r30, Y+1	; 0x01
     478:	fa 81       	ldd	r31, Y+2	; 0x02
     47a:	85 81       	ldd	r24, Z+5	; 0x05
     47c:	28 2f       	mov	r18, r24
     47e:	30 e0       	ldi	r19, 0x00	; 0
     480:	3c 83       	std	Y+4, r19	; 0x04
     482:	2b 83       	std	Y+3, r18	; 0x03
     484:	8b 81       	ldd	r24, Y+3	; 0x03
     486:	9c 81       	ldd	r25, Y+4	; 0x04
     488:	81 30       	cpi	r24, 0x01	; 1
     48a:	91 05       	cpc	r25, r1
     48c:	31 f0       	breq	.+12     	; 0x49a <set_dir+0x34>
     48e:	2b 81       	ldd	r18, Y+3	; 0x03
     490:	3c 81       	ldd	r19, Y+4	; 0x04
     492:	22 30       	cpi	r18, 0x02	; 2
     494:	31 05       	cpc	r19, r1
     496:	b9 f0       	breq	.+46     	; 0x4c6 <set_dir+0x60>
     498:	2c c0       	rjmp	.+88     	; 0x4f2 <set_dir+0x8c>
    {
    case forward:
        stepper_port |= (1<<stepper->dir_pin);
     49a:	a8 e0       	ldi	r26, 0x08	; 8
     49c:	b1 e0       	ldi	r27, 0x01	; 1
     49e:	e8 e0       	ldi	r30, 0x08	; 8
     4a0:	f1 e0       	ldi	r31, 0x01	; 1
     4a2:	80 81       	ld	r24, Z
     4a4:	48 2f       	mov	r20, r24
     4a6:	e9 81       	ldd	r30, Y+1	; 0x01
     4a8:	fa 81       	ldd	r31, Y+2	; 0x02
     4aa:	87 81       	ldd	r24, Z+7	; 0x07
     4ac:	28 2f       	mov	r18, r24
     4ae:	30 e0       	ldi	r19, 0x00	; 0
     4b0:	81 e0       	ldi	r24, 0x01	; 1
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	02 2e       	mov	r0, r18
     4b6:	02 c0       	rjmp	.+4      	; 0x4bc <set_dir+0x56>
     4b8:	88 0f       	add	r24, r24
     4ba:	99 1f       	adc	r25, r25
     4bc:	0a 94       	dec	r0
     4be:	e2 f7       	brpl	.-8      	; 0x4b8 <set_dir+0x52>
     4c0:	84 2b       	or	r24, r20
     4c2:	8c 93       	st	X, r24
     4c4:	16 c0       	rjmp	.+44     	; 0x4f2 <set_dir+0x8c>
        break;
    case backward:
        stepper_port &= ~(1<<stepper->dir_pin);
     4c6:	a8 e0       	ldi	r26, 0x08	; 8
     4c8:	b1 e0       	ldi	r27, 0x01	; 1
     4ca:	e8 e0       	ldi	r30, 0x08	; 8
     4cc:	f1 e0       	ldi	r31, 0x01	; 1
     4ce:	80 81       	ld	r24, Z
     4d0:	48 2f       	mov	r20, r24
     4d2:	e9 81       	ldd	r30, Y+1	; 0x01
     4d4:	fa 81       	ldd	r31, Y+2	; 0x02
     4d6:	87 81       	ldd	r24, Z+7	; 0x07
     4d8:	28 2f       	mov	r18, r24
     4da:	30 e0       	ldi	r19, 0x00	; 0
     4dc:	81 e0       	ldi	r24, 0x01	; 1
     4de:	90 e0       	ldi	r25, 0x00	; 0
     4e0:	02 2e       	mov	r0, r18
     4e2:	02 c0       	rjmp	.+4      	; 0x4e8 <set_dir+0x82>
     4e4:	88 0f       	add	r24, r24
     4e6:	99 1f       	adc	r25, r25
     4e8:	0a 94       	dec	r0
     4ea:	e2 f7       	brpl	.-8      	; 0x4e4 <set_dir+0x7e>
     4ec:	80 95       	com	r24
     4ee:	84 23       	and	r24, r20
     4f0:	8c 93       	st	X, r24
        break;
    default:
        break;
    }
}
     4f2:	0f 90       	pop	r0
     4f4:	0f 90       	pop	r0
     4f6:	0f 90       	pop	r0
     4f8:	0f 90       	pop	r0
     4fa:	cf 91       	pop	r28
     4fc:	df 91       	pop	r29
     4fe:	08 95       	ret

00000500 <step>:

void static step(volatile struct stepper stepper)
{
     500:	0f 93       	push	r16
     502:	1f 93       	push	r17
     504:	df 93       	push	r29
     506:	cf 93       	push	r28
     508:	cd b7       	in	r28, 0x3d	; 61
     50a:	de b7       	in	r29, 0x3e	; 62
     50c:	ea 97       	sbiw	r28, 0x3a	; 58
     50e:	0f b6       	in	r0, 0x3f	; 63
     510:	f8 94       	cli
     512:	de bf       	out	0x3e, r29	; 62
     514:	0f be       	out	0x3f, r0	; 63
     516:	cd bf       	out	0x3d, r28	; 61
     518:	09 ab       	std	Y+49, r16	; 0x31
     51a:	1a ab       	std	Y+50, r17	; 0x32
     51c:	2b ab       	std	Y+51, r18	; 0x33
     51e:	3c ab       	std	Y+52, r19	; 0x34
     520:	4d ab       	std	Y+53, r20	; 0x35
     522:	5e ab       	std	Y+54, r21	; 0x36
     524:	6f ab       	std	Y+55, r22	; 0x37
     526:	78 af       	std	Y+56, r23	; 0x38
     528:	89 af       	std	Y+57, r24	; 0x39
     52a:	9a af       	std	Y+58, r25	; 0x3a

            stepper_port |= (1<<stepper.step_pin);
     52c:	a8 e0       	ldi	r26, 0x08	; 8
     52e:	b1 e0       	ldi	r27, 0x01	; 1
     530:	e8 e0       	ldi	r30, 0x08	; 8
     532:	f1 e0       	ldi	r31, 0x01	; 1
     534:	80 81       	ld	r24, Z
     536:	48 2f       	mov	r20, r24
     538:	8f a9       	ldd	r24, Y+55	; 0x37
     53a:	28 2f       	mov	r18, r24
     53c:	30 e0       	ldi	r19, 0x00	; 0
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	02 c0       	rjmp	.+4      	; 0x548 <step+0x48>
     544:	88 0f       	add	r24, r24
     546:	99 1f       	adc	r25, r25
     548:	2a 95       	dec	r18
     54a:	e2 f7       	brpl	.-8      	; 0x544 <step+0x44>
     54c:	84 2b       	or	r24, r20
     54e:	8c 93       	st	X, r24
     550:	80 e0       	ldi	r24, 0x00	; 0
     552:	90 e0       	ldi	r25, 0x00	; 0
     554:	a0 e0       	ldi	r26, 0x00	; 0
     556:	b0 e4       	ldi	r27, 0x40	; 64
     558:	8d a7       	std	Y+45, r24	; 0x2d
     55a:	9e a7       	std	Y+46, r25	; 0x2e
     55c:	af a7       	std	Y+47, r26	; 0x2f
     55e:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     560:	6d a5       	ldd	r22, Y+45	; 0x2d
     562:	7e a5       	ldd	r23, Y+46	; 0x2e
     564:	8f a5       	ldd	r24, Y+47	; 0x2f
     566:	98 a9       	ldd	r25, Y+48	; 0x30
     568:	2b ea       	ldi	r18, 0xAB	; 171
     56a:	3a ea       	ldi	r19, 0xAA	; 170
     56c:	4a ea       	ldi	r20, 0xAA	; 170
     56e:	50 e4       	ldi	r21, 0x40	; 64
     570:	0e 94 ed 07 	call	0xfda	; 0xfda <__mulsf3>
     574:	dc 01       	movw	r26, r24
     576:	cb 01       	movw	r24, r22
     578:	89 a7       	std	Y+41, r24	; 0x29
     57a:	9a a7       	std	Y+42, r25	; 0x2a
     57c:	ab a7       	std	Y+43, r26	; 0x2b
     57e:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
     580:	69 a5       	ldd	r22, Y+41	; 0x29
     582:	7a a5       	ldd	r23, Y+42	; 0x2a
     584:	8b a5       	ldd	r24, Y+43	; 0x2b
     586:	9c a5       	ldd	r25, Y+44	; 0x2c
     588:	20 e0       	ldi	r18, 0x00	; 0
     58a:	30 e0       	ldi	r19, 0x00	; 0
     58c:	40 e8       	ldi	r20, 0x80	; 128
     58e:	5f e3       	ldi	r21, 0x3F	; 63
     590:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__ltsf2>
     594:	88 23       	and	r24, r24
     596:	1c f4       	brge	.+6      	; 0x59e <step+0x9e>
		__ticks = 1;
     598:	81 e0       	ldi	r24, 0x01	; 1
     59a:	88 a7       	std	Y+40, r24	; 0x28
     59c:	91 c0       	rjmp	.+290    	; 0x6c0 <step+0x1c0>
	else if (__tmp > 255)
     59e:	69 a5       	ldd	r22, Y+41	; 0x29
     5a0:	7a a5       	ldd	r23, Y+42	; 0x2a
     5a2:	8b a5       	ldd	r24, Y+43	; 0x2b
     5a4:	9c a5       	ldd	r25, Y+44	; 0x2c
     5a6:	20 e0       	ldi	r18, 0x00	; 0
     5a8:	30 e0       	ldi	r19, 0x00	; 0
     5aa:	4f e7       	ldi	r20, 0x7F	; 127
     5ac:	53 e4       	ldi	r21, 0x43	; 67
     5ae:	0e 94 93 09 	call	0x1326	; 0x1326 <__gtsf2>
     5b2:	18 16       	cp	r1, r24
     5b4:	0c f0       	brlt	.+2      	; 0x5b8 <step+0xb8>
     5b6:	7b c0       	rjmp	.+246    	; 0x6ae <step+0x1ae>
	{
		_delay_ms(__us / 1000.0);
     5b8:	6d a5       	ldd	r22, Y+45	; 0x2d
     5ba:	7e a5       	ldd	r23, Y+46	; 0x2e
     5bc:	8f a5       	ldd	r24, Y+47	; 0x2f
     5be:	98 a9       	ldd	r25, Y+48	; 0x30
     5c0:	20 e0       	ldi	r18, 0x00	; 0
     5c2:	30 e0       	ldi	r19, 0x00	; 0
     5c4:	4a e7       	ldi	r20, 0x7A	; 122
     5c6:	54 e4       	ldi	r21, 0x44	; 68
     5c8:	0e 94 e7 08 	call	0x11ce	; 0x11ce <__divsf3>
     5cc:	dc 01       	movw	r26, r24
     5ce:	cb 01       	movw	r24, r22
     5d0:	8c a3       	std	Y+36, r24	; 0x24
     5d2:	9d a3       	std	Y+37, r25	; 0x25
     5d4:	ae a3       	std	Y+38, r26	; 0x26
     5d6:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     5d8:	6c a1       	ldd	r22, Y+36	; 0x24
     5da:	7d a1       	ldd	r23, Y+37	; 0x25
     5dc:	8e a1       	ldd	r24, Y+38	; 0x26
     5de:	9f a1       	ldd	r25, Y+39	; 0x27
     5e0:	20 e0       	ldi	r18, 0x00	; 0
     5e2:	30 e0       	ldi	r19, 0x00	; 0
     5e4:	4a e7       	ldi	r20, 0x7A	; 122
     5e6:	55 e4       	ldi	r21, 0x45	; 69
     5e8:	0e 94 ed 07 	call	0xfda	; 0xfda <__mulsf3>
     5ec:	dc 01       	movw	r26, r24
     5ee:	cb 01       	movw	r24, r22
     5f0:	88 a3       	std	Y+32, r24	; 0x20
     5f2:	99 a3       	std	Y+33, r25	; 0x21
     5f4:	aa a3       	std	Y+34, r26	; 0x22
     5f6:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
     5f8:	68 a1       	ldd	r22, Y+32	; 0x20
     5fa:	79 a1       	ldd	r23, Y+33	; 0x21
     5fc:	8a a1       	ldd	r24, Y+34	; 0x22
     5fe:	9b a1       	ldd	r25, Y+35	; 0x23
     600:	20 e0       	ldi	r18, 0x00	; 0
     602:	30 e0       	ldi	r19, 0x00	; 0
     604:	40 e8       	ldi	r20, 0x80	; 128
     606:	5f e3       	ldi	r21, 0x3F	; 63
     608:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__ltsf2>
     60c:	88 23       	and	r24, r24
     60e:	2c f4       	brge	.+10     	; 0x61a <step+0x11a>
		__ticks = 1;
     610:	81 e0       	ldi	r24, 0x01	; 1
     612:	90 e0       	ldi	r25, 0x00	; 0
     614:	9f 8f       	std	Y+31, r25	; 0x1f
     616:	8e 8f       	std	Y+30, r24	; 0x1e
     618:	3f c0       	rjmp	.+126    	; 0x698 <step+0x198>
	else if (__tmp > 65535)
     61a:	68 a1       	ldd	r22, Y+32	; 0x20
     61c:	79 a1       	ldd	r23, Y+33	; 0x21
     61e:	8a a1       	ldd	r24, Y+34	; 0x22
     620:	9b a1       	ldd	r25, Y+35	; 0x23
     622:	20 e0       	ldi	r18, 0x00	; 0
     624:	3f ef       	ldi	r19, 0xFF	; 255
     626:	4f e7       	ldi	r20, 0x7F	; 127
     628:	57 e4       	ldi	r21, 0x47	; 71
     62a:	0e 94 93 09 	call	0x1326	; 0x1326 <__gtsf2>
     62e:	18 16       	cp	r1, r24
     630:	4c f5       	brge	.+82     	; 0x684 <step+0x184>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     632:	6c a1       	ldd	r22, Y+36	; 0x24
     634:	7d a1       	ldd	r23, Y+37	; 0x25
     636:	8e a1       	ldd	r24, Y+38	; 0x26
     638:	9f a1       	ldd	r25, Y+39	; 0x27
     63a:	20 e0       	ldi	r18, 0x00	; 0
     63c:	30 e0       	ldi	r19, 0x00	; 0
     63e:	40 e2       	ldi	r20, 0x20	; 32
     640:	51 e4       	ldi	r21, 0x41	; 65
     642:	0e 94 ed 07 	call	0xfda	; 0xfda <__mulsf3>
     646:	dc 01       	movw	r26, r24
     648:	cb 01       	movw	r24, r22
     64a:	bc 01       	movw	r22, r24
     64c:	cd 01       	movw	r24, r26
     64e:	0e 94 17 06 	call	0xc2e	; 0xc2e <__fixunssfsi>
     652:	dc 01       	movw	r26, r24
     654:	cb 01       	movw	r24, r22
     656:	9f 8f       	std	Y+31, r25	; 0x1f
     658:	8e 8f       	std	Y+30, r24	; 0x1e
     65a:	0f c0       	rjmp	.+30     	; 0x67a <step+0x17a>
     65c:	80 e9       	ldi	r24, 0x90	; 144
     65e:	91 e0       	ldi	r25, 0x01	; 1
     660:	9d 8f       	std	Y+29, r25	; 0x1d
     662:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     664:	8c 8d       	ldd	r24, Y+28	; 0x1c
     666:	9d 8d       	ldd	r25, Y+29	; 0x1d
     668:	01 97       	sbiw	r24, 0x01	; 1
     66a:	f1 f7       	brne	.-4      	; 0x668 <step+0x168>
     66c:	9d 8f       	std	Y+29, r25	; 0x1d
     66e:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     670:	8e 8d       	ldd	r24, Y+30	; 0x1e
     672:	9f 8d       	ldd	r25, Y+31	; 0x1f
     674:	01 97       	sbiw	r24, 0x01	; 1
     676:	9f 8f       	std	Y+31, r25	; 0x1f
     678:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     67a:	8e 8d       	ldd	r24, Y+30	; 0x1e
     67c:	9f 8d       	ldd	r25, Y+31	; 0x1f
     67e:	00 97       	sbiw	r24, 0x00	; 0
     680:	69 f7       	brne	.-38     	; 0x65c <step+0x15c>
     682:	24 c0       	rjmp	.+72     	; 0x6cc <step+0x1cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     684:	68 a1       	ldd	r22, Y+32	; 0x20
     686:	79 a1       	ldd	r23, Y+33	; 0x21
     688:	8a a1       	ldd	r24, Y+34	; 0x22
     68a:	9b a1       	ldd	r25, Y+35	; 0x23
     68c:	0e 94 17 06 	call	0xc2e	; 0xc2e <__fixunssfsi>
     690:	dc 01       	movw	r26, r24
     692:	cb 01       	movw	r24, r22
     694:	9f 8f       	std	Y+31, r25	; 0x1f
     696:	8e 8f       	std	Y+30, r24	; 0x1e
     698:	8e 8d       	ldd	r24, Y+30	; 0x1e
     69a:	9f 8d       	ldd	r25, Y+31	; 0x1f
     69c:	9b 8f       	std	Y+27, r25	; 0x1b
     69e:	8a 8f       	std	Y+26, r24	; 0x1a
     6a0:	8a 8d       	ldd	r24, Y+26	; 0x1a
     6a2:	9b 8d       	ldd	r25, Y+27	; 0x1b
     6a4:	01 97       	sbiw	r24, 0x01	; 1
     6a6:	f1 f7       	brne	.-4      	; 0x6a4 <step+0x1a4>
     6a8:	9b 8f       	std	Y+27, r25	; 0x1b
     6aa:	8a 8f       	std	Y+26, r24	; 0x1a
     6ac:	0f c0       	rjmp	.+30     	; 0x6cc <step+0x1cc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     6ae:	69 a5       	ldd	r22, Y+41	; 0x29
     6b0:	7a a5       	ldd	r23, Y+42	; 0x2a
     6b2:	8b a5       	ldd	r24, Y+43	; 0x2b
     6b4:	9c a5       	ldd	r25, Y+44	; 0x2c
     6b6:	0e 94 17 06 	call	0xc2e	; 0xc2e <__fixunssfsi>
     6ba:	dc 01       	movw	r26, r24
     6bc:	cb 01       	movw	r24, r22
     6be:	88 a7       	std	Y+40, r24	; 0x28
     6c0:	88 a5       	ldd	r24, Y+40	; 0x28
     6c2:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     6c4:	89 8d       	ldd	r24, Y+25	; 0x19
     6c6:	8a 95       	dec	r24
     6c8:	f1 f7       	brne	.-4      	; 0x6c6 <step+0x1c6>
     6ca:	89 8f       	std	Y+25, r24	; 0x19
            _delay_us(2);
            stepper_port &= ~(1<<stepper.step_pin);
     6cc:	a8 e0       	ldi	r26, 0x08	; 8
     6ce:	b1 e0       	ldi	r27, 0x01	; 1
     6d0:	e8 e0       	ldi	r30, 0x08	; 8
     6d2:	f1 e0       	ldi	r31, 0x01	; 1
     6d4:	80 81       	ld	r24, Z
     6d6:	48 2f       	mov	r20, r24
     6d8:	8f a9       	ldd	r24, Y+55	; 0x37
     6da:	28 2f       	mov	r18, r24
     6dc:	30 e0       	ldi	r19, 0x00	; 0
     6de:	81 e0       	ldi	r24, 0x01	; 1
     6e0:	90 e0       	ldi	r25, 0x00	; 0
     6e2:	02 c0       	rjmp	.+4      	; 0x6e8 <step+0x1e8>
     6e4:	88 0f       	add	r24, r24
     6e6:	99 1f       	adc	r25, r25
     6e8:	2a 95       	dec	r18
     6ea:	e2 f7       	brpl	.-8      	; 0x6e4 <step+0x1e4>
     6ec:	80 95       	com	r24
     6ee:	84 23       	and	r24, r20
     6f0:	8c 93       	st	X, r24
     6f2:	80 e0       	ldi	r24, 0x00	; 0
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	a0 e0       	ldi	r26, 0x00	; 0
     6f8:	b0 e4       	ldi	r27, 0x40	; 64
     6fa:	8d 8b       	std	Y+21, r24	; 0x15
     6fc:	9e 8b       	std	Y+22, r25	; 0x16
     6fe:	af 8b       	std	Y+23, r26	; 0x17
     700:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     702:	6d 89       	ldd	r22, Y+21	; 0x15
     704:	7e 89       	ldd	r23, Y+22	; 0x16
     706:	8f 89       	ldd	r24, Y+23	; 0x17
     708:	98 8d       	ldd	r25, Y+24	; 0x18
     70a:	2b ea       	ldi	r18, 0xAB	; 171
     70c:	3a ea       	ldi	r19, 0xAA	; 170
     70e:	4a ea       	ldi	r20, 0xAA	; 170
     710:	50 e4       	ldi	r21, 0x40	; 64
     712:	0e 94 ed 07 	call	0xfda	; 0xfda <__mulsf3>
     716:	dc 01       	movw	r26, r24
     718:	cb 01       	movw	r24, r22
     71a:	89 8b       	std	Y+17, r24	; 0x11
     71c:	9a 8b       	std	Y+18, r25	; 0x12
     71e:	ab 8b       	std	Y+19, r26	; 0x13
     720:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     722:	69 89       	ldd	r22, Y+17	; 0x11
     724:	7a 89       	ldd	r23, Y+18	; 0x12
     726:	8b 89       	ldd	r24, Y+19	; 0x13
     728:	9c 89       	ldd	r25, Y+20	; 0x14
     72a:	20 e0       	ldi	r18, 0x00	; 0
     72c:	30 e0       	ldi	r19, 0x00	; 0
     72e:	40 e8       	ldi	r20, 0x80	; 128
     730:	5f e3       	ldi	r21, 0x3F	; 63
     732:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__ltsf2>
     736:	88 23       	and	r24, r24
     738:	1c f4       	brge	.+6      	; 0x740 <step+0x240>
		__ticks = 1;
     73a:	81 e0       	ldi	r24, 0x01	; 1
     73c:	88 8b       	std	Y+16, r24	; 0x10
     73e:	91 c0       	rjmp	.+290    	; 0x862 <step+0x362>
	else if (__tmp > 255)
     740:	69 89       	ldd	r22, Y+17	; 0x11
     742:	7a 89       	ldd	r23, Y+18	; 0x12
     744:	8b 89       	ldd	r24, Y+19	; 0x13
     746:	9c 89       	ldd	r25, Y+20	; 0x14
     748:	20 e0       	ldi	r18, 0x00	; 0
     74a:	30 e0       	ldi	r19, 0x00	; 0
     74c:	4f e7       	ldi	r20, 0x7F	; 127
     74e:	53 e4       	ldi	r21, 0x43	; 67
     750:	0e 94 93 09 	call	0x1326	; 0x1326 <__gtsf2>
     754:	18 16       	cp	r1, r24
     756:	0c f0       	brlt	.+2      	; 0x75a <step+0x25a>
     758:	7b c0       	rjmp	.+246    	; 0x850 <step+0x350>
	{
		_delay_ms(__us / 1000.0);
     75a:	6d 89       	ldd	r22, Y+21	; 0x15
     75c:	7e 89       	ldd	r23, Y+22	; 0x16
     75e:	8f 89       	ldd	r24, Y+23	; 0x17
     760:	98 8d       	ldd	r25, Y+24	; 0x18
     762:	20 e0       	ldi	r18, 0x00	; 0
     764:	30 e0       	ldi	r19, 0x00	; 0
     766:	4a e7       	ldi	r20, 0x7A	; 122
     768:	54 e4       	ldi	r21, 0x44	; 68
     76a:	0e 94 e7 08 	call	0x11ce	; 0x11ce <__divsf3>
     76e:	dc 01       	movw	r26, r24
     770:	cb 01       	movw	r24, r22
     772:	8c 87       	std	Y+12, r24	; 0x0c
     774:	9d 87       	std	Y+13, r25	; 0x0d
     776:	ae 87       	std	Y+14, r26	; 0x0e
     778:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     77a:	6c 85       	ldd	r22, Y+12	; 0x0c
     77c:	7d 85       	ldd	r23, Y+13	; 0x0d
     77e:	8e 85       	ldd	r24, Y+14	; 0x0e
     780:	9f 85       	ldd	r25, Y+15	; 0x0f
     782:	20 e0       	ldi	r18, 0x00	; 0
     784:	30 e0       	ldi	r19, 0x00	; 0
     786:	4a e7       	ldi	r20, 0x7A	; 122
     788:	55 e4       	ldi	r21, 0x45	; 69
     78a:	0e 94 ed 07 	call	0xfda	; 0xfda <__mulsf3>
     78e:	dc 01       	movw	r26, r24
     790:	cb 01       	movw	r24, r22
     792:	88 87       	std	Y+8, r24	; 0x08
     794:	99 87       	std	Y+9, r25	; 0x09
     796:	aa 87       	std	Y+10, r26	; 0x0a
     798:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
     79a:	68 85       	ldd	r22, Y+8	; 0x08
     79c:	79 85       	ldd	r23, Y+9	; 0x09
     79e:	8a 85       	ldd	r24, Y+10	; 0x0a
     7a0:	9b 85       	ldd	r25, Y+11	; 0x0b
     7a2:	20 e0       	ldi	r18, 0x00	; 0
     7a4:	30 e0       	ldi	r19, 0x00	; 0
     7a6:	40 e8       	ldi	r20, 0x80	; 128
     7a8:	5f e3       	ldi	r21, 0x3F	; 63
     7aa:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__ltsf2>
     7ae:	88 23       	and	r24, r24
     7b0:	2c f4       	brge	.+10     	; 0x7bc <step+0x2bc>
		__ticks = 1;
     7b2:	81 e0       	ldi	r24, 0x01	; 1
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	9f 83       	std	Y+7, r25	; 0x07
     7b8:	8e 83       	std	Y+6, r24	; 0x06
     7ba:	3f c0       	rjmp	.+126    	; 0x83a <step+0x33a>
	else if (__tmp > 65535)
     7bc:	68 85       	ldd	r22, Y+8	; 0x08
     7be:	79 85       	ldd	r23, Y+9	; 0x09
     7c0:	8a 85       	ldd	r24, Y+10	; 0x0a
     7c2:	9b 85       	ldd	r25, Y+11	; 0x0b
     7c4:	20 e0       	ldi	r18, 0x00	; 0
     7c6:	3f ef       	ldi	r19, 0xFF	; 255
     7c8:	4f e7       	ldi	r20, 0x7F	; 127
     7ca:	57 e4       	ldi	r21, 0x47	; 71
     7cc:	0e 94 93 09 	call	0x1326	; 0x1326 <__gtsf2>
     7d0:	18 16       	cp	r1, r24
     7d2:	4c f5       	brge	.+82     	; 0x826 <step+0x326>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     7d4:	6c 85       	ldd	r22, Y+12	; 0x0c
     7d6:	7d 85       	ldd	r23, Y+13	; 0x0d
     7d8:	8e 85       	ldd	r24, Y+14	; 0x0e
     7da:	9f 85       	ldd	r25, Y+15	; 0x0f
     7dc:	20 e0       	ldi	r18, 0x00	; 0
     7de:	30 e0       	ldi	r19, 0x00	; 0
     7e0:	40 e2       	ldi	r20, 0x20	; 32
     7e2:	51 e4       	ldi	r21, 0x41	; 65
     7e4:	0e 94 ed 07 	call	0xfda	; 0xfda <__mulsf3>
     7e8:	dc 01       	movw	r26, r24
     7ea:	cb 01       	movw	r24, r22
     7ec:	bc 01       	movw	r22, r24
     7ee:	cd 01       	movw	r24, r26
     7f0:	0e 94 17 06 	call	0xc2e	; 0xc2e <__fixunssfsi>
     7f4:	dc 01       	movw	r26, r24
     7f6:	cb 01       	movw	r24, r22
     7f8:	9f 83       	std	Y+7, r25	; 0x07
     7fa:	8e 83       	std	Y+6, r24	; 0x06
     7fc:	0f c0       	rjmp	.+30     	; 0x81c <step+0x31c>
     7fe:	80 e9       	ldi	r24, 0x90	; 144
     800:	91 e0       	ldi	r25, 0x01	; 1
     802:	9d 83       	std	Y+5, r25	; 0x05
     804:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     806:	8c 81       	ldd	r24, Y+4	; 0x04
     808:	9d 81       	ldd	r25, Y+5	; 0x05
     80a:	01 97       	sbiw	r24, 0x01	; 1
     80c:	f1 f7       	brne	.-4      	; 0x80a <step+0x30a>
     80e:	9d 83       	std	Y+5, r25	; 0x05
     810:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     812:	8e 81       	ldd	r24, Y+6	; 0x06
     814:	9f 81       	ldd	r25, Y+7	; 0x07
     816:	01 97       	sbiw	r24, 0x01	; 1
     818:	9f 83       	std	Y+7, r25	; 0x07
     81a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     81c:	8e 81       	ldd	r24, Y+6	; 0x06
     81e:	9f 81       	ldd	r25, Y+7	; 0x07
     820:	00 97       	sbiw	r24, 0x00	; 0
     822:	69 f7       	brne	.-38     	; 0x7fe <step+0x2fe>
     824:	24 c0       	rjmp	.+72     	; 0x86e <step+0x36e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     826:	68 85       	ldd	r22, Y+8	; 0x08
     828:	79 85       	ldd	r23, Y+9	; 0x09
     82a:	8a 85       	ldd	r24, Y+10	; 0x0a
     82c:	9b 85       	ldd	r25, Y+11	; 0x0b
     82e:	0e 94 17 06 	call	0xc2e	; 0xc2e <__fixunssfsi>
     832:	dc 01       	movw	r26, r24
     834:	cb 01       	movw	r24, r22
     836:	9f 83       	std	Y+7, r25	; 0x07
     838:	8e 83       	std	Y+6, r24	; 0x06
     83a:	8e 81       	ldd	r24, Y+6	; 0x06
     83c:	9f 81       	ldd	r25, Y+7	; 0x07
     83e:	9b 83       	std	Y+3, r25	; 0x03
     840:	8a 83       	std	Y+2, r24	; 0x02
     842:	8a 81       	ldd	r24, Y+2	; 0x02
     844:	9b 81       	ldd	r25, Y+3	; 0x03
     846:	01 97       	sbiw	r24, 0x01	; 1
     848:	f1 f7       	brne	.-4      	; 0x846 <step+0x346>
     84a:	9b 83       	std	Y+3, r25	; 0x03
     84c:	8a 83       	std	Y+2, r24	; 0x02
     84e:	0f c0       	rjmp	.+30     	; 0x86e <step+0x36e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     850:	69 89       	ldd	r22, Y+17	; 0x11
     852:	7a 89       	ldd	r23, Y+18	; 0x12
     854:	8b 89       	ldd	r24, Y+19	; 0x13
     856:	9c 89       	ldd	r25, Y+20	; 0x14
     858:	0e 94 17 06 	call	0xc2e	; 0xc2e <__fixunssfsi>
     85c:	dc 01       	movw	r26, r24
     85e:	cb 01       	movw	r24, r22
     860:	88 8b       	std	Y+16, r24	; 0x10
     862:	88 89       	ldd	r24, Y+16	; 0x10
     864:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     866:	89 81       	ldd	r24, Y+1	; 0x01
     868:	8a 95       	dec	r24
     86a:	f1 f7       	brne	.-4      	; 0x868 <step+0x368>
     86c:	89 83       	std	Y+1, r24	; 0x01
            _delay_us(2);
}
     86e:	ea 96       	adiw	r28, 0x3a	; 58
     870:	0f b6       	in	r0, 0x3f	; 63
     872:	f8 94       	cli
     874:	de bf       	out	0x3e, r29	; 62
     876:	0f be       	out	0x3f, r0	; 63
     878:	cd bf       	out	0x3d, r28	; 61
     87a:	cf 91       	pop	r28
     87c:	df 91       	pop	r29
     87e:	1f 91       	pop	r17
     880:	0f 91       	pop	r16
     882:	08 95       	ret

00000884 <count_steps>:

void static count_steps(volatile struct stepper *stepperino)
{
     884:	df 93       	push	r29
     886:	cf 93       	push	r28
     888:	00 d0       	rcall	.+0      	; 0x88a <count_steps+0x6>
     88a:	0f 92       	push	r0
     88c:	cd b7       	in	r28, 0x3d	; 61
     88e:	de b7       	in	r29, 0x3e	; 62
     890:	9a 83       	std	Y+2, r25	; 0x02
     892:	89 83       	std	Y+1, r24	; 0x01
    switch(stepperino->direction)
     894:	e9 81       	ldd	r30, Y+1	; 0x01
     896:	fa 81       	ldd	r31, Y+2	; 0x02
     898:	85 81       	ldd	r24, Z+5	; 0x05
     89a:	28 2f       	mov	r18, r24
     89c:	30 e0       	ldi	r19, 0x00	; 0
     89e:	3c 83       	std	Y+4, r19	; 0x04
     8a0:	2b 83       	std	Y+3, r18	; 0x03
     8a2:	8b 81       	ldd	r24, Y+3	; 0x03
     8a4:	9c 81       	ldd	r25, Y+4	; 0x04
     8a6:	81 30       	cpi	r24, 0x01	; 1
     8a8:	91 05       	cpc	r25, r1
     8aa:	31 f0       	breq	.+12     	; 0x8b8 <count_steps+0x34>
     8ac:	2b 81       	ldd	r18, Y+3	; 0x03
     8ae:	3c 81       	ldd	r19, Y+4	; 0x04
     8b0:	22 30       	cpi	r18, 0x02	; 2
     8b2:	31 05       	cpc	r19, r1
     8b4:	59 f0       	breq	.+22     	; 0x8cc <count_steps+0x48>
     8b6:	13 c0       	rjmp	.+38     	; 0x8de <count_steps+0x5a>
        {
        case forward:
        stepperino->steps++;
     8b8:	e9 81       	ldd	r30, Y+1	; 0x01
     8ba:	fa 81       	ldd	r31, Y+2	; 0x02
     8bc:	80 85       	ldd	r24, Z+8	; 0x08
     8be:	91 85       	ldd	r25, Z+9	; 0x09
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	e9 81       	ldd	r30, Y+1	; 0x01
     8c4:	fa 81       	ldd	r31, Y+2	; 0x02
     8c6:	91 87       	std	Z+9, r25	; 0x09
     8c8:	80 87       	std	Z+8, r24	; 0x08
     8ca:	09 c0       	rjmp	.+18     	; 0x8de <count_steps+0x5a>
        break;
        case backward:
        stepperino->steps--;
     8cc:	e9 81       	ldd	r30, Y+1	; 0x01
     8ce:	fa 81       	ldd	r31, Y+2	; 0x02
     8d0:	80 85       	ldd	r24, Z+8	; 0x08
     8d2:	91 85       	ldd	r25, Z+9	; 0x09
     8d4:	01 97       	sbiw	r24, 0x01	; 1
     8d6:	e9 81       	ldd	r30, Y+1	; 0x01
     8d8:	fa 81       	ldd	r31, Y+2	; 0x02
     8da:	91 87       	std	Z+9, r25	; 0x09
     8dc:	80 87       	std	Z+8, r24	; 0x08
        break;
        default:
        break;
        }
}
     8de:	0f 90       	pop	r0
     8e0:	0f 90       	pop	r0
     8e2:	0f 90       	pop	r0
     8e4:	0f 90       	pop	r0
     8e6:	cf 91       	pop	r28
     8e8:	df 91       	pop	r29
     8ea:	08 95       	ret

000008ec <Handle_steps>:

void Handle_steps(volatile struct stepper *stepperino)
{
     8ec:	0f 93       	push	r16
     8ee:	1f 93       	push	r17
     8f0:	df 93       	push	r29
     8f2:	cf 93       	push	r28
     8f4:	0f 92       	push	r0
     8f6:	0f 92       	push	r0
     8f8:	cd b7       	in	r28, 0x3d	; 61
     8fa:	de b7       	in	r29, 0x3e	; 62
     8fc:	9a 83       	std	Y+2, r25	; 0x02
     8fe:	89 83       	std	Y+1, r24	; 0x01
    if(stepperino->time_profile == 0)
     900:	e9 81       	ldd	r30, Y+1	; 0x01
     902:	fa 81       	ldd	r31, Y+2	; 0x02
     904:	84 81       	ldd	r24, Z+4	; 0x04
     906:	88 23       	and	r24, r24
     908:	09 f4       	brne	.+2      	; 0x90c <Handle_steps+0x20>
     90a:	3e c0       	rjmp	.+124    	; 0x988 <Handle_steps+0x9c>
    {

    }
    else if(ms >= (stepperino->last_step + stepperino->time_profile))
     90c:	e9 81       	ldd	r30, Y+1	; 0x01
     90e:	fa 81       	ldd	r31, Y+2	; 0x02
     910:	20 81       	ld	r18, Z
     912:	31 81       	ldd	r19, Z+1	; 0x01
     914:	42 81       	ldd	r20, Z+2	; 0x02
     916:	53 81       	ldd	r21, Z+3	; 0x03
     918:	e9 81       	ldd	r30, Y+1	; 0x01
     91a:	fa 81       	ldd	r31, Y+2	; 0x02
     91c:	84 81       	ldd	r24, Z+4	; 0x04
     91e:	88 2f       	mov	r24, r24
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	a0 e0       	ldi	r26, 0x00	; 0
     924:	b0 e0       	ldi	r27, 0x00	; 0
     926:	28 0f       	add	r18, r24
     928:	39 1f       	adc	r19, r25
     92a:	4a 1f       	adc	r20, r26
     92c:	5b 1f       	adc	r21, r27
     92e:	80 91 1c 03 	lds	r24, 0x031C
     932:	90 91 1d 03 	lds	r25, 0x031D
     936:	a0 91 1e 03 	lds	r26, 0x031E
     93a:	b0 91 1f 03 	lds	r27, 0x031F
     93e:	82 17       	cp	r24, r18
     940:	93 07       	cpc	r25, r19
     942:	a4 07       	cpc	r26, r20
     944:	b5 07       	cpc	r27, r21
     946:	04 f1       	brlt	.+64     	; 0x988 <Handle_steps+0x9c>
    {
        step(*stepperino);
     948:	e9 81       	ldd	r30, Y+1	; 0x01
     94a:	fa 81       	ldd	r31, Y+2	; 0x02
     94c:	00 81       	ld	r16, Z
     94e:	11 81       	ldd	r17, Z+1	; 0x01
     950:	22 81       	ldd	r18, Z+2	; 0x02
     952:	33 81       	ldd	r19, Z+3	; 0x03
     954:	44 81       	ldd	r20, Z+4	; 0x04
     956:	55 81       	ldd	r21, Z+5	; 0x05
     958:	66 81       	ldd	r22, Z+6	; 0x06
     95a:	77 81       	ldd	r23, Z+7	; 0x07
     95c:	80 85       	ldd	r24, Z+8	; 0x08
     95e:	91 85       	ldd	r25, Z+9	; 0x09
     960:	0e 94 80 02 	call	0x500	; 0x500 <step>
        stepperino->last_step = ms;
     964:	80 91 1c 03 	lds	r24, 0x031C
     968:	90 91 1d 03 	lds	r25, 0x031D
     96c:	a0 91 1e 03 	lds	r26, 0x031E
     970:	b0 91 1f 03 	lds	r27, 0x031F
     974:	e9 81       	ldd	r30, Y+1	; 0x01
     976:	fa 81       	ldd	r31, Y+2	; 0x02
     978:	80 83       	st	Z, r24
     97a:	91 83       	std	Z+1, r25	; 0x01
     97c:	a2 83       	std	Z+2, r26	; 0x02
     97e:	b3 83       	std	Z+3, r27	; 0x03
        count_steps(stepperino);
     980:	89 81       	ldd	r24, Y+1	; 0x01
     982:	9a 81       	ldd	r25, Y+2	; 0x02
     984:	0e 94 42 04 	call	0x884	; 0x884 <count_steps>

    }
}
     988:	0f 90       	pop	r0
     98a:	0f 90       	pop	r0
     98c:	cf 91       	pop	r28
     98e:	df 91       	pop	r29
     990:	1f 91       	pop	r17
     992:	0f 91       	pop	r16
     994:	08 95       	ret

00000996 <turn>:

void turn(int16_t degrees, volatile struct stepper *stepperino1, volatile struct stepper *stepperino2)
{
     996:	df 93       	push	r29
     998:	cf 93       	push	r28
     99a:	cd b7       	in	r28, 0x3d	; 61
     99c:	de b7       	in	r29, 0x3e	; 62
     99e:	e0 97       	sbiw	r28, 0x30	; 48
     9a0:	0f b6       	in	r0, 0x3f	; 63
     9a2:	f8 94       	cli
     9a4:	de bf       	out	0x3e, r29	; 62
     9a6:	0f be       	out	0x3f, r0	; 63
     9a8:	cd bf       	out	0x3d, r28	; 61
     9aa:	98 8f       	std	Y+24, r25	; 0x18
     9ac:	8f 8b       	std	Y+23, r24	; 0x17
     9ae:	7a 8f       	std	Y+26, r23	; 0x1a
     9b0:	69 8f       	std	Y+25, r22	; 0x19
     9b2:	5c 8f       	std	Y+28, r21	; 0x1c
     9b4:	4b 8f       	std	Y+27, r20	; 0x1b
    int16_t turn_steps = (float)(0.55)*degrees * magic;
     9b6:	8f 89       	ldd	r24, Y+23	; 0x17
     9b8:	98 8d       	ldd	r25, Y+24	; 0x18
     9ba:	aa 27       	eor	r26, r26
     9bc:	97 fd       	sbrc	r25, 7
     9be:	a0 95       	com	r26
     9c0:	ba 2f       	mov	r27, r26
     9c2:	bc 01       	movw	r22, r24
     9c4:	cd 01       	movw	r24, r26
     9c6:	0e 94 23 0a 	call	0x1446	; 0x1446 <__floatsisf>
     9ca:	dc 01       	movw	r26, r24
     9cc:	cb 01       	movw	r24, r22
     9ce:	bc 01       	movw	r22, r24
     9d0:	cd 01       	movw	r24, r26
     9d2:	2d ec       	ldi	r18, 0xCD	; 205
     9d4:	3c ec       	ldi	r19, 0xCC	; 204
     9d6:	4c e0       	ldi	r20, 0x0C	; 12
     9d8:	5f e3       	ldi	r21, 0x3F	; 63
     9da:	0e 94 ed 07 	call	0xfda	; 0xfda <__mulsf3>
     9de:	dc 01       	movw	r26, r24
     9e0:	cb 01       	movw	r24, r22
     9e2:	bc 01       	movw	r22, r24
     9e4:	cd 01       	movw	r24, r26
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e8       	ldi	r20, 0x80	; 128
     9ec:	50 e4       	ldi	r21, 0x40	; 64
     9ee:	0e 94 ed 07 	call	0xfda	; 0xfda <__mulsf3>
     9f2:	dc 01       	movw	r26, r24
     9f4:	cb 01       	movw	r24, r22
     9f6:	bc 01       	movw	r22, r24
     9f8:	cd 01       	movw	r24, r26
     9fa:	0e 94 81 0a 	call	0x1502	; 0x1502 <__fixsfsi>
     9fe:	dc 01       	movw	r26, r24
     a00:	cb 01       	movw	r24, r22
     a02:	9a 83       	std	Y+2, r25	; 0x02
     a04:	89 83       	std	Y+1, r24	; 0x01
    struct stepper copy1 = *stepperino1;
     a06:	89 8d       	ldd	r24, Y+25	; 0x19
     a08:	9a 8d       	ldd	r25, Y+26	; 0x1a
     a0a:	9e 01       	movw	r18, r28
     a0c:	2d 5f       	subi	r18, 0xFD	; 253
     a0e:	3f 4f       	sbci	r19, 0xFF	; 255
     a10:	3e 8f       	std	Y+30, r19	; 0x1e
     a12:	2d 8f       	std	Y+29, r18	; 0x1d
     a14:	98 a3       	std	Y+32, r25	; 0x20
     a16:	8f 8f       	std	Y+31, r24	; 0x1f
     a18:	3a e0       	ldi	r19, 0x0A	; 10
     a1a:	39 a3       	std	Y+33, r19	; 0x21
     a1c:	ef 8d       	ldd	r30, Y+31	; 0x1f
     a1e:	f8 a1       	ldd	r31, Y+32	; 0x20
     a20:	00 80       	ld	r0, Z
     a22:	2f 8d       	ldd	r18, Y+31	; 0x1f
     a24:	38 a1       	ldd	r19, Y+32	; 0x20
     a26:	2f 5f       	subi	r18, 0xFF	; 255
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
     a2a:	38 a3       	std	Y+32, r19	; 0x20
     a2c:	2f 8f       	std	Y+31, r18	; 0x1f
     a2e:	ed 8d       	ldd	r30, Y+29	; 0x1d
     a30:	fe 8d       	ldd	r31, Y+30	; 0x1e
     a32:	00 82       	st	Z, r0
     a34:	2d 8d       	ldd	r18, Y+29	; 0x1d
     a36:	3e 8d       	ldd	r19, Y+30	; 0x1e
     a38:	2f 5f       	subi	r18, 0xFF	; 255
     a3a:	3f 4f       	sbci	r19, 0xFF	; 255
     a3c:	3e 8f       	std	Y+30, r19	; 0x1e
     a3e:	2d 8f       	std	Y+29, r18	; 0x1d
     a40:	39 a1       	ldd	r19, Y+33	; 0x21
     a42:	31 50       	subi	r19, 0x01	; 1
     a44:	39 a3       	std	Y+33, r19	; 0x21
     a46:	89 a1       	ldd	r24, Y+33	; 0x21
     a48:	88 23       	and	r24, r24
     a4a:	41 f7       	brne	.-48     	; 0xa1c <turn+0x86>
    struct stepper copy2 = *stepperino2;
     a4c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     a4e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     a50:	fe 01       	movw	r30, r28
     a52:	3d 96       	adiw	r30, 0x0d	; 13
     a54:	fb a3       	std	Y+35, r31	; 0x23
     a56:	ea a3       	std	Y+34, r30	; 0x22
     a58:	9d a3       	std	Y+37, r25	; 0x25
     a5a:	8c a3       	std	Y+36, r24	; 0x24
     a5c:	fa e0       	ldi	r31, 0x0A	; 10
     a5e:	fe a3       	std	Y+38, r31	; 0x26
     a60:	ec a1       	ldd	r30, Y+36	; 0x24
     a62:	fd a1       	ldd	r31, Y+37	; 0x25
     a64:	00 80       	ld	r0, Z
     a66:	2c a1       	ldd	r18, Y+36	; 0x24
     a68:	3d a1       	ldd	r19, Y+37	; 0x25
     a6a:	2f 5f       	subi	r18, 0xFF	; 255
     a6c:	3f 4f       	sbci	r19, 0xFF	; 255
     a6e:	3d a3       	std	Y+37, r19	; 0x25
     a70:	2c a3       	std	Y+36, r18	; 0x24
     a72:	ea a1       	ldd	r30, Y+34	; 0x22
     a74:	fb a1       	ldd	r31, Y+35	; 0x23
     a76:	00 82       	st	Z, r0
     a78:	2a a1       	ldd	r18, Y+34	; 0x22
     a7a:	3b a1       	ldd	r19, Y+35	; 0x23
     a7c:	2f 5f       	subi	r18, 0xFF	; 255
     a7e:	3f 4f       	sbci	r19, 0xFF	; 255
     a80:	3b a3       	std	Y+35, r19	; 0x23
     a82:	2a a3       	std	Y+34, r18	; 0x22
     a84:	3e a1       	ldd	r19, Y+38	; 0x26
     a86:	31 50       	subi	r19, 0x01	; 1
     a88:	3e a3       	std	Y+38, r19	; 0x26
     a8a:	8e a1       	ldd	r24, Y+38	; 0x26
     a8c:	88 23       	and	r24, r24
     a8e:	41 f7       	brne	.-48     	; 0xa60 <turn+0xca>

        stepperino1->time_profile = 10;
     a90:	e9 8d       	ldd	r30, Y+25	; 0x19
     a92:	fa 8d       	ldd	r31, Y+26	; 0x1a
     a94:	8a e0       	ldi	r24, 0x0A	; 10
     a96:	84 83       	std	Z+4, r24	; 0x04
        stepperino1->steps = 0;
     a98:	e9 8d       	ldd	r30, Y+25	; 0x19
     a9a:	fa 8d       	ldd	r31, Y+26	; 0x1a
     a9c:	11 86       	std	Z+9, r1	; 0x09
     a9e:	10 86       	std	Z+8, r1	; 0x08
        stepperino2->time_profile = 10;
     aa0:	eb 8d       	ldd	r30, Y+27	; 0x1b
     aa2:	fc 8d       	ldd	r31, Y+28	; 0x1c
     aa4:	8a e0       	ldi	r24, 0x0A	; 10
     aa6:	84 83       	std	Z+4, r24	; 0x04
        stepperino2->steps = 0;
     aa8:	eb 8d       	ldd	r30, Y+27	; 0x1b
     aaa:	fc 8d       	ldd	r31, Y+28	; 0x1c
     aac:	11 86       	std	Z+9, r1	; 0x09
     aae:	10 86       	std	Z+8, r1	; 0x08

    if(turn_steps > 0)
     ab0:	89 81       	ldd	r24, Y+1	; 0x01
     ab2:	9a 81       	ldd	r25, Y+2	; 0x02
     ab4:	18 16       	cp	r1, r24
     ab6:	19 06       	cpc	r1, r25
     ab8:	3c f5       	brge	.+78     	; 0xb08 <turn+0x172>
    {
        turn_steps++;
     aba:	89 81       	ldd	r24, Y+1	; 0x01
     abc:	9a 81       	ldd	r25, Y+2	; 0x02
     abe:	01 96       	adiw	r24, 0x01	; 1
     ac0:	9a 83       	std	Y+2, r25	; 0x02
     ac2:	89 83       	std	Y+1, r24	; 0x01
        stepperino1->direction = forward;
     ac4:	e9 8d       	ldd	r30, Y+25	; 0x19
     ac6:	fa 8d       	ldd	r31, Y+26	; 0x1a
     ac8:	81 e0       	ldi	r24, 0x01	; 1
     aca:	85 83       	std	Z+5, r24	; 0x05
        stepperino2->direction = forward;
     acc:	eb 8d       	ldd	r30, Y+27	; 0x1b
     ace:	fc 8d       	ldd	r31, Y+28	; 0x1c
     ad0:	81 e0       	ldi	r24, 0x01	; 1
     ad2:	85 83       	std	Z+5, r24	; 0x05
        set_dir(stepperino1);
     ad4:	89 8d       	ldd	r24, Y+25	; 0x19
     ad6:	9a 8d       	ldd	r25, Y+26	; 0x1a
     ad8:	0e 94 33 02 	call	0x466	; 0x466 <set_dir>
        set_dir(stepperino2);
     adc:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ade:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ae0:	0e 94 33 02 	call	0x466	; 0x466 <set_dir>
     ae4:	08 c0       	rjmp	.+16     	; 0xaf6 <turn+0x160>

        while(stepperino1->steps < (int)turn_steps)
        {
        Handle_steps(stepperino1);
     ae6:	89 8d       	ldd	r24, Y+25	; 0x19
     ae8:	9a 8d       	ldd	r25, Y+26	; 0x1a
     aea:	0e 94 76 04 	call	0x8ec	; 0x8ec <Handle_steps>
        Handle_steps(stepperino2);
     aee:	8b 8d       	ldd	r24, Y+27	; 0x1b
     af0:	9c 8d       	ldd	r25, Y+28	; 0x1c
     af2:	0e 94 76 04 	call	0x8ec	; 0x8ec <Handle_steps>
        stepperino1->direction = forward;
        stepperino2->direction = forward;
        set_dir(stepperino1);
        set_dir(stepperino2);

        while(stepperino1->steps < (int)turn_steps)
     af6:	e9 8d       	ldd	r30, Y+25	; 0x19
     af8:	fa 8d       	ldd	r31, Y+26	; 0x1a
     afa:	20 85       	ldd	r18, Z+8	; 0x08
     afc:	31 85       	ldd	r19, Z+9	; 0x09
     afe:	89 81       	ldd	r24, Y+1	; 0x01
     b00:	9a 81       	ldd	r25, Y+2	; 0x02
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	7c f3       	brlt	.-34     	; 0xae6 <turn+0x150>
        Handle_steps(stepperino1);
        Handle_steps(stepperino2);
        }
    }

    if(turn_steps < 0)
     b08:	89 81       	ldd	r24, Y+1	; 0x01
     b0a:	9a 81       	ldd	r25, Y+2	; 0x02
     b0c:	99 23       	and	r25, r25
     b0e:	3c f5       	brge	.+78     	; 0xb5e <turn+0x1c8>
    {
        turn_steps--;
     b10:	89 81       	ldd	r24, Y+1	; 0x01
     b12:	9a 81       	ldd	r25, Y+2	; 0x02
     b14:	01 97       	sbiw	r24, 0x01	; 1
     b16:	9a 83       	std	Y+2, r25	; 0x02
     b18:	89 83       	std	Y+1, r24	; 0x01
        stepperino1->direction = backward;
     b1a:	e9 8d       	ldd	r30, Y+25	; 0x19
     b1c:	fa 8d       	ldd	r31, Y+26	; 0x1a
     b1e:	82 e0       	ldi	r24, 0x02	; 2
     b20:	85 83       	std	Z+5, r24	; 0x05
        stepperino2->direction = backward;
     b22:	eb 8d       	ldd	r30, Y+27	; 0x1b
     b24:	fc 8d       	ldd	r31, Y+28	; 0x1c
     b26:	82 e0       	ldi	r24, 0x02	; 2
     b28:	85 83       	std	Z+5, r24	; 0x05
        set_dir(stepperino1);
     b2a:	89 8d       	ldd	r24, Y+25	; 0x19
     b2c:	9a 8d       	ldd	r25, Y+26	; 0x1a
     b2e:	0e 94 33 02 	call	0x466	; 0x466 <set_dir>
        set_dir(stepperino2);
     b32:	8b 8d       	ldd	r24, Y+27	; 0x1b
     b34:	9c 8d       	ldd	r25, Y+28	; 0x1c
     b36:	0e 94 33 02 	call	0x466	; 0x466 <set_dir>
     b3a:	08 c0       	rjmp	.+16     	; 0xb4c <turn+0x1b6>

        while(stepperino2->steps > turn_steps)
        {
        //transmit_byte(turn_steps);
        Handle_steps(stepperino1);
     b3c:	89 8d       	ldd	r24, Y+25	; 0x19
     b3e:	9a 8d       	ldd	r25, Y+26	; 0x1a
     b40:	0e 94 76 04 	call	0x8ec	; 0x8ec <Handle_steps>
        Handle_steps(stepperino2);
     b44:	8b 8d       	ldd	r24, Y+27	; 0x1b
     b46:	9c 8d       	ldd	r25, Y+28	; 0x1c
     b48:	0e 94 76 04 	call	0x8ec	; 0x8ec <Handle_steps>
        stepperino1->direction = backward;
        stepperino2->direction = backward;
        set_dir(stepperino1);
        set_dir(stepperino2);

        while(stepperino2->steps > turn_steps)
     b4c:	eb 8d       	ldd	r30, Y+27	; 0x1b
     b4e:	fc 8d       	ldd	r31, Y+28	; 0x1c
     b50:	20 85       	ldd	r18, Z+8	; 0x08
     b52:	31 85       	ldd	r19, Z+9	; 0x09
     b54:	89 81       	ldd	r24, Y+1	; 0x01
     b56:	9a 81       	ldd	r25, Y+2	; 0x02
     b58:	82 17       	cp	r24, r18
     b5a:	93 07       	cpc	r25, r19
     b5c:	7c f3       	brlt	.-34     	; 0xb3c <turn+0x1a6>
        //transmit_byte(turn_steps);
        Handle_steps(stepperino1);
        Handle_steps(stepperino2);
        }
    }
        *stepperino1 = copy1;
     b5e:	89 8d       	ldd	r24, Y+25	; 0x19
     b60:	9a 8d       	ldd	r25, Y+26	; 0x1a
     b62:	98 a7       	std	Y+40, r25	; 0x28
     b64:	8f a3       	std	Y+39, r24	; 0x27
     b66:	fe 01       	movw	r30, r28
     b68:	33 96       	adiw	r30, 0x03	; 3
     b6a:	fa a7       	std	Y+42, r31	; 0x2a
     b6c:	e9 a7       	std	Y+41, r30	; 0x29
     b6e:	fa e0       	ldi	r31, 0x0A	; 10
     b70:	fb a7       	std	Y+43, r31	; 0x2b
     b72:	e9 a5       	ldd	r30, Y+41	; 0x29
     b74:	fa a5       	ldd	r31, Y+42	; 0x2a
     b76:	00 80       	ld	r0, Z
     b78:	29 a5       	ldd	r18, Y+41	; 0x29
     b7a:	3a a5       	ldd	r19, Y+42	; 0x2a
     b7c:	2f 5f       	subi	r18, 0xFF	; 255
     b7e:	3f 4f       	sbci	r19, 0xFF	; 255
     b80:	3a a7       	std	Y+42, r19	; 0x2a
     b82:	29 a7       	std	Y+41, r18	; 0x29
     b84:	ef a1       	ldd	r30, Y+39	; 0x27
     b86:	f8 a5       	ldd	r31, Y+40	; 0x28
     b88:	00 82       	st	Z, r0
     b8a:	2f a1       	ldd	r18, Y+39	; 0x27
     b8c:	38 a5       	ldd	r19, Y+40	; 0x28
     b8e:	2f 5f       	subi	r18, 0xFF	; 255
     b90:	3f 4f       	sbci	r19, 0xFF	; 255
     b92:	38 a7       	std	Y+40, r19	; 0x28
     b94:	2f a3       	std	Y+39, r18	; 0x27
     b96:	3b a5       	ldd	r19, Y+43	; 0x2b
     b98:	31 50       	subi	r19, 0x01	; 1
     b9a:	3b a7       	std	Y+43, r19	; 0x2b
     b9c:	8b a5       	ldd	r24, Y+43	; 0x2b
     b9e:	88 23       	and	r24, r24
     ba0:	41 f7       	brne	.-48     	; 0xb72 <turn+0x1dc>
        *stepperino2 = copy2;
     ba2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ba4:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ba6:	9d a7       	std	Y+45, r25	; 0x2d
     ba8:	8c a7       	std	Y+44, r24	; 0x2c
     baa:	fe 01       	movw	r30, r28
     bac:	3d 96       	adiw	r30, 0x0d	; 13
     bae:	ff a7       	std	Y+47, r31	; 0x2f
     bb0:	ee a7       	std	Y+46, r30	; 0x2e
     bb2:	fa e0       	ldi	r31, 0x0A	; 10
     bb4:	f8 ab       	std	Y+48, r31	; 0x30
     bb6:	ee a5       	ldd	r30, Y+46	; 0x2e
     bb8:	ff a5       	ldd	r31, Y+47	; 0x2f
     bba:	00 80       	ld	r0, Z
     bbc:	2e a5       	ldd	r18, Y+46	; 0x2e
     bbe:	3f a5       	ldd	r19, Y+47	; 0x2f
     bc0:	2f 5f       	subi	r18, 0xFF	; 255
     bc2:	3f 4f       	sbci	r19, 0xFF	; 255
     bc4:	3f a7       	std	Y+47, r19	; 0x2f
     bc6:	2e a7       	std	Y+46, r18	; 0x2e
     bc8:	ec a5       	ldd	r30, Y+44	; 0x2c
     bca:	fd a5       	ldd	r31, Y+45	; 0x2d
     bcc:	00 82       	st	Z, r0
     bce:	2c a5       	ldd	r18, Y+44	; 0x2c
     bd0:	3d a5       	ldd	r19, Y+45	; 0x2d
     bd2:	2f 5f       	subi	r18, 0xFF	; 255
     bd4:	3f 4f       	sbci	r19, 0xFF	; 255
     bd6:	3d a7       	std	Y+45, r19	; 0x2d
     bd8:	2c a7       	std	Y+44, r18	; 0x2c
     bda:	38 a9       	ldd	r19, Y+48	; 0x30
     bdc:	31 50       	subi	r19, 0x01	; 1
     bde:	38 ab       	std	Y+48, r19	; 0x30
     be0:	88 a9       	ldd	r24, Y+48	; 0x30
     be2:	88 23       	and	r24, r24
     be4:	41 f7       	brne	.-48     	; 0xbb6 <turn+0x220>
}
     be6:	e0 96       	adiw	r28, 0x30	; 48
     be8:	0f b6       	in	r0, 0x3f	; 63
     bea:	f8 94       	cli
     bec:	de bf       	out	0x3e, r29	; 62
     bee:	0f be       	out	0x3f, r0	; 63
     bf0:	cd bf       	out	0x3d, r28	; 61
     bf2:	cf 91       	pop	r28
     bf4:	df 91       	pop	r29
     bf6:	08 95       	ret

00000bf8 <init_stepper_timer0>:

void init_stepper_timer0()
{
     bf8:	df 93       	push	r29
     bfa:	cf 93       	push	r28
     bfc:	cd b7       	in	r28, 0x3d	; 61
     bfe:	de b7       	in	r29, 0x3e	; 62
    TCCR0A |= (0<<WGM01) | (0<<WGM00);
     c00:	a4 e4       	ldi	r26, 0x44	; 68
     c02:	b0 e0       	ldi	r27, 0x00	; 0
     c04:	e4 e4       	ldi	r30, 0x44	; 68
     c06:	f0 e0       	ldi	r31, 0x00	; 0
     c08:	80 81       	ld	r24, Z
     c0a:	8c 93       	st	X, r24
    TCCR0B |= (0<<WGM02) | (1<<CS02) | (0<<CS01) | (0<<CS00);
     c0c:	a5 e4       	ldi	r26, 0x45	; 69
     c0e:	b0 e0       	ldi	r27, 0x00	; 0
     c10:	e5 e4       	ldi	r30, 0x45	; 69
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	84 60       	ori	r24, 0x04	; 4
     c18:	8c 93       	st	X, r24
    TIMSK0 |= (1<<TOIE0);
     c1a:	ae e6       	ldi	r26, 0x6E	; 110
     c1c:	b0 e0       	ldi	r27, 0x00	; 0
     c1e:	ee e6       	ldi	r30, 0x6E	; 110
     c20:	f0 e0       	ldi	r31, 0x00	; 0
     c22:	80 81       	ld	r24, Z
     c24:	81 60       	ori	r24, 0x01	; 1
     c26:	8c 93       	st	X, r24
}
     c28:	cf 91       	pop	r28
     c2a:	df 91       	pop	r29
     c2c:	08 95       	ret

00000c2e <__fixunssfsi>:
     c2e:	ef 92       	push	r14
     c30:	ff 92       	push	r15
     c32:	0f 93       	push	r16
     c34:	1f 93       	push	r17
     c36:	7b 01       	movw	r14, r22
     c38:	8c 01       	movw	r16, r24
     c3a:	20 e0       	ldi	r18, 0x00	; 0
     c3c:	30 e0       	ldi	r19, 0x00	; 0
     c3e:	40 e0       	ldi	r20, 0x00	; 0
     c40:	5f e4       	ldi	r21, 0x4F	; 79
     c42:	0e 94 c3 09 	call	0x1386	; 0x1386 <__gesf2>
     c46:	88 23       	and	r24, r24
     c48:	8c f0       	brlt	.+34     	; 0xc6c <__fixunssfsi+0x3e>
     c4a:	c8 01       	movw	r24, r16
     c4c:	b7 01       	movw	r22, r14
     c4e:	20 e0       	ldi	r18, 0x00	; 0
     c50:	30 e0       	ldi	r19, 0x00	; 0
     c52:	40 e0       	ldi	r20, 0x00	; 0
     c54:	5f e4       	ldi	r21, 0x4F	; 79
     c56:	0e 94 8f 07 	call	0xf1e	; 0xf1e <__subsf3>
     c5a:	0e 94 81 0a 	call	0x1502	; 0x1502 <__fixsfsi>
     c5e:	9b 01       	movw	r18, r22
     c60:	ac 01       	movw	r20, r24
     c62:	20 50       	subi	r18, 0x00	; 0
     c64:	30 40       	sbci	r19, 0x00	; 0
     c66:	40 40       	sbci	r20, 0x00	; 0
     c68:	50 48       	sbci	r21, 0x80	; 128
     c6a:	06 c0       	rjmp	.+12     	; 0xc78 <__fixunssfsi+0x4a>
     c6c:	c8 01       	movw	r24, r16
     c6e:	b7 01       	movw	r22, r14
     c70:	0e 94 81 0a 	call	0x1502	; 0x1502 <__fixsfsi>
     c74:	9b 01       	movw	r18, r22
     c76:	ac 01       	movw	r20, r24
     c78:	b9 01       	movw	r22, r18
     c7a:	ca 01       	movw	r24, r20
     c7c:	1f 91       	pop	r17
     c7e:	0f 91       	pop	r16
     c80:	ff 90       	pop	r15
     c82:	ef 90       	pop	r14
     c84:	08 95       	ret

00000c86 <_fpadd_parts>:
     c86:	a0 e0       	ldi	r26, 0x00	; 0
     c88:	b0 e0       	ldi	r27, 0x00	; 0
     c8a:	e9 e4       	ldi	r30, 0x49	; 73
     c8c:	f6 e0       	ldi	r31, 0x06	; 6
     c8e:	0c 94 ec 0c 	jmp	0x19d8	; 0x19d8 <__prologue_saves__>
     c92:	dc 01       	movw	r26, r24
     c94:	2b 01       	movw	r4, r22
     c96:	fa 01       	movw	r30, r20
     c98:	9c 91       	ld	r25, X
     c9a:	92 30       	cpi	r25, 0x02	; 2
     c9c:	08 f4       	brcc	.+2      	; 0xca0 <_fpadd_parts+0x1a>
     c9e:	39 c1       	rjmp	.+626    	; 0xf12 <_fpadd_parts+0x28c>
     ca0:	eb 01       	movw	r28, r22
     ca2:	88 81       	ld	r24, Y
     ca4:	82 30       	cpi	r24, 0x02	; 2
     ca6:	08 f4       	brcc	.+2      	; 0xcaa <_fpadd_parts+0x24>
     ca8:	33 c1       	rjmp	.+614    	; 0xf10 <_fpadd_parts+0x28a>
     caa:	94 30       	cpi	r25, 0x04	; 4
     cac:	69 f4       	brne	.+26     	; 0xcc8 <_fpadd_parts+0x42>
     cae:	84 30       	cpi	r24, 0x04	; 4
     cb0:	09 f0       	breq	.+2      	; 0xcb4 <_fpadd_parts+0x2e>
     cb2:	2f c1       	rjmp	.+606    	; 0xf12 <_fpadd_parts+0x28c>
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 91       	ld	r25, X
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	89 81       	ldd	r24, Y+1	; 0x01
     cbc:	98 17       	cp	r25, r24
     cbe:	09 f4       	brne	.+2      	; 0xcc2 <_fpadd_parts+0x3c>
     cc0:	28 c1       	rjmp	.+592    	; 0xf12 <_fpadd_parts+0x28c>
     cc2:	a0 e0       	ldi	r26, 0x00	; 0
     cc4:	b2 e0       	ldi	r27, 0x02	; 2
     cc6:	25 c1       	rjmp	.+586    	; 0xf12 <_fpadd_parts+0x28c>
     cc8:	84 30       	cpi	r24, 0x04	; 4
     cca:	09 f4       	brne	.+2      	; 0xcce <_fpadd_parts+0x48>
     ccc:	21 c1       	rjmp	.+578    	; 0xf10 <_fpadd_parts+0x28a>
     cce:	82 30       	cpi	r24, 0x02	; 2
     cd0:	a9 f4       	brne	.+42     	; 0xcfc <_fpadd_parts+0x76>
     cd2:	92 30       	cpi	r25, 0x02	; 2
     cd4:	09 f0       	breq	.+2      	; 0xcd8 <_fpadd_parts+0x52>
     cd6:	1d c1       	rjmp	.+570    	; 0xf12 <_fpadd_parts+0x28c>
     cd8:	9a 01       	movw	r18, r20
     cda:	ad 01       	movw	r20, r26
     cdc:	88 e0       	ldi	r24, 0x08	; 8
     cde:	ea 01       	movw	r28, r20
     ce0:	09 90       	ld	r0, Y+
     ce2:	ae 01       	movw	r20, r28
     ce4:	e9 01       	movw	r28, r18
     ce6:	09 92       	st	Y+, r0
     ce8:	9e 01       	movw	r18, r28
     cea:	81 50       	subi	r24, 0x01	; 1
     cec:	c1 f7       	brne	.-16     	; 0xcde <_fpadd_parts+0x58>
     cee:	e2 01       	movw	r28, r4
     cf0:	89 81       	ldd	r24, Y+1	; 0x01
     cf2:	11 96       	adiw	r26, 0x01	; 1
     cf4:	9c 91       	ld	r25, X
     cf6:	89 23       	and	r24, r25
     cf8:	81 83       	std	Z+1, r24	; 0x01
     cfa:	08 c1       	rjmp	.+528    	; 0xf0c <_fpadd_parts+0x286>
     cfc:	92 30       	cpi	r25, 0x02	; 2
     cfe:	09 f4       	brne	.+2      	; 0xd02 <_fpadd_parts+0x7c>
     d00:	07 c1       	rjmp	.+526    	; 0xf10 <_fpadd_parts+0x28a>
     d02:	12 96       	adiw	r26, 0x02	; 2
     d04:	2d 90       	ld	r2, X+
     d06:	3c 90       	ld	r3, X
     d08:	13 97       	sbiw	r26, 0x03	; 3
     d0a:	eb 01       	movw	r28, r22
     d0c:	8a 81       	ldd	r24, Y+2	; 0x02
     d0e:	9b 81       	ldd	r25, Y+3	; 0x03
     d10:	14 96       	adiw	r26, 0x04	; 4
     d12:	ad 90       	ld	r10, X+
     d14:	bd 90       	ld	r11, X+
     d16:	cd 90       	ld	r12, X+
     d18:	dc 90       	ld	r13, X
     d1a:	17 97       	sbiw	r26, 0x07	; 7
     d1c:	ec 80       	ldd	r14, Y+4	; 0x04
     d1e:	fd 80       	ldd	r15, Y+5	; 0x05
     d20:	0e 81       	ldd	r16, Y+6	; 0x06
     d22:	1f 81       	ldd	r17, Y+7	; 0x07
     d24:	91 01       	movw	r18, r2
     d26:	28 1b       	sub	r18, r24
     d28:	39 0b       	sbc	r19, r25
     d2a:	b9 01       	movw	r22, r18
     d2c:	37 ff       	sbrs	r19, 7
     d2e:	04 c0       	rjmp	.+8      	; 0xd38 <_fpadd_parts+0xb2>
     d30:	66 27       	eor	r22, r22
     d32:	77 27       	eor	r23, r23
     d34:	62 1b       	sub	r22, r18
     d36:	73 0b       	sbc	r23, r19
     d38:	60 32       	cpi	r22, 0x20	; 32
     d3a:	71 05       	cpc	r23, r1
     d3c:	0c f0       	brlt	.+2      	; 0xd40 <_fpadd_parts+0xba>
     d3e:	61 c0       	rjmp	.+194    	; 0xe02 <_fpadd_parts+0x17c>
     d40:	12 16       	cp	r1, r18
     d42:	13 06       	cpc	r1, r19
     d44:	6c f5       	brge	.+90     	; 0xda0 <_fpadd_parts+0x11a>
     d46:	37 01       	movw	r6, r14
     d48:	48 01       	movw	r8, r16
     d4a:	06 2e       	mov	r0, r22
     d4c:	04 c0       	rjmp	.+8      	; 0xd56 <_fpadd_parts+0xd0>
     d4e:	96 94       	lsr	r9
     d50:	87 94       	ror	r8
     d52:	77 94       	ror	r7
     d54:	67 94       	ror	r6
     d56:	0a 94       	dec	r0
     d58:	d2 f7       	brpl	.-12     	; 0xd4e <_fpadd_parts+0xc8>
     d5a:	21 e0       	ldi	r18, 0x01	; 1
     d5c:	30 e0       	ldi	r19, 0x00	; 0
     d5e:	40 e0       	ldi	r20, 0x00	; 0
     d60:	50 e0       	ldi	r21, 0x00	; 0
     d62:	04 c0       	rjmp	.+8      	; 0xd6c <_fpadd_parts+0xe6>
     d64:	22 0f       	add	r18, r18
     d66:	33 1f       	adc	r19, r19
     d68:	44 1f       	adc	r20, r20
     d6a:	55 1f       	adc	r21, r21
     d6c:	6a 95       	dec	r22
     d6e:	d2 f7       	brpl	.-12     	; 0xd64 <_fpadd_parts+0xde>
     d70:	21 50       	subi	r18, 0x01	; 1
     d72:	30 40       	sbci	r19, 0x00	; 0
     d74:	40 40       	sbci	r20, 0x00	; 0
     d76:	50 40       	sbci	r21, 0x00	; 0
     d78:	2e 21       	and	r18, r14
     d7a:	3f 21       	and	r19, r15
     d7c:	40 23       	and	r20, r16
     d7e:	51 23       	and	r21, r17
     d80:	21 15       	cp	r18, r1
     d82:	31 05       	cpc	r19, r1
     d84:	41 05       	cpc	r20, r1
     d86:	51 05       	cpc	r21, r1
     d88:	21 f0       	breq	.+8      	; 0xd92 <_fpadd_parts+0x10c>
     d8a:	21 e0       	ldi	r18, 0x01	; 1
     d8c:	30 e0       	ldi	r19, 0x00	; 0
     d8e:	40 e0       	ldi	r20, 0x00	; 0
     d90:	50 e0       	ldi	r21, 0x00	; 0
     d92:	79 01       	movw	r14, r18
     d94:	8a 01       	movw	r16, r20
     d96:	e6 28       	or	r14, r6
     d98:	f7 28       	or	r15, r7
     d9a:	08 29       	or	r16, r8
     d9c:	19 29       	or	r17, r9
     d9e:	3c c0       	rjmp	.+120    	; 0xe18 <_fpadd_parts+0x192>
     da0:	23 2b       	or	r18, r19
     da2:	d1 f1       	breq	.+116    	; 0xe18 <_fpadd_parts+0x192>
     da4:	26 0e       	add	r2, r22
     da6:	37 1e       	adc	r3, r23
     da8:	35 01       	movw	r6, r10
     daa:	46 01       	movw	r8, r12
     dac:	06 2e       	mov	r0, r22
     dae:	04 c0       	rjmp	.+8      	; 0xdb8 <_fpadd_parts+0x132>
     db0:	96 94       	lsr	r9
     db2:	87 94       	ror	r8
     db4:	77 94       	ror	r7
     db6:	67 94       	ror	r6
     db8:	0a 94       	dec	r0
     dba:	d2 f7       	brpl	.-12     	; 0xdb0 <_fpadd_parts+0x12a>
     dbc:	21 e0       	ldi	r18, 0x01	; 1
     dbe:	30 e0       	ldi	r19, 0x00	; 0
     dc0:	40 e0       	ldi	r20, 0x00	; 0
     dc2:	50 e0       	ldi	r21, 0x00	; 0
     dc4:	04 c0       	rjmp	.+8      	; 0xdce <_fpadd_parts+0x148>
     dc6:	22 0f       	add	r18, r18
     dc8:	33 1f       	adc	r19, r19
     dca:	44 1f       	adc	r20, r20
     dcc:	55 1f       	adc	r21, r21
     dce:	6a 95       	dec	r22
     dd0:	d2 f7       	brpl	.-12     	; 0xdc6 <_fpadd_parts+0x140>
     dd2:	21 50       	subi	r18, 0x01	; 1
     dd4:	30 40       	sbci	r19, 0x00	; 0
     dd6:	40 40       	sbci	r20, 0x00	; 0
     dd8:	50 40       	sbci	r21, 0x00	; 0
     dda:	2a 21       	and	r18, r10
     ddc:	3b 21       	and	r19, r11
     dde:	4c 21       	and	r20, r12
     de0:	5d 21       	and	r21, r13
     de2:	21 15       	cp	r18, r1
     de4:	31 05       	cpc	r19, r1
     de6:	41 05       	cpc	r20, r1
     de8:	51 05       	cpc	r21, r1
     dea:	21 f0       	breq	.+8      	; 0xdf4 <_fpadd_parts+0x16e>
     dec:	21 e0       	ldi	r18, 0x01	; 1
     dee:	30 e0       	ldi	r19, 0x00	; 0
     df0:	40 e0       	ldi	r20, 0x00	; 0
     df2:	50 e0       	ldi	r21, 0x00	; 0
     df4:	59 01       	movw	r10, r18
     df6:	6a 01       	movw	r12, r20
     df8:	a6 28       	or	r10, r6
     dfa:	b7 28       	or	r11, r7
     dfc:	c8 28       	or	r12, r8
     dfe:	d9 28       	or	r13, r9
     e00:	0b c0       	rjmp	.+22     	; 0xe18 <_fpadd_parts+0x192>
     e02:	82 15       	cp	r24, r2
     e04:	93 05       	cpc	r25, r3
     e06:	2c f0       	brlt	.+10     	; 0xe12 <_fpadd_parts+0x18c>
     e08:	1c 01       	movw	r2, r24
     e0a:	aa 24       	eor	r10, r10
     e0c:	bb 24       	eor	r11, r11
     e0e:	65 01       	movw	r12, r10
     e10:	03 c0       	rjmp	.+6      	; 0xe18 <_fpadd_parts+0x192>
     e12:	ee 24       	eor	r14, r14
     e14:	ff 24       	eor	r15, r15
     e16:	87 01       	movw	r16, r14
     e18:	11 96       	adiw	r26, 0x01	; 1
     e1a:	9c 91       	ld	r25, X
     e1c:	d2 01       	movw	r26, r4
     e1e:	11 96       	adiw	r26, 0x01	; 1
     e20:	8c 91       	ld	r24, X
     e22:	98 17       	cp	r25, r24
     e24:	09 f4       	brne	.+2      	; 0xe28 <_fpadd_parts+0x1a2>
     e26:	45 c0       	rjmp	.+138    	; 0xeb2 <_fpadd_parts+0x22c>
     e28:	99 23       	and	r25, r25
     e2a:	39 f0       	breq	.+14     	; 0xe3a <_fpadd_parts+0x1b4>
     e2c:	a8 01       	movw	r20, r16
     e2e:	97 01       	movw	r18, r14
     e30:	2a 19       	sub	r18, r10
     e32:	3b 09       	sbc	r19, r11
     e34:	4c 09       	sbc	r20, r12
     e36:	5d 09       	sbc	r21, r13
     e38:	06 c0       	rjmp	.+12     	; 0xe46 <_fpadd_parts+0x1c0>
     e3a:	a6 01       	movw	r20, r12
     e3c:	95 01       	movw	r18, r10
     e3e:	2e 19       	sub	r18, r14
     e40:	3f 09       	sbc	r19, r15
     e42:	40 0b       	sbc	r20, r16
     e44:	51 0b       	sbc	r21, r17
     e46:	57 fd       	sbrc	r21, 7
     e48:	08 c0       	rjmp	.+16     	; 0xe5a <_fpadd_parts+0x1d4>
     e4a:	11 82       	std	Z+1, r1	; 0x01
     e4c:	33 82       	std	Z+3, r3	; 0x03
     e4e:	22 82       	std	Z+2, r2	; 0x02
     e50:	24 83       	std	Z+4, r18	; 0x04
     e52:	35 83       	std	Z+5, r19	; 0x05
     e54:	46 83       	std	Z+6, r20	; 0x06
     e56:	57 83       	std	Z+7, r21	; 0x07
     e58:	1d c0       	rjmp	.+58     	; 0xe94 <_fpadd_parts+0x20e>
     e5a:	81 e0       	ldi	r24, 0x01	; 1
     e5c:	81 83       	std	Z+1, r24	; 0x01
     e5e:	33 82       	std	Z+3, r3	; 0x03
     e60:	22 82       	std	Z+2, r2	; 0x02
     e62:	88 27       	eor	r24, r24
     e64:	99 27       	eor	r25, r25
     e66:	dc 01       	movw	r26, r24
     e68:	82 1b       	sub	r24, r18
     e6a:	93 0b       	sbc	r25, r19
     e6c:	a4 0b       	sbc	r26, r20
     e6e:	b5 0b       	sbc	r27, r21
     e70:	84 83       	std	Z+4, r24	; 0x04
     e72:	95 83       	std	Z+5, r25	; 0x05
     e74:	a6 83       	std	Z+6, r26	; 0x06
     e76:	b7 83       	std	Z+7, r27	; 0x07
     e78:	0d c0       	rjmp	.+26     	; 0xe94 <_fpadd_parts+0x20e>
     e7a:	22 0f       	add	r18, r18
     e7c:	33 1f       	adc	r19, r19
     e7e:	44 1f       	adc	r20, r20
     e80:	55 1f       	adc	r21, r21
     e82:	24 83       	std	Z+4, r18	; 0x04
     e84:	35 83       	std	Z+5, r19	; 0x05
     e86:	46 83       	std	Z+6, r20	; 0x06
     e88:	57 83       	std	Z+7, r21	; 0x07
     e8a:	82 81       	ldd	r24, Z+2	; 0x02
     e8c:	93 81       	ldd	r25, Z+3	; 0x03
     e8e:	01 97       	sbiw	r24, 0x01	; 1
     e90:	93 83       	std	Z+3, r25	; 0x03
     e92:	82 83       	std	Z+2, r24	; 0x02
     e94:	24 81       	ldd	r18, Z+4	; 0x04
     e96:	35 81       	ldd	r19, Z+5	; 0x05
     e98:	46 81       	ldd	r20, Z+6	; 0x06
     e9a:	57 81       	ldd	r21, Z+7	; 0x07
     e9c:	da 01       	movw	r26, r20
     e9e:	c9 01       	movw	r24, r18
     ea0:	01 97       	sbiw	r24, 0x01	; 1
     ea2:	a1 09       	sbc	r26, r1
     ea4:	b1 09       	sbc	r27, r1
     ea6:	8f 5f       	subi	r24, 0xFF	; 255
     ea8:	9f 4f       	sbci	r25, 0xFF	; 255
     eaa:	af 4f       	sbci	r26, 0xFF	; 255
     eac:	bf 43       	sbci	r27, 0x3F	; 63
     eae:	28 f3       	brcs	.-54     	; 0xe7a <_fpadd_parts+0x1f4>
     eb0:	0b c0       	rjmp	.+22     	; 0xec8 <_fpadd_parts+0x242>
     eb2:	91 83       	std	Z+1, r25	; 0x01
     eb4:	33 82       	std	Z+3, r3	; 0x03
     eb6:	22 82       	std	Z+2, r2	; 0x02
     eb8:	ea 0c       	add	r14, r10
     eba:	fb 1c       	adc	r15, r11
     ebc:	0c 1d       	adc	r16, r12
     ebe:	1d 1d       	adc	r17, r13
     ec0:	e4 82       	std	Z+4, r14	; 0x04
     ec2:	f5 82       	std	Z+5, r15	; 0x05
     ec4:	06 83       	std	Z+6, r16	; 0x06
     ec6:	17 83       	std	Z+7, r17	; 0x07
     ec8:	83 e0       	ldi	r24, 0x03	; 3
     eca:	80 83       	st	Z, r24
     ecc:	24 81       	ldd	r18, Z+4	; 0x04
     ece:	35 81       	ldd	r19, Z+5	; 0x05
     ed0:	46 81       	ldd	r20, Z+6	; 0x06
     ed2:	57 81       	ldd	r21, Z+7	; 0x07
     ed4:	57 ff       	sbrs	r21, 7
     ed6:	1a c0       	rjmp	.+52     	; 0xf0c <_fpadd_parts+0x286>
     ed8:	c9 01       	movw	r24, r18
     eda:	aa 27       	eor	r26, r26
     edc:	97 fd       	sbrc	r25, 7
     ede:	a0 95       	com	r26
     ee0:	ba 2f       	mov	r27, r26
     ee2:	81 70       	andi	r24, 0x01	; 1
     ee4:	90 70       	andi	r25, 0x00	; 0
     ee6:	a0 70       	andi	r26, 0x00	; 0
     ee8:	b0 70       	andi	r27, 0x00	; 0
     eea:	56 95       	lsr	r21
     eec:	47 95       	ror	r20
     eee:	37 95       	ror	r19
     ef0:	27 95       	ror	r18
     ef2:	82 2b       	or	r24, r18
     ef4:	93 2b       	or	r25, r19
     ef6:	a4 2b       	or	r26, r20
     ef8:	b5 2b       	or	r27, r21
     efa:	84 83       	std	Z+4, r24	; 0x04
     efc:	95 83       	std	Z+5, r25	; 0x05
     efe:	a6 83       	std	Z+6, r26	; 0x06
     f00:	b7 83       	std	Z+7, r27	; 0x07
     f02:	82 81       	ldd	r24, Z+2	; 0x02
     f04:	93 81       	ldd	r25, Z+3	; 0x03
     f06:	01 96       	adiw	r24, 0x01	; 1
     f08:	93 83       	std	Z+3, r25	; 0x03
     f0a:	82 83       	std	Z+2, r24	; 0x02
     f0c:	df 01       	movw	r26, r30
     f0e:	01 c0       	rjmp	.+2      	; 0xf12 <_fpadd_parts+0x28c>
     f10:	d2 01       	movw	r26, r4
     f12:	cd 01       	movw	r24, r26
     f14:	cd b7       	in	r28, 0x3d	; 61
     f16:	de b7       	in	r29, 0x3e	; 62
     f18:	e2 e1       	ldi	r30, 0x12	; 18
     f1a:	0c 94 08 0d 	jmp	0x1a10	; 0x1a10 <__epilogue_restores__>

00000f1e <__subsf3>:
     f1e:	a0 e2       	ldi	r26, 0x20	; 32
     f20:	b0 e0       	ldi	r27, 0x00	; 0
     f22:	e5 e9       	ldi	r30, 0x95	; 149
     f24:	f7 e0       	ldi	r31, 0x07	; 7
     f26:	0c 94 f8 0c 	jmp	0x19f0	; 0x19f0 <__prologue_saves__+0x18>
     f2a:	69 83       	std	Y+1, r22	; 0x01
     f2c:	7a 83       	std	Y+2, r23	; 0x02
     f2e:	8b 83       	std	Y+3, r24	; 0x03
     f30:	9c 83       	std	Y+4, r25	; 0x04
     f32:	2d 83       	std	Y+5, r18	; 0x05
     f34:	3e 83       	std	Y+6, r19	; 0x06
     f36:	4f 83       	std	Y+7, r20	; 0x07
     f38:	58 87       	std	Y+8, r21	; 0x08
     f3a:	e9 e0       	ldi	r30, 0x09	; 9
     f3c:	ee 2e       	mov	r14, r30
     f3e:	f1 2c       	mov	r15, r1
     f40:	ec 0e       	add	r14, r28
     f42:	fd 1e       	adc	r15, r29
     f44:	ce 01       	movw	r24, r28
     f46:	01 96       	adiw	r24, 0x01	; 1
     f48:	b7 01       	movw	r22, r14
     f4a:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <__unpack_f>
     f4e:	8e 01       	movw	r16, r28
     f50:	0f 5e       	subi	r16, 0xEF	; 239
     f52:	1f 4f       	sbci	r17, 0xFF	; 255
     f54:	ce 01       	movw	r24, r28
     f56:	05 96       	adiw	r24, 0x05	; 5
     f58:	b8 01       	movw	r22, r16
     f5a:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <__unpack_f>
     f5e:	8a 89       	ldd	r24, Y+18	; 0x12
     f60:	91 e0       	ldi	r25, 0x01	; 1
     f62:	89 27       	eor	r24, r25
     f64:	8a 8b       	std	Y+18, r24	; 0x12
     f66:	c7 01       	movw	r24, r14
     f68:	b8 01       	movw	r22, r16
     f6a:	ae 01       	movw	r20, r28
     f6c:	47 5e       	subi	r20, 0xE7	; 231
     f6e:	5f 4f       	sbci	r21, 0xFF	; 255
     f70:	0e 94 43 06 	call	0xc86	; 0xc86 <_fpadd_parts>
     f74:	0e 94 24 0b 	call	0x1648	; 0x1648 <__pack_f>
     f78:	a0 96       	adiw	r28, 0x20	; 32
     f7a:	e6 e0       	ldi	r30, 0x06	; 6
     f7c:	0c 94 14 0d 	jmp	0x1a28	; 0x1a28 <__epilogue_restores__+0x18>

00000f80 <__addsf3>:
     f80:	a0 e2       	ldi	r26, 0x20	; 32
     f82:	b0 e0       	ldi	r27, 0x00	; 0
     f84:	e6 ec       	ldi	r30, 0xC6	; 198
     f86:	f7 e0       	ldi	r31, 0x07	; 7
     f88:	0c 94 f8 0c 	jmp	0x19f0	; 0x19f0 <__prologue_saves__+0x18>
     f8c:	69 83       	std	Y+1, r22	; 0x01
     f8e:	7a 83       	std	Y+2, r23	; 0x02
     f90:	8b 83       	std	Y+3, r24	; 0x03
     f92:	9c 83       	std	Y+4, r25	; 0x04
     f94:	2d 83       	std	Y+5, r18	; 0x05
     f96:	3e 83       	std	Y+6, r19	; 0x06
     f98:	4f 83       	std	Y+7, r20	; 0x07
     f9a:	58 87       	std	Y+8, r21	; 0x08
     f9c:	f9 e0       	ldi	r31, 0x09	; 9
     f9e:	ef 2e       	mov	r14, r31
     fa0:	f1 2c       	mov	r15, r1
     fa2:	ec 0e       	add	r14, r28
     fa4:	fd 1e       	adc	r15, r29
     fa6:	ce 01       	movw	r24, r28
     fa8:	01 96       	adiw	r24, 0x01	; 1
     faa:	b7 01       	movw	r22, r14
     fac:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <__unpack_f>
     fb0:	8e 01       	movw	r16, r28
     fb2:	0f 5e       	subi	r16, 0xEF	; 239
     fb4:	1f 4f       	sbci	r17, 0xFF	; 255
     fb6:	ce 01       	movw	r24, r28
     fb8:	05 96       	adiw	r24, 0x05	; 5
     fba:	b8 01       	movw	r22, r16
     fbc:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <__unpack_f>
     fc0:	c7 01       	movw	r24, r14
     fc2:	b8 01       	movw	r22, r16
     fc4:	ae 01       	movw	r20, r28
     fc6:	47 5e       	subi	r20, 0xE7	; 231
     fc8:	5f 4f       	sbci	r21, 0xFF	; 255
     fca:	0e 94 43 06 	call	0xc86	; 0xc86 <_fpadd_parts>
     fce:	0e 94 24 0b 	call	0x1648	; 0x1648 <__pack_f>
     fd2:	a0 96       	adiw	r28, 0x20	; 32
     fd4:	e6 e0       	ldi	r30, 0x06	; 6
     fd6:	0c 94 14 0d 	jmp	0x1a28	; 0x1a28 <__epilogue_restores__+0x18>

00000fda <__mulsf3>:
     fda:	a0 e2       	ldi	r26, 0x20	; 32
     fdc:	b0 e0       	ldi	r27, 0x00	; 0
     fde:	e3 ef       	ldi	r30, 0xF3	; 243
     fe0:	f7 e0       	ldi	r31, 0x07	; 7
     fe2:	0c 94 ec 0c 	jmp	0x19d8	; 0x19d8 <__prologue_saves__>
     fe6:	69 83       	std	Y+1, r22	; 0x01
     fe8:	7a 83       	std	Y+2, r23	; 0x02
     fea:	8b 83       	std	Y+3, r24	; 0x03
     fec:	9c 83       	std	Y+4, r25	; 0x04
     fee:	2d 83       	std	Y+5, r18	; 0x05
     ff0:	3e 83       	std	Y+6, r19	; 0x06
     ff2:	4f 83       	std	Y+7, r20	; 0x07
     ff4:	58 87       	std	Y+8, r21	; 0x08
     ff6:	ce 01       	movw	r24, r28
     ff8:	01 96       	adiw	r24, 0x01	; 1
     ffa:	be 01       	movw	r22, r28
     ffc:	67 5f       	subi	r22, 0xF7	; 247
     ffe:	7f 4f       	sbci	r23, 0xFF	; 255
    1000:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <__unpack_f>
    1004:	ce 01       	movw	r24, r28
    1006:	05 96       	adiw	r24, 0x05	; 5
    1008:	be 01       	movw	r22, r28
    100a:	6f 5e       	subi	r22, 0xEF	; 239
    100c:	7f 4f       	sbci	r23, 0xFF	; 255
    100e:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <__unpack_f>
    1012:	99 85       	ldd	r25, Y+9	; 0x09
    1014:	92 30       	cpi	r25, 0x02	; 2
    1016:	88 f0       	brcs	.+34     	; 0x103a <__mulsf3+0x60>
    1018:	89 89       	ldd	r24, Y+17	; 0x11
    101a:	82 30       	cpi	r24, 0x02	; 2
    101c:	c8 f0       	brcs	.+50     	; 0x1050 <__mulsf3+0x76>
    101e:	94 30       	cpi	r25, 0x04	; 4
    1020:	19 f4       	brne	.+6      	; 0x1028 <__mulsf3+0x4e>
    1022:	82 30       	cpi	r24, 0x02	; 2
    1024:	51 f4       	brne	.+20     	; 0x103a <__mulsf3+0x60>
    1026:	04 c0       	rjmp	.+8      	; 0x1030 <__mulsf3+0x56>
    1028:	84 30       	cpi	r24, 0x04	; 4
    102a:	29 f4       	brne	.+10     	; 0x1036 <__mulsf3+0x5c>
    102c:	92 30       	cpi	r25, 0x02	; 2
    102e:	81 f4       	brne	.+32     	; 0x1050 <__mulsf3+0x76>
    1030:	80 e0       	ldi	r24, 0x00	; 0
    1032:	92 e0       	ldi	r25, 0x02	; 2
    1034:	c6 c0       	rjmp	.+396    	; 0x11c2 <__mulsf3+0x1e8>
    1036:	92 30       	cpi	r25, 0x02	; 2
    1038:	49 f4       	brne	.+18     	; 0x104c <__mulsf3+0x72>
    103a:	20 e0       	ldi	r18, 0x00	; 0
    103c:	9a 85       	ldd	r25, Y+10	; 0x0a
    103e:	8a 89       	ldd	r24, Y+18	; 0x12
    1040:	98 13       	cpse	r25, r24
    1042:	21 e0       	ldi	r18, 0x01	; 1
    1044:	2a 87       	std	Y+10, r18	; 0x0a
    1046:	ce 01       	movw	r24, r28
    1048:	09 96       	adiw	r24, 0x09	; 9
    104a:	bb c0       	rjmp	.+374    	; 0x11c2 <__mulsf3+0x1e8>
    104c:	82 30       	cpi	r24, 0x02	; 2
    104e:	49 f4       	brne	.+18     	; 0x1062 <__mulsf3+0x88>
    1050:	20 e0       	ldi	r18, 0x00	; 0
    1052:	9a 85       	ldd	r25, Y+10	; 0x0a
    1054:	8a 89       	ldd	r24, Y+18	; 0x12
    1056:	98 13       	cpse	r25, r24
    1058:	21 e0       	ldi	r18, 0x01	; 1
    105a:	2a 8b       	std	Y+18, r18	; 0x12
    105c:	ce 01       	movw	r24, r28
    105e:	41 96       	adiw	r24, 0x11	; 17
    1060:	b0 c0       	rjmp	.+352    	; 0x11c2 <__mulsf3+0x1e8>
    1062:	2d 84       	ldd	r2, Y+13	; 0x0d
    1064:	3e 84       	ldd	r3, Y+14	; 0x0e
    1066:	4f 84       	ldd	r4, Y+15	; 0x0f
    1068:	58 88       	ldd	r5, Y+16	; 0x10
    106a:	6d 88       	ldd	r6, Y+21	; 0x15
    106c:	7e 88       	ldd	r7, Y+22	; 0x16
    106e:	8f 88       	ldd	r8, Y+23	; 0x17
    1070:	98 8c       	ldd	r9, Y+24	; 0x18
    1072:	ee 24       	eor	r14, r14
    1074:	ff 24       	eor	r15, r15
    1076:	87 01       	movw	r16, r14
    1078:	aa 24       	eor	r10, r10
    107a:	bb 24       	eor	r11, r11
    107c:	65 01       	movw	r12, r10
    107e:	40 e0       	ldi	r20, 0x00	; 0
    1080:	50 e0       	ldi	r21, 0x00	; 0
    1082:	60 e0       	ldi	r22, 0x00	; 0
    1084:	70 e0       	ldi	r23, 0x00	; 0
    1086:	e0 e0       	ldi	r30, 0x00	; 0
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	c1 01       	movw	r24, r2
    108c:	81 70       	andi	r24, 0x01	; 1
    108e:	90 70       	andi	r25, 0x00	; 0
    1090:	89 2b       	or	r24, r25
    1092:	e9 f0       	breq	.+58     	; 0x10ce <__mulsf3+0xf4>
    1094:	e6 0c       	add	r14, r6
    1096:	f7 1c       	adc	r15, r7
    1098:	08 1d       	adc	r16, r8
    109a:	19 1d       	adc	r17, r9
    109c:	9a 01       	movw	r18, r20
    109e:	ab 01       	movw	r20, r22
    10a0:	2a 0d       	add	r18, r10
    10a2:	3b 1d       	adc	r19, r11
    10a4:	4c 1d       	adc	r20, r12
    10a6:	5d 1d       	adc	r21, r13
    10a8:	80 e0       	ldi	r24, 0x00	; 0
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	a0 e0       	ldi	r26, 0x00	; 0
    10ae:	b0 e0       	ldi	r27, 0x00	; 0
    10b0:	e6 14       	cp	r14, r6
    10b2:	f7 04       	cpc	r15, r7
    10b4:	08 05       	cpc	r16, r8
    10b6:	19 05       	cpc	r17, r9
    10b8:	20 f4       	brcc	.+8      	; 0x10c2 <__mulsf3+0xe8>
    10ba:	81 e0       	ldi	r24, 0x01	; 1
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	a0 e0       	ldi	r26, 0x00	; 0
    10c0:	b0 e0       	ldi	r27, 0x00	; 0
    10c2:	ba 01       	movw	r22, r20
    10c4:	a9 01       	movw	r20, r18
    10c6:	48 0f       	add	r20, r24
    10c8:	59 1f       	adc	r21, r25
    10ca:	6a 1f       	adc	r22, r26
    10cc:	7b 1f       	adc	r23, r27
    10ce:	aa 0c       	add	r10, r10
    10d0:	bb 1c       	adc	r11, r11
    10d2:	cc 1c       	adc	r12, r12
    10d4:	dd 1c       	adc	r13, r13
    10d6:	97 fe       	sbrs	r9, 7
    10d8:	08 c0       	rjmp	.+16     	; 0x10ea <__mulsf3+0x110>
    10da:	81 e0       	ldi	r24, 0x01	; 1
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	a0 e0       	ldi	r26, 0x00	; 0
    10e0:	b0 e0       	ldi	r27, 0x00	; 0
    10e2:	a8 2a       	or	r10, r24
    10e4:	b9 2a       	or	r11, r25
    10e6:	ca 2a       	or	r12, r26
    10e8:	db 2a       	or	r13, r27
    10ea:	31 96       	adiw	r30, 0x01	; 1
    10ec:	e0 32       	cpi	r30, 0x20	; 32
    10ee:	f1 05       	cpc	r31, r1
    10f0:	49 f0       	breq	.+18     	; 0x1104 <__mulsf3+0x12a>
    10f2:	66 0c       	add	r6, r6
    10f4:	77 1c       	adc	r7, r7
    10f6:	88 1c       	adc	r8, r8
    10f8:	99 1c       	adc	r9, r9
    10fa:	56 94       	lsr	r5
    10fc:	47 94       	ror	r4
    10fe:	37 94       	ror	r3
    1100:	27 94       	ror	r2
    1102:	c3 cf       	rjmp	.-122    	; 0x108a <__mulsf3+0xb0>
    1104:	fa 85       	ldd	r31, Y+10	; 0x0a
    1106:	ea 89       	ldd	r30, Y+18	; 0x12
    1108:	2b 89       	ldd	r18, Y+19	; 0x13
    110a:	3c 89       	ldd	r19, Y+20	; 0x14
    110c:	8b 85       	ldd	r24, Y+11	; 0x0b
    110e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1110:	28 0f       	add	r18, r24
    1112:	39 1f       	adc	r19, r25
    1114:	2e 5f       	subi	r18, 0xFE	; 254
    1116:	3f 4f       	sbci	r19, 0xFF	; 255
    1118:	17 c0       	rjmp	.+46     	; 0x1148 <__mulsf3+0x16e>
    111a:	ca 01       	movw	r24, r20
    111c:	81 70       	andi	r24, 0x01	; 1
    111e:	90 70       	andi	r25, 0x00	; 0
    1120:	89 2b       	or	r24, r25
    1122:	61 f0       	breq	.+24     	; 0x113c <__mulsf3+0x162>
    1124:	16 95       	lsr	r17
    1126:	07 95       	ror	r16
    1128:	f7 94       	ror	r15
    112a:	e7 94       	ror	r14
    112c:	80 e0       	ldi	r24, 0x00	; 0
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	a0 e0       	ldi	r26, 0x00	; 0
    1132:	b0 e8       	ldi	r27, 0x80	; 128
    1134:	e8 2a       	or	r14, r24
    1136:	f9 2a       	or	r15, r25
    1138:	0a 2b       	or	r16, r26
    113a:	1b 2b       	or	r17, r27
    113c:	76 95       	lsr	r23
    113e:	67 95       	ror	r22
    1140:	57 95       	ror	r21
    1142:	47 95       	ror	r20
    1144:	2f 5f       	subi	r18, 0xFF	; 255
    1146:	3f 4f       	sbci	r19, 0xFF	; 255
    1148:	77 fd       	sbrc	r23, 7
    114a:	e7 cf       	rjmp	.-50     	; 0x111a <__mulsf3+0x140>
    114c:	0c c0       	rjmp	.+24     	; 0x1166 <__mulsf3+0x18c>
    114e:	44 0f       	add	r20, r20
    1150:	55 1f       	adc	r21, r21
    1152:	66 1f       	adc	r22, r22
    1154:	77 1f       	adc	r23, r23
    1156:	17 fd       	sbrc	r17, 7
    1158:	41 60       	ori	r20, 0x01	; 1
    115a:	ee 0c       	add	r14, r14
    115c:	ff 1c       	adc	r15, r15
    115e:	00 1f       	adc	r16, r16
    1160:	11 1f       	adc	r17, r17
    1162:	21 50       	subi	r18, 0x01	; 1
    1164:	30 40       	sbci	r19, 0x00	; 0
    1166:	40 30       	cpi	r20, 0x00	; 0
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	59 07       	cpc	r21, r25
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	69 07       	cpc	r22, r25
    1170:	90 e4       	ldi	r25, 0x40	; 64
    1172:	79 07       	cpc	r23, r25
    1174:	60 f3       	brcs	.-40     	; 0x114e <__mulsf3+0x174>
    1176:	2b 8f       	std	Y+27, r18	; 0x1b
    1178:	3c 8f       	std	Y+28, r19	; 0x1c
    117a:	db 01       	movw	r26, r22
    117c:	ca 01       	movw	r24, r20
    117e:	8f 77       	andi	r24, 0x7F	; 127
    1180:	90 70       	andi	r25, 0x00	; 0
    1182:	a0 70       	andi	r26, 0x00	; 0
    1184:	b0 70       	andi	r27, 0x00	; 0
    1186:	80 34       	cpi	r24, 0x40	; 64
    1188:	91 05       	cpc	r25, r1
    118a:	a1 05       	cpc	r26, r1
    118c:	b1 05       	cpc	r27, r1
    118e:	61 f4       	brne	.+24     	; 0x11a8 <__mulsf3+0x1ce>
    1190:	47 fd       	sbrc	r20, 7
    1192:	0a c0       	rjmp	.+20     	; 0x11a8 <__mulsf3+0x1ce>
    1194:	e1 14       	cp	r14, r1
    1196:	f1 04       	cpc	r15, r1
    1198:	01 05       	cpc	r16, r1
    119a:	11 05       	cpc	r17, r1
    119c:	29 f0       	breq	.+10     	; 0x11a8 <__mulsf3+0x1ce>
    119e:	40 5c       	subi	r20, 0xC0	; 192
    11a0:	5f 4f       	sbci	r21, 0xFF	; 255
    11a2:	6f 4f       	sbci	r22, 0xFF	; 255
    11a4:	7f 4f       	sbci	r23, 0xFF	; 255
    11a6:	40 78       	andi	r20, 0x80	; 128
    11a8:	1a 8e       	std	Y+26, r1	; 0x1a
    11aa:	fe 17       	cp	r31, r30
    11ac:	11 f0       	breq	.+4      	; 0x11b2 <__mulsf3+0x1d8>
    11ae:	81 e0       	ldi	r24, 0x01	; 1
    11b0:	8a 8f       	std	Y+26, r24	; 0x1a
    11b2:	4d 8f       	std	Y+29, r20	; 0x1d
    11b4:	5e 8f       	std	Y+30, r21	; 0x1e
    11b6:	6f 8f       	std	Y+31, r22	; 0x1f
    11b8:	78 a3       	std	Y+32, r23	; 0x20
    11ba:	83 e0       	ldi	r24, 0x03	; 3
    11bc:	89 8f       	std	Y+25, r24	; 0x19
    11be:	ce 01       	movw	r24, r28
    11c0:	49 96       	adiw	r24, 0x19	; 25
    11c2:	0e 94 24 0b 	call	0x1648	; 0x1648 <__pack_f>
    11c6:	a0 96       	adiw	r28, 0x20	; 32
    11c8:	e2 e1       	ldi	r30, 0x12	; 18
    11ca:	0c 94 08 0d 	jmp	0x1a10	; 0x1a10 <__epilogue_restores__>

000011ce <__divsf3>:
    11ce:	a8 e1       	ldi	r26, 0x18	; 24
    11d0:	b0 e0       	ldi	r27, 0x00	; 0
    11d2:	ed ee       	ldi	r30, 0xED	; 237
    11d4:	f8 e0       	ldi	r31, 0x08	; 8
    11d6:	0c 94 f4 0c 	jmp	0x19e8	; 0x19e8 <__prologue_saves__+0x10>
    11da:	69 83       	std	Y+1, r22	; 0x01
    11dc:	7a 83       	std	Y+2, r23	; 0x02
    11de:	8b 83       	std	Y+3, r24	; 0x03
    11e0:	9c 83       	std	Y+4, r25	; 0x04
    11e2:	2d 83       	std	Y+5, r18	; 0x05
    11e4:	3e 83       	std	Y+6, r19	; 0x06
    11e6:	4f 83       	std	Y+7, r20	; 0x07
    11e8:	58 87       	std	Y+8, r21	; 0x08
    11ea:	b9 e0       	ldi	r27, 0x09	; 9
    11ec:	eb 2e       	mov	r14, r27
    11ee:	f1 2c       	mov	r15, r1
    11f0:	ec 0e       	add	r14, r28
    11f2:	fd 1e       	adc	r15, r29
    11f4:	ce 01       	movw	r24, r28
    11f6:	01 96       	adiw	r24, 0x01	; 1
    11f8:	b7 01       	movw	r22, r14
    11fa:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <__unpack_f>
    11fe:	8e 01       	movw	r16, r28
    1200:	0f 5e       	subi	r16, 0xEF	; 239
    1202:	1f 4f       	sbci	r17, 0xFF	; 255
    1204:	ce 01       	movw	r24, r28
    1206:	05 96       	adiw	r24, 0x05	; 5
    1208:	b8 01       	movw	r22, r16
    120a:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <__unpack_f>
    120e:	29 85       	ldd	r18, Y+9	; 0x09
    1210:	22 30       	cpi	r18, 0x02	; 2
    1212:	08 f4       	brcc	.+2      	; 0x1216 <__divsf3+0x48>
    1214:	7e c0       	rjmp	.+252    	; 0x1312 <__divsf3+0x144>
    1216:	39 89       	ldd	r19, Y+17	; 0x11
    1218:	32 30       	cpi	r19, 0x02	; 2
    121a:	10 f4       	brcc	.+4      	; 0x1220 <__divsf3+0x52>
    121c:	b8 01       	movw	r22, r16
    121e:	7c c0       	rjmp	.+248    	; 0x1318 <__divsf3+0x14a>
    1220:	8a 85       	ldd	r24, Y+10	; 0x0a
    1222:	9a 89       	ldd	r25, Y+18	; 0x12
    1224:	89 27       	eor	r24, r25
    1226:	8a 87       	std	Y+10, r24	; 0x0a
    1228:	24 30       	cpi	r18, 0x04	; 4
    122a:	11 f0       	breq	.+4      	; 0x1230 <__divsf3+0x62>
    122c:	22 30       	cpi	r18, 0x02	; 2
    122e:	31 f4       	brne	.+12     	; 0x123c <__divsf3+0x6e>
    1230:	23 17       	cp	r18, r19
    1232:	09 f0       	breq	.+2      	; 0x1236 <__divsf3+0x68>
    1234:	6e c0       	rjmp	.+220    	; 0x1312 <__divsf3+0x144>
    1236:	60 e0       	ldi	r22, 0x00	; 0
    1238:	72 e0       	ldi	r23, 0x02	; 2
    123a:	6e c0       	rjmp	.+220    	; 0x1318 <__divsf3+0x14a>
    123c:	34 30       	cpi	r19, 0x04	; 4
    123e:	39 f4       	brne	.+14     	; 0x124e <__divsf3+0x80>
    1240:	1d 86       	std	Y+13, r1	; 0x0d
    1242:	1e 86       	std	Y+14, r1	; 0x0e
    1244:	1f 86       	std	Y+15, r1	; 0x0f
    1246:	18 8a       	std	Y+16, r1	; 0x10
    1248:	1c 86       	std	Y+12, r1	; 0x0c
    124a:	1b 86       	std	Y+11, r1	; 0x0b
    124c:	04 c0       	rjmp	.+8      	; 0x1256 <__divsf3+0x88>
    124e:	32 30       	cpi	r19, 0x02	; 2
    1250:	21 f4       	brne	.+8      	; 0x125a <__divsf3+0x8c>
    1252:	84 e0       	ldi	r24, 0x04	; 4
    1254:	89 87       	std	Y+9, r24	; 0x09
    1256:	b7 01       	movw	r22, r14
    1258:	5f c0       	rjmp	.+190    	; 0x1318 <__divsf3+0x14a>
    125a:	2b 85       	ldd	r18, Y+11	; 0x0b
    125c:	3c 85       	ldd	r19, Y+12	; 0x0c
    125e:	8b 89       	ldd	r24, Y+19	; 0x13
    1260:	9c 89       	ldd	r25, Y+20	; 0x14
    1262:	28 1b       	sub	r18, r24
    1264:	39 0b       	sbc	r19, r25
    1266:	3c 87       	std	Y+12, r19	; 0x0c
    1268:	2b 87       	std	Y+11, r18	; 0x0b
    126a:	ed 84       	ldd	r14, Y+13	; 0x0d
    126c:	fe 84       	ldd	r15, Y+14	; 0x0e
    126e:	0f 85       	ldd	r16, Y+15	; 0x0f
    1270:	18 89       	ldd	r17, Y+16	; 0x10
    1272:	ad 88       	ldd	r10, Y+21	; 0x15
    1274:	be 88       	ldd	r11, Y+22	; 0x16
    1276:	cf 88       	ldd	r12, Y+23	; 0x17
    1278:	d8 8c       	ldd	r13, Y+24	; 0x18
    127a:	ea 14       	cp	r14, r10
    127c:	fb 04       	cpc	r15, r11
    127e:	0c 05       	cpc	r16, r12
    1280:	1d 05       	cpc	r17, r13
    1282:	40 f4       	brcc	.+16     	; 0x1294 <__divsf3+0xc6>
    1284:	ee 0c       	add	r14, r14
    1286:	ff 1c       	adc	r15, r15
    1288:	00 1f       	adc	r16, r16
    128a:	11 1f       	adc	r17, r17
    128c:	21 50       	subi	r18, 0x01	; 1
    128e:	30 40       	sbci	r19, 0x00	; 0
    1290:	3c 87       	std	Y+12, r19	; 0x0c
    1292:	2b 87       	std	Y+11, r18	; 0x0b
    1294:	20 e0       	ldi	r18, 0x00	; 0
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	40 e0       	ldi	r20, 0x00	; 0
    129a:	50 e0       	ldi	r21, 0x00	; 0
    129c:	80 e0       	ldi	r24, 0x00	; 0
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	a0 e0       	ldi	r26, 0x00	; 0
    12a2:	b0 e4       	ldi	r27, 0x40	; 64
    12a4:	60 e0       	ldi	r22, 0x00	; 0
    12a6:	70 e0       	ldi	r23, 0x00	; 0
    12a8:	ea 14       	cp	r14, r10
    12aa:	fb 04       	cpc	r15, r11
    12ac:	0c 05       	cpc	r16, r12
    12ae:	1d 05       	cpc	r17, r13
    12b0:	40 f0       	brcs	.+16     	; 0x12c2 <__divsf3+0xf4>
    12b2:	28 2b       	or	r18, r24
    12b4:	39 2b       	or	r19, r25
    12b6:	4a 2b       	or	r20, r26
    12b8:	5b 2b       	or	r21, r27
    12ba:	ea 18       	sub	r14, r10
    12bc:	fb 08       	sbc	r15, r11
    12be:	0c 09       	sbc	r16, r12
    12c0:	1d 09       	sbc	r17, r13
    12c2:	b6 95       	lsr	r27
    12c4:	a7 95       	ror	r26
    12c6:	97 95       	ror	r25
    12c8:	87 95       	ror	r24
    12ca:	ee 0c       	add	r14, r14
    12cc:	ff 1c       	adc	r15, r15
    12ce:	00 1f       	adc	r16, r16
    12d0:	11 1f       	adc	r17, r17
    12d2:	6f 5f       	subi	r22, 0xFF	; 255
    12d4:	7f 4f       	sbci	r23, 0xFF	; 255
    12d6:	6f 31       	cpi	r22, 0x1F	; 31
    12d8:	71 05       	cpc	r23, r1
    12da:	31 f7       	brne	.-52     	; 0x12a8 <__divsf3+0xda>
    12dc:	da 01       	movw	r26, r20
    12de:	c9 01       	movw	r24, r18
    12e0:	8f 77       	andi	r24, 0x7F	; 127
    12e2:	90 70       	andi	r25, 0x00	; 0
    12e4:	a0 70       	andi	r26, 0x00	; 0
    12e6:	b0 70       	andi	r27, 0x00	; 0
    12e8:	80 34       	cpi	r24, 0x40	; 64
    12ea:	91 05       	cpc	r25, r1
    12ec:	a1 05       	cpc	r26, r1
    12ee:	b1 05       	cpc	r27, r1
    12f0:	61 f4       	brne	.+24     	; 0x130a <__divsf3+0x13c>
    12f2:	27 fd       	sbrc	r18, 7
    12f4:	0a c0       	rjmp	.+20     	; 0x130a <__divsf3+0x13c>
    12f6:	e1 14       	cp	r14, r1
    12f8:	f1 04       	cpc	r15, r1
    12fa:	01 05       	cpc	r16, r1
    12fc:	11 05       	cpc	r17, r1
    12fe:	29 f0       	breq	.+10     	; 0x130a <__divsf3+0x13c>
    1300:	20 5c       	subi	r18, 0xC0	; 192
    1302:	3f 4f       	sbci	r19, 0xFF	; 255
    1304:	4f 4f       	sbci	r20, 0xFF	; 255
    1306:	5f 4f       	sbci	r21, 0xFF	; 255
    1308:	20 78       	andi	r18, 0x80	; 128
    130a:	2d 87       	std	Y+13, r18	; 0x0d
    130c:	3e 87       	std	Y+14, r19	; 0x0e
    130e:	4f 87       	std	Y+15, r20	; 0x0f
    1310:	58 8b       	std	Y+16, r21	; 0x10
    1312:	be 01       	movw	r22, r28
    1314:	67 5f       	subi	r22, 0xF7	; 247
    1316:	7f 4f       	sbci	r23, 0xFF	; 255
    1318:	cb 01       	movw	r24, r22
    131a:	0e 94 24 0b 	call	0x1648	; 0x1648 <__pack_f>
    131e:	68 96       	adiw	r28, 0x18	; 24
    1320:	ea e0       	ldi	r30, 0x0A	; 10
    1322:	0c 94 10 0d 	jmp	0x1a20	; 0x1a20 <__epilogue_restores__+0x10>

00001326 <__gtsf2>:
    1326:	a8 e1       	ldi	r26, 0x18	; 24
    1328:	b0 e0       	ldi	r27, 0x00	; 0
    132a:	e9 e9       	ldi	r30, 0x99	; 153
    132c:	f9 e0       	ldi	r31, 0x09	; 9
    132e:	0c 94 f8 0c 	jmp	0x19f0	; 0x19f0 <__prologue_saves__+0x18>
    1332:	69 83       	std	Y+1, r22	; 0x01
    1334:	7a 83       	std	Y+2, r23	; 0x02
    1336:	8b 83       	std	Y+3, r24	; 0x03
    1338:	9c 83       	std	Y+4, r25	; 0x04
    133a:	2d 83       	std	Y+5, r18	; 0x05
    133c:	3e 83       	std	Y+6, r19	; 0x06
    133e:	4f 83       	std	Y+7, r20	; 0x07
    1340:	58 87       	std	Y+8, r21	; 0x08
    1342:	89 e0       	ldi	r24, 0x09	; 9
    1344:	e8 2e       	mov	r14, r24
    1346:	f1 2c       	mov	r15, r1
    1348:	ec 0e       	add	r14, r28
    134a:	fd 1e       	adc	r15, r29
    134c:	ce 01       	movw	r24, r28
    134e:	01 96       	adiw	r24, 0x01	; 1
    1350:	b7 01       	movw	r22, r14
    1352:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <__unpack_f>
    1356:	8e 01       	movw	r16, r28
    1358:	0f 5e       	subi	r16, 0xEF	; 239
    135a:	1f 4f       	sbci	r17, 0xFF	; 255
    135c:	ce 01       	movw	r24, r28
    135e:	05 96       	adiw	r24, 0x05	; 5
    1360:	b8 01       	movw	r22, r16
    1362:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <__unpack_f>
    1366:	89 85       	ldd	r24, Y+9	; 0x09
    1368:	82 30       	cpi	r24, 0x02	; 2
    136a:	40 f0       	brcs	.+16     	; 0x137c <__gtsf2+0x56>
    136c:	89 89       	ldd	r24, Y+17	; 0x11
    136e:	82 30       	cpi	r24, 0x02	; 2
    1370:	28 f0       	brcs	.+10     	; 0x137c <__gtsf2+0x56>
    1372:	c7 01       	movw	r24, r14
    1374:	b8 01       	movw	r22, r16
    1376:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <__fpcmp_parts_f>
    137a:	01 c0       	rjmp	.+2      	; 0x137e <__gtsf2+0x58>
    137c:	8f ef       	ldi	r24, 0xFF	; 255
    137e:	68 96       	adiw	r28, 0x18	; 24
    1380:	e6 e0       	ldi	r30, 0x06	; 6
    1382:	0c 94 14 0d 	jmp	0x1a28	; 0x1a28 <__epilogue_restores__+0x18>

00001386 <__gesf2>:
    1386:	a8 e1       	ldi	r26, 0x18	; 24
    1388:	b0 e0       	ldi	r27, 0x00	; 0
    138a:	e9 ec       	ldi	r30, 0xC9	; 201
    138c:	f9 e0       	ldi	r31, 0x09	; 9
    138e:	0c 94 f8 0c 	jmp	0x19f0	; 0x19f0 <__prologue_saves__+0x18>
    1392:	69 83       	std	Y+1, r22	; 0x01
    1394:	7a 83       	std	Y+2, r23	; 0x02
    1396:	8b 83       	std	Y+3, r24	; 0x03
    1398:	9c 83       	std	Y+4, r25	; 0x04
    139a:	2d 83       	std	Y+5, r18	; 0x05
    139c:	3e 83       	std	Y+6, r19	; 0x06
    139e:	4f 83       	std	Y+7, r20	; 0x07
    13a0:	58 87       	std	Y+8, r21	; 0x08
    13a2:	89 e0       	ldi	r24, 0x09	; 9
    13a4:	e8 2e       	mov	r14, r24
    13a6:	f1 2c       	mov	r15, r1
    13a8:	ec 0e       	add	r14, r28
    13aa:	fd 1e       	adc	r15, r29
    13ac:	ce 01       	movw	r24, r28
    13ae:	01 96       	adiw	r24, 0x01	; 1
    13b0:	b7 01       	movw	r22, r14
    13b2:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <__unpack_f>
    13b6:	8e 01       	movw	r16, r28
    13b8:	0f 5e       	subi	r16, 0xEF	; 239
    13ba:	1f 4f       	sbci	r17, 0xFF	; 255
    13bc:	ce 01       	movw	r24, r28
    13be:	05 96       	adiw	r24, 0x05	; 5
    13c0:	b8 01       	movw	r22, r16
    13c2:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <__unpack_f>
    13c6:	89 85       	ldd	r24, Y+9	; 0x09
    13c8:	82 30       	cpi	r24, 0x02	; 2
    13ca:	40 f0       	brcs	.+16     	; 0x13dc <__gesf2+0x56>
    13cc:	89 89       	ldd	r24, Y+17	; 0x11
    13ce:	82 30       	cpi	r24, 0x02	; 2
    13d0:	28 f0       	brcs	.+10     	; 0x13dc <__gesf2+0x56>
    13d2:	c7 01       	movw	r24, r14
    13d4:	b8 01       	movw	r22, r16
    13d6:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <__fpcmp_parts_f>
    13da:	01 c0       	rjmp	.+2      	; 0x13de <__gesf2+0x58>
    13dc:	8f ef       	ldi	r24, 0xFF	; 255
    13de:	68 96       	adiw	r28, 0x18	; 24
    13e0:	e6 e0       	ldi	r30, 0x06	; 6
    13e2:	0c 94 14 0d 	jmp	0x1a28	; 0x1a28 <__epilogue_restores__+0x18>

000013e6 <__ltsf2>:
    13e6:	a8 e1       	ldi	r26, 0x18	; 24
    13e8:	b0 e0       	ldi	r27, 0x00	; 0
    13ea:	e9 ef       	ldi	r30, 0xF9	; 249
    13ec:	f9 e0       	ldi	r31, 0x09	; 9
    13ee:	0c 94 f8 0c 	jmp	0x19f0	; 0x19f0 <__prologue_saves__+0x18>
    13f2:	69 83       	std	Y+1, r22	; 0x01
    13f4:	7a 83       	std	Y+2, r23	; 0x02
    13f6:	8b 83       	std	Y+3, r24	; 0x03
    13f8:	9c 83       	std	Y+4, r25	; 0x04
    13fa:	2d 83       	std	Y+5, r18	; 0x05
    13fc:	3e 83       	std	Y+6, r19	; 0x06
    13fe:	4f 83       	std	Y+7, r20	; 0x07
    1400:	58 87       	std	Y+8, r21	; 0x08
    1402:	89 e0       	ldi	r24, 0x09	; 9
    1404:	e8 2e       	mov	r14, r24
    1406:	f1 2c       	mov	r15, r1
    1408:	ec 0e       	add	r14, r28
    140a:	fd 1e       	adc	r15, r29
    140c:	ce 01       	movw	r24, r28
    140e:	01 96       	adiw	r24, 0x01	; 1
    1410:	b7 01       	movw	r22, r14
    1412:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <__unpack_f>
    1416:	8e 01       	movw	r16, r28
    1418:	0f 5e       	subi	r16, 0xEF	; 239
    141a:	1f 4f       	sbci	r17, 0xFF	; 255
    141c:	ce 01       	movw	r24, r28
    141e:	05 96       	adiw	r24, 0x05	; 5
    1420:	b8 01       	movw	r22, r16
    1422:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <__unpack_f>
    1426:	89 85       	ldd	r24, Y+9	; 0x09
    1428:	82 30       	cpi	r24, 0x02	; 2
    142a:	40 f0       	brcs	.+16     	; 0x143c <__ltsf2+0x56>
    142c:	89 89       	ldd	r24, Y+17	; 0x11
    142e:	82 30       	cpi	r24, 0x02	; 2
    1430:	28 f0       	brcs	.+10     	; 0x143c <__ltsf2+0x56>
    1432:	c7 01       	movw	r24, r14
    1434:	b8 01       	movw	r22, r16
    1436:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <__fpcmp_parts_f>
    143a:	01 c0       	rjmp	.+2      	; 0x143e <__ltsf2+0x58>
    143c:	81 e0       	ldi	r24, 0x01	; 1
    143e:	68 96       	adiw	r28, 0x18	; 24
    1440:	e6 e0       	ldi	r30, 0x06	; 6
    1442:	0c 94 14 0d 	jmp	0x1a28	; 0x1a28 <__epilogue_restores__+0x18>

00001446 <__floatsisf>:
    1446:	a8 e0       	ldi	r26, 0x08	; 8
    1448:	b0 e0       	ldi	r27, 0x00	; 0
    144a:	e9 e2       	ldi	r30, 0x29	; 41
    144c:	fa e0       	ldi	r31, 0x0A	; 10
    144e:	0c 94 f5 0c 	jmp	0x19ea	; 0x19ea <__prologue_saves__+0x12>
    1452:	9b 01       	movw	r18, r22
    1454:	ac 01       	movw	r20, r24
    1456:	83 e0       	ldi	r24, 0x03	; 3
    1458:	89 83       	std	Y+1, r24	; 0x01
    145a:	da 01       	movw	r26, r20
    145c:	c9 01       	movw	r24, r18
    145e:	88 27       	eor	r24, r24
    1460:	b7 fd       	sbrc	r27, 7
    1462:	83 95       	inc	r24
    1464:	99 27       	eor	r25, r25
    1466:	aa 27       	eor	r26, r26
    1468:	bb 27       	eor	r27, r27
    146a:	b8 2e       	mov	r11, r24
    146c:	21 15       	cp	r18, r1
    146e:	31 05       	cpc	r19, r1
    1470:	41 05       	cpc	r20, r1
    1472:	51 05       	cpc	r21, r1
    1474:	19 f4       	brne	.+6      	; 0x147c <__floatsisf+0x36>
    1476:	82 e0       	ldi	r24, 0x02	; 2
    1478:	89 83       	std	Y+1, r24	; 0x01
    147a:	3a c0       	rjmp	.+116    	; 0x14f0 <__floatsisf+0xaa>
    147c:	88 23       	and	r24, r24
    147e:	a9 f0       	breq	.+42     	; 0x14aa <__floatsisf+0x64>
    1480:	20 30       	cpi	r18, 0x00	; 0
    1482:	80 e0       	ldi	r24, 0x00	; 0
    1484:	38 07       	cpc	r19, r24
    1486:	80 e0       	ldi	r24, 0x00	; 0
    1488:	48 07       	cpc	r20, r24
    148a:	80 e8       	ldi	r24, 0x80	; 128
    148c:	58 07       	cpc	r21, r24
    148e:	29 f4       	brne	.+10     	; 0x149a <__floatsisf+0x54>
    1490:	60 e0       	ldi	r22, 0x00	; 0
    1492:	70 e0       	ldi	r23, 0x00	; 0
    1494:	80 e0       	ldi	r24, 0x00	; 0
    1496:	9f ec       	ldi	r25, 0xCF	; 207
    1498:	30 c0       	rjmp	.+96     	; 0x14fa <__floatsisf+0xb4>
    149a:	ee 24       	eor	r14, r14
    149c:	ff 24       	eor	r15, r15
    149e:	87 01       	movw	r16, r14
    14a0:	e2 1a       	sub	r14, r18
    14a2:	f3 0a       	sbc	r15, r19
    14a4:	04 0b       	sbc	r16, r20
    14a6:	15 0b       	sbc	r17, r21
    14a8:	02 c0       	rjmp	.+4      	; 0x14ae <__floatsisf+0x68>
    14aa:	79 01       	movw	r14, r18
    14ac:	8a 01       	movw	r16, r20
    14ae:	8e e1       	ldi	r24, 0x1E	; 30
    14b0:	c8 2e       	mov	r12, r24
    14b2:	d1 2c       	mov	r13, r1
    14b4:	dc 82       	std	Y+4, r13	; 0x04
    14b6:	cb 82       	std	Y+3, r12	; 0x03
    14b8:	ed 82       	std	Y+5, r14	; 0x05
    14ba:	fe 82       	std	Y+6, r15	; 0x06
    14bc:	0f 83       	std	Y+7, r16	; 0x07
    14be:	18 87       	std	Y+8, r17	; 0x08
    14c0:	c8 01       	movw	r24, r16
    14c2:	b7 01       	movw	r22, r14
    14c4:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <__clzsi2>
    14c8:	01 97       	sbiw	r24, 0x01	; 1
    14ca:	18 16       	cp	r1, r24
    14cc:	19 06       	cpc	r1, r25
    14ce:	84 f4       	brge	.+32     	; 0x14f0 <__floatsisf+0xaa>
    14d0:	08 2e       	mov	r0, r24
    14d2:	04 c0       	rjmp	.+8      	; 0x14dc <__floatsisf+0x96>
    14d4:	ee 0c       	add	r14, r14
    14d6:	ff 1c       	adc	r15, r15
    14d8:	00 1f       	adc	r16, r16
    14da:	11 1f       	adc	r17, r17
    14dc:	0a 94       	dec	r0
    14de:	d2 f7       	brpl	.-12     	; 0x14d4 <__floatsisf+0x8e>
    14e0:	ed 82       	std	Y+5, r14	; 0x05
    14e2:	fe 82       	std	Y+6, r15	; 0x06
    14e4:	0f 83       	std	Y+7, r16	; 0x07
    14e6:	18 87       	std	Y+8, r17	; 0x08
    14e8:	c8 1a       	sub	r12, r24
    14ea:	d9 0a       	sbc	r13, r25
    14ec:	dc 82       	std	Y+4, r13	; 0x04
    14ee:	cb 82       	std	Y+3, r12	; 0x03
    14f0:	ba 82       	std	Y+2, r11	; 0x02
    14f2:	ce 01       	movw	r24, r28
    14f4:	01 96       	adiw	r24, 0x01	; 1
    14f6:	0e 94 24 0b 	call	0x1648	; 0x1648 <__pack_f>
    14fa:	28 96       	adiw	r28, 0x08	; 8
    14fc:	e9 e0       	ldi	r30, 0x09	; 9
    14fe:	0c 94 11 0d 	jmp	0x1a22	; 0x1a22 <__epilogue_restores__+0x12>

00001502 <__fixsfsi>:
    1502:	ac e0       	ldi	r26, 0x0C	; 12
    1504:	b0 e0       	ldi	r27, 0x00	; 0
    1506:	e7 e8       	ldi	r30, 0x87	; 135
    1508:	fa e0       	ldi	r31, 0x0A	; 10
    150a:	0c 94 fc 0c 	jmp	0x19f8	; 0x19f8 <__prologue_saves__+0x20>
    150e:	69 83       	std	Y+1, r22	; 0x01
    1510:	7a 83       	std	Y+2, r23	; 0x02
    1512:	8b 83       	std	Y+3, r24	; 0x03
    1514:	9c 83       	std	Y+4, r25	; 0x04
    1516:	ce 01       	movw	r24, r28
    1518:	01 96       	adiw	r24, 0x01	; 1
    151a:	be 01       	movw	r22, r28
    151c:	6b 5f       	subi	r22, 0xFB	; 251
    151e:	7f 4f       	sbci	r23, 0xFF	; 255
    1520:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <__unpack_f>
    1524:	8d 81       	ldd	r24, Y+5	; 0x05
    1526:	82 30       	cpi	r24, 0x02	; 2
    1528:	61 f1       	breq	.+88     	; 0x1582 <__fixsfsi+0x80>
    152a:	82 30       	cpi	r24, 0x02	; 2
    152c:	50 f1       	brcs	.+84     	; 0x1582 <__fixsfsi+0x80>
    152e:	84 30       	cpi	r24, 0x04	; 4
    1530:	21 f4       	brne	.+8      	; 0x153a <__fixsfsi+0x38>
    1532:	8e 81       	ldd	r24, Y+6	; 0x06
    1534:	88 23       	and	r24, r24
    1536:	51 f1       	breq	.+84     	; 0x158c <__fixsfsi+0x8a>
    1538:	2e c0       	rjmp	.+92     	; 0x1596 <__fixsfsi+0x94>
    153a:	2f 81       	ldd	r18, Y+7	; 0x07
    153c:	38 85       	ldd	r19, Y+8	; 0x08
    153e:	37 fd       	sbrc	r19, 7
    1540:	20 c0       	rjmp	.+64     	; 0x1582 <__fixsfsi+0x80>
    1542:	6e 81       	ldd	r22, Y+6	; 0x06
    1544:	2f 31       	cpi	r18, 0x1F	; 31
    1546:	31 05       	cpc	r19, r1
    1548:	1c f0       	brlt	.+6      	; 0x1550 <__fixsfsi+0x4e>
    154a:	66 23       	and	r22, r22
    154c:	f9 f0       	breq	.+62     	; 0x158c <__fixsfsi+0x8a>
    154e:	23 c0       	rjmp	.+70     	; 0x1596 <__fixsfsi+0x94>
    1550:	8e e1       	ldi	r24, 0x1E	; 30
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	82 1b       	sub	r24, r18
    1556:	93 0b       	sbc	r25, r19
    1558:	29 85       	ldd	r18, Y+9	; 0x09
    155a:	3a 85       	ldd	r19, Y+10	; 0x0a
    155c:	4b 85       	ldd	r20, Y+11	; 0x0b
    155e:	5c 85       	ldd	r21, Y+12	; 0x0c
    1560:	04 c0       	rjmp	.+8      	; 0x156a <__fixsfsi+0x68>
    1562:	56 95       	lsr	r21
    1564:	47 95       	ror	r20
    1566:	37 95       	ror	r19
    1568:	27 95       	ror	r18
    156a:	8a 95       	dec	r24
    156c:	d2 f7       	brpl	.-12     	; 0x1562 <__fixsfsi+0x60>
    156e:	66 23       	and	r22, r22
    1570:	b1 f0       	breq	.+44     	; 0x159e <__fixsfsi+0x9c>
    1572:	50 95       	com	r21
    1574:	40 95       	com	r20
    1576:	30 95       	com	r19
    1578:	21 95       	neg	r18
    157a:	3f 4f       	sbci	r19, 0xFF	; 255
    157c:	4f 4f       	sbci	r20, 0xFF	; 255
    157e:	5f 4f       	sbci	r21, 0xFF	; 255
    1580:	0e c0       	rjmp	.+28     	; 0x159e <__fixsfsi+0x9c>
    1582:	20 e0       	ldi	r18, 0x00	; 0
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	40 e0       	ldi	r20, 0x00	; 0
    1588:	50 e0       	ldi	r21, 0x00	; 0
    158a:	09 c0       	rjmp	.+18     	; 0x159e <__fixsfsi+0x9c>
    158c:	2f ef       	ldi	r18, 0xFF	; 255
    158e:	3f ef       	ldi	r19, 0xFF	; 255
    1590:	4f ef       	ldi	r20, 0xFF	; 255
    1592:	5f e7       	ldi	r21, 0x7F	; 127
    1594:	04 c0       	rjmp	.+8      	; 0x159e <__fixsfsi+0x9c>
    1596:	20 e0       	ldi	r18, 0x00	; 0
    1598:	30 e0       	ldi	r19, 0x00	; 0
    159a:	40 e0       	ldi	r20, 0x00	; 0
    159c:	50 e8       	ldi	r21, 0x80	; 128
    159e:	b9 01       	movw	r22, r18
    15a0:	ca 01       	movw	r24, r20
    15a2:	2c 96       	adiw	r28, 0x0c	; 12
    15a4:	e2 e0       	ldi	r30, 0x02	; 2
    15a6:	0c 94 18 0d 	jmp	0x1a30	; 0x1a30 <__epilogue_restores__+0x20>

000015aa <__clzsi2>:
    15aa:	ef 92       	push	r14
    15ac:	ff 92       	push	r15
    15ae:	0f 93       	push	r16
    15b0:	1f 93       	push	r17
    15b2:	7b 01       	movw	r14, r22
    15b4:	8c 01       	movw	r16, r24
    15b6:	80 e0       	ldi	r24, 0x00	; 0
    15b8:	e8 16       	cp	r14, r24
    15ba:	80 e0       	ldi	r24, 0x00	; 0
    15bc:	f8 06       	cpc	r15, r24
    15be:	81 e0       	ldi	r24, 0x01	; 1
    15c0:	08 07       	cpc	r16, r24
    15c2:	80 e0       	ldi	r24, 0x00	; 0
    15c4:	18 07       	cpc	r17, r24
    15c6:	88 f4       	brcc	.+34     	; 0x15ea <__clzsi2+0x40>
    15c8:	8f ef       	ldi	r24, 0xFF	; 255
    15ca:	e8 16       	cp	r14, r24
    15cc:	f1 04       	cpc	r15, r1
    15ce:	01 05       	cpc	r16, r1
    15d0:	11 05       	cpc	r17, r1
    15d2:	31 f0       	breq	.+12     	; 0x15e0 <__clzsi2+0x36>
    15d4:	28 f0       	brcs	.+10     	; 0x15e0 <__clzsi2+0x36>
    15d6:	88 e0       	ldi	r24, 0x08	; 8
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	a0 e0       	ldi	r26, 0x00	; 0
    15dc:	b0 e0       	ldi	r27, 0x00	; 0
    15de:	17 c0       	rjmp	.+46     	; 0x160e <__clzsi2+0x64>
    15e0:	80 e0       	ldi	r24, 0x00	; 0
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	a0 e0       	ldi	r26, 0x00	; 0
    15e6:	b0 e0       	ldi	r27, 0x00	; 0
    15e8:	12 c0       	rjmp	.+36     	; 0x160e <__clzsi2+0x64>
    15ea:	80 e0       	ldi	r24, 0x00	; 0
    15ec:	e8 16       	cp	r14, r24
    15ee:	80 e0       	ldi	r24, 0x00	; 0
    15f0:	f8 06       	cpc	r15, r24
    15f2:	80 e0       	ldi	r24, 0x00	; 0
    15f4:	08 07       	cpc	r16, r24
    15f6:	81 e0       	ldi	r24, 0x01	; 1
    15f8:	18 07       	cpc	r17, r24
    15fa:	28 f0       	brcs	.+10     	; 0x1606 <__clzsi2+0x5c>
    15fc:	88 e1       	ldi	r24, 0x18	; 24
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	a0 e0       	ldi	r26, 0x00	; 0
    1602:	b0 e0       	ldi	r27, 0x00	; 0
    1604:	04 c0       	rjmp	.+8      	; 0x160e <__clzsi2+0x64>
    1606:	80 e1       	ldi	r24, 0x10	; 16
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	a0 e0       	ldi	r26, 0x00	; 0
    160c:	b0 e0       	ldi	r27, 0x00	; 0
    160e:	20 e2       	ldi	r18, 0x20	; 32
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	40 e0       	ldi	r20, 0x00	; 0
    1614:	50 e0       	ldi	r21, 0x00	; 0
    1616:	28 1b       	sub	r18, r24
    1618:	39 0b       	sbc	r19, r25
    161a:	4a 0b       	sbc	r20, r26
    161c:	5b 0b       	sbc	r21, r27
    161e:	04 c0       	rjmp	.+8      	; 0x1628 <__clzsi2+0x7e>
    1620:	16 95       	lsr	r17
    1622:	07 95       	ror	r16
    1624:	f7 94       	ror	r15
    1626:	e7 94       	ror	r14
    1628:	8a 95       	dec	r24
    162a:	d2 f7       	brpl	.-12     	; 0x1620 <__clzsi2+0x76>
    162c:	f7 01       	movw	r30, r14
    162e:	e8 5f       	subi	r30, 0xF8	; 248
    1630:	fd 4f       	sbci	r31, 0xFD	; 253
    1632:	80 81       	ld	r24, Z
    1634:	28 1b       	sub	r18, r24
    1636:	31 09       	sbc	r19, r1
    1638:	41 09       	sbc	r20, r1
    163a:	51 09       	sbc	r21, r1
    163c:	c9 01       	movw	r24, r18
    163e:	1f 91       	pop	r17
    1640:	0f 91       	pop	r16
    1642:	ff 90       	pop	r15
    1644:	ef 90       	pop	r14
    1646:	08 95       	ret

00001648 <__pack_f>:
    1648:	df 92       	push	r13
    164a:	ef 92       	push	r14
    164c:	ff 92       	push	r15
    164e:	0f 93       	push	r16
    1650:	1f 93       	push	r17
    1652:	fc 01       	movw	r30, r24
    1654:	e4 80       	ldd	r14, Z+4	; 0x04
    1656:	f5 80       	ldd	r15, Z+5	; 0x05
    1658:	06 81       	ldd	r16, Z+6	; 0x06
    165a:	17 81       	ldd	r17, Z+7	; 0x07
    165c:	d1 80       	ldd	r13, Z+1	; 0x01
    165e:	80 81       	ld	r24, Z
    1660:	82 30       	cpi	r24, 0x02	; 2
    1662:	48 f4       	brcc	.+18     	; 0x1676 <__pack_f+0x2e>
    1664:	80 e0       	ldi	r24, 0x00	; 0
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	a0 e1       	ldi	r26, 0x10	; 16
    166a:	b0 e0       	ldi	r27, 0x00	; 0
    166c:	e8 2a       	or	r14, r24
    166e:	f9 2a       	or	r15, r25
    1670:	0a 2b       	or	r16, r26
    1672:	1b 2b       	or	r17, r27
    1674:	a5 c0       	rjmp	.+330    	; 0x17c0 <__pack_f+0x178>
    1676:	84 30       	cpi	r24, 0x04	; 4
    1678:	09 f4       	brne	.+2      	; 0x167c <__pack_f+0x34>
    167a:	9f c0       	rjmp	.+318    	; 0x17ba <__pack_f+0x172>
    167c:	82 30       	cpi	r24, 0x02	; 2
    167e:	21 f4       	brne	.+8      	; 0x1688 <__pack_f+0x40>
    1680:	ee 24       	eor	r14, r14
    1682:	ff 24       	eor	r15, r15
    1684:	87 01       	movw	r16, r14
    1686:	05 c0       	rjmp	.+10     	; 0x1692 <__pack_f+0x4a>
    1688:	e1 14       	cp	r14, r1
    168a:	f1 04       	cpc	r15, r1
    168c:	01 05       	cpc	r16, r1
    168e:	11 05       	cpc	r17, r1
    1690:	19 f4       	brne	.+6      	; 0x1698 <__pack_f+0x50>
    1692:	e0 e0       	ldi	r30, 0x00	; 0
    1694:	f0 e0       	ldi	r31, 0x00	; 0
    1696:	96 c0       	rjmp	.+300    	; 0x17c4 <__pack_f+0x17c>
    1698:	62 81       	ldd	r22, Z+2	; 0x02
    169a:	73 81       	ldd	r23, Z+3	; 0x03
    169c:	9f ef       	ldi	r25, 0xFF	; 255
    169e:	62 38       	cpi	r22, 0x82	; 130
    16a0:	79 07       	cpc	r23, r25
    16a2:	0c f0       	brlt	.+2      	; 0x16a6 <__pack_f+0x5e>
    16a4:	5b c0       	rjmp	.+182    	; 0x175c <__pack_f+0x114>
    16a6:	22 e8       	ldi	r18, 0x82	; 130
    16a8:	3f ef       	ldi	r19, 0xFF	; 255
    16aa:	26 1b       	sub	r18, r22
    16ac:	37 0b       	sbc	r19, r23
    16ae:	2a 31       	cpi	r18, 0x1A	; 26
    16b0:	31 05       	cpc	r19, r1
    16b2:	2c f0       	brlt	.+10     	; 0x16be <__pack_f+0x76>
    16b4:	20 e0       	ldi	r18, 0x00	; 0
    16b6:	30 e0       	ldi	r19, 0x00	; 0
    16b8:	40 e0       	ldi	r20, 0x00	; 0
    16ba:	50 e0       	ldi	r21, 0x00	; 0
    16bc:	2a c0       	rjmp	.+84     	; 0x1712 <__pack_f+0xca>
    16be:	b8 01       	movw	r22, r16
    16c0:	a7 01       	movw	r20, r14
    16c2:	02 2e       	mov	r0, r18
    16c4:	04 c0       	rjmp	.+8      	; 0x16ce <__pack_f+0x86>
    16c6:	76 95       	lsr	r23
    16c8:	67 95       	ror	r22
    16ca:	57 95       	ror	r21
    16cc:	47 95       	ror	r20
    16ce:	0a 94       	dec	r0
    16d0:	d2 f7       	brpl	.-12     	; 0x16c6 <__pack_f+0x7e>
    16d2:	81 e0       	ldi	r24, 0x01	; 1
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	a0 e0       	ldi	r26, 0x00	; 0
    16d8:	b0 e0       	ldi	r27, 0x00	; 0
    16da:	04 c0       	rjmp	.+8      	; 0x16e4 <__pack_f+0x9c>
    16dc:	88 0f       	add	r24, r24
    16de:	99 1f       	adc	r25, r25
    16e0:	aa 1f       	adc	r26, r26
    16e2:	bb 1f       	adc	r27, r27
    16e4:	2a 95       	dec	r18
    16e6:	d2 f7       	brpl	.-12     	; 0x16dc <__pack_f+0x94>
    16e8:	01 97       	sbiw	r24, 0x01	; 1
    16ea:	a1 09       	sbc	r26, r1
    16ec:	b1 09       	sbc	r27, r1
    16ee:	8e 21       	and	r24, r14
    16f0:	9f 21       	and	r25, r15
    16f2:	a0 23       	and	r26, r16
    16f4:	b1 23       	and	r27, r17
    16f6:	00 97       	sbiw	r24, 0x00	; 0
    16f8:	a1 05       	cpc	r26, r1
    16fa:	b1 05       	cpc	r27, r1
    16fc:	21 f0       	breq	.+8      	; 0x1706 <__pack_f+0xbe>
    16fe:	81 e0       	ldi	r24, 0x01	; 1
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	a0 e0       	ldi	r26, 0x00	; 0
    1704:	b0 e0       	ldi	r27, 0x00	; 0
    1706:	9a 01       	movw	r18, r20
    1708:	ab 01       	movw	r20, r22
    170a:	28 2b       	or	r18, r24
    170c:	39 2b       	or	r19, r25
    170e:	4a 2b       	or	r20, r26
    1710:	5b 2b       	or	r21, r27
    1712:	da 01       	movw	r26, r20
    1714:	c9 01       	movw	r24, r18
    1716:	8f 77       	andi	r24, 0x7F	; 127
    1718:	90 70       	andi	r25, 0x00	; 0
    171a:	a0 70       	andi	r26, 0x00	; 0
    171c:	b0 70       	andi	r27, 0x00	; 0
    171e:	80 34       	cpi	r24, 0x40	; 64
    1720:	91 05       	cpc	r25, r1
    1722:	a1 05       	cpc	r26, r1
    1724:	b1 05       	cpc	r27, r1
    1726:	39 f4       	brne	.+14     	; 0x1736 <__pack_f+0xee>
    1728:	27 ff       	sbrs	r18, 7
    172a:	09 c0       	rjmp	.+18     	; 0x173e <__pack_f+0xf6>
    172c:	20 5c       	subi	r18, 0xC0	; 192
    172e:	3f 4f       	sbci	r19, 0xFF	; 255
    1730:	4f 4f       	sbci	r20, 0xFF	; 255
    1732:	5f 4f       	sbci	r21, 0xFF	; 255
    1734:	04 c0       	rjmp	.+8      	; 0x173e <__pack_f+0xf6>
    1736:	21 5c       	subi	r18, 0xC1	; 193
    1738:	3f 4f       	sbci	r19, 0xFF	; 255
    173a:	4f 4f       	sbci	r20, 0xFF	; 255
    173c:	5f 4f       	sbci	r21, 0xFF	; 255
    173e:	e0 e0       	ldi	r30, 0x00	; 0
    1740:	f0 e0       	ldi	r31, 0x00	; 0
    1742:	20 30       	cpi	r18, 0x00	; 0
    1744:	a0 e0       	ldi	r26, 0x00	; 0
    1746:	3a 07       	cpc	r19, r26
    1748:	a0 e0       	ldi	r26, 0x00	; 0
    174a:	4a 07       	cpc	r20, r26
    174c:	a0 e4       	ldi	r26, 0x40	; 64
    174e:	5a 07       	cpc	r21, r26
    1750:	10 f0       	brcs	.+4      	; 0x1756 <__pack_f+0x10e>
    1752:	e1 e0       	ldi	r30, 0x01	; 1
    1754:	f0 e0       	ldi	r31, 0x00	; 0
    1756:	79 01       	movw	r14, r18
    1758:	8a 01       	movw	r16, r20
    175a:	27 c0       	rjmp	.+78     	; 0x17aa <__pack_f+0x162>
    175c:	60 38       	cpi	r22, 0x80	; 128
    175e:	71 05       	cpc	r23, r1
    1760:	64 f5       	brge	.+88     	; 0x17ba <__pack_f+0x172>
    1762:	fb 01       	movw	r30, r22
    1764:	e1 58       	subi	r30, 0x81	; 129
    1766:	ff 4f       	sbci	r31, 0xFF	; 255
    1768:	d8 01       	movw	r26, r16
    176a:	c7 01       	movw	r24, r14
    176c:	8f 77       	andi	r24, 0x7F	; 127
    176e:	90 70       	andi	r25, 0x00	; 0
    1770:	a0 70       	andi	r26, 0x00	; 0
    1772:	b0 70       	andi	r27, 0x00	; 0
    1774:	80 34       	cpi	r24, 0x40	; 64
    1776:	91 05       	cpc	r25, r1
    1778:	a1 05       	cpc	r26, r1
    177a:	b1 05       	cpc	r27, r1
    177c:	39 f4       	brne	.+14     	; 0x178c <__pack_f+0x144>
    177e:	e7 fe       	sbrs	r14, 7
    1780:	0d c0       	rjmp	.+26     	; 0x179c <__pack_f+0x154>
    1782:	80 e4       	ldi	r24, 0x40	; 64
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	a0 e0       	ldi	r26, 0x00	; 0
    1788:	b0 e0       	ldi	r27, 0x00	; 0
    178a:	04 c0       	rjmp	.+8      	; 0x1794 <__pack_f+0x14c>
    178c:	8f e3       	ldi	r24, 0x3F	; 63
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	a0 e0       	ldi	r26, 0x00	; 0
    1792:	b0 e0       	ldi	r27, 0x00	; 0
    1794:	e8 0e       	add	r14, r24
    1796:	f9 1e       	adc	r15, r25
    1798:	0a 1f       	adc	r16, r26
    179a:	1b 1f       	adc	r17, r27
    179c:	17 ff       	sbrs	r17, 7
    179e:	05 c0       	rjmp	.+10     	; 0x17aa <__pack_f+0x162>
    17a0:	16 95       	lsr	r17
    17a2:	07 95       	ror	r16
    17a4:	f7 94       	ror	r15
    17a6:	e7 94       	ror	r14
    17a8:	31 96       	adiw	r30, 0x01	; 1
    17aa:	87 e0       	ldi	r24, 0x07	; 7
    17ac:	16 95       	lsr	r17
    17ae:	07 95       	ror	r16
    17b0:	f7 94       	ror	r15
    17b2:	e7 94       	ror	r14
    17b4:	8a 95       	dec	r24
    17b6:	d1 f7       	brne	.-12     	; 0x17ac <__pack_f+0x164>
    17b8:	05 c0       	rjmp	.+10     	; 0x17c4 <__pack_f+0x17c>
    17ba:	ee 24       	eor	r14, r14
    17bc:	ff 24       	eor	r15, r15
    17be:	87 01       	movw	r16, r14
    17c0:	ef ef       	ldi	r30, 0xFF	; 255
    17c2:	f0 e0       	ldi	r31, 0x00	; 0
    17c4:	6e 2f       	mov	r22, r30
    17c6:	67 95       	ror	r22
    17c8:	66 27       	eor	r22, r22
    17ca:	67 95       	ror	r22
    17cc:	90 2f       	mov	r25, r16
    17ce:	9f 77       	andi	r25, 0x7F	; 127
    17d0:	d7 94       	ror	r13
    17d2:	dd 24       	eor	r13, r13
    17d4:	d7 94       	ror	r13
    17d6:	8e 2f       	mov	r24, r30
    17d8:	86 95       	lsr	r24
    17da:	49 2f       	mov	r20, r25
    17dc:	46 2b       	or	r20, r22
    17de:	58 2f       	mov	r21, r24
    17e0:	5d 29       	or	r21, r13
    17e2:	b7 01       	movw	r22, r14
    17e4:	ca 01       	movw	r24, r20
    17e6:	1f 91       	pop	r17
    17e8:	0f 91       	pop	r16
    17ea:	ff 90       	pop	r15
    17ec:	ef 90       	pop	r14
    17ee:	df 90       	pop	r13
    17f0:	08 95       	ret

000017f2 <__unpack_f>:
    17f2:	fc 01       	movw	r30, r24
    17f4:	db 01       	movw	r26, r22
    17f6:	40 81       	ld	r20, Z
    17f8:	51 81       	ldd	r21, Z+1	; 0x01
    17fa:	22 81       	ldd	r18, Z+2	; 0x02
    17fc:	62 2f       	mov	r22, r18
    17fe:	6f 77       	andi	r22, 0x7F	; 127
    1800:	70 e0       	ldi	r23, 0x00	; 0
    1802:	22 1f       	adc	r18, r18
    1804:	22 27       	eor	r18, r18
    1806:	22 1f       	adc	r18, r18
    1808:	93 81       	ldd	r25, Z+3	; 0x03
    180a:	89 2f       	mov	r24, r25
    180c:	88 0f       	add	r24, r24
    180e:	82 2b       	or	r24, r18
    1810:	28 2f       	mov	r18, r24
    1812:	30 e0       	ldi	r19, 0x00	; 0
    1814:	99 1f       	adc	r25, r25
    1816:	99 27       	eor	r25, r25
    1818:	99 1f       	adc	r25, r25
    181a:	11 96       	adiw	r26, 0x01	; 1
    181c:	9c 93       	st	X, r25
    181e:	11 97       	sbiw	r26, 0x01	; 1
    1820:	21 15       	cp	r18, r1
    1822:	31 05       	cpc	r19, r1
    1824:	a9 f5       	brne	.+106    	; 0x1890 <__unpack_f+0x9e>
    1826:	41 15       	cp	r20, r1
    1828:	51 05       	cpc	r21, r1
    182a:	61 05       	cpc	r22, r1
    182c:	71 05       	cpc	r23, r1
    182e:	11 f4       	brne	.+4      	; 0x1834 <__unpack_f+0x42>
    1830:	82 e0       	ldi	r24, 0x02	; 2
    1832:	37 c0       	rjmp	.+110    	; 0x18a2 <__unpack_f+0xb0>
    1834:	82 e8       	ldi	r24, 0x82	; 130
    1836:	9f ef       	ldi	r25, 0xFF	; 255
    1838:	13 96       	adiw	r26, 0x03	; 3
    183a:	9c 93       	st	X, r25
    183c:	8e 93       	st	-X, r24
    183e:	12 97       	sbiw	r26, 0x02	; 2
    1840:	9a 01       	movw	r18, r20
    1842:	ab 01       	movw	r20, r22
    1844:	67 e0       	ldi	r22, 0x07	; 7
    1846:	22 0f       	add	r18, r18
    1848:	33 1f       	adc	r19, r19
    184a:	44 1f       	adc	r20, r20
    184c:	55 1f       	adc	r21, r21
    184e:	6a 95       	dec	r22
    1850:	d1 f7       	brne	.-12     	; 0x1846 <__unpack_f+0x54>
    1852:	83 e0       	ldi	r24, 0x03	; 3
    1854:	8c 93       	st	X, r24
    1856:	0d c0       	rjmp	.+26     	; 0x1872 <__unpack_f+0x80>
    1858:	22 0f       	add	r18, r18
    185a:	33 1f       	adc	r19, r19
    185c:	44 1f       	adc	r20, r20
    185e:	55 1f       	adc	r21, r21
    1860:	12 96       	adiw	r26, 0x02	; 2
    1862:	8d 91       	ld	r24, X+
    1864:	9c 91       	ld	r25, X
    1866:	13 97       	sbiw	r26, 0x03	; 3
    1868:	01 97       	sbiw	r24, 0x01	; 1
    186a:	13 96       	adiw	r26, 0x03	; 3
    186c:	9c 93       	st	X, r25
    186e:	8e 93       	st	-X, r24
    1870:	12 97       	sbiw	r26, 0x02	; 2
    1872:	20 30       	cpi	r18, 0x00	; 0
    1874:	80 e0       	ldi	r24, 0x00	; 0
    1876:	38 07       	cpc	r19, r24
    1878:	80 e0       	ldi	r24, 0x00	; 0
    187a:	48 07       	cpc	r20, r24
    187c:	80 e4       	ldi	r24, 0x40	; 64
    187e:	58 07       	cpc	r21, r24
    1880:	58 f3       	brcs	.-42     	; 0x1858 <__unpack_f+0x66>
    1882:	14 96       	adiw	r26, 0x04	; 4
    1884:	2d 93       	st	X+, r18
    1886:	3d 93       	st	X+, r19
    1888:	4d 93       	st	X+, r20
    188a:	5c 93       	st	X, r21
    188c:	17 97       	sbiw	r26, 0x07	; 7
    188e:	08 95       	ret
    1890:	2f 3f       	cpi	r18, 0xFF	; 255
    1892:	31 05       	cpc	r19, r1
    1894:	79 f4       	brne	.+30     	; 0x18b4 <__unpack_f+0xc2>
    1896:	41 15       	cp	r20, r1
    1898:	51 05       	cpc	r21, r1
    189a:	61 05       	cpc	r22, r1
    189c:	71 05       	cpc	r23, r1
    189e:	19 f4       	brne	.+6      	; 0x18a6 <__unpack_f+0xb4>
    18a0:	84 e0       	ldi	r24, 0x04	; 4
    18a2:	8c 93       	st	X, r24
    18a4:	08 95       	ret
    18a6:	64 ff       	sbrs	r22, 4
    18a8:	03 c0       	rjmp	.+6      	; 0x18b0 <__unpack_f+0xbe>
    18aa:	81 e0       	ldi	r24, 0x01	; 1
    18ac:	8c 93       	st	X, r24
    18ae:	12 c0       	rjmp	.+36     	; 0x18d4 <__unpack_f+0xe2>
    18b0:	1c 92       	st	X, r1
    18b2:	10 c0       	rjmp	.+32     	; 0x18d4 <__unpack_f+0xe2>
    18b4:	2f 57       	subi	r18, 0x7F	; 127
    18b6:	30 40       	sbci	r19, 0x00	; 0
    18b8:	13 96       	adiw	r26, 0x03	; 3
    18ba:	3c 93       	st	X, r19
    18bc:	2e 93       	st	-X, r18
    18be:	12 97       	sbiw	r26, 0x02	; 2
    18c0:	83 e0       	ldi	r24, 0x03	; 3
    18c2:	8c 93       	st	X, r24
    18c4:	87 e0       	ldi	r24, 0x07	; 7
    18c6:	44 0f       	add	r20, r20
    18c8:	55 1f       	adc	r21, r21
    18ca:	66 1f       	adc	r22, r22
    18cc:	77 1f       	adc	r23, r23
    18ce:	8a 95       	dec	r24
    18d0:	d1 f7       	brne	.-12     	; 0x18c6 <__unpack_f+0xd4>
    18d2:	70 64       	ori	r23, 0x40	; 64
    18d4:	14 96       	adiw	r26, 0x04	; 4
    18d6:	4d 93       	st	X+, r20
    18d8:	5d 93       	st	X+, r21
    18da:	6d 93       	st	X+, r22
    18dc:	7c 93       	st	X, r23
    18de:	17 97       	sbiw	r26, 0x07	; 7
    18e0:	08 95       	ret

000018e2 <__fpcmp_parts_f>:
    18e2:	1f 93       	push	r17
    18e4:	dc 01       	movw	r26, r24
    18e6:	fb 01       	movw	r30, r22
    18e8:	9c 91       	ld	r25, X
    18ea:	92 30       	cpi	r25, 0x02	; 2
    18ec:	08 f4       	brcc	.+2      	; 0x18f0 <__fpcmp_parts_f+0xe>
    18ee:	47 c0       	rjmp	.+142    	; 0x197e <__fpcmp_parts_f+0x9c>
    18f0:	80 81       	ld	r24, Z
    18f2:	82 30       	cpi	r24, 0x02	; 2
    18f4:	08 f4       	brcc	.+2      	; 0x18f8 <__fpcmp_parts_f+0x16>
    18f6:	43 c0       	rjmp	.+134    	; 0x197e <__fpcmp_parts_f+0x9c>
    18f8:	94 30       	cpi	r25, 0x04	; 4
    18fa:	51 f4       	brne	.+20     	; 0x1910 <__fpcmp_parts_f+0x2e>
    18fc:	11 96       	adiw	r26, 0x01	; 1
    18fe:	1c 91       	ld	r17, X
    1900:	84 30       	cpi	r24, 0x04	; 4
    1902:	99 f5       	brne	.+102    	; 0x196a <__fpcmp_parts_f+0x88>
    1904:	81 81       	ldd	r24, Z+1	; 0x01
    1906:	68 2f       	mov	r22, r24
    1908:	70 e0       	ldi	r23, 0x00	; 0
    190a:	61 1b       	sub	r22, r17
    190c:	71 09       	sbc	r23, r1
    190e:	3f c0       	rjmp	.+126    	; 0x198e <__fpcmp_parts_f+0xac>
    1910:	84 30       	cpi	r24, 0x04	; 4
    1912:	21 f0       	breq	.+8      	; 0x191c <__fpcmp_parts_f+0x3a>
    1914:	92 30       	cpi	r25, 0x02	; 2
    1916:	31 f4       	brne	.+12     	; 0x1924 <__fpcmp_parts_f+0x42>
    1918:	82 30       	cpi	r24, 0x02	; 2
    191a:	b9 f1       	breq	.+110    	; 0x198a <__fpcmp_parts_f+0xa8>
    191c:	81 81       	ldd	r24, Z+1	; 0x01
    191e:	88 23       	and	r24, r24
    1920:	89 f1       	breq	.+98     	; 0x1984 <__fpcmp_parts_f+0xa2>
    1922:	2d c0       	rjmp	.+90     	; 0x197e <__fpcmp_parts_f+0x9c>
    1924:	11 96       	adiw	r26, 0x01	; 1
    1926:	1c 91       	ld	r17, X
    1928:	11 97       	sbiw	r26, 0x01	; 1
    192a:	82 30       	cpi	r24, 0x02	; 2
    192c:	f1 f0       	breq	.+60     	; 0x196a <__fpcmp_parts_f+0x88>
    192e:	81 81       	ldd	r24, Z+1	; 0x01
    1930:	18 17       	cp	r17, r24
    1932:	d9 f4       	brne	.+54     	; 0x196a <__fpcmp_parts_f+0x88>
    1934:	12 96       	adiw	r26, 0x02	; 2
    1936:	2d 91       	ld	r18, X+
    1938:	3c 91       	ld	r19, X
    193a:	13 97       	sbiw	r26, 0x03	; 3
    193c:	82 81       	ldd	r24, Z+2	; 0x02
    193e:	93 81       	ldd	r25, Z+3	; 0x03
    1940:	82 17       	cp	r24, r18
    1942:	93 07       	cpc	r25, r19
    1944:	94 f0       	brlt	.+36     	; 0x196a <__fpcmp_parts_f+0x88>
    1946:	28 17       	cp	r18, r24
    1948:	39 07       	cpc	r19, r25
    194a:	bc f0       	brlt	.+46     	; 0x197a <__fpcmp_parts_f+0x98>
    194c:	14 96       	adiw	r26, 0x04	; 4
    194e:	8d 91       	ld	r24, X+
    1950:	9d 91       	ld	r25, X+
    1952:	0d 90       	ld	r0, X+
    1954:	bc 91       	ld	r27, X
    1956:	a0 2d       	mov	r26, r0
    1958:	24 81       	ldd	r18, Z+4	; 0x04
    195a:	35 81       	ldd	r19, Z+5	; 0x05
    195c:	46 81       	ldd	r20, Z+6	; 0x06
    195e:	57 81       	ldd	r21, Z+7	; 0x07
    1960:	28 17       	cp	r18, r24
    1962:	39 07       	cpc	r19, r25
    1964:	4a 07       	cpc	r20, r26
    1966:	5b 07       	cpc	r21, r27
    1968:	18 f4       	brcc	.+6      	; 0x1970 <__fpcmp_parts_f+0x8e>
    196a:	11 23       	and	r17, r17
    196c:	41 f0       	breq	.+16     	; 0x197e <__fpcmp_parts_f+0x9c>
    196e:	0a c0       	rjmp	.+20     	; 0x1984 <__fpcmp_parts_f+0xa2>
    1970:	82 17       	cp	r24, r18
    1972:	93 07       	cpc	r25, r19
    1974:	a4 07       	cpc	r26, r20
    1976:	b5 07       	cpc	r27, r21
    1978:	40 f4       	brcc	.+16     	; 0x198a <__fpcmp_parts_f+0xa8>
    197a:	11 23       	and	r17, r17
    197c:	19 f0       	breq	.+6      	; 0x1984 <__fpcmp_parts_f+0xa2>
    197e:	61 e0       	ldi	r22, 0x01	; 1
    1980:	70 e0       	ldi	r23, 0x00	; 0
    1982:	05 c0       	rjmp	.+10     	; 0x198e <__fpcmp_parts_f+0xac>
    1984:	6f ef       	ldi	r22, 0xFF	; 255
    1986:	7f ef       	ldi	r23, 0xFF	; 255
    1988:	02 c0       	rjmp	.+4      	; 0x198e <__fpcmp_parts_f+0xac>
    198a:	60 e0       	ldi	r22, 0x00	; 0
    198c:	70 e0       	ldi	r23, 0x00	; 0
    198e:	cb 01       	movw	r24, r22
    1990:	1f 91       	pop	r17
    1992:	08 95       	ret

00001994 <__udivmodsi4>:
    1994:	a1 e2       	ldi	r26, 0x21	; 33
    1996:	1a 2e       	mov	r1, r26
    1998:	aa 1b       	sub	r26, r26
    199a:	bb 1b       	sub	r27, r27
    199c:	fd 01       	movw	r30, r26
    199e:	0d c0       	rjmp	.+26     	; 0x19ba <__udivmodsi4_ep>

000019a0 <__udivmodsi4_loop>:
    19a0:	aa 1f       	adc	r26, r26
    19a2:	bb 1f       	adc	r27, r27
    19a4:	ee 1f       	adc	r30, r30
    19a6:	ff 1f       	adc	r31, r31
    19a8:	a2 17       	cp	r26, r18
    19aa:	b3 07       	cpc	r27, r19
    19ac:	e4 07       	cpc	r30, r20
    19ae:	f5 07       	cpc	r31, r21
    19b0:	20 f0       	brcs	.+8      	; 0x19ba <__udivmodsi4_ep>
    19b2:	a2 1b       	sub	r26, r18
    19b4:	b3 0b       	sbc	r27, r19
    19b6:	e4 0b       	sbc	r30, r20
    19b8:	f5 0b       	sbc	r31, r21

000019ba <__udivmodsi4_ep>:
    19ba:	66 1f       	adc	r22, r22
    19bc:	77 1f       	adc	r23, r23
    19be:	88 1f       	adc	r24, r24
    19c0:	99 1f       	adc	r25, r25
    19c2:	1a 94       	dec	r1
    19c4:	69 f7       	brne	.-38     	; 0x19a0 <__udivmodsi4_loop>
    19c6:	60 95       	com	r22
    19c8:	70 95       	com	r23
    19ca:	80 95       	com	r24
    19cc:	90 95       	com	r25
    19ce:	9b 01       	movw	r18, r22
    19d0:	ac 01       	movw	r20, r24
    19d2:	bd 01       	movw	r22, r26
    19d4:	cf 01       	movw	r24, r30
    19d6:	08 95       	ret

000019d8 <__prologue_saves__>:
    19d8:	2f 92       	push	r2
    19da:	3f 92       	push	r3
    19dc:	4f 92       	push	r4
    19de:	5f 92       	push	r5
    19e0:	6f 92       	push	r6
    19e2:	7f 92       	push	r7
    19e4:	8f 92       	push	r8
    19e6:	9f 92       	push	r9
    19e8:	af 92       	push	r10
    19ea:	bf 92       	push	r11
    19ec:	cf 92       	push	r12
    19ee:	df 92       	push	r13
    19f0:	ef 92       	push	r14
    19f2:	ff 92       	push	r15
    19f4:	0f 93       	push	r16
    19f6:	1f 93       	push	r17
    19f8:	cf 93       	push	r28
    19fa:	df 93       	push	r29
    19fc:	cd b7       	in	r28, 0x3d	; 61
    19fe:	de b7       	in	r29, 0x3e	; 62
    1a00:	ca 1b       	sub	r28, r26
    1a02:	db 0b       	sbc	r29, r27
    1a04:	0f b6       	in	r0, 0x3f	; 63
    1a06:	f8 94       	cli
    1a08:	de bf       	out	0x3e, r29	; 62
    1a0a:	0f be       	out	0x3f, r0	; 63
    1a0c:	cd bf       	out	0x3d, r28	; 61
    1a0e:	19 94       	eijmp

00001a10 <__epilogue_restores__>:
    1a10:	2a 88       	ldd	r2, Y+18	; 0x12
    1a12:	39 88       	ldd	r3, Y+17	; 0x11
    1a14:	48 88       	ldd	r4, Y+16	; 0x10
    1a16:	5f 84       	ldd	r5, Y+15	; 0x0f
    1a18:	6e 84       	ldd	r6, Y+14	; 0x0e
    1a1a:	7d 84       	ldd	r7, Y+13	; 0x0d
    1a1c:	8c 84       	ldd	r8, Y+12	; 0x0c
    1a1e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1a20:	aa 84       	ldd	r10, Y+10	; 0x0a
    1a22:	b9 84       	ldd	r11, Y+9	; 0x09
    1a24:	c8 84       	ldd	r12, Y+8	; 0x08
    1a26:	df 80       	ldd	r13, Y+7	; 0x07
    1a28:	ee 80       	ldd	r14, Y+6	; 0x06
    1a2a:	fd 80       	ldd	r15, Y+5	; 0x05
    1a2c:	0c 81       	ldd	r16, Y+4	; 0x04
    1a2e:	1b 81       	ldd	r17, Y+3	; 0x03
    1a30:	aa 81       	ldd	r26, Y+2	; 0x02
    1a32:	b9 81       	ldd	r27, Y+1	; 0x01
    1a34:	ce 0f       	add	r28, r30
    1a36:	d1 1d       	adc	r29, r1
    1a38:	0f b6       	in	r0, 0x3f	; 63
    1a3a:	f8 94       	cli
    1a3c:	de bf       	out	0x3e, r29	; 62
    1a3e:	0f be       	out	0x3f, r0	; 63
    1a40:	cd bf       	out	0x3d, r28	; 61
    1a42:	ed 01       	movw	r28, r26
    1a44:	08 95       	ret

00001a46 <_exit>:
    1a46:	f8 94       	cli

00001a48 <__stop_program>:
    1a48:	ff cf       	rjmp	.-2      	; 0x1a48 <__stop_program>
