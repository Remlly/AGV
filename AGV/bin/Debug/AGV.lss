
bin\Debug\AGV.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800200  0000133a  000013ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000133a  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800208  00800208  000013f6  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  000013f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 00000180  00000000  00000000  000013f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000002a2  00000000  00000000  00001579  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000212b  00000000  00000000  0000181b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000114b  00000000  00000000  00003946  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001294  00000000  00000000  00004a91  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000250  00000000  00000000  00005d28  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000472  00000000  00000000  00005f78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  000063ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00006bb8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 82 02 	jmp	0x504	; 0x504 <__vector_17>
      48:	0c 94 bc 02 	jmp	0x578	; 0x578 <__vector_18>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ea e3       	ldi	r30, 0x3A	; 58
      fc:	f3 e1       	ldi	r31, 0x13	; 19
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a8 30       	cpi	r26, 0x08	; 8
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	12 e0       	ldi	r17, 0x02	; 2
     110:	a8 e0       	ldi	r26, 0x08	; 8
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a4 31       	cpi	r26, 0x14	; 20
     11a:	b1 07       	cpc	r27, r17
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 5d 02 	call	0x4ba	; 0x4ba <main>
     122:	0c 94 9b 09 	jmp	0x1336	; 0x1336 <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <construct_stepper>:

volatile struct stepper stepper1;
volatile struct stepper stepper2;

void construct_stepper(struct stepper *stepper, uint8_t step_pin, uint8_t dir_pin)
{
     12a:	df 93       	push	r29
     12c:	cf 93       	push	r28
     12e:	00 d0       	rcall	.+0      	; 0x130 <construct_stepper+0x6>
     130:	0f 92       	push	r0
     132:	cd b7       	in	r28, 0x3d	; 61
     134:	de b7       	in	r29, 0x3e	; 62
     136:	9a 83       	std	Y+2, r25	; 0x02
     138:	89 83       	std	Y+1, r24	; 0x01
     13a:	6b 83       	std	Y+3, r22	; 0x03
     13c:	4c 83       	std	Y+4, r20	; 0x04
    stepper->speed = 125;
     13e:	e9 81       	ldd	r30, Y+1	; 0x01
     140:	fa 81       	ldd	r31, Y+2	; 0x02
     142:	8d e7       	ldi	r24, 0x7D	; 125
     144:	80 83       	st	Z, r24
    stepper->steps = 0;
     146:	e9 81       	ldd	r30, Y+1	; 0x01
     148:	fa 81       	ldd	r31, Y+2	; 0x02
     14a:	15 82       	std	Z+5, r1	; 0x05
     14c:	14 82       	std	Z+4, r1	; 0x04
    stepper->step_pin = step_pin;
     14e:	e9 81       	ldd	r30, Y+1	; 0x01
     150:	fa 81       	ldd	r31, Y+2	; 0x02
     152:	8b 81       	ldd	r24, Y+3	; 0x03
     154:	82 83       	std	Z+2, r24	; 0x02
    stepper->dir_pin = dir_pin;
     156:	e9 81       	ldd	r30, Y+1	; 0x01
     158:	fa 81       	ldd	r31, Y+2	; 0x02
     15a:	8c 81       	ldd	r24, Y+4	; 0x04
     15c:	83 83       	std	Z+3, r24	; 0x03
    stepper->direction = 0;
     15e:	e9 81       	ldd	r30, Y+1	; 0x01
     160:	fa 81       	ldd	r31, Y+2	; 0x02
     162:	11 82       	std	Z+1, r1	; 0x01
}
     164:	0f 90       	pop	r0
     166:	0f 90       	pop	r0
     168:	0f 90       	pop	r0
     16a:	0f 90       	pop	r0
     16c:	cf 91       	pop	r28
     16e:	df 91       	pop	r29
     170:	08 95       	ret

00000172 <initialize_steppers>:

void initialize_steppers()
{
     172:	df 93       	push	r29
     174:	cf 93       	push	r28
     176:	0f 92       	push	r0
     178:	cd b7       	in	r28, 0x3d	; 61
     17a:	de b7       	in	r29, 0x3e	; 62
    stepper_DDR |= 0xFF;//init all pins in bank C
     17c:	e7 e0       	ldi	r30, 0x07	; 7
     17e:	f1 e0       	ldi	r31, 0x01	; 1
     180:	80 81       	ld	r24, Z
     182:	e7 e0       	ldi	r30, 0x07	; 7
     184:	f1 e0       	ldi	r31, 0x01	; 1
     186:	8f ef       	ldi	r24, 0xFF	; 255
     188:	80 83       	st	Z, r24
}
     18a:	0f 90       	pop	r0
     18c:	cf 91       	pop	r28
     18e:	df 91       	pop	r29
     190:	08 95       	ret

00000192 <set_dir>:

void set_dir(struct stepper *stepper)
{
     192:	df 93       	push	r29
     194:	cf 93       	push	r28
     196:	00 d0       	rcall	.+0      	; 0x198 <set_dir+0x6>
     198:	0f 92       	push	r0
     19a:	cd b7       	in	r28, 0x3d	; 61
     19c:	de b7       	in	r29, 0x3e	; 62
     19e:	9a 83       	std	Y+2, r25	; 0x02
     1a0:	89 83       	std	Y+1, r24	; 0x01
    switch(stepper->direction)
     1a2:	e9 81       	ldd	r30, Y+1	; 0x01
     1a4:	fa 81       	ldd	r31, Y+2	; 0x02
     1a6:	81 81       	ldd	r24, Z+1	; 0x01
     1a8:	28 2f       	mov	r18, r24
     1aa:	30 e0       	ldi	r19, 0x00	; 0
     1ac:	3c 83       	std	Y+4, r19	; 0x04
     1ae:	2b 83       	std	Y+3, r18	; 0x03
     1b0:	8b 81       	ldd	r24, Y+3	; 0x03
     1b2:	9c 81       	ldd	r25, Y+4	; 0x04
     1b4:	81 30       	cpi	r24, 0x01	; 1
     1b6:	91 05       	cpc	r25, r1
     1b8:	31 f0       	breq	.+12     	; 0x1c6 <set_dir+0x34>
     1ba:	2b 81       	ldd	r18, Y+3	; 0x03
     1bc:	3c 81       	ldd	r19, Y+4	; 0x04
     1be:	22 30       	cpi	r18, 0x02	; 2
     1c0:	31 05       	cpc	r19, r1
     1c2:	b9 f0       	breq	.+46     	; 0x1f2 <set_dir+0x60>
     1c4:	2c c0       	rjmp	.+88     	; 0x21e <set_dir+0x8c>
    {
    case 1:
        stepper_port |= (1<<stepper->step_pin);
     1c6:	a8 e0       	ldi	r26, 0x08	; 8
     1c8:	b1 e0       	ldi	r27, 0x01	; 1
     1ca:	e8 e0       	ldi	r30, 0x08	; 8
     1cc:	f1 e0       	ldi	r31, 0x01	; 1
     1ce:	80 81       	ld	r24, Z
     1d0:	48 2f       	mov	r20, r24
     1d2:	e9 81       	ldd	r30, Y+1	; 0x01
     1d4:	fa 81       	ldd	r31, Y+2	; 0x02
     1d6:	82 81       	ldd	r24, Z+2	; 0x02
     1d8:	28 2f       	mov	r18, r24
     1da:	30 e0       	ldi	r19, 0x00	; 0
     1dc:	81 e0       	ldi	r24, 0x01	; 1
     1de:	90 e0       	ldi	r25, 0x00	; 0
     1e0:	02 2e       	mov	r0, r18
     1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <set_dir+0x56>
     1e4:	88 0f       	add	r24, r24
     1e6:	99 1f       	adc	r25, r25
     1e8:	0a 94       	dec	r0
     1ea:	e2 f7       	brpl	.-8      	; 0x1e4 <set_dir+0x52>
     1ec:	84 2b       	or	r24, r20
     1ee:	8c 93       	st	X, r24
     1f0:	16 c0       	rjmp	.+44     	; 0x21e <set_dir+0x8c>
        break;
    case 2:
        stepper_port &= ~(1<<stepper->step_pin);
     1f2:	a8 e0       	ldi	r26, 0x08	; 8
     1f4:	b1 e0       	ldi	r27, 0x01	; 1
     1f6:	e8 e0       	ldi	r30, 0x08	; 8
     1f8:	f1 e0       	ldi	r31, 0x01	; 1
     1fa:	80 81       	ld	r24, Z
     1fc:	48 2f       	mov	r20, r24
     1fe:	e9 81       	ldd	r30, Y+1	; 0x01
     200:	fa 81       	ldd	r31, Y+2	; 0x02
     202:	82 81       	ldd	r24, Z+2	; 0x02
     204:	28 2f       	mov	r18, r24
     206:	30 e0       	ldi	r19, 0x00	; 0
     208:	81 e0       	ldi	r24, 0x01	; 1
     20a:	90 e0       	ldi	r25, 0x00	; 0
     20c:	02 2e       	mov	r0, r18
     20e:	02 c0       	rjmp	.+4      	; 0x214 <set_dir+0x82>
     210:	88 0f       	add	r24, r24
     212:	99 1f       	adc	r25, r25
     214:	0a 94       	dec	r0
     216:	e2 f7       	brpl	.-8      	; 0x210 <set_dir+0x7e>
     218:	80 95       	com	r24
     21a:	84 23       	and	r24, r20
     21c:	8c 93       	st	X, r24
        break;
    default:
        break;
    }
}
     21e:	0f 90       	pop	r0
     220:	0f 90       	pop	r0
     222:	0f 90       	pop	r0
     224:	0f 90       	pop	r0
     226:	cf 91       	pop	r28
     228:	df 91       	pop	r29
     22a:	08 95       	ret

0000022c <step>:

void step(struct stepper *stepper)
{
     22c:	df 93       	push	r29
     22e:	cf 93       	push	r28
     230:	cd b7       	in	r28, 0x3d	; 61
     232:	de b7       	in	r29, 0x3e	; 62
     234:	6e 97       	sbiw	r28, 0x1e	; 30
     236:	0f b6       	in	r0, 0x3f	; 63
     238:	f8 94       	cli
     23a:	de bf       	out	0x3e, r29	; 62
     23c:	0f be       	out	0x3f, r0	; 63
     23e:	cd bf       	out	0x3d, r28	; 61
     240:	9e 8f       	std	Y+30, r25	; 0x1e
     242:	8d 8f       	std	Y+29, r24	; 0x1d
    stepper->steps++;
     244:	ed 8d       	ldd	r30, Y+29	; 0x1d
     246:	fe 8d       	ldd	r31, Y+30	; 0x1e
     248:	84 81       	ldd	r24, Z+4	; 0x04
     24a:	95 81       	ldd	r25, Z+5	; 0x05
     24c:	01 96       	adiw	r24, 0x01	; 1
     24e:	ed 8d       	ldd	r30, Y+29	; 0x1d
     250:	fe 8d       	ldd	r31, Y+30	; 0x1e
     252:	95 83       	std	Z+5, r25	; 0x05
     254:	84 83       	std	Z+4, r24	; 0x04
    stepper_port |= (1<<stepper->step_pin);
     256:	a8 e0       	ldi	r26, 0x08	; 8
     258:	b1 e0       	ldi	r27, 0x01	; 1
     25a:	e8 e0       	ldi	r30, 0x08	; 8
     25c:	f1 e0       	ldi	r31, 0x01	; 1
     25e:	80 81       	ld	r24, Z
     260:	48 2f       	mov	r20, r24
     262:	ed 8d       	ldd	r30, Y+29	; 0x1d
     264:	fe 8d       	ldd	r31, Y+30	; 0x1e
     266:	82 81       	ldd	r24, Z+2	; 0x02
     268:	28 2f       	mov	r18, r24
     26a:	30 e0       	ldi	r19, 0x00	; 0
     26c:	81 e0       	ldi	r24, 0x01	; 1
     26e:	90 e0       	ldi	r25, 0x00	; 0
     270:	02 c0       	rjmp	.+4      	; 0x276 <step+0x4a>
     272:	88 0f       	add	r24, r24
     274:	99 1f       	adc	r25, r25
     276:	2a 95       	dec	r18
     278:	e2 f7       	brpl	.-8      	; 0x272 <step+0x46>
     27a:	84 2b       	or	r24, r20
     27c:	8c 93       	st	X, r24
     27e:	80 e0       	ldi	r24, 0x00	; 0
     280:	90 e0       	ldi	r25, 0x00	; 0
     282:	a0 e2       	ldi	r26, 0x20	; 32
     284:	b1 e4       	ldi	r27, 0x41	; 65
     286:	89 8f       	std	Y+25, r24	; 0x19
     288:	9a 8f       	std	Y+26, r25	; 0x1a
     28a:	ab 8f       	std	Y+27, r26	; 0x1b
     28c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     28e:	69 8d       	ldd	r22, Y+25	; 0x19
     290:	7a 8d       	ldd	r23, Y+26	; 0x1a
     292:	8b 8d       	ldd	r24, Y+27	; 0x1b
     294:	9c 8d       	ldd	r25, Y+28	; 0x1c
     296:	20 e0       	ldi	r18, 0x00	; 0
     298:	30 e0       	ldi	r19, 0x00	; 0
     29a:	4a e7       	ldi	r20, 0x7A	; 122
     29c:	55 e4       	ldi	r21, 0x45	; 69
     29e:	0e 94 be 05 	call	0xb7c	; 0xb7c <__mulsf3>
     2a2:	dc 01       	movw	r26, r24
     2a4:	cb 01       	movw	r24, r22
     2a6:	8d 8b       	std	Y+21, r24	; 0x15
     2a8:	9e 8b       	std	Y+22, r25	; 0x16
     2aa:	af 8b       	std	Y+23, r26	; 0x17
     2ac:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     2ae:	6d 89       	ldd	r22, Y+21	; 0x15
     2b0:	7e 89       	ldd	r23, Y+22	; 0x16
     2b2:	8f 89       	ldd	r24, Y+23	; 0x17
     2b4:	98 8d       	ldd	r25, Y+24	; 0x18
     2b6:	20 e0       	ldi	r18, 0x00	; 0
     2b8:	30 e0       	ldi	r19, 0x00	; 0
     2ba:	40 e8       	ldi	r20, 0x80	; 128
     2bc:	5f e3       	ldi	r21, 0x3F	; 63
     2be:	0e 94 18 07 	call	0xe30	; 0xe30 <__ltsf2>
     2c2:	88 23       	and	r24, r24
     2c4:	2c f4       	brge	.+10     	; 0x2d0 <step+0xa4>
		__ticks = 1;
     2c6:	81 e0       	ldi	r24, 0x01	; 1
     2c8:	90 e0       	ldi	r25, 0x00	; 0
     2ca:	9c 8b       	std	Y+20, r25	; 0x14
     2cc:	8b 8b       	std	Y+19, r24	; 0x13
     2ce:	3f c0       	rjmp	.+126    	; 0x34e <step+0x122>
	else if (__tmp > 65535)
     2d0:	6d 89       	ldd	r22, Y+21	; 0x15
     2d2:	7e 89       	ldd	r23, Y+22	; 0x16
     2d4:	8f 89       	ldd	r24, Y+23	; 0x17
     2d6:	98 8d       	ldd	r25, Y+24	; 0x18
     2d8:	20 e0       	ldi	r18, 0x00	; 0
     2da:	3f ef       	ldi	r19, 0xFF	; 255
     2dc:	4f e7       	ldi	r20, 0x7F	; 127
     2de:	57 e4       	ldi	r21, 0x47	; 71
     2e0:	0e 94 b8 06 	call	0xd70	; 0xd70 <__gtsf2>
     2e4:	18 16       	cp	r1, r24
     2e6:	4c f5       	brge	.+82     	; 0x33a <step+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     2e8:	69 8d       	ldd	r22, Y+25	; 0x19
     2ea:	7a 8d       	ldd	r23, Y+26	; 0x1a
     2ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
     2ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
     2f0:	20 e0       	ldi	r18, 0x00	; 0
     2f2:	30 e0       	ldi	r19, 0x00	; 0
     2f4:	40 e2       	ldi	r20, 0x20	; 32
     2f6:	51 e4       	ldi	r21, 0x41	; 65
     2f8:	0e 94 be 05 	call	0xb7c	; 0xb7c <__mulsf3>
     2fc:	dc 01       	movw	r26, r24
     2fe:	cb 01       	movw	r24, r22
     300:	bc 01       	movw	r22, r24
     302:	cd 01       	movw	r24, r26
     304:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <__fixunssfsi>
     308:	dc 01       	movw	r26, r24
     30a:	cb 01       	movw	r24, r22
     30c:	9c 8b       	std	Y+20, r25	; 0x14
     30e:	8b 8b       	std	Y+19, r24	; 0x13
     310:	0f c0       	rjmp	.+30     	; 0x330 <step+0x104>
     312:	80 e9       	ldi	r24, 0x90	; 144
     314:	91 e0       	ldi	r25, 0x01	; 1
     316:	9a 8b       	std	Y+18, r25	; 0x12
     318:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     31a:	89 89       	ldd	r24, Y+17	; 0x11
     31c:	9a 89       	ldd	r25, Y+18	; 0x12
     31e:	01 97       	sbiw	r24, 0x01	; 1
     320:	f1 f7       	brne	.-4      	; 0x31e <step+0xf2>
     322:	9a 8b       	std	Y+18, r25	; 0x12
     324:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     326:	8b 89       	ldd	r24, Y+19	; 0x13
     328:	9c 89       	ldd	r25, Y+20	; 0x14
     32a:	01 97       	sbiw	r24, 0x01	; 1
     32c:	9c 8b       	std	Y+20, r25	; 0x14
     32e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     330:	8b 89       	ldd	r24, Y+19	; 0x13
     332:	9c 89       	ldd	r25, Y+20	; 0x14
     334:	00 97       	sbiw	r24, 0x00	; 0
     336:	69 f7       	brne	.-38     	; 0x312 <step+0xe6>
     338:	14 c0       	rjmp	.+40     	; 0x362 <step+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     33a:	6d 89       	ldd	r22, Y+21	; 0x15
     33c:	7e 89       	ldd	r23, Y+22	; 0x16
     33e:	8f 89       	ldd	r24, Y+23	; 0x17
     340:	98 8d       	ldd	r25, Y+24	; 0x18
     342:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <__fixunssfsi>
     346:	dc 01       	movw	r26, r24
     348:	cb 01       	movw	r24, r22
     34a:	9c 8b       	std	Y+20, r25	; 0x14
     34c:	8b 8b       	std	Y+19, r24	; 0x13
     34e:	8b 89       	ldd	r24, Y+19	; 0x13
     350:	9c 89       	ldd	r25, Y+20	; 0x14
     352:	98 8b       	std	Y+16, r25	; 0x10
     354:	8f 87       	std	Y+15, r24	; 0x0f
     356:	8f 85       	ldd	r24, Y+15	; 0x0f
     358:	98 89       	ldd	r25, Y+16	; 0x10
     35a:	01 97       	sbiw	r24, 0x01	; 1
     35c:	f1 f7       	brne	.-4      	; 0x35a <step+0x12e>
     35e:	98 8b       	std	Y+16, r25	; 0x10
     360:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(10);
    stepper_port &= ~(1<<stepper->step_pin);
     362:	a8 e0       	ldi	r26, 0x08	; 8
     364:	b1 e0       	ldi	r27, 0x01	; 1
     366:	e8 e0       	ldi	r30, 0x08	; 8
     368:	f1 e0       	ldi	r31, 0x01	; 1
     36a:	80 81       	ld	r24, Z
     36c:	48 2f       	mov	r20, r24
     36e:	ed 8d       	ldd	r30, Y+29	; 0x1d
     370:	fe 8d       	ldd	r31, Y+30	; 0x1e
     372:	82 81       	ldd	r24, Z+2	; 0x02
     374:	28 2f       	mov	r18, r24
     376:	30 e0       	ldi	r19, 0x00	; 0
     378:	81 e0       	ldi	r24, 0x01	; 1
     37a:	90 e0       	ldi	r25, 0x00	; 0
     37c:	02 c0       	rjmp	.+4      	; 0x382 <step+0x156>
     37e:	88 0f       	add	r24, r24
     380:	99 1f       	adc	r25, r25
     382:	2a 95       	dec	r18
     384:	e2 f7       	brpl	.-8      	; 0x37e <step+0x152>
     386:	80 95       	com	r24
     388:	84 23       	and	r24, r20
     38a:	8c 93       	st	X, r24
     38c:	80 e0       	ldi	r24, 0x00	; 0
     38e:	90 e0       	ldi	r25, 0x00	; 0
     390:	a0 e2       	ldi	r26, 0x20	; 32
     392:	b1 e4       	ldi	r27, 0x41	; 65
     394:	8b 87       	std	Y+11, r24	; 0x0b
     396:	9c 87       	std	Y+12, r25	; 0x0c
     398:	ad 87       	std	Y+13, r26	; 0x0d
     39a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     39c:	6b 85       	ldd	r22, Y+11	; 0x0b
     39e:	7c 85       	ldd	r23, Y+12	; 0x0c
     3a0:	8d 85       	ldd	r24, Y+13	; 0x0d
     3a2:	9e 85       	ldd	r25, Y+14	; 0x0e
     3a4:	20 e0       	ldi	r18, 0x00	; 0
     3a6:	30 e0       	ldi	r19, 0x00	; 0
     3a8:	4a e7       	ldi	r20, 0x7A	; 122
     3aa:	55 e4       	ldi	r21, 0x45	; 69
     3ac:	0e 94 be 05 	call	0xb7c	; 0xb7c <__mulsf3>
     3b0:	dc 01       	movw	r26, r24
     3b2:	cb 01       	movw	r24, r22
     3b4:	8f 83       	std	Y+7, r24	; 0x07
     3b6:	98 87       	std	Y+8, r25	; 0x08
     3b8:	a9 87       	std	Y+9, r26	; 0x09
     3ba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     3bc:	6f 81       	ldd	r22, Y+7	; 0x07
     3be:	78 85       	ldd	r23, Y+8	; 0x08
     3c0:	89 85       	ldd	r24, Y+9	; 0x09
     3c2:	9a 85       	ldd	r25, Y+10	; 0x0a
     3c4:	20 e0       	ldi	r18, 0x00	; 0
     3c6:	30 e0       	ldi	r19, 0x00	; 0
     3c8:	40 e8       	ldi	r20, 0x80	; 128
     3ca:	5f e3       	ldi	r21, 0x3F	; 63
     3cc:	0e 94 18 07 	call	0xe30	; 0xe30 <__ltsf2>
     3d0:	88 23       	and	r24, r24
     3d2:	2c f4       	brge	.+10     	; 0x3de <step+0x1b2>
		__ticks = 1;
     3d4:	81 e0       	ldi	r24, 0x01	; 1
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	9e 83       	std	Y+6, r25	; 0x06
     3da:	8d 83       	std	Y+5, r24	; 0x05
     3dc:	3f c0       	rjmp	.+126    	; 0x45c <step+0x230>
	else if (__tmp > 65535)
     3de:	6f 81       	ldd	r22, Y+7	; 0x07
     3e0:	78 85       	ldd	r23, Y+8	; 0x08
     3e2:	89 85       	ldd	r24, Y+9	; 0x09
     3e4:	9a 85       	ldd	r25, Y+10	; 0x0a
     3e6:	20 e0       	ldi	r18, 0x00	; 0
     3e8:	3f ef       	ldi	r19, 0xFF	; 255
     3ea:	4f e7       	ldi	r20, 0x7F	; 127
     3ec:	57 e4       	ldi	r21, 0x47	; 71
     3ee:	0e 94 b8 06 	call	0xd70	; 0xd70 <__gtsf2>
     3f2:	18 16       	cp	r1, r24
     3f4:	4c f5       	brge	.+82     	; 0x448 <step+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     3f6:	6b 85       	ldd	r22, Y+11	; 0x0b
     3f8:	7c 85       	ldd	r23, Y+12	; 0x0c
     3fa:	8d 85       	ldd	r24, Y+13	; 0x0d
     3fc:	9e 85       	ldd	r25, Y+14	; 0x0e
     3fe:	20 e0       	ldi	r18, 0x00	; 0
     400:	30 e0       	ldi	r19, 0x00	; 0
     402:	40 e2       	ldi	r20, 0x20	; 32
     404:	51 e4       	ldi	r21, 0x41	; 65
     406:	0e 94 be 05 	call	0xb7c	; 0xb7c <__mulsf3>
     40a:	dc 01       	movw	r26, r24
     40c:	cb 01       	movw	r24, r22
     40e:	bc 01       	movw	r22, r24
     410:	cd 01       	movw	r24, r26
     412:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <__fixunssfsi>
     416:	dc 01       	movw	r26, r24
     418:	cb 01       	movw	r24, r22
     41a:	9e 83       	std	Y+6, r25	; 0x06
     41c:	8d 83       	std	Y+5, r24	; 0x05
     41e:	0f c0       	rjmp	.+30     	; 0x43e <step+0x212>
     420:	80 e9       	ldi	r24, 0x90	; 144
     422:	91 e0       	ldi	r25, 0x01	; 1
     424:	9c 83       	std	Y+4, r25	; 0x04
     426:	8b 83       	std	Y+3, r24	; 0x03
     428:	8b 81       	ldd	r24, Y+3	; 0x03
     42a:	9c 81       	ldd	r25, Y+4	; 0x04
     42c:	01 97       	sbiw	r24, 0x01	; 1
     42e:	f1 f7       	brne	.-4      	; 0x42c <step+0x200>
     430:	9c 83       	std	Y+4, r25	; 0x04
     432:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     434:	8d 81       	ldd	r24, Y+5	; 0x05
     436:	9e 81       	ldd	r25, Y+6	; 0x06
     438:	01 97       	sbiw	r24, 0x01	; 1
     43a:	9e 83       	std	Y+6, r25	; 0x06
     43c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     43e:	8d 81       	ldd	r24, Y+5	; 0x05
     440:	9e 81       	ldd	r25, Y+6	; 0x06
     442:	00 97       	sbiw	r24, 0x00	; 0
     444:	69 f7       	brne	.-38     	; 0x420 <step+0x1f4>
     446:	14 c0       	rjmp	.+40     	; 0x470 <step+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     448:	6f 81       	ldd	r22, Y+7	; 0x07
     44a:	78 85       	ldd	r23, Y+8	; 0x08
     44c:	89 85       	ldd	r24, Y+9	; 0x09
     44e:	9a 85       	ldd	r25, Y+10	; 0x0a
     450:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <__fixunssfsi>
     454:	dc 01       	movw	r26, r24
     456:	cb 01       	movw	r24, r22
     458:	9e 83       	std	Y+6, r25	; 0x06
     45a:	8d 83       	std	Y+5, r24	; 0x05
     45c:	8d 81       	ldd	r24, Y+5	; 0x05
     45e:	9e 81       	ldd	r25, Y+6	; 0x06
     460:	9a 83       	std	Y+2, r25	; 0x02
     462:	89 83       	std	Y+1, r24	; 0x01
     464:	89 81       	ldd	r24, Y+1	; 0x01
     466:	9a 81       	ldd	r25, Y+2	; 0x02
     468:	01 97       	sbiw	r24, 0x01	; 1
     46a:	f1 f7       	brne	.-4      	; 0x468 <step+0x23c>
     46c:	9a 83       	std	Y+2, r25	; 0x02
     46e:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(10);
}
     470:	6e 96       	adiw	r28, 0x1e	; 30
     472:	0f b6       	in	r0, 0x3f	; 63
     474:	f8 94       	cli
     476:	de bf       	out	0x3e, r29	; 62
     478:	0f be       	out	0x3f, r0	; 63
     47a:	cd bf       	out	0x3d, r28	; 61
     47c:	cf 91       	pop	r28
     47e:	df 91       	pop	r29
     480:	08 95       	ret

00000482 <init_stepper_timer>:



void init_stepper_timer()
{
     482:	df 93       	push	r29
     484:	cf 93       	push	r28
     486:	cd b7       	in	r28, 0x3d	; 61
     488:	de b7       	in	r29, 0x3e	; 62
    TCCR1A |= (0<<WGM11) | (1<<WGM10);
     48a:	a0 e8       	ldi	r26, 0x80	; 128
     48c:	b0 e0       	ldi	r27, 0x00	; 0
     48e:	e0 e8       	ldi	r30, 0x80	; 128
     490:	f0 e0       	ldi	r31, 0x00	; 0
     492:	80 81       	ld	r24, Z
     494:	81 60       	ori	r24, 0x01	; 1
     496:	8c 93       	st	X, r24
    TCCR1B |= (1<<WGM12) | (0<<WGM13) | (0<<CS12) | (1<<CS11) | (1<<CS10);
     498:	a1 e8       	ldi	r26, 0x81	; 129
     49a:	b0 e0       	ldi	r27, 0x00	; 0
     49c:	e1 e8       	ldi	r30, 0x81	; 129
     49e:	f0 e0       	ldi	r31, 0x00	; 0
     4a0:	80 81       	ld	r24, Z
     4a2:	8b 60       	ori	r24, 0x0B	; 11
     4a4:	8c 93       	st	X, r24
    TIMSK1 |= (1<<OCIE1A) | (1<<OCIE1B);
     4a6:	af e6       	ldi	r26, 0x6F	; 111
     4a8:	b0 e0       	ldi	r27, 0x00	; 0
     4aa:	ef e6       	ldi	r30, 0x6F	; 111
     4ac:	f0 e0       	ldi	r31, 0x00	; 0
     4ae:	80 81       	ld	r24, Z
     4b0:	86 60       	ori	r24, 0x06	; 6
     4b2:	8c 93       	st	X, r24

}
     4b4:	cf 91       	pop	r28
     4b6:	df 91       	pop	r29
     4b8:	08 95       	ret

000004ba <main>:

int main(void)
{
     4ba:	df 93       	push	r29
     4bc:	cf 93       	push	r28
     4be:	cd b7       	in	r28, 0x3d	; 61
     4c0:	de b7       	in	r29, 0x3e	; 62
    ///initializing stepper motors///


    construct_stepper(&stepper1, PK0, PK1);
     4c2:	8e e0       	ldi	r24, 0x0E	; 14
     4c4:	92 e0       	ldi	r25, 0x02	; 2
     4c6:	60 e0       	ldi	r22, 0x00	; 0
     4c8:	41 e0       	ldi	r20, 0x01	; 1
     4ca:	0e 94 95 00 	call	0x12a	; 0x12a <construct_stepper>
    construct_stepper(&stepper2, PK2, PK3);
     4ce:	88 e0       	ldi	r24, 0x08	; 8
     4d0:	92 e0       	ldi	r25, 0x02	; 2
     4d2:	62 e0       	ldi	r22, 0x02	; 2
     4d4:	43 e0       	ldi	r20, 0x03	; 3
     4d6:	0e 94 95 00 	call	0x12a	; 0x12a <construct_stepper>
    initialize_steppers();
     4da:	0e 94 b9 00 	call	0x172	; 0x172 <initialize_steppers>
    init_stepper_timer();
     4de:	0e 94 41 02 	call	0x482	; 0x482 <init_stepper_timer>
    //sei();

    ///initializing serial coms
    USART_Init(MYUBRR);
     4e2:	87 e6       	ldi	r24, 0x67	; 103
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	0e 94 f6 02 	call	0x5ec	; 0x5ec <USART_Init>

    set_dir(&stepper1);
     4ea:	8e e0       	ldi	r24, 0x0E	; 14
     4ec:	92 e0       	ldi	r25, 0x02	; 2
     4ee:	0e 94 c9 00 	call	0x192	; 0x192 <set_dir>
    set_dir(&stepper2);
     4f2:	88 e0       	ldi	r24, 0x08	; 8
     4f4:	92 e0       	ldi	r25, 0x02	; 2
     4f6:	0e 94 c9 00 	call	0x192	; 0x192 <set_dir>
    while(1)
    {
        step(&stepper1);
     4fa:	8e e0       	ldi	r24, 0x0E	; 14
     4fc:	92 e0       	ldi	r25, 0x02	; 2
     4fe:	0e 94 16 01 	call	0x22c	; 0x22c <step>
     502:	fb cf       	rjmp	.-10     	; 0x4fa <main+0x40>

00000504 <__vector_17>:

    return 0;
}

ISR(TIMER1_COMPA_vect)
{
     504:	1f 92       	push	r1
     506:	0f 92       	push	r0
     508:	0f b6       	in	r0, 0x3f	; 63
     50a:	0f 92       	push	r0
     50c:	00 90 5b 00 	lds	r0, 0x005B
     510:	0f 92       	push	r0
     512:	11 24       	eor	r1, r1
     514:	2f 93       	push	r18
     516:	3f 93       	push	r19
     518:	4f 93       	push	r20
     51a:	5f 93       	push	r21
     51c:	6f 93       	push	r22
     51e:	7f 93       	push	r23
     520:	8f 93       	push	r24
     522:	9f 93       	push	r25
     524:	af 93       	push	r26
     526:	bf 93       	push	r27
     528:	ef 93       	push	r30
     52a:	ff 93       	push	r31
     52c:	df 93       	push	r29
     52e:	cf 93       	push	r28
     530:	cd b7       	in	r28, 0x3d	; 61
     532:	de b7       	in	r29, 0x3e	; 62
    step(&stepper1);
     534:	8e e0       	ldi	r24, 0x0E	; 14
     536:	92 e0       	ldi	r25, 0x02	; 2
     538:	0e 94 16 01 	call	0x22c	; 0x22c <step>
    OCR1A = stepper1.speed;
     53c:	e8 e8       	ldi	r30, 0x88	; 136
     53e:	f0 e0       	ldi	r31, 0x00	; 0
     540:	80 91 0e 02 	lds	r24, 0x020E
     544:	88 2f       	mov	r24, r24
     546:	90 e0       	ldi	r25, 0x00	; 0
     548:	91 83       	std	Z+1, r25	; 0x01
     54a:	80 83       	st	Z, r24
}
     54c:	cf 91       	pop	r28
     54e:	df 91       	pop	r29
     550:	ff 91       	pop	r31
     552:	ef 91       	pop	r30
     554:	bf 91       	pop	r27
     556:	af 91       	pop	r26
     558:	9f 91       	pop	r25
     55a:	8f 91       	pop	r24
     55c:	7f 91       	pop	r23
     55e:	6f 91       	pop	r22
     560:	5f 91       	pop	r21
     562:	4f 91       	pop	r20
     564:	3f 91       	pop	r19
     566:	2f 91       	pop	r18
     568:	0f 90       	pop	r0
     56a:	00 92 5b 00 	sts	0x005B, r0
     56e:	0f 90       	pop	r0
     570:	0f be       	out	0x3f, r0	; 63
     572:	0f 90       	pop	r0
     574:	1f 90       	pop	r1
     576:	18 95       	reti

00000578 <__vector_18>:

ISR(TIMER1_COMPB_vect)
{
     578:	1f 92       	push	r1
     57a:	0f 92       	push	r0
     57c:	0f b6       	in	r0, 0x3f	; 63
     57e:	0f 92       	push	r0
     580:	00 90 5b 00 	lds	r0, 0x005B
     584:	0f 92       	push	r0
     586:	11 24       	eor	r1, r1
     588:	2f 93       	push	r18
     58a:	3f 93       	push	r19
     58c:	4f 93       	push	r20
     58e:	5f 93       	push	r21
     590:	6f 93       	push	r22
     592:	7f 93       	push	r23
     594:	8f 93       	push	r24
     596:	9f 93       	push	r25
     598:	af 93       	push	r26
     59a:	bf 93       	push	r27
     59c:	ef 93       	push	r30
     59e:	ff 93       	push	r31
     5a0:	df 93       	push	r29
     5a2:	cf 93       	push	r28
     5a4:	cd b7       	in	r28, 0x3d	; 61
     5a6:	de b7       	in	r29, 0x3e	; 62
    step(&stepper2);
     5a8:	88 e0       	ldi	r24, 0x08	; 8
     5aa:	92 e0       	ldi	r25, 0x02	; 2
     5ac:	0e 94 16 01 	call	0x22c	; 0x22c <step>
    OCR1B = stepper2.speed;
     5b0:	ea e8       	ldi	r30, 0x8A	; 138
     5b2:	f0 e0       	ldi	r31, 0x00	; 0
     5b4:	80 91 08 02 	lds	r24, 0x0208
     5b8:	88 2f       	mov	r24, r24
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	91 83       	std	Z+1, r25	; 0x01
     5be:	80 83       	st	Z, r24
}
     5c0:	cf 91       	pop	r28
     5c2:	df 91       	pop	r29
     5c4:	ff 91       	pop	r31
     5c6:	ef 91       	pop	r30
     5c8:	bf 91       	pop	r27
     5ca:	af 91       	pop	r26
     5cc:	9f 91       	pop	r25
     5ce:	8f 91       	pop	r24
     5d0:	7f 91       	pop	r23
     5d2:	6f 91       	pop	r22
     5d4:	5f 91       	pop	r21
     5d6:	4f 91       	pop	r20
     5d8:	3f 91       	pop	r19
     5da:	2f 91       	pop	r18
     5dc:	0f 90       	pop	r0
     5de:	00 92 5b 00 	sts	0x005B, r0
     5e2:	0f 90       	pop	r0
     5e4:	0f be       	out	0x3f, r0	; 63
     5e6:	0f 90       	pop	r0
     5e8:	1f 90       	pop	r1
     5ea:	18 95       	reti

000005ec <USART_Init>:

#include "serial.h"

void USART_Init( unsigned int ubrr)
{
     5ec:	df 93       	push	r29
     5ee:	cf 93       	push	r28
     5f0:	0f 92       	push	r0
     5f2:	0f 92       	push	r0
     5f4:	cd b7       	in	r28, 0x3d	; 61
     5f6:	de b7       	in	r29, 0x3e	; 62
     5f8:	9a 83       	std	Y+2, r25	; 0x02
     5fa:	89 83       	std	Y+1, r24	; 0x01
    /*Set baud rate */
    UBRR0H = (unsigned char)(ubrr>>8);
     5fc:	e5 ec       	ldi	r30, 0xC5	; 197
     5fe:	f0 e0       	ldi	r31, 0x00	; 0
     600:	89 81       	ldd	r24, Y+1	; 0x01
     602:	9a 81       	ldd	r25, Y+2	; 0x02
     604:	89 2f       	mov	r24, r25
     606:	99 27       	eor	r25, r25
     608:	80 83       	st	Z, r24
    UBRR0L = (unsigned char)ubrr;
     60a:	e4 ec       	ldi	r30, 0xC4	; 196
     60c:	f0 e0       	ldi	r31, 0x00	; 0
     60e:	89 81       	ldd	r24, Y+1	; 0x01
     610:	80 83       	st	Z, r24
    /*Enable receiver and transmitter */
    UCSR0B |= (1<<RXEN0);
     612:	a1 ec       	ldi	r26, 0xC1	; 193
     614:	b0 e0       	ldi	r27, 0x00	; 0
     616:	e1 ec       	ldi	r30, 0xC1	; 193
     618:	f0 e0       	ldi	r31, 0x00	; 0
     61a:	80 81       	ld	r24, Z
     61c:	80 61       	ori	r24, 0x10	; 16
     61e:	8c 93       	st	X, r24
    UCSR0B |= (1<<TXEN0);
     620:	a1 ec       	ldi	r26, 0xC1	; 193
     622:	b0 e0       	ldi	r27, 0x00	; 0
     624:	e1 ec       	ldi	r30, 0xC1	; 193
     626:	f0 e0       	ldi	r31, 0x00	; 0
     628:	80 81       	ld	r24, Z
     62a:	88 60       	ori	r24, 0x08	; 8
     62c:	8c 93       	st	X, r24
    /* Set frame format: 8data, 2stop bit */
    UCSR0C = (1<<UCSZ01)|(3<<UCSZ00);
     62e:	e2 ec       	ldi	r30, 0xC2	; 194
     630:	f0 e0       	ldi	r31, 0x00	; 0
     632:	86 e0       	ldi	r24, 0x06	; 6
     634:	80 83       	st	Z, r24
}
     636:	0f 90       	pop	r0
     638:	0f 90       	pop	r0
     63a:	cf 91       	pop	r28
     63c:	df 91       	pop	r29
     63e:	08 95       	ret

00000640 <recieve_Byte>:


uint8_t recieve_Byte(void)
{
     640:	df 93       	push	r29
     642:	cf 93       	push	r28
     644:	cd b7       	in	r28, 0x3d	; 61
     646:	de b7       	in	r29, 0x3e	; 62
    //moet worden vervangen met if. anders blijft de code hier hangen. als het aankomt blijft het toch in UDR0 staan totdat het wordt uitgelezen.
    loop_until_bit_is_set(UCSR0A, RXC0);
     648:	e0 ec       	ldi	r30, 0xC0	; 192
     64a:	f0 e0       	ldi	r31, 0x00	; 0
     64c:	80 81       	ld	r24, Z
     64e:	88 23       	and	r24, r24
     650:	dc f7       	brge	.-10     	; 0x648 <recieve_Byte+0x8>
    {
     return UDR0;
     652:	e6 ec       	ldi	r30, 0xC6	; 198
     654:	f0 e0       	ldi	r31, 0x00	; 0
     656:	80 81       	ld	r24, Z
    }
    /*else
    {
        return -1;
    }*/
}
     658:	cf 91       	pop	r28
     65a:	df 91       	pop	r29
     65c:	08 95       	ret

0000065e <transmit_byte>:

void transmit_byte(uint8_t byte)
{
     65e:	df 93       	push	r29
     660:	cf 93       	push	r28
     662:	0f 92       	push	r0
     664:	cd b7       	in	r28, 0x3d	; 61
     666:	de b7       	in	r29, 0x3e	; 62
     668:	89 83       	std	Y+1, r24	; 0x01
    //vervangen met if
    loop_until_bit_is_set(UCSR0A, UDRE0);
     66a:	e0 ec       	ldi	r30, 0xC0	; 192
     66c:	f0 e0       	ldi	r31, 0x00	; 0
     66e:	80 81       	ld	r24, Z
     670:	88 2f       	mov	r24, r24
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	80 72       	andi	r24, 0x20	; 32
     676:	90 70       	andi	r25, 0x00	; 0
     678:	00 97       	sbiw	r24, 0x00	; 0
     67a:	b9 f3       	breq	.-18     	; 0x66a <transmit_byte+0xc>
    UDR0 = byte;
     67c:	e6 ec       	ldi	r30, 0xC6	; 198
     67e:	f0 e0       	ldi	r31, 0x00	; 0
     680:	89 81       	ldd	r24, Y+1	; 0x01
     682:	80 83       	st	Z, r24

}
     684:	0f 90       	pop	r0
     686:	cf 91       	pop	r28
     688:	df 91       	pop	r29
     68a:	08 95       	ret

0000068c <print_byte>:

void print_byte(uint32_t byte)
{
     68c:	df 93       	push	r29
     68e:	cf 93       	push	r28
     690:	00 d0       	rcall	.+0      	; 0x692 <print_byte+0x6>
     692:	0f 92       	push	r0
     694:	cd b7       	in	r28, 0x3d	; 61
     696:	de b7       	in	r29, 0x3e	; 62
     698:	69 83       	std	Y+1, r22	; 0x01
     69a:	7a 83       	std	Y+2, r23	; 0x02
     69c:	8b 83       	std	Y+3, r24	; 0x03
     69e:	9c 83       	std	Y+4, r25	; 0x04
    //werkt niet zoals het hoort. volgorde verkeert?
    transmit_byte((byte/1000)%10);
     6a0:	89 81       	ldd	r24, Y+1	; 0x01
     6a2:	9a 81       	ldd	r25, Y+2	; 0x02
     6a4:	ab 81       	ldd	r26, Y+3	; 0x03
     6a6:	bc 81       	ldd	r27, Y+4	; 0x04
     6a8:	28 ee       	ldi	r18, 0xE8	; 232
     6aa:	33 e0       	ldi	r19, 0x03	; 3
     6ac:	40 e0       	ldi	r20, 0x00	; 0
     6ae:	50 e0       	ldi	r21, 0x00	; 0
     6b0:	bc 01       	movw	r22, r24
     6b2:	cd 01       	movw	r24, r26
     6b4:	0e 94 42 09 	call	0x1284	; 0x1284 <__udivmodsi4>
     6b8:	da 01       	movw	r26, r20
     6ba:	c9 01       	movw	r24, r18
     6bc:	2a e0       	ldi	r18, 0x0A	; 10
     6be:	30 e0       	ldi	r19, 0x00	; 0
     6c0:	40 e0       	ldi	r20, 0x00	; 0
     6c2:	50 e0       	ldi	r21, 0x00	; 0
     6c4:	bc 01       	movw	r22, r24
     6c6:	cd 01       	movw	r24, r26
     6c8:	0e 94 42 09 	call	0x1284	; 0x1284 <__udivmodsi4>
     6cc:	dc 01       	movw	r26, r24
     6ce:	cb 01       	movw	r24, r22
     6d0:	0e 94 2f 03 	call	0x65e	; 0x65e <transmit_byte>
    transmit_byte((byte/100)%10);
     6d4:	89 81       	ldd	r24, Y+1	; 0x01
     6d6:	9a 81       	ldd	r25, Y+2	; 0x02
     6d8:	ab 81       	ldd	r26, Y+3	; 0x03
     6da:	bc 81       	ldd	r27, Y+4	; 0x04
     6dc:	24 e6       	ldi	r18, 0x64	; 100
     6de:	30 e0       	ldi	r19, 0x00	; 0
     6e0:	40 e0       	ldi	r20, 0x00	; 0
     6e2:	50 e0       	ldi	r21, 0x00	; 0
     6e4:	bc 01       	movw	r22, r24
     6e6:	cd 01       	movw	r24, r26
     6e8:	0e 94 42 09 	call	0x1284	; 0x1284 <__udivmodsi4>
     6ec:	da 01       	movw	r26, r20
     6ee:	c9 01       	movw	r24, r18
     6f0:	2a e0       	ldi	r18, 0x0A	; 10
     6f2:	30 e0       	ldi	r19, 0x00	; 0
     6f4:	40 e0       	ldi	r20, 0x00	; 0
     6f6:	50 e0       	ldi	r21, 0x00	; 0
     6f8:	bc 01       	movw	r22, r24
     6fa:	cd 01       	movw	r24, r26
     6fc:	0e 94 42 09 	call	0x1284	; 0x1284 <__udivmodsi4>
     700:	dc 01       	movw	r26, r24
     702:	cb 01       	movw	r24, r22
     704:	0e 94 2f 03 	call	0x65e	; 0x65e <transmit_byte>
    transmit_byte((byte/10)%10);
     708:	89 81       	ldd	r24, Y+1	; 0x01
     70a:	9a 81       	ldd	r25, Y+2	; 0x02
     70c:	ab 81       	ldd	r26, Y+3	; 0x03
     70e:	bc 81       	ldd	r27, Y+4	; 0x04
     710:	2a e0       	ldi	r18, 0x0A	; 10
     712:	30 e0       	ldi	r19, 0x00	; 0
     714:	40 e0       	ldi	r20, 0x00	; 0
     716:	50 e0       	ldi	r21, 0x00	; 0
     718:	bc 01       	movw	r22, r24
     71a:	cd 01       	movw	r24, r26
     71c:	0e 94 42 09 	call	0x1284	; 0x1284 <__udivmodsi4>
     720:	da 01       	movw	r26, r20
     722:	c9 01       	movw	r24, r18
     724:	2a e0       	ldi	r18, 0x0A	; 10
     726:	30 e0       	ldi	r19, 0x00	; 0
     728:	40 e0       	ldi	r20, 0x00	; 0
     72a:	50 e0       	ldi	r21, 0x00	; 0
     72c:	bc 01       	movw	r22, r24
     72e:	cd 01       	movw	r24, r26
     730:	0e 94 42 09 	call	0x1284	; 0x1284 <__udivmodsi4>
     734:	dc 01       	movw	r26, r24
     736:	cb 01       	movw	r24, r22
     738:	0e 94 2f 03 	call	0x65e	; 0x65e <transmit_byte>
    transmit_byte((byte%10));
     73c:	89 81       	ldd	r24, Y+1	; 0x01
     73e:	9a 81       	ldd	r25, Y+2	; 0x02
     740:	ab 81       	ldd	r26, Y+3	; 0x03
     742:	bc 81       	ldd	r27, Y+4	; 0x04
     744:	2a e0       	ldi	r18, 0x0A	; 10
     746:	30 e0       	ldi	r19, 0x00	; 0
     748:	40 e0       	ldi	r20, 0x00	; 0
     74a:	50 e0       	ldi	r21, 0x00	; 0
     74c:	bc 01       	movw	r22, r24
     74e:	cd 01       	movw	r24, r26
     750:	0e 94 42 09 	call	0x1284	; 0x1284 <__udivmodsi4>
     754:	dc 01       	movw	r26, r24
     756:	cb 01       	movw	r24, r22
     758:	0e 94 2f 03 	call	0x65e	; 0x65e <transmit_byte>
    transmit_byte(0xA5);
     75c:	85 ea       	ldi	r24, 0xA5	; 165
     75e:	0e 94 2f 03 	call	0x65e	; 0x65e <transmit_byte>
}
     762:	0f 90       	pop	r0
     764:	0f 90       	pop	r0
     766:	0f 90       	pop	r0
     768:	0f 90       	pop	r0
     76a:	cf 91       	pop	r28
     76c:	df 91       	pop	r29
     76e:	08 95       	ret

00000770 <recieve_string>:



void recieve_string(char code[])
{
     770:	df 93       	push	r29
     772:	cf 93       	push	r28
     774:	00 d0       	rcall	.+0      	; 0x776 <recieve_string+0x6>
     776:	0f 92       	push	r0
     778:	0f 92       	push	r0
     77a:	cd b7       	in	r28, 0x3d	; 61
     77c:	de b7       	in	r29, 0x3e	; 62
     77e:	9d 83       	std	Y+5, r25	; 0x05
     780:	8c 83       	std	Y+4, r24	; 0x04
    //code ontworpen voor een GPS module. dollar teken is begin van de string. kan wel gebruikt worden voor het onvangen van complexe instructies.
    char byte = recieve_Byte();
     782:	0e 94 20 03 	call	0x640	; 0x640 <recieve_Byte>
     786:	8b 83       	std	Y+3, r24	; 0x03
    if(byte == '$')
     788:	8b 81       	ldd	r24, Y+3	; 0x03
     78a:	84 32       	cpi	r24, 0x24	; 36
     78c:	c9 f4       	brne	.+50     	; 0x7c0 <recieve_string+0x50>
    {
        int x = 1;
     78e:	81 e0       	ldi	r24, 0x01	; 1
     790:	90 e0       	ldi	r25, 0x00	; 0
     792:	9a 83       	std	Y+2, r25	; 0x02
     794:	89 83       	std	Y+1, r24	; 0x01
     796:	11 c0       	rjmp	.+34     	; 0x7ba <recieve_string+0x4a>
        while(byte != '\n')
        {
            byte = recieve_Byte();
     798:	0e 94 20 03 	call	0x640	; 0x640 <recieve_Byte>
     79c:	8b 83       	std	Y+3, r24	; 0x03
            code[x] = byte;
     79e:	29 81       	ldd	r18, Y+1	; 0x01
     7a0:	3a 81       	ldd	r19, Y+2	; 0x02
     7a2:	8c 81       	ldd	r24, Y+4	; 0x04
     7a4:	9d 81       	ldd	r25, Y+5	; 0x05
     7a6:	fc 01       	movw	r30, r24
     7a8:	e2 0f       	add	r30, r18
     7aa:	f3 1f       	adc	r31, r19
     7ac:	8b 81       	ldd	r24, Y+3	; 0x03
     7ae:	80 83       	st	Z, r24
            x++;
     7b0:	89 81       	ldd	r24, Y+1	; 0x01
     7b2:	9a 81       	ldd	r25, Y+2	; 0x02
     7b4:	01 96       	adiw	r24, 0x01	; 1
     7b6:	9a 83       	std	Y+2, r25	; 0x02
     7b8:	89 83       	std	Y+1, r24	; 0x01
    //code ontworpen voor een GPS module. dollar teken is begin van de string. kan wel gebruikt worden voor het onvangen van complexe instructies.
    char byte = recieve_Byte();
    if(byte == '$')
    {
        int x = 1;
        while(byte != '\n')
     7ba:	8b 81       	ldd	r24, Y+3	; 0x03
     7bc:	8a 30       	cpi	r24, 0x0A	; 10
     7be:	61 f7       	brne	.-40     	; 0x798 <recieve_string+0x28>
            byte = recieve_Byte();
            code[x] = byte;
            x++;
        }
    }
}
     7c0:	0f 90       	pop	r0
     7c2:	0f 90       	pop	r0
     7c4:	0f 90       	pop	r0
     7c6:	0f 90       	pop	r0
     7c8:	0f 90       	pop	r0
     7ca:	cf 91       	pop	r28
     7cc:	df 91       	pop	r29
     7ce:	08 95       	ret

000007d0 <__fixunssfsi>:
     7d0:	ef 92       	push	r14
     7d2:	ff 92       	push	r15
     7d4:	0f 93       	push	r16
     7d6:	1f 93       	push	r17
     7d8:	7b 01       	movw	r14, r22
     7da:	8c 01       	movw	r16, r24
     7dc:	20 e0       	ldi	r18, 0x00	; 0
     7de:	30 e0       	ldi	r19, 0x00	; 0
     7e0:	40 e0       	ldi	r20, 0x00	; 0
     7e2:	5f e4       	ldi	r21, 0x4F	; 79
     7e4:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <__gesf2>
     7e8:	88 23       	and	r24, r24
     7ea:	8c f0       	brlt	.+34     	; 0x80e <__fixunssfsi+0x3e>
     7ec:	c8 01       	movw	r24, r16
     7ee:	b7 01       	movw	r22, r14
     7f0:	20 e0       	ldi	r18, 0x00	; 0
     7f2:	30 e0       	ldi	r19, 0x00	; 0
     7f4:	40 e0       	ldi	r20, 0x00	; 0
     7f6:	5f e4       	ldi	r21, 0x4F	; 79
     7f8:	0e 94 60 05 	call	0xac0	; 0xac0 <__subsf3>
     7fc:	0e 94 48 07 	call	0xe90	; 0xe90 <__fixsfsi>
     800:	9b 01       	movw	r18, r22
     802:	ac 01       	movw	r20, r24
     804:	20 50       	subi	r18, 0x00	; 0
     806:	30 40       	sbci	r19, 0x00	; 0
     808:	40 40       	sbci	r20, 0x00	; 0
     80a:	50 48       	sbci	r21, 0x80	; 128
     80c:	06 c0       	rjmp	.+12     	; 0x81a <__fixunssfsi+0x4a>
     80e:	c8 01       	movw	r24, r16
     810:	b7 01       	movw	r22, r14
     812:	0e 94 48 07 	call	0xe90	; 0xe90 <__fixsfsi>
     816:	9b 01       	movw	r18, r22
     818:	ac 01       	movw	r20, r24
     81a:	b9 01       	movw	r22, r18
     81c:	ca 01       	movw	r24, r20
     81e:	1f 91       	pop	r17
     820:	0f 91       	pop	r16
     822:	ff 90       	pop	r15
     824:	ef 90       	pop	r14
     826:	08 95       	ret

00000828 <_fpadd_parts>:
     828:	a0 e0       	ldi	r26, 0x00	; 0
     82a:	b0 e0       	ldi	r27, 0x00	; 0
     82c:	ea e1       	ldi	r30, 0x1A	; 26
     82e:	f4 e0       	ldi	r31, 0x04	; 4
     830:	0c 94 64 09 	jmp	0x12c8	; 0x12c8 <__prologue_saves__>
     834:	dc 01       	movw	r26, r24
     836:	2b 01       	movw	r4, r22
     838:	fa 01       	movw	r30, r20
     83a:	9c 91       	ld	r25, X
     83c:	92 30       	cpi	r25, 0x02	; 2
     83e:	08 f4       	brcc	.+2      	; 0x842 <_fpadd_parts+0x1a>
     840:	39 c1       	rjmp	.+626    	; 0xab4 <_fpadd_parts+0x28c>
     842:	eb 01       	movw	r28, r22
     844:	88 81       	ld	r24, Y
     846:	82 30       	cpi	r24, 0x02	; 2
     848:	08 f4       	brcc	.+2      	; 0x84c <_fpadd_parts+0x24>
     84a:	33 c1       	rjmp	.+614    	; 0xab2 <_fpadd_parts+0x28a>
     84c:	94 30       	cpi	r25, 0x04	; 4
     84e:	69 f4       	brne	.+26     	; 0x86a <_fpadd_parts+0x42>
     850:	84 30       	cpi	r24, 0x04	; 4
     852:	09 f0       	breq	.+2      	; 0x856 <_fpadd_parts+0x2e>
     854:	2f c1       	rjmp	.+606    	; 0xab4 <_fpadd_parts+0x28c>
     856:	11 96       	adiw	r26, 0x01	; 1
     858:	9c 91       	ld	r25, X
     85a:	11 97       	sbiw	r26, 0x01	; 1
     85c:	89 81       	ldd	r24, Y+1	; 0x01
     85e:	98 17       	cp	r25, r24
     860:	09 f4       	brne	.+2      	; 0x864 <_fpadd_parts+0x3c>
     862:	28 c1       	rjmp	.+592    	; 0xab4 <_fpadd_parts+0x28c>
     864:	a0 e0       	ldi	r26, 0x00	; 0
     866:	b2 e0       	ldi	r27, 0x02	; 2
     868:	25 c1       	rjmp	.+586    	; 0xab4 <_fpadd_parts+0x28c>
     86a:	84 30       	cpi	r24, 0x04	; 4
     86c:	09 f4       	brne	.+2      	; 0x870 <_fpadd_parts+0x48>
     86e:	21 c1       	rjmp	.+578    	; 0xab2 <_fpadd_parts+0x28a>
     870:	82 30       	cpi	r24, 0x02	; 2
     872:	a9 f4       	brne	.+42     	; 0x89e <_fpadd_parts+0x76>
     874:	92 30       	cpi	r25, 0x02	; 2
     876:	09 f0       	breq	.+2      	; 0x87a <_fpadd_parts+0x52>
     878:	1d c1       	rjmp	.+570    	; 0xab4 <_fpadd_parts+0x28c>
     87a:	9a 01       	movw	r18, r20
     87c:	ad 01       	movw	r20, r26
     87e:	88 e0       	ldi	r24, 0x08	; 8
     880:	ea 01       	movw	r28, r20
     882:	09 90       	ld	r0, Y+
     884:	ae 01       	movw	r20, r28
     886:	e9 01       	movw	r28, r18
     888:	09 92       	st	Y+, r0
     88a:	9e 01       	movw	r18, r28
     88c:	81 50       	subi	r24, 0x01	; 1
     88e:	c1 f7       	brne	.-16     	; 0x880 <_fpadd_parts+0x58>
     890:	e2 01       	movw	r28, r4
     892:	89 81       	ldd	r24, Y+1	; 0x01
     894:	11 96       	adiw	r26, 0x01	; 1
     896:	9c 91       	ld	r25, X
     898:	89 23       	and	r24, r25
     89a:	81 83       	std	Z+1, r24	; 0x01
     89c:	08 c1       	rjmp	.+528    	; 0xaae <_fpadd_parts+0x286>
     89e:	92 30       	cpi	r25, 0x02	; 2
     8a0:	09 f4       	brne	.+2      	; 0x8a4 <_fpadd_parts+0x7c>
     8a2:	07 c1       	rjmp	.+526    	; 0xab2 <_fpadd_parts+0x28a>
     8a4:	12 96       	adiw	r26, 0x02	; 2
     8a6:	2d 90       	ld	r2, X+
     8a8:	3c 90       	ld	r3, X
     8aa:	13 97       	sbiw	r26, 0x03	; 3
     8ac:	eb 01       	movw	r28, r22
     8ae:	8a 81       	ldd	r24, Y+2	; 0x02
     8b0:	9b 81       	ldd	r25, Y+3	; 0x03
     8b2:	14 96       	adiw	r26, 0x04	; 4
     8b4:	ad 90       	ld	r10, X+
     8b6:	bd 90       	ld	r11, X+
     8b8:	cd 90       	ld	r12, X+
     8ba:	dc 90       	ld	r13, X
     8bc:	17 97       	sbiw	r26, 0x07	; 7
     8be:	ec 80       	ldd	r14, Y+4	; 0x04
     8c0:	fd 80       	ldd	r15, Y+5	; 0x05
     8c2:	0e 81       	ldd	r16, Y+6	; 0x06
     8c4:	1f 81       	ldd	r17, Y+7	; 0x07
     8c6:	91 01       	movw	r18, r2
     8c8:	28 1b       	sub	r18, r24
     8ca:	39 0b       	sbc	r19, r25
     8cc:	b9 01       	movw	r22, r18
     8ce:	37 ff       	sbrs	r19, 7
     8d0:	04 c0       	rjmp	.+8      	; 0x8da <_fpadd_parts+0xb2>
     8d2:	66 27       	eor	r22, r22
     8d4:	77 27       	eor	r23, r23
     8d6:	62 1b       	sub	r22, r18
     8d8:	73 0b       	sbc	r23, r19
     8da:	60 32       	cpi	r22, 0x20	; 32
     8dc:	71 05       	cpc	r23, r1
     8de:	0c f0       	brlt	.+2      	; 0x8e2 <_fpadd_parts+0xba>
     8e0:	61 c0       	rjmp	.+194    	; 0x9a4 <_fpadd_parts+0x17c>
     8e2:	12 16       	cp	r1, r18
     8e4:	13 06       	cpc	r1, r19
     8e6:	6c f5       	brge	.+90     	; 0x942 <_fpadd_parts+0x11a>
     8e8:	37 01       	movw	r6, r14
     8ea:	48 01       	movw	r8, r16
     8ec:	06 2e       	mov	r0, r22
     8ee:	04 c0       	rjmp	.+8      	; 0x8f8 <_fpadd_parts+0xd0>
     8f0:	96 94       	lsr	r9
     8f2:	87 94       	ror	r8
     8f4:	77 94       	ror	r7
     8f6:	67 94       	ror	r6
     8f8:	0a 94       	dec	r0
     8fa:	d2 f7       	brpl	.-12     	; 0x8f0 <_fpadd_parts+0xc8>
     8fc:	21 e0       	ldi	r18, 0x01	; 1
     8fe:	30 e0       	ldi	r19, 0x00	; 0
     900:	40 e0       	ldi	r20, 0x00	; 0
     902:	50 e0       	ldi	r21, 0x00	; 0
     904:	04 c0       	rjmp	.+8      	; 0x90e <_fpadd_parts+0xe6>
     906:	22 0f       	add	r18, r18
     908:	33 1f       	adc	r19, r19
     90a:	44 1f       	adc	r20, r20
     90c:	55 1f       	adc	r21, r21
     90e:	6a 95       	dec	r22
     910:	d2 f7       	brpl	.-12     	; 0x906 <_fpadd_parts+0xde>
     912:	21 50       	subi	r18, 0x01	; 1
     914:	30 40       	sbci	r19, 0x00	; 0
     916:	40 40       	sbci	r20, 0x00	; 0
     918:	50 40       	sbci	r21, 0x00	; 0
     91a:	2e 21       	and	r18, r14
     91c:	3f 21       	and	r19, r15
     91e:	40 23       	and	r20, r16
     920:	51 23       	and	r21, r17
     922:	21 15       	cp	r18, r1
     924:	31 05       	cpc	r19, r1
     926:	41 05       	cpc	r20, r1
     928:	51 05       	cpc	r21, r1
     92a:	21 f0       	breq	.+8      	; 0x934 <_fpadd_parts+0x10c>
     92c:	21 e0       	ldi	r18, 0x01	; 1
     92e:	30 e0       	ldi	r19, 0x00	; 0
     930:	40 e0       	ldi	r20, 0x00	; 0
     932:	50 e0       	ldi	r21, 0x00	; 0
     934:	79 01       	movw	r14, r18
     936:	8a 01       	movw	r16, r20
     938:	e6 28       	or	r14, r6
     93a:	f7 28       	or	r15, r7
     93c:	08 29       	or	r16, r8
     93e:	19 29       	or	r17, r9
     940:	3c c0       	rjmp	.+120    	; 0x9ba <_fpadd_parts+0x192>
     942:	23 2b       	or	r18, r19
     944:	d1 f1       	breq	.+116    	; 0x9ba <_fpadd_parts+0x192>
     946:	26 0e       	add	r2, r22
     948:	37 1e       	adc	r3, r23
     94a:	35 01       	movw	r6, r10
     94c:	46 01       	movw	r8, r12
     94e:	06 2e       	mov	r0, r22
     950:	04 c0       	rjmp	.+8      	; 0x95a <_fpadd_parts+0x132>
     952:	96 94       	lsr	r9
     954:	87 94       	ror	r8
     956:	77 94       	ror	r7
     958:	67 94       	ror	r6
     95a:	0a 94       	dec	r0
     95c:	d2 f7       	brpl	.-12     	; 0x952 <_fpadd_parts+0x12a>
     95e:	21 e0       	ldi	r18, 0x01	; 1
     960:	30 e0       	ldi	r19, 0x00	; 0
     962:	40 e0       	ldi	r20, 0x00	; 0
     964:	50 e0       	ldi	r21, 0x00	; 0
     966:	04 c0       	rjmp	.+8      	; 0x970 <_fpadd_parts+0x148>
     968:	22 0f       	add	r18, r18
     96a:	33 1f       	adc	r19, r19
     96c:	44 1f       	adc	r20, r20
     96e:	55 1f       	adc	r21, r21
     970:	6a 95       	dec	r22
     972:	d2 f7       	brpl	.-12     	; 0x968 <_fpadd_parts+0x140>
     974:	21 50       	subi	r18, 0x01	; 1
     976:	30 40       	sbci	r19, 0x00	; 0
     978:	40 40       	sbci	r20, 0x00	; 0
     97a:	50 40       	sbci	r21, 0x00	; 0
     97c:	2a 21       	and	r18, r10
     97e:	3b 21       	and	r19, r11
     980:	4c 21       	and	r20, r12
     982:	5d 21       	and	r21, r13
     984:	21 15       	cp	r18, r1
     986:	31 05       	cpc	r19, r1
     988:	41 05       	cpc	r20, r1
     98a:	51 05       	cpc	r21, r1
     98c:	21 f0       	breq	.+8      	; 0x996 <_fpadd_parts+0x16e>
     98e:	21 e0       	ldi	r18, 0x01	; 1
     990:	30 e0       	ldi	r19, 0x00	; 0
     992:	40 e0       	ldi	r20, 0x00	; 0
     994:	50 e0       	ldi	r21, 0x00	; 0
     996:	59 01       	movw	r10, r18
     998:	6a 01       	movw	r12, r20
     99a:	a6 28       	or	r10, r6
     99c:	b7 28       	or	r11, r7
     99e:	c8 28       	or	r12, r8
     9a0:	d9 28       	or	r13, r9
     9a2:	0b c0       	rjmp	.+22     	; 0x9ba <_fpadd_parts+0x192>
     9a4:	82 15       	cp	r24, r2
     9a6:	93 05       	cpc	r25, r3
     9a8:	2c f0       	brlt	.+10     	; 0x9b4 <_fpadd_parts+0x18c>
     9aa:	1c 01       	movw	r2, r24
     9ac:	aa 24       	eor	r10, r10
     9ae:	bb 24       	eor	r11, r11
     9b0:	65 01       	movw	r12, r10
     9b2:	03 c0       	rjmp	.+6      	; 0x9ba <_fpadd_parts+0x192>
     9b4:	ee 24       	eor	r14, r14
     9b6:	ff 24       	eor	r15, r15
     9b8:	87 01       	movw	r16, r14
     9ba:	11 96       	adiw	r26, 0x01	; 1
     9bc:	9c 91       	ld	r25, X
     9be:	d2 01       	movw	r26, r4
     9c0:	11 96       	adiw	r26, 0x01	; 1
     9c2:	8c 91       	ld	r24, X
     9c4:	98 17       	cp	r25, r24
     9c6:	09 f4       	brne	.+2      	; 0x9ca <_fpadd_parts+0x1a2>
     9c8:	45 c0       	rjmp	.+138    	; 0xa54 <_fpadd_parts+0x22c>
     9ca:	99 23       	and	r25, r25
     9cc:	39 f0       	breq	.+14     	; 0x9dc <_fpadd_parts+0x1b4>
     9ce:	a8 01       	movw	r20, r16
     9d0:	97 01       	movw	r18, r14
     9d2:	2a 19       	sub	r18, r10
     9d4:	3b 09       	sbc	r19, r11
     9d6:	4c 09       	sbc	r20, r12
     9d8:	5d 09       	sbc	r21, r13
     9da:	06 c0       	rjmp	.+12     	; 0x9e8 <_fpadd_parts+0x1c0>
     9dc:	a6 01       	movw	r20, r12
     9de:	95 01       	movw	r18, r10
     9e0:	2e 19       	sub	r18, r14
     9e2:	3f 09       	sbc	r19, r15
     9e4:	40 0b       	sbc	r20, r16
     9e6:	51 0b       	sbc	r21, r17
     9e8:	57 fd       	sbrc	r21, 7
     9ea:	08 c0       	rjmp	.+16     	; 0x9fc <_fpadd_parts+0x1d4>
     9ec:	11 82       	std	Z+1, r1	; 0x01
     9ee:	33 82       	std	Z+3, r3	; 0x03
     9f0:	22 82       	std	Z+2, r2	; 0x02
     9f2:	24 83       	std	Z+4, r18	; 0x04
     9f4:	35 83       	std	Z+5, r19	; 0x05
     9f6:	46 83       	std	Z+6, r20	; 0x06
     9f8:	57 83       	std	Z+7, r21	; 0x07
     9fa:	1d c0       	rjmp	.+58     	; 0xa36 <_fpadd_parts+0x20e>
     9fc:	81 e0       	ldi	r24, 0x01	; 1
     9fe:	81 83       	std	Z+1, r24	; 0x01
     a00:	33 82       	std	Z+3, r3	; 0x03
     a02:	22 82       	std	Z+2, r2	; 0x02
     a04:	88 27       	eor	r24, r24
     a06:	99 27       	eor	r25, r25
     a08:	dc 01       	movw	r26, r24
     a0a:	82 1b       	sub	r24, r18
     a0c:	93 0b       	sbc	r25, r19
     a0e:	a4 0b       	sbc	r26, r20
     a10:	b5 0b       	sbc	r27, r21
     a12:	84 83       	std	Z+4, r24	; 0x04
     a14:	95 83       	std	Z+5, r25	; 0x05
     a16:	a6 83       	std	Z+6, r26	; 0x06
     a18:	b7 83       	std	Z+7, r27	; 0x07
     a1a:	0d c0       	rjmp	.+26     	; 0xa36 <_fpadd_parts+0x20e>
     a1c:	22 0f       	add	r18, r18
     a1e:	33 1f       	adc	r19, r19
     a20:	44 1f       	adc	r20, r20
     a22:	55 1f       	adc	r21, r21
     a24:	24 83       	std	Z+4, r18	; 0x04
     a26:	35 83       	std	Z+5, r19	; 0x05
     a28:	46 83       	std	Z+6, r20	; 0x06
     a2a:	57 83       	std	Z+7, r21	; 0x07
     a2c:	82 81       	ldd	r24, Z+2	; 0x02
     a2e:	93 81       	ldd	r25, Z+3	; 0x03
     a30:	01 97       	sbiw	r24, 0x01	; 1
     a32:	93 83       	std	Z+3, r25	; 0x03
     a34:	82 83       	std	Z+2, r24	; 0x02
     a36:	24 81       	ldd	r18, Z+4	; 0x04
     a38:	35 81       	ldd	r19, Z+5	; 0x05
     a3a:	46 81       	ldd	r20, Z+6	; 0x06
     a3c:	57 81       	ldd	r21, Z+7	; 0x07
     a3e:	da 01       	movw	r26, r20
     a40:	c9 01       	movw	r24, r18
     a42:	01 97       	sbiw	r24, 0x01	; 1
     a44:	a1 09       	sbc	r26, r1
     a46:	b1 09       	sbc	r27, r1
     a48:	8f 5f       	subi	r24, 0xFF	; 255
     a4a:	9f 4f       	sbci	r25, 0xFF	; 255
     a4c:	af 4f       	sbci	r26, 0xFF	; 255
     a4e:	bf 43       	sbci	r27, 0x3F	; 63
     a50:	28 f3       	brcs	.-54     	; 0xa1c <_fpadd_parts+0x1f4>
     a52:	0b c0       	rjmp	.+22     	; 0xa6a <_fpadd_parts+0x242>
     a54:	91 83       	std	Z+1, r25	; 0x01
     a56:	33 82       	std	Z+3, r3	; 0x03
     a58:	22 82       	std	Z+2, r2	; 0x02
     a5a:	ea 0c       	add	r14, r10
     a5c:	fb 1c       	adc	r15, r11
     a5e:	0c 1d       	adc	r16, r12
     a60:	1d 1d       	adc	r17, r13
     a62:	e4 82       	std	Z+4, r14	; 0x04
     a64:	f5 82       	std	Z+5, r15	; 0x05
     a66:	06 83       	std	Z+6, r16	; 0x06
     a68:	17 83       	std	Z+7, r17	; 0x07
     a6a:	83 e0       	ldi	r24, 0x03	; 3
     a6c:	80 83       	st	Z, r24
     a6e:	24 81       	ldd	r18, Z+4	; 0x04
     a70:	35 81       	ldd	r19, Z+5	; 0x05
     a72:	46 81       	ldd	r20, Z+6	; 0x06
     a74:	57 81       	ldd	r21, Z+7	; 0x07
     a76:	57 ff       	sbrs	r21, 7
     a78:	1a c0       	rjmp	.+52     	; 0xaae <_fpadd_parts+0x286>
     a7a:	c9 01       	movw	r24, r18
     a7c:	aa 27       	eor	r26, r26
     a7e:	97 fd       	sbrc	r25, 7
     a80:	a0 95       	com	r26
     a82:	ba 2f       	mov	r27, r26
     a84:	81 70       	andi	r24, 0x01	; 1
     a86:	90 70       	andi	r25, 0x00	; 0
     a88:	a0 70       	andi	r26, 0x00	; 0
     a8a:	b0 70       	andi	r27, 0x00	; 0
     a8c:	56 95       	lsr	r21
     a8e:	47 95       	ror	r20
     a90:	37 95       	ror	r19
     a92:	27 95       	ror	r18
     a94:	82 2b       	or	r24, r18
     a96:	93 2b       	or	r25, r19
     a98:	a4 2b       	or	r26, r20
     a9a:	b5 2b       	or	r27, r21
     a9c:	84 83       	std	Z+4, r24	; 0x04
     a9e:	95 83       	std	Z+5, r25	; 0x05
     aa0:	a6 83       	std	Z+6, r26	; 0x06
     aa2:	b7 83       	std	Z+7, r27	; 0x07
     aa4:	82 81       	ldd	r24, Z+2	; 0x02
     aa6:	93 81       	ldd	r25, Z+3	; 0x03
     aa8:	01 96       	adiw	r24, 0x01	; 1
     aaa:	93 83       	std	Z+3, r25	; 0x03
     aac:	82 83       	std	Z+2, r24	; 0x02
     aae:	df 01       	movw	r26, r30
     ab0:	01 c0       	rjmp	.+2      	; 0xab4 <_fpadd_parts+0x28c>
     ab2:	d2 01       	movw	r26, r4
     ab4:	cd 01       	movw	r24, r26
     ab6:	cd b7       	in	r28, 0x3d	; 61
     ab8:	de b7       	in	r29, 0x3e	; 62
     aba:	e2 e1       	ldi	r30, 0x12	; 18
     abc:	0c 94 80 09 	jmp	0x1300	; 0x1300 <__epilogue_restores__>

00000ac0 <__subsf3>:
     ac0:	a0 e2       	ldi	r26, 0x20	; 32
     ac2:	b0 e0       	ldi	r27, 0x00	; 0
     ac4:	e6 e6       	ldi	r30, 0x66	; 102
     ac6:	f5 e0       	ldi	r31, 0x05	; 5
     ac8:	0c 94 70 09 	jmp	0x12e0	; 0x12e0 <__prologue_saves__+0x18>
     acc:	69 83       	std	Y+1, r22	; 0x01
     ace:	7a 83       	std	Y+2, r23	; 0x02
     ad0:	8b 83       	std	Y+3, r24	; 0x03
     ad2:	9c 83       	std	Y+4, r25	; 0x04
     ad4:	2d 83       	std	Y+5, r18	; 0x05
     ad6:	3e 83       	std	Y+6, r19	; 0x06
     ad8:	4f 83       	std	Y+7, r20	; 0x07
     ada:	58 87       	std	Y+8, r21	; 0x08
     adc:	e9 e0       	ldi	r30, 0x09	; 9
     ade:	ee 2e       	mov	r14, r30
     ae0:	f1 2c       	mov	r15, r1
     ae2:	ec 0e       	add	r14, r28
     ae4:	fd 1e       	adc	r15, r29
     ae6:	ce 01       	movw	r24, r28
     ae8:	01 96       	adiw	r24, 0x01	; 1
     aea:	b7 01       	movw	r22, r14
     aec:	0e 94 71 08 	call	0x10e2	; 0x10e2 <__unpack_f>
     af0:	8e 01       	movw	r16, r28
     af2:	0f 5e       	subi	r16, 0xEF	; 239
     af4:	1f 4f       	sbci	r17, 0xFF	; 255
     af6:	ce 01       	movw	r24, r28
     af8:	05 96       	adiw	r24, 0x05	; 5
     afa:	b8 01       	movw	r22, r16
     afc:	0e 94 71 08 	call	0x10e2	; 0x10e2 <__unpack_f>
     b00:	8a 89       	ldd	r24, Y+18	; 0x12
     b02:	91 e0       	ldi	r25, 0x01	; 1
     b04:	89 27       	eor	r24, r25
     b06:	8a 8b       	std	Y+18, r24	; 0x12
     b08:	c7 01       	movw	r24, r14
     b0a:	b8 01       	movw	r22, r16
     b0c:	ae 01       	movw	r20, r28
     b0e:	47 5e       	subi	r20, 0xE7	; 231
     b10:	5f 4f       	sbci	r21, 0xFF	; 255
     b12:	0e 94 14 04 	call	0x828	; 0x828 <_fpadd_parts>
     b16:	0e 94 9c 07 	call	0xf38	; 0xf38 <__pack_f>
     b1a:	a0 96       	adiw	r28, 0x20	; 32
     b1c:	e6 e0       	ldi	r30, 0x06	; 6
     b1e:	0c 94 8c 09 	jmp	0x1318	; 0x1318 <__epilogue_restores__+0x18>

00000b22 <__addsf3>:
     b22:	a0 e2       	ldi	r26, 0x20	; 32
     b24:	b0 e0       	ldi	r27, 0x00	; 0
     b26:	e7 e9       	ldi	r30, 0x97	; 151
     b28:	f5 e0       	ldi	r31, 0x05	; 5
     b2a:	0c 94 70 09 	jmp	0x12e0	; 0x12e0 <__prologue_saves__+0x18>
     b2e:	69 83       	std	Y+1, r22	; 0x01
     b30:	7a 83       	std	Y+2, r23	; 0x02
     b32:	8b 83       	std	Y+3, r24	; 0x03
     b34:	9c 83       	std	Y+4, r25	; 0x04
     b36:	2d 83       	std	Y+5, r18	; 0x05
     b38:	3e 83       	std	Y+6, r19	; 0x06
     b3a:	4f 83       	std	Y+7, r20	; 0x07
     b3c:	58 87       	std	Y+8, r21	; 0x08
     b3e:	f9 e0       	ldi	r31, 0x09	; 9
     b40:	ef 2e       	mov	r14, r31
     b42:	f1 2c       	mov	r15, r1
     b44:	ec 0e       	add	r14, r28
     b46:	fd 1e       	adc	r15, r29
     b48:	ce 01       	movw	r24, r28
     b4a:	01 96       	adiw	r24, 0x01	; 1
     b4c:	b7 01       	movw	r22, r14
     b4e:	0e 94 71 08 	call	0x10e2	; 0x10e2 <__unpack_f>
     b52:	8e 01       	movw	r16, r28
     b54:	0f 5e       	subi	r16, 0xEF	; 239
     b56:	1f 4f       	sbci	r17, 0xFF	; 255
     b58:	ce 01       	movw	r24, r28
     b5a:	05 96       	adiw	r24, 0x05	; 5
     b5c:	b8 01       	movw	r22, r16
     b5e:	0e 94 71 08 	call	0x10e2	; 0x10e2 <__unpack_f>
     b62:	c7 01       	movw	r24, r14
     b64:	b8 01       	movw	r22, r16
     b66:	ae 01       	movw	r20, r28
     b68:	47 5e       	subi	r20, 0xE7	; 231
     b6a:	5f 4f       	sbci	r21, 0xFF	; 255
     b6c:	0e 94 14 04 	call	0x828	; 0x828 <_fpadd_parts>
     b70:	0e 94 9c 07 	call	0xf38	; 0xf38 <__pack_f>
     b74:	a0 96       	adiw	r28, 0x20	; 32
     b76:	e6 e0       	ldi	r30, 0x06	; 6
     b78:	0c 94 8c 09 	jmp	0x1318	; 0x1318 <__epilogue_restores__+0x18>

00000b7c <__mulsf3>:
     b7c:	a0 e2       	ldi	r26, 0x20	; 32
     b7e:	b0 e0       	ldi	r27, 0x00	; 0
     b80:	e4 ec       	ldi	r30, 0xC4	; 196
     b82:	f5 e0       	ldi	r31, 0x05	; 5
     b84:	0c 94 64 09 	jmp	0x12c8	; 0x12c8 <__prologue_saves__>
     b88:	69 83       	std	Y+1, r22	; 0x01
     b8a:	7a 83       	std	Y+2, r23	; 0x02
     b8c:	8b 83       	std	Y+3, r24	; 0x03
     b8e:	9c 83       	std	Y+4, r25	; 0x04
     b90:	2d 83       	std	Y+5, r18	; 0x05
     b92:	3e 83       	std	Y+6, r19	; 0x06
     b94:	4f 83       	std	Y+7, r20	; 0x07
     b96:	58 87       	std	Y+8, r21	; 0x08
     b98:	ce 01       	movw	r24, r28
     b9a:	01 96       	adiw	r24, 0x01	; 1
     b9c:	be 01       	movw	r22, r28
     b9e:	67 5f       	subi	r22, 0xF7	; 247
     ba0:	7f 4f       	sbci	r23, 0xFF	; 255
     ba2:	0e 94 71 08 	call	0x10e2	; 0x10e2 <__unpack_f>
     ba6:	ce 01       	movw	r24, r28
     ba8:	05 96       	adiw	r24, 0x05	; 5
     baa:	be 01       	movw	r22, r28
     bac:	6f 5e       	subi	r22, 0xEF	; 239
     bae:	7f 4f       	sbci	r23, 0xFF	; 255
     bb0:	0e 94 71 08 	call	0x10e2	; 0x10e2 <__unpack_f>
     bb4:	99 85       	ldd	r25, Y+9	; 0x09
     bb6:	92 30       	cpi	r25, 0x02	; 2
     bb8:	88 f0       	brcs	.+34     	; 0xbdc <__mulsf3+0x60>
     bba:	89 89       	ldd	r24, Y+17	; 0x11
     bbc:	82 30       	cpi	r24, 0x02	; 2
     bbe:	c8 f0       	brcs	.+50     	; 0xbf2 <__mulsf3+0x76>
     bc0:	94 30       	cpi	r25, 0x04	; 4
     bc2:	19 f4       	brne	.+6      	; 0xbca <__mulsf3+0x4e>
     bc4:	82 30       	cpi	r24, 0x02	; 2
     bc6:	51 f4       	brne	.+20     	; 0xbdc <__mulsf3+0x60>
     bc8:	04 c0       	rjmp	.+8      	; 0xbd2 <__mulsf3+0x56>
     bca:	84 30       	cpi	r24, 0x04	; 4
     bcc:	29 f4       	brne	.+10     	; 0xbd8 <__mulsf3+0x5c>
     bce:	92 30       	cpi	r25, 0x02	; 2
     bd0:	81 f4       	brne	.+32     	; 0xbf2 <__mulsf3+0x76>
     bd2:	80 e0       	ldi	r24, 0x00	; 0
     bd4:	92 e0       	ldi	r25, 0x02	; 2
     bd6:	c6 c0       	rjmp	.+396    	; 0xd64 <__mulsf3+0x1e8>
     bd8:	92 30       	cpi	r25, 0x02	; 2
     bda:	49 f4       	brne	.+18     	; 0xbee <__mulsf3+0x72>
     bdc:	20 e0       	ldi	r18, 0x00	; 0
     bde:	9a 85       	ldd	r25, Y+10	; 0x0a
     be0:	8a 89       	ldd	r24, Y+18	; 0x12
     be2:	98 13       	cpse	r25, r24
     be4:	21 e0       	ldi	r18, 0x01	; 1
     be6:	2a 87       	std	Y+10, r18	; 0x0a
     be8:	ce 01       	movw	r24, r28
     bea:	09 96       	adiw	r24, 0x09	; 9
     bec:	bb c0       	rjmp	.+374    	; 0xd64 <__mulsf3+0x1e8>
     bee:	82 30       	cpi	r24, 0x02	; 2
     bf0:	49 f4       	brne	.+18     	; 0xc04 <__mulsf3+0x88>
     bf2:	20 e0       	ldi	r18, 0x00	; 0
     bf4:	9a 85       	ldd	r25, Y+10	; 0x0a
     bf6:	8a 89       	ldd	r24, Y+18	; 0x12
     bf8:	98 13       	cpse	r25, r24
     bfa:	21 e0       	ldi	r18, 0x01	; 1
     bfc:	2a 8b       	std	Y+18, r18	; 0x12
     bfe:	ce 01       	movw	r24, r28
     c00:	41 96       	adiw	r24, 0x11	; 17
     c02:	b0 c0       	rjmp	.+352    	; 0xd64 <__mulsf3+0x1e8>
     c04:	2d 84       	ldd	r2, Y+13	; 0x0d
     c06:	3e 84       	ldd	r3, Y+14	; 0x0e
     c08:	4f 84       	ldd	r4, Y+15	; 0x0f
     c0a:	58 88       	ldd	r5, Y+16	; 0x10
     c0c:	6d 88       	ldd	r6, Y+21	; 0x15
     c0e:	7e 88       	ldd	r7, Y+22	; 0x16
     c10:	8f 88       	ldd	r8, Y+23	; 0x17
     c12:	98 8c       	ldd	r9, Y+24	; 0x18
     c14:	ee 24       	eor	r14, r14
     c16:	ff 24       	eor	r15, r15
     c18:	87 01       	movw	r16, r14
     c1a:	aa 24       	eor	r10, r10
     c1c:	bb 24       	eor	r11, r11
     c1e:	65 01       	movw	r12, r10
     c20:	40 e0       	ldi	r20, 0x00	; 0
     c22:	50 e0       	ldi	r21, 0x00	; 0
     c24:	60 e0       	ldi	r22, 0x00	; 0
     c26:	70 e0       	ldi	r23, 0x00	; 0
     c28:	e0 e0       	ldi	r30, 0x00	; 0
     c2a:	f0 e0       	ldi	r31, 0x00	; 0
     c2c:	c1 01       	movw	r24, r2
     c2e:	81 70       	andi	r24, 0x01	; 1
     c30:	90 70       	andi	r25, 0x00	; 0
     c32:	89 2b       	or	r24, r25
     c34:	e9 f0       	breq	.+58     	; 0xc70 <__mulsf3+0xf4>
     c36:	e6 0c       	add	r14, r6
     c38:	f7 1c       	adc	r15, r7
     c3a:	08 1d       	adc	r16, r8
     c3c:	19 1d       	adc	r17, r9
     c3e:	9a 01       	movw	r18, r20
     c40:	ab 01       	movw	r20, r22
     c42:	2a 0d       	add	r18, r10
     c44:	3b 1d       	adc	r19, r11
     c46:	4c 1d       	adc	r20, r12
     c48:	5d 1d       	adc	r21, r13
     c4a:	80 e0       	ldi	r24, 0x00	; 0
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	a0 e0       	ldi	r26, 0x00	; 0
     c50:	b0 e0       	ldi	r27, 0x00	; 0
     c52:	e6 14       	cp	r14, r6
     c54:	f7 04       	cpc	r15, r7
     c56:	08 05       	cpc	r16, r8
     c58:	19 05       	cpc	r17, r9
     c5a:	20 f4       	brcc	.+8      	; 0xc64 <__mulsf3+0xe8>
     c5c:	81 e0       	ldi	r24, 0x01	; 1
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	a0 e0       	ldi	r26, 0x00	; 0
     c62:	b0 e0       	ldi	r27, 0x00	; 0
     c64:	ba 01       	movw	r22, r20
     c66:	a9 01       	movw	r20, r18
     c68:	48 0f       	add	r20, r24
     c6a:	59 1f       	adc	r21, r25
     c6c:	6a 1f       	adc	r22, r26
     c6e:	7b 1f       	adc	r23, r27
     c70:	aa 0c       	add	r10, r10
     c72:	bb 1c       	adc	r11, r11
     c74:	cc 1c       	adc	r12, r12
     c76:	dd 1c       	adc	r13, r13
     c78:	97 fe       	sbrs	r9, 7
     c7a:	08 c0       	rjmp	.+16     	; 0xc8c <__mulsf3+0x110>
     c7c:	81 e0       	ldi	r24, 0x01	; 1
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	a0 e0       	ldi	r26, 0x00	; 0
     c82:	b0 e0       	ldi	r27, 0x00	; 0
     c84:	a8 2a       	or	r10, r24
     c86:	b9 2a       	or	r11, r25
     c88:	ca 2a       	or	r12, r26
     c8a:	db 2a       	or	r13, r27
     c8c:	31 96       	adiw	r30, 0x01	; 1
     c8e:	e0 32       	cpi	r30, 0x20	; 32
     c90:	f1 05       	cpc	r31, r1
     c92:	49 f0       	breq	.+18     	; 0xca6 <__mulsf3+0x12a>
     c94:	66 0c       	add	r6, r6
     c96:	77 1c       	adc	r7, r7
     c98:	88 1c       	adc	r8, r8
     c9a:	99 1c       	adc	r9, r9
     c9c:	56 94       	lsr	r5
     c9e:	47 94       	ror	r4
     ca0:	37 94       	ror	r3
     ca2:	27 94       	ror	r2
     ca4:	c3 cf       	rjmp	.-122    	; 0xc2c <__mulsf3+0xb0>
     ca6:	fa 85       	ldd	r31, Y+10	; 0x0a
     ca8:	ea 89       	ldd	r30, Y+18	; 0x12
     caa:	2b 89       	ldd	r18, Y+19	; 0x13
     cac:	3c 89       	ldd	r19, Y+20	; 0x14
     cae:	8b 85       	ldd	r24, Y+11	; 0x0b
     cb0:	9c 85       	ldd	r25, Y+12	; 0x0c
     cb2:	28 0f       	add	r18, r24
     cb4:	39 1f       	adc	r19, r25
     cb6:	2e 5f       	subi	r18, 0xFE	; 254
     cb8:	3f 4f       	sbci	r19, 0xFF	; 255
     cba:	17 c0       	rjmp	.+46     	; 0xcea <__mulsf3+0x16e>
     cbc:	ca 01       	movw	r24, r20
     cbe:	81 70       	andi	r24, 0x01	; 1
     cc0:	90 70       	andi	r25, 0x00	; 0
     cc2:	89 2b       	or	r24, r25
     cc4:	61 f0       	breq	.+24     	; 0xcde <__mulsf3+0x162>
     cc6:	16 95       	lsr	r17
     cc8:	07 95       	ror	r16
     cca:	f7 94       	ror	r15
     ccc:	e7 94       	ror	r14
     cce:	80 e0       	ldi	r24, 0x00	; 0
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	a0 e0       	ldi	r26, 0x00	; 0
     cd4:	b0 e8       	ldi	r27, 0x80	; 128
     cd6:	e8 2a       	or	r14, r24
     cd8:	f9 2a       	or	r15, r25
     cda:	0a 2b       	or	r16, r26
     cdc:	1b 2b       	or	r17, r27
     cde:	76 95       	lsr	r23
     ce0:	67 95       	ror	r22
     ce2:	57 95       	ror	r21
     ce4:	47 95       	ror	r20
     ce6:	2f 5f       	subi	r18, 0xFF	; 255
     ce8:	3f 4f       	sbci	r19, 0xFF	; 255
     cea:	77 fd       	sbrc	r23, 7
     cec:	e7 cf       	rjmp	.-50     	; 0xcbc <__mulsf3+0x140>
     cee:	0c c0       	rjmp	.+24     	; 0xd08 <__mulsf3+0x18c>
     cf0:	44 0f       	add	r20, r20
     cf2:	55 1f       	adc	r21, r21
     cf4:	66 1f       	adc	r22, r22
     cf6:	77 1f       	adc	r23, r23
     cf8:	17 fd       	sbrc	r17, 7
     cfa:	41 60       	ori	r20, 0x01	; 1
     cfc:	ee 0c       	add	r14, r14
     cfe:	ff 1c       	adc	r15, r15
     d00:	00 1f       	adc	r16, r16
     d02:	11 1f       	adc	r17, r17
     d04:	21 50       	subi	r18, 0x01	; 1
     d06:	30 40       	sbci	r19, 0x00	; 0
     d08:	40 30       	cpi	r20, 0x00	; 0
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	59 07       	cpc	r21, r25
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	69 07       	cpc	r22, r25
     d12:	90 e4       	ldi	r25, 0x40	; 64
     d14:	79 07       	cpc	r23, r25
     d16:	60 f3       	brcs	.-40     	; 0xcf0 <__mulsf3+0x174>
     d18:	2b 8f       	std	Y+27, r18	; 0x1b
     d1a:	3c 8f       	std	Y+28, r19	; 0x1c
     d1c:	db 01       	movw	r26, r22
     d1e:	ca 01       	movw	r24, r20
     d20:	8f 77       	andi	r24, 0x7F	; 127
     d22:	90 70       	andi	r25, 0x00	; 0
     d24:	a0 70       	andi	r26, 0x00	; 0
     d26:	b0 70       	andi	r27, 0x00	; 0
     d28:	80 34       	cpi	r24, 0x40	; 64
     d2a:	91 05       	cpc	r25, r1
     d2c:	a1 05       	cpc	r26, r1
     d2e:	b1 05       	cpc	r27, r1
     d30:	61 f4       	brne	.+24     	; 0xd4a <__mulsf3+0x1ce>
     d32:	47 fd       	sbrc	r20, 7
     d34:	0a c0       	rjmp	.+20     	; 0xd4a <__mulsf3+0x1ce>
     d36:	e1 14       	cp	r14, r1
     d38:	f1 04       	cpc	r15, r1
     d3a:	01 05       	cpc	r16, r1
     d3c:	11 05       	cpc	r17, r1
     d3e:	29 f0       	breq	.+10     	; 0xd4a <__mulsf3+0x1ce>
     d40:	40 5c       	subi	r20, 0xC0	; 192
     d42:	5f 4f       	sbci	r21, 0xFF	; 255
     d44:	6f 4f       	sbci	r22, 0xFF	; 255
     d46:	7f 4f       	sbci	r23, 0xFF	; 255
     d48:	40 78       	andi	r20, 0x80	; 128
     d4a:	1a 8e       	std	Y+26, r1	; 0x1a
     d4c:	fe 17       	cp	r31, r30
     d4e:	11 f0       	breq	.+4      	; 0xd54 <__mulsf3+0x1d8>
     d50:	81 e0       	ldi	r24, 0x01	; 1
     d52:	8a 8f       	std	Y+26, r24	; 0x1a
     d54:	4d 8f       	std	Y+29, r20	; 0x1d
     d56:	5e 8f       	std	Y+30, r21	; 0x1e
     d58:	6f 8f       	std	Y+31, r22	; 0x1f
     d5a:	78 a3       	std	Y+32, r23	; 0x20
     d5c:	83 e0       	ldi	r24, 0x03	; 3
     d5e:	89 8f       	std	Y+25, r24	; 0x19
     d60:	ce 01       	movw	r24, r28
     d62:	49 96       	adiw	r24, 0x19	; 25
     d64:	0e 94 9c 07 	call	0xf38	; 0xf38 <__pack_f>
     d68:	a0 96       	adiw	r28, 0x20	; 32
     d6a:	e2 e1       	ldi	r30, 0x12	; 18
     d6c:	0c 94 80 09 	jmp	0x1300	; 0x1300 <__epilogue_restores__>

00000d70 <__gtsf2>:
     d70:	a8 e1       	ldi	r26, 0x18	; 24
     d72:	b0 e0       	ldi	r27, 0x00	; 0
     d74:	ee eb       	ldi	r30, 0xBE	; 190
     d76:	f6 e0       	ldi	r31, 0x06	; 6
     d78:	0c 94 70 09 	jmp	0x12e0	; 0x12e0 <__prologue_saves__+0x18>
     d7c:	69 83       	std	Y+1, r22	; 0x01
     d7e:	7a 83       	std	Y+2, r23	; 0x02
     d80:	8b 83       	std	Y+3, r24	; 0x03
     d82:	9c 83       	std	Y+4, r25	; 0x04
     d84:	2d 83       	std	Y+5, r18	; 0x05
     d86:	3e 83       	std	Y+6, r19	; 0x06
     d88:	4f 83       	std	Y+7, r20	; 0x07
     d8a:	58 87       	std	Y+8, r21	; 0x08
     d8c:	89 e0       	ldi	r24, 0x09	; 9
     d8e:	e8 2e       	mov	r14, r24
     d90:	f1 2c       	mov	r15, r1
     d92:	ec 0e       	add	r14, r28
     d94:	fd 1e       	adc	r15, r29
     d96:	ce 01       	movw	r24, r28
     d98:	01 96       	adiw	r24, 0x01	; 1
     d9a:	b7 01       	movw	r22, r14
     d9c:	0e 94 71 08 	call	0x10e2	; 0x10e2 <__unpack_f>
     da0:	8e 01       	movw	r16, r28
     da2:	0f 5e       	subi	r16, 0xEF	; 239
     da4:	1f 4f       	sbci	r17, 0xFF	; 255
     da6:	ce 01       	movw	r24, r28
     da8:	05 96       	adiw	r24, 0x05	; 5
     daa:	b8 01       	movw	r22, r16
     dac:	0e 94 71 08 	call	0x10e2	; 0x10e2 <__unpack_f>
     db0:	89 85       	ldd	r24, Y+9	; 0x09
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	40 f0       	brcs	.+16     	; 0xdc6 <__gtsf2+0x56>
     db6:	89 89       	ldd	r24, Y+17	; 0x11
     db8:	82 30       	cpi	r24, 0x02	; 2
     dba:	28 f0       	brcs	.+10     	; 0xdc6 <__gtsf2+0x56>
     dbc:	c7 01       	movw	r24, r14
     dbe:	b8 01       	movw	r22, r16
     dc0:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <__fpcmp_parts_f>
     dc4:	01 c0       	rjmp	.+2      	; 0xdc8 <__gtsf2+0x58>
     dc6:	8f ef       	ldi	r24, 0xFF	; 255
     dc8:	68 96       	adiw	r28, 0x18	; 24
     dca:	e6 e0       	ldi	r30, 0x06	; 6
     dcc:	0c 94 8c 09 	jmp	0x1318	; 0x1318 <__epilogue_restores__+0x18>

00000dd0 <__gesf2>:
     dd0:	a8 e1       	ldi	r26, 0x18	; 24
     dd2:	b0 e0       	ldi	r27, 0x00	; 0
     dd4:	ee ee       	ldi	r30, 0xEE	; 238
     dd6:	f6 e0       	ldi	r31, 0x06	; 6
     dd8:	0c 94 70 09 	jmp	0x12e0	; 0x12e0 <__prologue_saves__+0x18>
     ddc:	69 83       	std	Y+1, r22	; 0x01
     dde:	7a 83       	std	Y+2, r23	; 0x02
     de0:	8b 83       	std	Y+3, r24	; 0x03
     de2:	9c 83       	std	Y+4, r25	; 0x04
     de4:	2d 83       	std	Y+5, r18	; 0x05
     de6:	3e 83       	std	Y+6, r19	; 0x06
     de8:	4f 83       	std	Y+7, r20	; 0x07
     dea:	58 87       	std	Y+8, r21	; 0x08
     dec:	89 e0       	ldi	r24, 0x09	; 9
     dee:	e8 2e       	mov	r14, r24
     df0:	f1 2c       	mov	r15, r1
     df2:	ec 0e       	add	r14, r28
     df4:	fd 1e       	adc	r15, r29
     df6:	ce 01       	movw	r24, r28
     df8:	01 96       	adiw	r24, 0x01	; 1
     dfa:	b7 01       	movw	r22, r14
     dfc:	0e 94 71 08 	call	0x10e2	; 0x10e2 <__unpack_f>
     e00:	8e 01       	movw	r16, r28
     e02:	0f 5e       	subi	r16, 0xEF	; 239
     e04:	1f 4f       	sbci	r17, 0xFF	; 255
     e06:	ce 01       	movw	r24, r28
     e08:	05 96       	adiw	r24, 0x05	; 5
     e0a:	b8 01       	movw	r22, r16
     e0c:	0e 94 71 08 	call	0x10e2	; 0x10e2 <__unpack_f>
     e10:	89 85       	ldd	r24, Y+9	; 0x09
     e12:	82 30       	cpi	r24, 0x02	; 2
     e14:	40 f0       	brcs	.+16     	; 0xe26 <__gesf2+0x56>
     e16:	89 89       	ldd	r24, Y+17	; 0x11
     e18:	82 30       	cpi	r24, 0x02	; 2
     e1a:	28 f0       	brcs	.+10     	; 0xe26 <__gesf2+0x56>
     e1c:	c7 01       	movw	r24, r14
     e1e:	b8 01       	movw	r22, r16
     e20:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <__fpcmp_parts_f>
     e24:	01 c0       	rjmp	.+2      	; 0xe28 <__gesf2+0x58>
     e26:	8f ef       	ldi	r24, 0xFF	; 255
     e28:	68 96       	adiw	r28, 0x18	; 24
     e2a:	e6 e0       	ldi	r30, 0x06	; 6
     e2c:	0c 94 8c 09 	jmp	0x1318	; 0x1318 <__epilogue_restores__+0x18>

00000e30 <__ltsf2>:
     e30:	a8 e1       	ldi	r26, 0x18	; 24
     e32:	b0 e0       	ldi	r27, 0x00	; 0
     e34:	ee e1       	ldi	r30, 0x1E	; 30
     e36:	f7 e0       	ldi	r31, 0x07	; 7
     e38:	0c 94 70 09 	jmp	0x12e0	; 0x12e0 <__prologue_saves__+0x18>
     e3c:	69 83       	std	Y+1, r22	; 0x01
     e3e:	7a 83       	std	Y+2, r23	; 0x02
     e40:	8b 83       	std	Y+3, r24	; 0x03
     e42:	9c 83       	std	Y+4, r25	; 0x04
     e44:	2d 83       	std	Y+5, r18	; 0x05
     e46:	3e 83       	std	Y+6, r19	; 0x06
     e48:	4f 83       	std	Y+7, r20	; 0x07
     e4a:	58 87       	std	Y+8, r21	; 0x08
     e4c:	89 e0       	ldi	r24, 0x09	; 9
     e4e:	e8 2e       	mov	r14, r24
     e50:	f1 2c       	mov	r15, r1
     e52:	ec 0e       	add	r14, r28
     e54:	fd 1e       	adc	r15, r29
     e56:	ce 01       	movw	r24, r28
     e58:	01 96       	adiw	r24, 0x01	; 1
     e5a:	b7 01       	movw	r22, r14
     e5c:	0e 94 71 08 	call	0x10e2	; 0x10e2 <__unpack_f>
     e60:	8e 01       	movw	r16, r28
     e62:	0f 5e       	subi	r16, 0xEF	; 239
     e64:	1f 4f       	sbci	r17, 0xFF	; 255
     e66:	ce 01       	movw	r24, r28
     e68:	05 96       	adiw	r24, 0x05	; 5
     e6a:	b8 01       	movw	r22, r16
     e6c:	0e 94 71 08 	call	0x10e2	; 0x10e2 <__unpack_f>
     e70:	89 85       	ldd	r24, Y+9	; 0x09
     e72:	82 30       	cpi	r24, 0x02	; 2
     e74:	40 f0       	brcs	.+16     	; 0xe86 <__ltsf2+0x56>
     e76:	89 89       	ldd	r24, Y+17	; 0x11
     e78:	82 30       	cpi	r24, 0x02	; 2
     e7a:	28 f0       	brcs	.+10     	; 0xe86 <__ltsf2+0x56>
     e7c:	c7 01       	movw	r24, r14
     e7e:	b8 01       	movw	r22, r16
     e80:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <__fpcmp_parts_f>
     e84:	01 c0       	rjmp	.+2      	; 0xe88 <__ltsf2+0x58>
     e86:	81 e0       	ldi	r24, 0x01	; 1
     e88:	68 96       	adiw	r28, 0x18	; 24
     e8a:	e6 e0       	ldi	r30, 0x06	; 6
     e8c:	0c 94 8c 09 	jmp	0x1318	; 0x1318 <__epilogue_restores__+0x18>

00000e90 <__fixsfsi>:
     e90:	ac e0       	ldi	r26, 0x0C	; 12
     e92:	b0 e0       	ldi	r27, 0x00	; 0
     e94:	ee e4       	ldi	r30, 0x4E	; 78
     e96:	f7 e0       	ldi	r31, 0x07	; 7
     e98:	0c 94 74 09 	jmp	0x12e8	; 0x12e8 <__prologue_saves__+0x20>
     e9c:	69 83       	std	Y+1, r22	; 0x01
     e9e:	7a 83       	std	Y+2, r23	; 0x02
     ea0:	8b 83       	std	Y+3, r24	; 0x03
     ea2:	9c 83       	std	Y+4, r25	; 0x04
     ea4:	ce 01       	movw	r24, r28
     ea6:	01 96       	adiw	r24, 0x01	; 1
     ea8:	be 01       	movw	r22, r28
     eaa:	6b 5f       	subi	r22, 0xFB	; 251
     eac:	7f 4f       	sbci	r23, 0xFF	; 255
     eae:	0e 94 71 08 	call	0x10e2	; 0x10e2 <__unpack_f>
     eb2:	8d 81       	ldd	r24, Y+5	; 0x05
     eb4:	82 30       	cpi	r24, 0x02	; 2
     eb6:	61 f1       	breq	.+88     	; 0xf10 <__fixsfsi+0x80>
     eb8:	82 30       	cpi	r24, 0x02	; 2
     eba:	50 f1       	brcs	.+84     	; 0xf10 <__fixsfsi+0x80>
     ebc:	84 30       	cpi	r24, 0x04	; 4
     ebe:	21 f4       	brne	.+8      	; 0xec8 <__fixsfsi+0x38>
     ec0:	8e 81       	ldd	r24, Y+6	; 0x06
     ec2:	88 23       	and	r24, r24
     ec4:	51 f1       	breq	.+84     	; 0xf1a <__fixsfsi+0x8a>
     ec6:	2e c0       	rjmp	.+92     	; 0xf24 <__fixsfsi+0x94>
     ec8:	2f 81       	ldd	r18, Y+7	; 0x07
     eca:	38 85       	ldd	r19, Y+8	; 0x08
     ecc:	37 fd       	sbrc	r19, 7
     ece:	20 c0       	rjmp	.+64     	; 0xf10 <__fixsfsi+0x80>
     ed0:	6e 81       	ldd	r22, Y+6	; 0x06
     ed2:	2f 31       	cpi	r18, 0x1F	; 31
     ed4:	31 05       	cpc	r19, r1
     ed6:	1c f0       	brlt	.+6      	; 0xede <__fixsfsi+0x4e>
     ed8:	66 23       	and	r22, r22
     eda:	f9 f0       	breq	.+62     	; 0xf1a <__fixsfsi+0x8a>
     edc:	23 c0       	rjmp	.+70     	; 0xf24 <__fixsfsi+0x94>
     ede:	8e e1       	ldi	r24, 0x1E	; 30
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	82 1b       	sub	r24, r18
     ee4:	93 0b       	sbc	r25, r19
     ee6:	29 85       	ldd	r18, Y+9	; 0x09
     ee8:	3a 85       	ldd	r19, Y+10	; 0x0a
     eea:	4b 85       	ldd	r20, Y+11	; 0x0b
     eec:	5c 85       	ldd	r21, Y+12	; 0x0c
     eee:	04 c0       	rjmp	.+8      	; 0xef8 <__fixsfsi+0x68>
     ef0:	56 95       	lsr	r21
     ef2:	47 95       	ror	r20
     ef4:	37 95       	ror	r19
     ef6:	27 95       	ror	r18
     ef8:	8a 95       	dec	r24
     efa:	d2 f7       	brpl	.-12     	; 0xef0 <__fixsfsi+0x60>
     efc:	66 23       	and	r22, r22
     efe:	b1 f0       	breq	.+44     	; 0xf2c <__fixsfsi+0x9c>
     f00:	50 95       	com	r21
     f02:	40 95       	com	r20
     f04:	30 95       	com	r19
     f06:	21 95       	neg	r18
     f08:	3f 4f       	sbci	r19, 0xFF	; 255
     f0a:	4f 4f       	sbci	r20, 0xFF	; 255
     f0c:	5f 4f       	sbci	r21, 0xFF	; 255
     f0e:	0e c0       	rjmp	.+28     	; 0xf2c <__fixsfsi+0x9c>
     f10:	20 e0       	ldi	r18, 0x00	; 0
     f12:	30 e0       	ldi	r19, 0x00	; 0
     f14:	40 e0       	ldi	r20, 0x00	; 0
     f16:	50 e0       	ldi	r21, 0x00	; 0
     f18:	09 c0       	rjmp	.+18     	; 0xf2c <__fixsfsi+0x9c>
     f1a:	2f ef       	ldi	r18, 0xFF	; 255
     f1c:	3f ef       	ldi	r19, 0xFF	; 255
     f1e:	4f ef       	ldi	r20, 0xFF	; 255
     f20:	5f e7       	ldi	r21, 0x7F	; 127
     f22:	04 c0       	rjmp	.+8      	; 0xf2c <__fixsfsi+0x9c>
     f24:	20 e0       	ldi	r18, 0x00	; 0
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	40 e0       	ldi	r20, 0x00	; 0
     f2a:	50 e8       	ldi	r21, 0x80	; 128
     f2c:	b9 01       	movw	r22, r18
     f2e:	ca 01       	movw	r24, r20
     f30:	2c 96       	adiw	r28, 0x0c	; 12
     f32:	e2 e0       	ldi	r30, 0x02	; 2
     f34:	0c 94 90 09 	jmp	0x1320	; 0x1320 <__epilogue_restores__+0x20>

00000f38 <__pack_f>:
     f38:	df 92       	push	r13
     f3a:	ef 92       	push	r14
     f3c:	ff 92       	push	r15
     f3e:	0f 93       	push	r16
     f40:	1f 93       	push	r17
     f42:	fc 01       	movw	r30, r24
     f44:	e4 80       	ldd	r14, Z+4	; 0x04
     f46:	f5 80       	ldd	r15, Z+5	; 0x05
     f48:	06 81       	ldd	r16, Z+6	; 0x06
     f4a:	17 81       	ldd	r17, Z+7	; 0x07
     f4c:	d1 80       	ldd	r13, Z+1	; 0x01
     f4e:	80 81       	ld	r24, Z
     f50:	82 30       	cpi	r24, 0x02	; 2
     f52:	48 f4       	brcc	.+18     	; 0xf66 <__pack_f+0x2e>
     f54:	80 e0       	ldi	r24, 0x00	; 0
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	a0 e1       	ldi	r26, 0x10	; 16
     f5a:	b0 e0       	ldi	r27, 0x00	; 0
     f5c:	e8 2a       	or	r14, r24
     f5e:	f9 2a       	or	r15, r25
     f60:	0a 2b       	or	r16, r26
     f62:	1b 2b       	or	r17, r27
     f64:	a5 c0       	rjmp	.+330    	; 0x10b0 <__pack_f+0x178>
     f66:	84 30       	cpi	r24, 0x04	; 4
     f68:	09 f4       	brne	.+2      	; 0xf6c <__pack_f+0x34>
     f6a:	9f c0       	rjmp	.+318    	; 0x10aa <__pack_f+0x172>
     f6c:	82 30       	cpi	r24, 0x02	; 2
     f6e:	21 f4       	brne	.+8      	; 0xf78 <__pack_f+0x40>
     f70:	ee 24       	eor	r14, r14
     f72:	ff 24       	eor	r15, r15
     f74:	87 01       	movw	r16, r14
     f76:	05 c0       	rjmp	.+10     	; 0xf82 <__pack_f+0x4a>
     f78:	e1 14       	cp	r14, r1
     f7a:	f1 04       	cpc	r15, r1
     f7c:	01 05       	cpc	r16, r1
     f7e:	11 05       	cpc	r17, r1
     f80:	19 f4       	brne	.+6      	; 0xf88 <__pack_f+0x50>
     f82:	e0 e0       	ldi	r30, 0x00	; 0
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	96 c0       	rjmp	.+300    	; 0x10b4 <__pack_f+0x17c>
     f88:	62 81       	ldd	r22, Z+2	; 0x02
     f8a:	73 81       	ldd	r23, Z+3	; 0x03
     f8c:	9f ef       	ldi	r25, 0xFF	; 255
     f8e:	62 38       	cpi	r22, 0x82	; 130
     f90:	79 07       	cpc	r23, r25
     f92:	0c f0       	brlt	.+2      	; 0xf96 <__pack_f+0x5e>
     f94:	5b c0       	rjmp	.+182    	; 0x104c <__pack_f+0x114>
     f96:	22 e8       	ldi	r18, 0x82	; 130
     f98:	3f ef       	ldi	r19, 0xFF	; 255
     f9a:	26 1b       	sub	r18, r22
     f9c:	37 0b       	sbc	r19, r23
     f9e:	2a 31       	cpi	r18, 0x1A	; 26
     fa0:	31 05       	cpc	r19, r1
     fa2:	2c f0       	brlt	.+10     	; 0xfae <__pack_f+0x76>
     fa4:	20 e0       	ldi	r18, 0x00	; 0
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	40 e0       	ldi	r20, 0x00	; 0
     faa:	50 e0       	ldi	r21, 0x00	; 0
     fac:	2a c0       	rjmp	.+84     	; 0x1002 <__pack_f+0xca>
     fae:	b8 01       	movw	r22, r16
     fb0:	a7 01       	movw	r20, r14
     fb2:	02 2e       	mov	r0, r18
     fb4:	04 c0       	rjmp	.+8      	; 0xfbe <__pack_f+0x86>
     fb6:	76 95       	lsr	r23
     fb8:	67 95       	ror	r22
     fba:	57 95       	ror	r21
     fbc:	47 95       	ror	r20
     fbe:	0a 94       	dec	r0
     fc0:	d2 f7       	brpl	.-12     	; 0xfb6 <__pack_f+0x7e>
     fc2:	81 e0       	ldi	r24, 0x01	; 1
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	a0 e0       	ldi	r26, 0x00	; 0
     fc8:	b0 e0       	ldi	r27, 0x00	; 0
     fca:	04 c0       	rjmp	.+8      	; 0xfd4 <__pack_f+0x9c>
     fcc:	88 0f       	add	r24, r24
     fce:	99 1f       	adc	r25, r25
     fd0:	aa 1f       	adc	r26, r26
     fd2:	bb 1f       	adc	r27, r27
     fd4:	2a 95       	dec	r18
     fd6:	d2 f7       	brpl	.-12     	; 0xfcc <__pack_f+0x94>
     fd8:	01 97       	sbiw	r24, 0x01	; 1
     fda:	a1 09       	sbc	r26, r1
     fdc:	b1 09       	sbc	r27, r1
     fde:	8e 21       	and	r24, r14
     fe0:	9f 21       	and	r25, r15
     fe2:	a0 23       	and	r26, r16
     fe4:	b1 23       	and	r27, r17
     fe6:	00 97       	sbiw	r24, 0x00	; 0
     fe8:	a1 05       	cpc	r26, r1
     fea:	b1 05       	cpc	r27, r1
     fec:	21 f0       	breq	.+8      	; 0xff6 <__pack_f+0xbe>
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	a0 e0       	ldi	r26, 0x00	; 0
     ff4:	b0 e0       	ldi	r27, 0x00	; 0
     ff6:	9a 01       	movw	r18, r20
     ff8:	ab 01       	movw	r20, r22
     ffa:	28 2b       	or	r18, r24
     ffc:	39 2b       	or	r19, r25
     ffe:	4a 2b       	or	r20, r26
    1000:	5b 2b       	or	r21, r27
    1002:	da 01       	movw	r26, r20
    1004:	c9 01       	movw	r24, r18
    1006:	8f 77       	andi	r24, 0x7F	; 127
    1008:	90 70       	andi	r25, 0x00	; 0
    100a:	a0 70       	andi	r26, 0x00	; 0
    100c:	b0 70       	andi	r27, 0x00	; 0
    100e:	80 34       	cpi	r24, 0x40	; 64
    1010:	91 05       	cpc	r25, r1
    1012:	a1 05       	cpc	r26, r1
    1014:	b1 05       	cpc	r27, r1
    1016:	39 f4       	brne	.+14     	; 0x1026 <__pack_f+0xee>
    1018:	27 ff       	sbrs	r18, 7
    101a:	09 c0       	rjmp	.+18     	; 0x102e <__pack_f+0xf6>
    101c:	20 5c       	subi	r18, 0xC0	; 192
    101e:	3f 4f       	sbci	r19, 0xFF	; 255
    1020:	4f 4f       	sbci	r20, 0xFF	; 255
    1022:	5f 4f       	sbci	r21, 0xFF	; 255
    1024:	04 c0       	rjmp	.+8      	; 0x102e <__pack_f+0xf6>
    1026:	21 5c       	subi	r18, 0xC1	; 193
    1028:	3f 4f       	sbci	r19, 0xFF	; 255
    102a:	4f 4f       	sbci	r20, 0xFF	; 255
    102c:	5f 4f       	sbci	r21, 0xFF	; 255
    102e:	e0 e0       	ldi	r30, 0x00	; 0
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	20 30       	cpi	r18, 0x00	; 0
    1034:	a0 e0       	ldi	r26, 0x00	; 0
    1036:	3a 07       	cpc	r19, r26
    1038:	a0 e0       	ldi	r26, 0x00	; 0
    103a:	4a 07       	cpc	r20, r26
    103c:	a0 e4       	ldi	r26, 0x40	; 64
    103e:	5a 07       	cpc	r21, r26
    1040:	10 f0       	brcs	.+4      	; 0x1046 <__pack_f+0x10e>
    1042:	e1 e0       	ldi	r30, 0x01	; 1
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	79 01       	movw	r14, r18
    1048:	8a 01       	movw	r16, r20
    104a:	27 c0       	rjmp	.+78     	; 0x109a <__pack_f+0x162>
    104c:	60 38       	cpi	r22, 0x80	; 128
    104e:	71 05       	cpc	r23, r1
    1050:	64 f5       	brge	.+88     	; 0x10aa <__pack_f+0x172>
    1052:	fb 01       	movw	r30, r22
    1054:	e1 58       	subi	r30, 0x81	; 129
    1056:	ff 4f       	sbci	r31, 0xFF	; 255
    1058:	d8 01       	movw	r26, r16
    105a:	c7 01       	movw	r24, r14
    105c:	8f 77       	andi	r24, 0x7F	; 127
    105e:	90 70       	andi	r25, 0x00	; 0
    1060:	a0 70       	andi	r26, 0x00	; 0
    1062:	b0 70       	andi	r27, 0x00	; 0
    1064:	80 34       	cpi	r24, 0x40	; 64
    1066:	91 05       	cpc	r25, r1
    1068:	a1 05       	cpc	r26, r1
    106a:	b1 05       	cpc	r27, r1
    106c:	39 f4       	brne	.+14     	; 0x107c <__pack_f+0x144>
    106e:	e7 fe       	sbrs	r14, 7
    1070:	0d c0       	rjmp	.+26     	; 0x108c <__pack_f+0x154>
    1072:	80 e4       	ldi	r24, 0x40	; 64
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	a0 e0       	ldi	r26, 0x00	; 0
    1078:	b0 e0       	ldi	r27, 0x00	; 0
    107a:	04 c0       	rjmp	.+8      	; 0x1084 <__pack_f+0x14c>
    107c:	8f e3       	ldi	r24, 0x3F	; 63
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	a0 e0       	ldi	r26, 0x00	; 0
    1082:	b0 e0       	ldi	r27, 0x00	; 0
    1084:	e8 0e       	add	r14, r24
    1086:	f9 1e       	adc	r15, r25
    1088:	0a 1f       	adc	r16, r26
    108a:	1b 1f       	adc	r17, r27
    108c:	17 ff       	sbrs	r17, 7
    108e:	05 c0       	rjmp	.+10     	; 0x109a <__pack_f+0x162>
    1090:	16 95       	lsr	r17
    1092:	07 95       	ror	r16
    1094:	f7 94       	ror	r15
    1096:	e7 94       	ror	r14
    1098:	31 96       	adiw	r30, 0x01	; 1
    109a:	87 e0       	ldi	r24, 0x07	; 7
    109c:	16 95       	lsr	r17
    109e:	07 95       	ror	r16
    10a0:	f7 94       	ror	r15
    10a2:	e7 94       	ror	r14
    10a4:	8a 95       	dec	r24
    10a6:	d1 f7       	brne	.-12     	; 0x109c <__pack_f+0x164>
    10a8:	05 c0       	rjmp	.+10     	; 0x10b4 <__pack_f+0x17c>
    10aa:	ee 24       	eor	r14, r14
    10ac:	ff 24       	eor	r15, r15
    10ae:	87 01       	movw	r16, r14
    10b0:	ef ef       	ldi	r30, 0xFF	; 255
    10b2:	f0 e0       	ldi	r31, 0x00	; 0
    10b4:	6e 2f       	mov	r22, r30
    10b6:	67 95       	ror	r22
    10b8:	66 27       	eor	r22, r22
    10ba:	67 95       	ror	r22
    10bc:	90 2f       	mov	r25, r16
    10be:	9f 77       	andi	r25, 0x7F	; 127
    10c0:	d7 94       	ror	r13
    10c2:	dd 24       	eor	r13, r13
    10c4:	d7 94       	ror	r13
    10c6:	8e 2f       	mov	r24, r30
    10c8:	86 95       	lsr	r24
    10ca:	49 2f       	mov	r20, r25
    10cc:	46 2b       	or	r20, r22
    10ce:	58 2f       	mov	r21, r24
    10d0:	5d 29       	or	r21, r13
    10d2:	b7 01       	movw	r22, r14
    10d4:	ca 01       	movw	r24, r20
    10d6:	1f 91       	pop	r17
    10d8:	0f 91       	pop	r16
    10da:	ff 90       	pop	r15
    10dc:	ef 90       	pop	r14
    10de:	df 90       	pop	r13
    10e0:	08 95       	ret

000010e2 <__unpack_f>:
    10e2:	fc 01       	movw	r30, r24
    10e4:	db 01       	movw	r26, r22
    10e6:	40 81       	ld	r20, Z
    10e8:	51 81       	ldd	r21, Z+1	; 0x01
    10ea:	22 81       	ldd	r18, Z+2	; 0x02
    10ec:	62 2f       	mov	r22, r18
    10ee:	6f 77       	andi	r22, 0x7F	; 127
    10f0:	70 e0       	ldi	r23, 0x00	; 0
    10f2:	22 1f       	adc	r18, r18
    10f4:	22 27       	eor	r18, r18
    10f6:	22 1f       	adc	r18, r18
    10f8:	93 81       	ldd	r25, Z+3	; 0x03
    10fa:	89 2f       	mov	r24, r25
    10fc:	88 0f       	add	r24, r24
    10fe:	82 2b       	or	r24, r18
    1100:	28 2f       	mov	r18, r24
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	99 1f       	adc	r25, r25
    1106:	99 27       	eor	r25, r25
    1108:	99 1f       	adc	r25, r25
    110a:	11 96       	adiw	r26, 0x01	; 1
    110c:	9c 93       	st	X, r25
    110e:	11 97       	sbiw	r26, 0x01	; 1
    1110:	21 15       	cp	r18, r1
    1112:	31 05       	cpc	r19, r1
    1114:	a9 f5       	brne	.+106    	; 0x1180 <__unpack_f+0x9e>
    1116:	41 15       	cp	r20, r1
    1118:	51 05       	cpc	r21, r1
    111a:	61 05       	cpc	r22, r1
    111c:	71 05       	cpc	r23, r1
    111e:	11 f4       	brne	.+4      	; 0x1124 <__unpack_f+0x42>
    1120:	82 e0       	ldi	r24, 0x02	; 2
    1122:	37 c0       	rjmp	.+110    	; 0x1192 <__unpack_f+0xb0>
    1124:	82 e8       	ldi	r24, 0x82	; 130
    1126:	9f ef       	ldi	r25, 0xFF	; 255
    1128:	13 96       	adiw	r26, 0x03	; 3
    112a:	9c 93       	st	X, r25
    112c:	8e 93       	st	-X, r24
    112e:	12 97       	sbiw	r26, 0x02	; 2
    1130:	9a 01       	movw	r18, r20
    1132:	ab 01       	movw	r20, r22
    1134:	67 e0       	ldi	r22, 0x07	; 7
    1136:	22 0f       	add	r18, r18
    1138:	33 1f       	adc	r19, r19
    113a:	44 1f       	adc	r20, r20
    113c:	55 1f       	adc	r21, r21
    113e:	6a 95       	dec	r22
    1140:	d1 f7       	brne	.-12     	; 0x1136 <__unpack_f+0x54>
    1142:	83 e0       	ldi	r24, 0x03	; 3
    1144:	8c 93       	st	X, r24
    1146:	0d c0       	rjmp	.+26     	; 0x1162 <__unpack_f+0x80>
    1148:	22 0f       	add	r18, r18
    114a:	33 1f       	adc	r19, r19
    114c:	44 1f       	adc	r20, r20
    114e:	55 1f       	adc	r21, r21
    1150:	12 96       	adiw	r26, 0x02	; 2
    1152:	8d 91       	ld	r24, X+
    1154:	9c 91       	ld	r25, X
    1156:	13 97       	sbiw	r26, 0x03	; 3
    1158:	01 97       	sbiw	r24, 0x01	; 1
    115a:	13 96       	adiw	r26, 0x03	; 3
    115c:	9c 93       	st	X, r25
    115e:	8e 93       	st	-X, r24
    1160:	12 97       	sbiw	r26, 0x02	; 2
    1162:	20 30       	cpi	r18, 0x00	; 0
    1164:	80 e0       	ldi	r24, 0x00	; 0
    1166:	38 07       	cpc	r19, r24
    1168:	80 e0       	ldi	r24, 0x00	; 0
    116a:	48 07       	cpc	r20, r24
    116c:	80 e4       	ldi	r24, 0x40	; 64
    116e:	58 07       	cpc	r21, r24
    1170:	58 f3       	brcs	.-42     	; 0x1148 <__unpack_f+0x66>
    1172:	14 96       	adiw	r26, 0x04	; 4
    1174:	2d 93       	st	X+, r18
    1176:	3d 93       	st	X+, r19
    1178:	4d 93       	st	X+, r20
    117a:	5c 93       	st	X, r21
    117c:	17 97       	sbiw	r26, 0x07	; 7
    117e:	08 95       	ret
    1180:	2f 3f       	cpi	r18, 0xFF	; 255
    1182:	31 05       	cpc	r19, r1
    1184:	79 f4       	brne	.+30     	; 0x11a4 <__unpack_f+0xc2>
    1186:	41 15       	cp	r20, r1
    1188:	51 05       	cpc	r21, r1
    118a:	61 05       	cpc	r22, r1
    118c:	71 05       	cpc	r23, r1
    118e:	19 f4       	brne	.+6      	; 0x1196 <__unpack_f+0xb4>
    1190:	84 e0       	ldi	r24, 0x04	; 4
    1192:	8c 93       	st	X, r24
    1194:	08 95       	ret
    1196:	64 ff       	sbrs	r22, 4
    1198:	03 c0       	rjmp	.+6      	; 0x11a0 <__unpack_f+0xbe>
    119a:	81 e0       	ldi	r24, 0x01	; 1
    119c:	8c 93       	st	X, r24
    119e:	12 c0       	rjmp	.+36     	; 0x11c4 <__unpack_f+0xe2>
    11a0:	1c 92       	st	X, r1
    11a2:	10 c0       	rjmp	.+32     	; 0x11c4 <__unpack_f+0xe2>
    11a4:	2f 57       	subi	r18, 0x7F	; 127
    11a6:	30 40       	sbci	r19, 0x00	; 0
    11a8:	13 96       	adiw	r26, 0x03	; 3
    11aa:	3c 93       	st	X, r19
    11ac:	2e 93       	st	-X, r18
    11ae:	12 97       	sbiw	r26, 0x02	; 2
    11b0:	83 e0       	ldi	r24, 0x03	; 3
    11b2:	8c 93       	st	X, r24
    11b4:	87 e0       	ldi	r24, 0x07	; 7
    11b6:	44 0f       	add	r20, r20
    11b8:	55 1f       	adc	r21, r21
    11ba:	66 1f       	adc	r22, r22
    11bc:	77 1f       	adc	r23, r23
    11be:	8a 95       	dec	r24
    11c0:	d1 f7       	brne	.-12     	; 0x11b6 <__unpack_f+0xd4>
    11c2:	70 64       	ori	r23, 0x40	; 64
    11c4:	14 96       	adiw	r26, 0x04	; 4
    11c6:	4d 93       	st	X+, r20
    11c8:	5d 93       	st	X+, r21
    11ca:	6d 93       	st	X+, r22
    11cc:	7c 93       	st	X, r23
    11ce:	17 97       	sbiw	r26, 0x07	; 7
    11d0:	08 95       	ret

000011d2 <__fpcmp_parts_f>:
    11d2:	1f 93       	push	r17
    11d4:	dc 01       	movw	r26, r24
    11d6:	fb 01       	movw	r30, r22
    11d8:	9c 91       	ld	r25, X
    11da:	92 30       	cpi	r25, 0x02	; 2
    11dc:	08 f4       	brcc	.+2      	; 0x11e0 <__fpcmp_parts_f+0xe>
    11de:	47 c0       	rjmp	.+142    	; 0x126e <__fpcmp_parts_f+0x9c>
    11e0:	80 81       	ld	r24, Z
    11e2:	82 30       	cpi	r24, 0x02	; 2
    11e4:	08 f4       	brcc	.+2      	; 0x11e8 <__fpcmp_parts_f+0x16>
    11e6:	43 c0       	rjmp	.+134    	; 0x126e <__fpcmp_parts_f+0x9c>
    11e8:	94 30       	cpi	r25, 0x04	; 4
    11ea:	51 f4       	brne	.+20     	; 0x1200 <__fpcmp_parts_f+0x2e>
    11ec:	11 96       	adiw	r26, 0x01	; 1
    11ee:	1c 91       	ld	r17, X
    11f0:	84 30       	cpi	r24, 0x04	; 4
    11f2:	99 f5       	brne	.+102    	; 0x125a <__fpcmp_parts_f+0x88>
    11f4:	81 81       	ldd	r24, Z+1	; 0x01
    11f6:	68 2f       	mov	r22, r24
    11f8:	70 e0       	ldi	r23, 0x00	; 0
    11fa:	61 1b       	sub	r22, r17
    11fc:	71 09       	sbc	r23, r1
    11fe:	3f c0       	rjmp	.+126    	; 0x127e <__fpcmp_parts_f+0xac>
    1200:	84 30       	cpi	r24, 0x04	; 4
    1202:	21 f0       	breq	.+8      	; 0x120c <__fpcmp_parts_f+0x3a>
    1204:	92 30       	cpi	r25, 0x02	; 2
    1206:	31 f4       	brne	.+12     	; 0x1214 <__fpcmp_parts_f+0x42>
    1208:	82 30       	cpi	r24, 0x02	; 2
    120a:	b9 f1       	breq	.+110    	; 0x127a <__fpcmp_parts_f+0xa8>
    120c:	81 81       	ldd	r24, Z+1	; 0x01
    120e:	88 23       	and	r24, r24
    1210:	89 f1       	breq	.+98     	; 0x1274 <__fpcmp_parts_f+0xa2>
    1212:	2d c0       	rjmp	.+90     	; 0x126e <__fpcmp_parts_f+0x9c>
    1214:	11 96       	adiw	r26, 0x01	; 1
    1216:	1c 91       	ld	r17, X
    1218:	11 97       	sbiw	r26, 0x01	; 1
    121a:	82 30       	cpi	r24, 0x02	; 2
    121c:	f1 f0       	breq	.+60     	; 0x125a <__fpcmp_parts_f+0x88>
    121e:	81 81       	ldd	r24, Z+1	; 0x01
    1220:	18 17       	cp	r17, r24
    1222:	d9 f4       	brne	.+54     	; 0x125a <__fpcmp_parts_f+0x88>
    1224:	12 96       	adiw	r26, 0x02	; 2
    1226:	2d 91       	ld	r18, X+
    1228:	3c 91       	ld	r19, X
    122a:	13 97       	sbiw	r26, 0x03	; 3
    122c:	82 81       	ldd	r24, Z+2	; 0x02
    122e:	93 81       	ldd	r25, Z+3	; 0x03
    1230:	82 17       	cp	r24, r18
    1232:	93 07       	cpc	r25, r19
    1234:	94 f0       	brlt	.+36     	; 0x125a <__fpcmp_parts_f+0x88>
    1236:	28 17       	cp	r18, r24
    1238:	39 07       	cpc	r19, r25
    123a:	bc f0       	brlt	.+46     	; 0x126a <__fpcmp_parts_f+0x98>
    123c:	14 96       	adiw	r26, 0x04	; 4
    123e:	8d 91       	ld	r24, X+
    1240:	9d 91       	ld	r25, X+
    1242:	0d 90       	ld	r0, X+
    1244:	bc 91       	ld	r27, X
    1246:	a0 2d       	mov	r26, r0
    1248:	24 81       	ldd	r18, Z+4	; 0x04
    124a:	35 81       	ldd	r19, Z+5	; 0x05
    124c:	46 81       	ldd	r20, Z+6	; 0x06
    124e:	57 81       	ldd	r21, Z+7	; 0x07
    1250:	28 17       	cp	r18, r24
    1252:	39 07       	cpc	r19, r25
    1254:	4a 07       	cpc	r20, r26
    1256:	5b 07       	cpc	r21, r27
    1258:	18 f4       	brcc	.+6      	; 0x1260 <__fpcmp_parts_f+0x8e>
    125a:	11 23       	and	r17, r17
    125c:	41 f0       	breq	.+16     	; 0x126e <__fpcmp_parts_f+0x9c>
    125e:	0a c0       	rjmp	.+20     	; 0x1274 <__fpcmp_parts_f+0xa2>
    1260:	82 17       	cp	r24, r18
    1262:	93 07       	cpc	r25, r19
    1264:	a4 07       	cpc	r26, r20
    1266:	b5 07       	cpc	r27, r21
    1268:	40 f4       	brcc	.+16     	; 0x127a <__fpcmp_parts_f+0xa8>
    126a:	11 23       	and	r17, r17
    126c:	19 f0       	breq	.+6      	; 0x1274 <__fpcmp_parts_f+0xa2>
    126e:	61 e0       	ldi	r22, 0x01	; 1
    1270:	70 e0       	ldi	r23, 0x00	; 0
    1272:	05 c0       	rjmp	.+10     	; 0x127e <__fpcmp_parts_f+0xac>
    1274:	6f ef       	ldi	r22, 0xFF	; 255
    1276:	7f ef       	ldi	r23, 0xFF	; 255
    1278:	02 c0       	rjmp	.+4      	; 0x127e <__fpcmp_parts_f+0xac>
    127a:	60 e0       	ldi	r22, 0x00	; 0
    127c:	70 e0       	ldi	r23, 0x00	; 0
    127e:	cb 01       	movw	r24, r22
    1280:	1f 91       	pop	r17
    1282:	08 95       	ret

00001284 <__udivmodsi4>:
    1284:	a1 e2       	ldi	r26, 0x21	; 33
    1286:	1a 2e       	mov	r1, r26
    1288:	aa 1b       	sub	r26, r26
    128a:	bb 1b       	sub	r27, r27
    128c:	fd 01       	movw	r30, r26
    128e:	0d c0       	rjmp	.+26     	; 0x12aa <__udivmodsi4_ep>

00001290 <__udivmodsi4_loop>:
    1290:	aa 1f       	adc	r26, r26
    1292:	bb 1f       	adc	r27, r27
    1294:	ee 1f       	adc	r30, r30
    1296:	ff 1f       	adc	r31, r31
    1298:	a2 17       	cp	r26, r18
    129a:	b3 07       	cpc	r27, r19
    129c:	e4 07       	cpc	r30, r20
    129e:	f5 07       	cpc	r31, r21
    12a0:	20 f0       	brcs	.+8      	; 0x12aa <__udivmodsi4_ep>
    12a2:	a2 1b       	sub	r26, r18
    12a4:	b3 0b       	sbc	r27, r19
    12a6:	e4 0b       	sbc	r30, r20
    12a8:	f5 0b       	sbc	r31, r21

000012aa <__udivmodsi4_ep>:
    12aa:	66 1f       	adc	r22, r22
    12ac:	77 1f       	adc	r23, r23
    12ae:	88 1f       	adc	r24, r24
    12b0:	99 1f       	adc	r25, r25
    12b2:	1a 94       	dec	r1
    12b4:	69 f7       	brne	.-38     	; 0x1290 <__udivmodsi4_loop>
    12b6:	60 95       	com	r22
    12b8:	70 95       	com	r23
    12ba:	80 95       	com	r24
    12bc:	90 95       	com	r25
    12be:	9b 01       	movw	r18, r22
    12c0:	ac 01       	movw	r20, r24
    12c2:	bd 01       	movw	r22, r26
    12c4:	cf 01       	movw	r24, r30
    12c6:	08 95       	ret

000012c8 <__prologue_saves__>:
    12c8:	2f 92       	push	r2
    12ca:	3f 92       	push	r3
    12cc:	4f 92       	push	r4
    12ce:	5f 92       	push	r5
    12d0:	6f 92       	push	r6
    12d2:	7f 92       	push	r7
    12d4:	8f 92       	push	r8
    12d6:	9f 92       	push	r9
    12d8:	af 92       	push	r10
    12da:	bf 92       	push	r11
    12dc:	cf 92       	push	r12
    12de:	df 92       	push	r13
    12e0:	ef 92       	push	r14
    12e2:	ff 92       	push	r15
    12e4:	0f 93       	push	r16
    12e6:	1f 93       	push	r17
    12e8:	cf 93       	push	r28
    12ea:	df 93       	push	r29
    12ec:	cd b7       	in	r28, 0x3d	; 61
    12ee:	de b7       	in	r29, 0x3e	; 62
    12f0:	ca 1b       	sub	r28, r26
    12f2:	db 0b       	sbc	r29, r27
    12f4:	0f b6       	in	r0, 0x3f	; 63
    12f6:	f8 94       	cli
    12f8:	de bf       	out	0x3e, r29	; 62
    12fa:	0f be       	out	0x3f, r0	; 63
    12fc:	cd bf       	out	0x3d, r28	; 61
    12fe:	19 94       	eijmp

00001300 <__epilogue_restores__>:
    1300:	2a 88       	ldd	r2, Y+18	; 0x12
    1302:	39 88       	ldd	r3, Y+17	; 0x11
    1304:	48 88       	ldd	r4, Y+16	; 0x10
    1306:	5f 84       	ldd	r5, Y+15	; 0x0f
    1308:	6e 84       	ldd	r6, Y+14	; 0x0e
    130a:	7d 84       	ldd	r7, Y+13	; 0x0d
    130c:	8c 84       	ldd	r8, Y+12	; 0x0c
    130e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1310:	aa 84       	ldd	r10, Y+10	; 0x0a
    1312:	b9 84       	ldd	r11, Y+9	; 0x09
    1314:	c8 84       	ldd	r12, Y+8	; 0x08
    1316:	df 80       	ldd	r13, Y+7	; 0x07
    1318:	ee 80       	ldd	r14, Y+6	; 0x06
    131a:	fd 80       	ldd	r15, Y+5	; 0x05
    131c:	0c 81       	ldd	r16, Y+4	; 0x04
    131e:	1b 81       	ldd	r17, Y+3	; 0x03
    1320:	aa 81       	ldd	r26, Y+2	; 0x02
    1322:	b9 81       	ldd	r27, Y+1	; 0x01
    1324:	ce 0f       	add	r28, r30
    1326:	d1 1d       	adc	r29, r1
    1328:	0f b6       	in	r0, 0x3f	; 63
    132a:	f8 94       	cli
    132c:	de bf       	out	0x3e, r29	; 62
    132e:	0f be       	out	0x3f, r0	; 63
    1330:	cd bf       	out	0x3d, r28	; 61
    1332:	ed 01       	movw	r28, r26
    1334:	08 95       	ret

00001336 <_exit>:
    1336:	f8 94       	cli

00001338 <__stop_program>:
    1338:	ff cf       	rjmp	.-2      	; 0x1338 <__stop_program>
