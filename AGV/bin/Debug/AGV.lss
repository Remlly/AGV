
bin\Debug\AGV.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000108  00800200  00001a7c  00001b30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a7c  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000018  00800308  00800308  00001c38  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  00001c38  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 00000200  00000000  00000000  00001c3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000035f  00000000  00000000  00001e3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002ba3  00000000  00000000  0000219a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000169a  00000000  00000000  00004d3d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001937  00000000  00000000  000063d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002e0  00000000  00000000  00007d10  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000055a  00000000  00000000  00007ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009ce  00000000  00000000  0000854a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00008f18  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__vector_23>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	13 e0       	ldi	r17, 0x03	; 3
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ec e7       	ldi	r30, 0x7C	; 124
      fc:	fa e1       	ldi	r31, 0x1A	; 26
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a8 30       	cpi	r26, 0x08	; 8
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	13 e0       	ldi	r17, 0x03	; 3
     110:	a8 e0       	ldi	r26, 0x08	; 8
     112:	b3 e0       	ldi	r27, 0x03	; 3
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a0 32       	cpi	r26, 0x20	; 32
     11a:	b1 07       	cpc	r27, r17
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 95 00 	call	0x12a	; 0x12a <main>
     122:	0c 94 3c 0d 	jmp	0x1a78	; 0x1a78 <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <main>:

#include "stepper.h"
#include "serial.h"

int main(void)
{
     12a:	df 93       	push	r29
     12c:	cf 93       	push	r28
     12e:	cd b7       	in	r28, 0x3d	; 61
     130:	de b7       	in	r29, 0x3e	; 62
    ///initializing stepper motors///
    construct_stepper(&stepper1, PK0, PK1);
     132:	82 e1       	ldi	r24, 0x12	; 18
     134:	93 e0       	ldi	r25, 0x03	; 3
     136:	60 e0       	ldi	r22, 0x00	; 0
     138:	41 e0       	ldi	r20, 0x01	; 1
     13a:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <construct_stepper>
    construct_stepper(&stepper2, PK2, PK3);
     13e:	88 e0       	ldi	r24, 0x08	; 8
     140:	93 e0       	ldi	r25, 0x03	; 3
     142:	62 e0       	ldi	r22, 0x02	; 2
     144:	43 e0       	ldi	r20, 0x03	; 3
     146:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <construct_stepper>
    initialize_steppers();
     14a:	0e 94 23 02 	call	0x446	; 0x446 <initialize_steppers>
    init_stepper_timer0();
     14e:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <init_stepper_timer0>
    sei();
     152:	78 94       	sei

    ///initializing serial coms
    USART_Init(MYUBRR);
     154:	87 e6       	ldi	r24, 0x67	; 103
     156:	90 e0       	ldi	r25, 0x00	; 0
     158:	0e 94 ff 00 	call	0x1fe	; 0x1fe <USART_Init>

    stepper2.direction = forward;
     15c:	82 e0       	ldi	r24, 0x02	; 2
     15e:	80 93 0d 03 	sts	0x030D, r24
    stepper1.direction = backward;
     162:	81 e0       	ldi	r24, 0x01	; 1
     164:	80 93 17 03 	sts	0x0317, r24
    stepper1.time_profile = 10;
     168:	8a e0       	ldi	r24, 0x0A	; 10
     16a:	80 93 16 03 	sts	0x0316, r24
    stepper2.time_profile = 10;
     16e:	8a e0       	ldi	r24, 0x0A	; 10
     170:	80 93 0c 03 	sts	0x030C, r24


    turn(360, &stepper1, &stepper2);
     174:	22 e1       	ldi	r18, 0x12	; 18
     176:	33 e0       	ldi	r19, 0x03	; 3
     178:	48 e0       	ldi	r20, 0x08	; 8
     17a:	53 e0       	ldi	r21, 0x03	; 3
     17c:	88 e6       	ldi	r24, 0x68	; 104
     17e:	91 e0       	ldi	r25, 0x01	; 1
     180:	b9 01       	movw	r22, r18
     182:	0e 94 c9 04 	call	0x992	; 0x992 <turn>
    while(1)
    {
        //


        Handle_steps(&stepper1);
     186:	82 e1       	ldi	r24, 0x12	; 18
     188:	93 e0       	ldi	r25, 0x03	; 3
     18a:	0e 94 74 04 	call	0x8e8	; 0x8e8 <Handle_steps>
        Handle_steps(&stepper2);
     18e:	88 e0       	ldi	r24, 0x08	; 8
     190:	93 e0       	ldi	r25, 0x03	; 3
     192:	0e 94 74 04 	call	0x8e8	; 0x8e8 <Handle_steps>
        set_dir(&stepper1);
     196:	82 e1       	ldi	r24, 0x12	; 18
     198:	93 e0       	ldi	r25, 0x03	; 3
     19a:	0e 94 33 02 	call	0x466	; 0x466 <set_dir>
        set_dir(&stepper2);
     19e:	88 e0       	ldi	r24, 0x08	; 8
     1a0:	93 e0       	ldi	r25, 0x03	; 3
     1a2:	0e 94 33 02 	call	0x466	; 0x466 <set_dir>
     1a6:	ef cf       	rjmp	.-34     	; 0x186 <main+0x5c>

000001a8 <__vector_23>:

    return 0;
}

ISR(TIMER0_OVF_vect)
{
     1a8:	1f 92       	push	r1
     1aa:	0f 92       	push	r0
     1ac:	0f b6       	in	r0, 0x3f	; 63
     1ae:	0f 92       	push	r0
     1b0:	11 24       	eor	r1, r1
     1b2:	8f 93       	push	r24
     1b4:	9f 93       	push	r25
     1b6:	af 93       	push	r26
     1b8:	bf 93       	push	r27
     1ba:	df 93       	push	r29
     1bc:	cf 93       	push	r28
     1be:	cd b7       	in	r28, 0x3d	; 61
     1c0:	de b7       	in	r29, 0x3e	; 62
    ms++;
     1c2:	80 91 1c 03 	lds	r24, 0x031C
     1c6:	90 91 1d 03 	lds	r25, 0x031D
     1ca:	a0 91 1e 03 	lds	r26, 0x031E
     1ce:	b0 91 1f 03 	lds	r27, 0x031F
     1d2:	01 96       	adiw	r24, 0x01	; 1
     1d4:	a1 1d       	adc	r26, r1
     1d6:	b1 1d       	adc	r27, r1
     1d8:	80 93 1c 03 	sts	0x031C, r24
     1dc:	90 93 1d 03 	sts	0x031D, r25
     1e0:	a0 93 1e 03 	sts	0x031E, r26
     1e4:	b0 93 1f 03 	sts	0x031F, r27
}
     1e8:	cf 91       	pop	r28
     1ea:	df 91       	pop	r29
     1ec:	bf 91       	pop	r27
     1ee:	af 91       	pop	r26
     1f0:	9f 91       	pop	r25
     1f2:	8f 91       	pop	r24
     1f4:	0f 90       	pop	r0
     1f6:	0f be       	out	0x3f, r0	; 63
     1f8:	0f 90       	pop	r0
     1fa:	1f 90       	pop	r1
     1fc:	18 95       	reti

000001fe <USART_Init>:

#include "serial.h"

void USART_Init( unsigned int ubrr)
{
     1fe:	df 93       	push	r29
     200:	cf 93       	push	r28
     202:	0f 92       	push	r0
     204:	0f 92       	push	r0
     206:	cd b7       	in	r28, 0x3d	; 61
     208:	de b7       	in	r29, 0x3e	; 62
     20a:	9a 83       	std	Y+2, r25	; 0x02
     20c:	89 83       	std	Y+1, r24	; 0x01
    /*Set baud rate */
    UBRR0H = (unsigned char)(ubrr>>8);
     20e:	e5 ec       	ldi	r30, 0xC5	; 197
     210:	f0 e0       	ldi	r31, 0x00	; 0
     212:	89 81       	ldd	r24, Y+1	; 0x01
     214:	9a 81       	ldd	r25, Y+2	; 0x02
     216:	89 2f       	mov	r24, r25
     218:	99 27       	eor	r25, r25
     21a:	80 83       	st	Z, r24
    UBRR0L = (unsigned char)ubrr;
     21c:	e4 ec       	ldi	r30, 0xC4	; 196
     21e:	f0 e0       	ldi	r31, 0x00	; 0
     220:	89 81       	ldd	r24, Y+1	; 0x01
     222:	80 83       	st	Z, r24
    /*Enable receiver and transmitter */
    UCSR0B |= (1<<RXEN0);
     224:	a1 ec       	ldi	r26, 0xC1	; 193
     226:	b0 e0       	ldi	r27, 0x00	; 0
     228:	e1 ec       	ldi	r30, 0xC1	; 193
     22a:	f0 e0       	ldi	r31, 0x00	; 0
     22c:	80 81       	ld	r24, Z
     22e:	80 61       	ori	r24, 0x10	; 16
     230:	8c 93       	st	X, r24
    UCSR0B |= (1<<TXEN0);
     232:	a1 ec       	ldi	r26, 0xC1	; 193
     234:	b0 e0       	ldi	r27, 0x00	; 0
     236:	e1 ec       	ldi	r30, 0xC1	; 193
     238:	f0 e0       	ldi	r31, 0x00	; 0
     23a:	80 81       	ld	r24, Z
     23c:	88 60       	ori	r24, 0x08	; 8
     23e:	8c 93       	st	X, r24
    /* Set frame format: 8data, 2stop bit */
    UCSR0C = (1<<UCSZ01)|(3<<UCSZ00);
     240:	e2 ec       	ldi	r30, 0xC2	; 194
     242:	f0 e0       	ldi	r31, 0x00	; 0
     244:	86 e0       	ldi	r24, 0x06	; 6
     246:	80 83       	st	Z, r24
}
     248:	0f 90       	pop	r0
     24a:	0f 90       	pop	r0
     24c:	cf 91       	pop	r28
     24e:	df 91       	pop	r29
     250:	08 95       	ret

00000252 <recieve_Byte>:


uint8_t recieve_Byte(void)
{
     252:	df 93       	push	r29
     254:	cf 93       	push	r28
     256:	cd b7       	in	r28, 0x3d	; 61
     258:	de b7       	in	r29, 0x3e	; 62
    loop_until_bit_is_set(UCSR0A, RXC0);
     25a:	e0 ec       	ldi	r30, 0xC0	; 192
     25c:	f0 e0       	ldi	r31, 0x00	; 0
     25e:	80 81       	ld	r24, Z
     260:	88 23       	and	r24, r24
     262:	dc f7       	brge	.-10     	; 0x25a <recieve_Byte+0x8>
    {
     return UDR0;
     264:	e6 ec       	ldi	r30, 0xC6	; 198
     266:	f0 e0       	ldi	r31, 0x00	; 0
     268:	80 81       	ld	r24, Z
    }
    /*else
    {
        return -1;
    }*/
}
     26a:	cf 91       	pop	r28
     26c:	df 91       	pop	r29
     26e:	08 95       	ret

00000270 <transmit_byte>:

void transmit_byte(uint8_t byte)
{
     270:	df 93       	push	r29
     272:	cf 93       	push	r28
     274:	0f 92       	push	r0
     276:	cd b7       	in	r28, 0x3d	; 61
     278:	de b7       	in	r29, 0x3e	; 62
     27a:	89 83       	std	Y+1, r24	; 0x01
    loop_until_bit_is_set(UCSR0A, UDRE0);
     27c:	e0 ec       	ldi	r30, 0xC0	; 192
     27e:	f0 e0       	ldi	r31, 0x00	; 0
     280:	80 81       	ld	r24, Z
     282:	88 2f       	mov	r24, r24
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	80 72       	andi	r24, 0x20	; 32
     288:	90 70       	andi	r25, 0x00	; 0
     28a:	00 97       	sbiw	r24, 0x00	; 0
     28c:	b9 f3       	breq	.-18     	; 0x27c <transmit_byte+0xc>
    UDR0 = byte;
     28e:	e6 ec       	ldi	r30, 0xC6	; 198
     290:	f0 e0       	ldi	r31, 0x00	; 0
     292:	89 81       	ldd	r24, Y+1	; 0x01
     294:	80 83       	st	Z, r24
}
     296:	0f 90       	pop	r0
     298:	cf 91       	pop	r28
     29a:	df 91       	pop	r29
     29c:	08 95       	ret

0000029e <print_int32>:

void print_int32(int32_t byte)
{
     29e:	df 93       	push	r29
     2a0:	cf 93       	push	r28
     2a2:	00 d0       	rcall	.+0      	; 0x2a4 <print_int32+0x6>
     2a4:	0f 92       	push	r0
     2a6:	cd b7       	in	r28, 0x3d	; 61
     2a8:	de b7       	in	r29, 0x3e	; 62
     2aa:	69 83       	std	Y+1, r22	; 0x01
     2ac:	7a 83       	std	Y+2, r23	; 0x02
     2ae:	8b 83       	std	Y+3, r24	; 0x03
     2b0:	9c 83       	std	Y+4, r25	; 0x04
    transmit_byte((byte/1000)%10);
     2b2:	89 81       	ldd	r24, Y+1	; 0x01
     2b4:	9a 81       	ldd	r25, Y+2	; 0x02
     2b6:	ab 81       	ldd	r26, Y+3	; 0x03
     2b8:	bc 81       	ldd	r27, Y+4	; 0x04
     2ba:	28 ee       	ldi	r18, 0xE8	; 232
     2bc:	33 e0       	ldi	r19, 0x03	; 3
     2be:	40 e0       	ldi	r20, 0x00	; 0
     2c0:	50 e0       	ldi	r21, 0x00	; 0
     2c2:	bc 01       	movw	r22, r24
     2c4:	cd 01       	movw	r24, r26
     2c6:	0e 94 c8 0c 	call	0x1990	; 0x1990 <__divmodsi4>
     2ca:	da 01       	movw	r26, r20
     2cc:	c9 01       	movw	r24, r18
     2ce:	2a e0       	ldi	r18, 0x0A	; 10
     2d0:	30 e0       	ldi	r19, 0x00	; 0
     2d2:	40 e0       	ldi	r20, 0x00	; 0
     2d4:	50 e0       	ldi	r21, 0x00	; 0
     2d6:	bc 01       	movw	r22, r24
     2d8:	cd 01       	movw	r24, r26
     2da:	0e 94 c8 0c 	call	0x1990	; 0x1990 <__divmodsi4>
     2de:	dc 01       	movw	r26, r24
     2e0:	cb 01       	movw	r24, r22
     2e2:	0e 94 38 01 	call	0x270	; 0x270 <transmit_byte>
    transmit_byte((byte/100)%10);
     2e6:	89 81       	ldd	r24, Y+1	; 0x01
     2e8:	9a 81       	ldd	r25, Y+2	; 0x02
     2ea:	ab 81       	ldd	r26, Y+3	; 0x03
     2ec:	bc 81       	ldd	r27, Y+4	; 0x04
     2ee:	24 e6       	ldi	r18, 0x64	; 100
     2f0:	30 e0       	ldi	r19, 0x00	; 0
     2f2:	40 e0       	ldi	r20, 0x00	; 0
     2f4:	50 e0       	ldi	r21, 0x00	; 0
     2f6:	bc 01       	movw	r22, r24
     2f8:	cd 01       	movw	r24, r26
     2fa:	0e 94 c8 0c 	call	0x1990	; 0x1990 <__divmodsi4>
     2fe:	da 01       	movw	r26, r20
     300:	c9 01       	movw	r24, r18
     302:	2a e0       	ldi	r18, 0x0A	; 10
     304:	30 e0       	ldi	r19, 0x00	; 0
     306:	40 e0       	ldi	r20, 0x00	; 0
     308:	50 e0       	ldi	r21, 0x00	; 0
     30a:	bc 01       	movw	r22, r24
     30c:	cd 01       	movw	r24, r26
     30e:	0e 94 c8 0c 	call	0x1990	; 0x1990 <__divmodsi4>
     312:	dc 01       	movw	r26, r24
     314:	cb 01       	movw	r24, r22
     316:	0e 94 38 01 	call	0x270	; 0x270 <transmit_byte>
    transmit_byte((byte/10)%10);
     31a:	89 81       	ldd	r24, Y+1	; 0x01
     31c:	9a 81       	ldd	r25, Y+2	; 0x02
     31e:	ab 81       	ldd	r26, Y+3	; 0x03
     320:	bc 81       	ldd	r27, Y+4	; 0x04
     322:	2a e0       	ldi	r18, 0x0A	; 10
     324:	30 e0       	ldi	r19, 0x00	; 0
     326:	40 e0       	ldi	r20, 0x00	; 0
     328:	50 e0       	ldi	r21, 0x00	; 0
     32a:	bc 01       	movw	r22, r24
     32c:	cd 01       	movw	r24, r26
     32e:	0e 94 c8 0c 	call	0x1990	; 0x1990 <__divmodsi4>
     332:	da 01       	movw	r26, r20
     334:	c9 01       	movw	r24, r18
     336:	2a e0       	ldi	r18, 0x0A	; 10
     338:	30 e0       	ldi	r19, 0x00	; 0
     33a:	40 e0       	ldi	r20, 0x00	; 0
     33c:	50 e0       	ldi	r21, 0x00	; 0
     33e:	bc 01       	movw	r22, r24
     340:	cd 01       	movw	r24, r26
     342:	0e 94 c8 0c 	call	0x1990	; 0x1990 <__divmodsi4>
     346:	dc 01       	movw	r26, r24
     348:	cb 01       	movw	r24, r22
     34a:	0e 94 38 01 	call	0x270	; 0x270 <transmit_byte>
    transmit_byte((byte%10));
     34e:	89 81       	ldd	r24, Y+1	; 0x01
     350:	9a 81       	ldd	r25, Y+2	; 0x02
     352:	ab 81       	ldd	r26, Y+3	; 0x03
     354:	bc 81       	ldd	r27, Y+4	; 0x04
     356:	2a e0       	ldi	r18, 0x0A	; 10
     358:	30 e0       	ldi	r19, 0x00	; 0
     35a:	40 e0       	ldi	r20, 0x00	; 0
     35c:	50 e0       	ldi	r21, 0x00	; 0
     35e:	bc 01       	movw	r22, r24
     360:	cd 01       	movw	r24, r26
     362:	0e 94 c8 0c 	call	0x1990	; 0x1990 <__divmodsi4>
     366:	dc 01       	movw	r26, r24
     368:	cb 01       	movw	r24, r22
     36a:	0e 94 38 01 	call	0x270	; 0x270 <transmit_byte>
    transmit_byte(0xA5);
     36e:	85 ea       	ldi	r24, 0xA5	; 165
     370:	0e 94 38 01 	call	0x270	; 0x270 <transmit_byte>
}
     374:	0f 90       	pop	r0
     376:	0f 90       	pop	r0
     378:	0f 90       	pop	r0
     37a:	0f 90       	pop	r0
     37c:	cf 91       	pop	r28
     37e:	df 91       	pop	r29
     380:	08 95       	ret

00000382 <recieve_string>:



void recieve_string(char code[])
{
     382:	df 93       	push	r29
     384:	cf 93       	push	r28
     386:	00 d0       	rcall	.+0      	; 0x388 <recieve_string+0x6>
     388:	0f 92       	push	r0
     38a:	0f 92       	push	r0
     38c:	cd b7       	in	r28, 0x3d	; 61
     38e:	de b7       	in	r29, 0x3e	; 62
     390:	9d 83       	std	Y+5, r25	; 0x05
     392:	8c 83       	std	Y+4, r24	; 0x04
    //code ontworpen voor een GPS module. dollar teken is begin van de string. kan wel gebruikt worden voor het onvangen van complexe instructies.
    char byte = recieve_Byte();
     394:	0e 94 29 01 	call	0x252	; 0x252 <recieve_Byte>
     398:	8b 83       	std	Y+3, r24	; 0x03
    if(byte == '$')
     39a:	8b 81       	ldd	r24, Y+3	; 0x03
     39c:	84 32       	cpi	r24, 0x24	; 36
     39e:	c9 f4       	brne	.+50     	; 0x3d2 <recieve_string+0x50>
    {
        int x = 1;
     3a0:	81 e0       	ldi	r24, 0x01	; 1
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	9a 83       	std	Y+2, r25	; 0x02
     3a6:	89 83       	std	Y+1, r24	; 0x01
     3a8:	11 c0       	rjmp	.+34     	; 0x3cc <recieve_string+0x4a>
        while(byte != '\n')
        {
            byte = recieve_Byte();
     3aa:	0e 94 29 01 	call	0x252	; 0x252 <recieve_Byte>
     3ae:	8b 83       	std	Y+3, r24	; 0x03
            code[x] = byte;
     3b0:	29 81       	ldd	r18, Y+1	; 0x01
     3b2:	3a 81       	ldd	r19, Y+2	; 0x02
     3b4:	8c 81       	ldd	r24, Y+4	; 0x04
     3b6:	9d 81       	ldd	r25, Y+5	; 0x05
     3b8:	fc 01       	movw	r30, r24
     3ba:	e2 0f       	add	r30, r18
     3bc:	f3 1f       	adc	r31, r19
     3be:	8b 81       	ldd	r24, Y+3	; 0x03
     3c0:	80 83       	st	Z, r24
            x++;
     3c2:	89 81       	ldd	r24, Y+1	; 0x01
     3c4:	9a 81       	ldd	r25, Y+2	; 0x02
     3c6:	01 96       	adiw	r24, 0x01	; 1
     3c8:	9a 83       	std	Y+2, r25	; 0x02
     3ca:	89 83       	std	Y+1, r24	; 0x01
    //code ontworpen voor een GPS module. dollar teken is begin van de string. kan wel gebruikt worden voor het onvangen van complexe instructies.
    char byte = recieve_Byte();
    if(byte == '$')
    {
        int x = 1;
        while(byte != '\n')
     3cc:	8b 81       	ldd	r24, Y+3	; 0x03
     3ce:	8a 30       	cpi	r24, 0x0A	; 10
     3d0:	61 f7       	brne	.-40     	; 0x3aa <recieve_string+0x28>
            byte = recieve_Byte();
            code[x] = byte;
            x++;
        }
    }
}
     3d2:	0f 90       	pop	r0
     3d4:	0f 90       	pop	r0
     3d6:	0f 90       	pop	r0
     3d8:	0f 90       	pop	r0
     3da:	0f 90       	pop	r0
     3dc:	cf 91       	pop	r28
     3de:	df 91       	pop	r29
     3e0:	08 95       	ret

000003e2 <construct_stepper>:
#include <avr/interrupt.h>

#include "stepper.h"

void construct_stepper(volatile struct stepper *stepper, uint8_t step_pin, uint8_t dir_pin)
{
     3e2:	df 93       	push	r29
     3e4:	cf 93       	push	r28
     3e6:	00 d0       	rcall	.+0      	; 0x3e8 <construct_stepper+0x6>
     3e8:	0f 92       	push	r0
     3ea:	cd b7       	in	r28, 0x3d	; 61
     3ec:	de b7       	in	r29, 0x3e	; 62
     3ee:	9a 83       	std	Y+2, r25	; 0x02
     3f0:	89 83       	std	Y+1, r24	; 0x01
     3f2:	6b 83       	std	Y+3, r22	; 0x03
     3f4:	4c 83       	std	Y+4, r20	; 0x04
    stepper->last_step = ms;
     3f6:	80 91 1c 03 	lds	r24, 0x031C
     3fa:	90 91 1d 03 	lds	r25, 0x031D
     3fe:	a0 91 1e 03 	lds	r26, 0x031E
     402:	b0 91 1f 03 	lds	r27, 0x031F
     406:	e9 81       	ldd	r30, Y+1	; 0x01
     408:	fa 81       	ldd	r31, Y+2	; 0x02
     40a:	80 83       	st	Z, r24
     40c:	91 83       	std	Z+1, r25	; 0x01
     40e:	a2 83       	std	Z+2, r26	; 0x02
     410:	b3 83       	std	Z+3, r27	; 0x03
    stepper->time_profile = 1;
     412:	e9 81       	ldd	r30, Y+1	; 0x01
     414:	fa 81       	ldd	r31, Y+2	; 0x02
     416:	81 e0       	ldi	r24, 0x01	; 1
     418:	84 83       	std	Z+4, r24	; 0x04
    stepper->steps = 0;
     41a:	e9 81       	ldd	r30, Y+1	; 0x01
     41c:	fa 81       	ldd	r31, Y+2	; 0x02
     41e:	11 86       	std	Z+9, r1	; 0x09
     420:	10 86       	std	Z+8, r1	; 0x08
    stepper->step_pin = step_pin;
     422:	e9 81       	ldd	r30, Y+1	; 0x01
     424:	fa 81       	ldd	r31, Y+2	; 0x02
     426:	8b 81       	ldd	r24, Y+3	; 0x03
     428:	86 83       	std	Z+6, r24	; 0x06
    stepper->dir_pin = dir_pin;
     42a:	e9 81       	ldd	r30, Y+1	; 0x01
     42c:	fa 81       	ldd	r31, Y+2	; 0x02
     42e:	8c 81       	ldd	r24, Y+4	; 0x04
     430:	87 83       	std	Z+7, r24	; 0x07
    stepper->direction = 0;
     432:	e9 81       	ldd	r30, Y+1	; 0x01
     434:	fa 81       	ldd	r31, Y+2	; 0x02
     436:	15 82       	std	Z+5, r1	; 0x05
}
     438:	0f 90       	pop	r0
     43a:	0f 90       	pop	r0
     43c:	0f 90       	pop	r0
     43e:	0f 90       	pop	r0
     440:	cf 91       	pop	r28
     442:	df 91       	pop	r29
     444:	08 95       	ret

00000446 <initialize_steppers>:

void initialize_steppers()
{
     446:	df 93       	push	r29
     448:	cf 93       	push	r28
     44a:	0f 92       	push	r0
     44c:	cd b7       	in	r28, 0x3d	; 61
     44e:	de b7       	in	r29, 0x3e	; 62
    stepper_DDR |= 0xFF;//init all pins in bank C
     450:	e7 e0       	ldi	r30, 0x07	; 7
     452:	f1 e0       	ldi	r31, 0x01	; 1
     454:	80 81       	ld	r24, Z
     456:	e7 e0       	ldi	r30, 0x07	; 7
     458:	f1 e0       	ldi	r31, 0x01	; 1
     45a:	8f ef       	ldi	r24, 0xFF	; 255
     45c:	80 83       	st	Z, r24
}
     45e:	0f 90       	pop	r0
     460:	cf 91       	pop	r28
     462:	df 91       	pop	r29
     464:	08 95       	ret

00000466 <set_dir>:

void set_dir(volatile struct stepper *stepper)
{
     466:	df 93       	push	r29
     468:	cf 93       	push	r28
     46a:	00 d0       	rcall	.+0      	; 0x46c <set_dir+0x6>
     46c:	0f 92       	push	r0
     46e:	cd b7       	in	r28, 0x3d	; 61
     470:	de b7       	in	r29, 0x3e	; 62
     472:	9a 83       	std	Y+2, r25	; 0x02
     474:	89 83       	std	Y+1, r24	; 0x01
    switch(stepper->direction)
     476:	e9 81       	ldd	r30, Y+1	; 0x01
     478:	fa 81       	ldd	r31, Y+2	; 0x02
     47a:	85 81       	ldd	r24, Z+5	; 0x05
     47c:	28 2f       	mov	r18, r24
     47e:	30 e0       	ldi	r19, 0x00	; 0
     480:	3c 83       	std	Y+4, r19	; 0x04
     482:	2b 83       	std	Y+3, r18	; 0x03
     484:	8b 81       	ldd	r24, Y+3	; 0x03
     486:	9c 81       	ldd	r25, Y+4	; 0x04
     488:	81 30       	cpi	r24, 0x01	; 1
     48a:	91 05       	cpc	r25, r1
     48c:	d9 f0       	breq	.+54     	; 0x4c4 <set_dir+0x5e>
     48e:	2b 81       	ldd	r18, Y+3	; 0x03
     490:	3c 81       	ldd	r19, Y+4	; 0x04
     492:	22 30       	cpi	r18, 0x02	; 2
     494:	31 05       	cpc	r19, r1
     496:	61 f5       	brne	.+88     	; 0x4f0 <set_dir+0x8a>
    {
    case forward:
        stepper_port |= (1<<stepper->dir_pin);
     498:	a8 e0       	ldi	r26, 0x08	; 8
     49a:	b1 e0       	ldi	r27, 0x01	; 1
     49c:	e8 e0       	ldi	r30, 0x08	; 8
     49e:	f1 e0       	ldi	r31, 0x01	; 1
     4a0:	80 81       	ld	r24, Z
     4a2:	48 2f       	mov	r20, r24
     4a4:	e9 81       	ldd	r30, Y+1	; 0x01
     4a6:	fa 81       	ldd	r31, Y+2	; 0x02
     4a8:	87 81       	ldd	r24, Z+7	; 0x07
     4aa:	28 2f       	mov	r18, r24
     4ac:	30 e0       	ldi	r19, 0x00	; 0
     4ae:	81 e0       	ldi	r24, 0x01	; 1
     4b0:	90 e0       	ldi	r25, 0x00	; 0
     4b2:	02 2e       	mov	r0, r18
     4b4:	02 c0       	rjmp	.+4      	; 0x4ba <set_dir+0x54>
     4b6:	88 0f       	add	r24, r24
     4b8:	99 1f       	adc	r25, r25
     4ba:	0a 94       	dec	r0
     4bc:	e2 f7       	brpl	.-8      	; 0x4b6 <set_dir+0x50>
     4be:	84 2b       	or	r24, r20
     4c0:	8c 93       	st	X, r24
     4c2:	16 c0       	rjmp	.+44     	; 0x4f0 <set_dir+0x8a>
        break;
    case backward:
        stepper_port &= ~(1<<stepper->dir_pin);
     4c4:	a8 e0       	ldi	r26, 0x08	; 8
     4c6:	b1 e0       	ldi	r27, 0x01	; 1
     4c8:	e8 e0       	ldi	r30, 0x08	; 8
     4ca:	f1 e0       	ldi	r31, 0x01	; 1
     4cc:	80 81       	ld	r24, Z
     4ce:	48 2f       	mov	r20, r24
     4d0:	e9 81       	ldd	r30, Y+1	; 0x01
     4d2:	fa 81       	ldd	r31, Y+2	; 0x02
     4d4:	87 81       	ldd	r24, Z+7	; 0x07
     4d6:	28 2f       	mov	r18, r24
     4d8:	30 e0       	ldi	r19, 0x00	; 0
     4da:	81 e0       	ldi	r24, 0x01	; 1
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	02 2e       	mov	r0, r18
     4e0:	02 c0       	rjmp	.+4      	; 0x4e6 <set_dir+0x80>
     4e2:	88 0f       	add	r24, r24
     4e4:	99 1f       	adc	r25, r25
     4e6:	0a 94       	dec	r0
     4e8:	e2 f7       	brpl	.-8      	; 0x4e2 <set_dir+0x7c>
     4ea:	80 95       	com	r24
     4ec:	84 23       	and	r24, r20
     4ee:	8c 93       	st	X, r24
        break;
    default:
        break;
    }
}
     4f0:	0f 90       	pop	r0
     4f2:	0f 90       	pop	r0
     4f4:	0f 90       	pop	r0
     4f6:	0f 90       	pop	r0
     4f8:	cf 91       	pop	r28
     4fa:	df 91       	pop	r29
     4fc:	08 95       	ret

000004fe <step>:

void static step(volatile struct stepper stepper)
{
     4fe:	0f 93       	push	r16
     500:	1f 93       	push	r17
     502:	df 93       	push	r29
     504:	cf 93       	push	r28
     506:	cd b7       	in	r28, 0x3d	; 61
     508:	de b7       	in	r29, 0x3e	; 62
     50a:	ea 97       	sbiw	r28, 0x3a	; 58
     50c:	0f b6       	in	r0, 0x3f	; 63
     50e:	f8 94       	cli
     510:	de bf       	out	0x3e, r29	; 62
     512:	0f be       	out	0x3f, r0	; 63
     514:	cd bf       	out	0x3d, r28	; 61
     516:	09 ab       	std	Y+49, r16	; 0x31
     518:	1a ab       	std	Y+50, r17	; 0x32
     51a:	2b ab       	std	Y+51, r18	; 0x33
     51c:	3c ab       	std	Y+52, r19	; 0x34
     51e:	4d ab       	std	Y+53, r20	; 0x35
     520:	5e ab       	std	Y+54, r21	; 0x36
     522:	6f ab       	std	Y+55, r22	; 0x37
     524:	78 af       	std	Y+56, r23	; 0x38
     526:	89 af       	std	Y+57, r24	; 0x39
     528:	9a af       	std	Y+58, r25	; 0x3a

            stepper_port |= (1<<stepper.step_pin);
     52a:	a8 e0       	ldi	r26, 0x08	; 8
     52c:	b1 e0       	ldi	r27, 0x01	; 1
     52e:	e8 e0       	ldi	r30, 0x08	; 8
     530:	f1 e0       	ldi	r31, 0x01	; 1
     532:	80 81       	ld	r24, Z
     534:	48 2f       	mov	r20, r24
     536:	8f a9       	ldd	r24, Y+55	; 0x37
     538:	28 2f       	mov	r18, r24
     53a:	30 e0       	ldi	r19, 0x00	; 0
     53c:	81 e0       	ldi	r24, 0x01	; 1
     53e:	90 e0       	ldi	r25, 0x00	; 0
     540:	02 c0       	rjmp	.+4      	; 0x546 <step+0x48>
     542:	88 0f       	add	r24, r24
     544:	99 1f       	adc	r25, r25
     546:	2a 95       	dec	r18
     548:	e2 f7       	brpl	.-8      	; 0x542 <step+0x44>
     54a:	84 2b       	or	r24, r20
     54c:	8c 93       	st	X, r24
     54e:	80 e0       	ldi	r24, 0x00	; 0
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	a0 e0       	ldi	r26, 0x00	; 0
     554:	b0 e4       	ldi	r27, 0x40	; 64
     556:	8d a7       	std	Y+45, r24	; 0x2d
     558:	9e a7       	std	Y+46, r25	; 0x2e
     55a:	af a7       	std	Y+47, r26	; 0x2f
     55c:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     55e:	6d a5       	ldd	r22, Y+45	; 0x2d
     560:	7e a5       	ldd	r23, Y+46	; 0x2e
     562:	8f a5       	ldd	r24, Y+47	; 0x2f
     564:	98 a9       	ldd	r25, Y+48	; 0x30
     566:	2b ea       	ldi	r18, 0xAB	; 171
     568:	3a ea       	ldi	r19, 0xAA	; 170
     56a:	4a ea       	ldi	r20, 0xAA	; 170
     56c:	50 e4       	ldi	r21, 0x40	; 64
     56e:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <__mulsf3>
     572:	dc 01       	movw	r26, r24
     574:	cb 01       	movw	r24, r22
     576:	89 a7       	std	Y+41, r24	; 0x29
     578:	9a a7       	std	Y+42, r25	; 0x2a
     57a:	ab a7       	std	Y+43, r26	; 0x2b
     57c:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
     57e:	69 a5       	ldd	r22, Y+41	; 0x29
     580:	7a a5       	ldd	r23, Y+42	; 0x2a
     582:	8b a5       	ldd	r24, Y+43	; 0x2b
     584:	9c a5       	ldd	r25, Y+44	; 0x2c
     586:	20 e0       	ldi	r18, 0x00	; 0
     588:	30 e0       	ldi	r19, 0x00	; 0
     58a:	40 e8       	ldi	r20, 0x80	; 128
     58c:	5f e3       	ldi	r21, 0x3F	; 63
     58e:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <__ltsf2>
     592:	88 23       	and	r24, r24
     594:	1c f4       	brge	.+6      	; 0x59c <step+0x9e>
		__ticks = 1;
     596:	81 e0       	ldi	r24, 0x01	; 1
     598:	88 a7       	std	Y+40, r24	; 0x28
     59a:	91 c0       	rjmp	.+290    	; 0x6be <step+0x1c0>
	else if (__tmp > 255)
     59c:	69 a5       	ldd	r22, Y+41	; 0x29
     59e:	7a a5       	ldd	r23, Y+42	; 0x2a
     5a0:	8b a5       	ldd	r24, Y+43	; 0x2b
     5a2:	9c a5       	ldd	r25, Y+44	; 0x2c
     5a4:	20 e0       	ldi	r18, 0x00	; 0
     5a6:	30 e0       	ldi	r19, 0x00	; 0
     5a8:	4f e7       	ldi	r20, 0x7F	; 127
     5aa:	53 e4       	ldi	r21, 0x43	; 67
     5ac:	0e 94 91 09 	call	0x1322	; 0x1322 <__gtsf2>
     5b0:	18 16       	cp	r1, r24
     5b2:	0c f0       	brlt	.+2      	; 0x5b6 <step+0xb8>
     5b4:	7b c0       	rjmp	.+246    	; 0x6ac <step+0x1ae>
	{
		_delay_ms(__us / 1000.0);
     5b6:	6d a5       	ldd	r22, Y+45	; 0x2d
     5b8:	7e a5       	ldd	r23, Y+46	; 0x2e
     5ba:	8f a5       	ldd	r24, Y+47	; 0x2f
     5bc:	98 a9       	ldd	r25, Y+48	; 0x30
     5be:	20 e0       	ldi	r18, 0x00	; 0
     5c0:	30 e0       	ldi	r19, 0x00	; 0
     5c2:	4a e7       	ldi	r20, 0x7A	; 122
     5c4:	54 e4       	ldi	r21, 0x44	; 68
     5c6:	0e 94 e5 08 	call	0x11ca	; 0x11ca <__divsf3>
     5ca:	dc 01       	movw	r26, r24
     5cc:	cb 01       	movw	r24, r22
     5ce:	8c a3       	std	Y+36, r24	; 0x24
     5d0:	9d a3       	std	Y+37, r25	; 0x25
     5d2:	ae a3       	std	Y+38, r26	; 0x26
     5d4:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     5d6:	6c a1       	ldd	r22, Y+36	; 0x24
     5d8:	7d a1       	ldd	r23, Y+37	; 0x25
     5da:	8e a1       	ldd	r24, Y+38	; 0x26
     5dc:	9f a1       	ldd	r25, Y+39	; 0x27
     5de:	20 e0       	ldi	r18, 0x00	; 0
     5e0:	30 e0       	ldi	r19, 0x00	; 0
     5e2:	4a e7       	ldi	r20, 0x7A	; 122
     5e4:	55 e4       	ldi	r21, 0x45	; 69
     5e6:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <__mulsf3>
     5ea:	dc 01       	movw	r26, r24
     5ec:	cb 01       	movw	r24, r22
     5ee:	88 a3       	std	Y+32, r24	; 0x20
     5f0:	99 a3       	std	Y+33, r25	; 0x21
     5f2:	aa a3       	std	Y+34, r26	; 0x22
     5f4:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
     5f6:	68 a1       	ldd	r22, Y+32	; 0x20
     5f8:	79 a1       	ldd	r23, Y+33	; 0x21
     5fa:	8a a1       	ldd	r24, Y+34	; 0x22
     5fc:	9b a1       	ldd	r25, Y+35	; 0x23
     5fe:	20 e0       	ldi	r18, 0x00	; 0
     600:	30 e0       	ldi	r19, 0x00	; 0
     602:	40 e8       	ldi	r20, 0x80	; 128
     604:	5f e3       	ldi	r21, 0x3F	; 63
     606:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <__ltsf2>
     60a:	88 23       	and	r24, r24
     60c:	2c f4       	brge	.+10     	; 0x618 <step+0x11a>
		__ticks = 1;
     60e:	81 e0       	ldi	r24, 0x01	; 1
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	9f 8f       	std	Y+31, r25	; 0x1f
     614:	8e 8f       	std	Y+30, r24	; 0x1e
     616:	3f c0       	rjmp	.+126    	; 0x696 <step+0x198>
	else if (__tmp > 65535)
     618:	68 a1       	ldd	r22, Y+32	; 0x20
     61a:	79 a1       	ldd	r23, Y+33	; 0x21
     61c:	8a a1       	ldd	r24, Y+34	; 0x22
     61e:	9b a1       	ldd	r25, Y+35	; 0x23
     620:	20 e0       	ldi	r18, 0x00	; 0
     622:	3f ef       	ldi	r19, 0xFF	; 255
     624:	4f e7       	ldi	r20, 0x7F	; 127
     626:	57 e4       	ldi	r21, 0x47	; 71
     628:	0e 94 91 09 	call	0x1322	; 0x1322 <__gtsf2>
     62c:	18 16       	cp	r1, r24
     62e:	4c f5       	brge	.+82     	; 0x682 <step+0x184>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     630:	6c a1       	ldd	r22, Y+36	; 0x24
     632:	7d a1       	ldd	r23, Y+37	; 0x25
     634:	8e a1       	ldd	r24, Y+38	; 0x26
     636:	9f a1       	ldd	r25, Y+39	; 0x27
     638:	20 e0       	ldi	r18, 0x00	; 0
     63a:	30 e0       	ldi	r19, 0x00	; 0
     63c:	40 e2       	ldi	r20, 0x20	; 32
     63e:	51 e4       	ldi	r21, 0x41	; 65
     640:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <__mulsf3>
     644:	dc 01       	movw	r26, r24
     646:	cb 01       	movw	r24, r22
     648:	bc 01       	movw	r22, r24
     64a:	cd 01       	movw	r24, r26
     64c:	0e 94 15 06 	call	0xc2a	; 0xc2a <__fixunssfsi>
     650:	dc 01       	movw	r26, r24
     652:	cb 01       	movw	r24, r22
     654:	9f 8f       	std	Y+31, r25	; 0x1f
     656:	8e 8f       	std	Y+30, r24	; 0x1e
     658:	0f c0       	rjmp	.+30     	; 0x678 <step+0x17a>
     65a:	80 e9       	ldi	r24, 0x90	; 144
     65c:	91 e0       	ldi	r25, 0x01	; 1
     65e:	9d 8f       	std	Y+29, r25	; 0x1d
     660:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     662:	8c 8d       	ldd	r24, Y+28	; 0x1c
     664:	9d 8d       	ldd	r25, Y+29	; 0x1d
     666:	01 97       	sbiw	r24, 0x01	; 1
     668:	f1 f7       	brne	.-4      	; 0x666 <step+0x168>
     66a:	9d 8f       	std	Y+29, r25	; 0x1d
     66c:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     66e:	8e 8d       	ldd	r24, Y+30	; 0x1e
     670:	9f 8d       	ldd	r25, Y+31	; 0x1f
     672:	01 97       	sbiw	r24, 0x01	; 1
     674:	9f 8f       	std	Y+31, r25	; 0x1f
     676:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     678:	8e 8d       	ldd	r24, Y+30	; 0x1e
     67a:	9f 8d       	ldd	r25, Y+31	; 0x1f
     67c:	00 97       	sbiw	r24, 0x00	; 0
     67e:	69 f7       	brne	.-38     	; 0x65a <step+0x15c>
     680:	24 c0       	rjmp	.+72     	; 0x6ca <step+0x1cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     682:	68 a1       	ldd	r22, Y+32	; 0x20
     684:	79 a1       	ldd	r23, Y+33	; 0x21
     686:	8a a1       	ldd	r24, Y+34	; 0x22
     688:	9b a1       	ldd	r25, Y+35	; 0x23
     68a:	0e 94 15 06 	call	0xc2a	; 0xc2a <__fixunssfsi>
     68e:	dc 01       	movw	r26, r24
     690:	cb 01       	movw	r24, r22
     692:	9f 8f       	std	Y+31, r25	; 0x1f
     694:	8e 8f       	std	Y+30, r24	; 0x1e
     696:	8e 8d       	ldd	r24, Y+30	; 0x1e
     698:	9f 8d       	ldd	r25, Y+31	; 0x1f
     69a:	9b 8f       	std	Y+27, r25	; 0x1b
     69c:	8a 8f       	std	Y+26, r24	; 0x1a
     69e:	8a 8d       	ldd	r24, Y+26	; 0x1a
     6a0:	9b 8d       	ldd	r25, Y+27	; 0x1b
     6a2:	01 97       	sbiw	r24, 0x01	; 1
     6a4:	f1 f7       	brne	.-4      	; 0x6a2 <step+0x1a4>
     6a6:	9b 8f       	std	Y+27, r25	; 0x1b
     6a8:	8a 8f       	std	Y+26, r24	; 0x1a
     6aa:	0f c0       	rjmp	.+30     	; 0x6ca <step+0x1cc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     6ac:	69 a5       	ldd	r22, Y+41	; 0x29
     6ae:	7a a5       	ldd	r23, Y+42	; 0x2a
     6b0:	8b a5       	ldd	r24, Y+43	; 0x2b
     6b2:	9c a5       	ldd	r25, Y+44	; 0x2c
     6b4:	0e 94 15 06 	call	0xc2a	; 0xc2a <__fixunssfsi>
     6b8:	dc 01       	movw	r26, r24
     6ba:	cb 01       	movw	r24, r22
     6bc:	88 a7       	std	Y+40, r24	; 0x28
     6be:	88 a5       	ldd	r24, Y+40	; 0x28
     6c0:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     6c2:	89 8d       	ldd	r24, Y+25	; 0x19
     6c4:	8a 95       	dec	r24
     6c6:	f1 f7       	brne	.-4      	; 0x6c4 <step+0x1c6>
     6c8:	89 8f       	std	Y+25, r24	; 0x19
            _delay_us(2);
            stepper_port &= ~(1<<stepper.step_pin);
     6ca:	a8 e0       	ldi	r26, 0x08	; 8
     6cc:	b1 e0       	ldi	r27, 0x01	; 1
     6ce:	e8 e0       	ldi	r30, 0x08	; 8
     6d0:	f1 e0       	ldi	r31, 0x01	; 1
     6d2:	80 81       	ld	r24, Z
     6d4:	48 2f       	mov	r20, r24
     6d6:	8f a9       	ldd	r24, Y+55	; 0x37
     6d8:	28 2f       	mov	r18, r24
     6da:	30 e0       	ldi	r19, 0x00	; 0
     6dc:	81 e0       	ldi	r24, 0x01	; 1
     6de:	90 e0       	ldi	r25, 0x00	; 0
     6e0:	02 c0       	rjmp	.+4      	; 0x6e6 <step+0x1e8>
     6e2:	88 0f       	add	r24, r24
     6e4:	99 1f       	adc	r25, r25
     6e6:	2a 95       	dec	r18
     6e8:	e2 f7       	brpl	.-8      	; 0x6e2 <step+0x1e4>
     6ea:	80 95       	com	r24
     6ec:	84 23       	and	r24, r20
     6ee:	8c 93       	st	X, r24
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	8d 8b       	std	Y+21, r24	; 0x15
     6fa:	9e 8b       	std	Y+22, r25	; 0x16
     6fc:	af 8b       	std	Y+23, r26	; 0x17
     6fe:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     700:	6d 89       	ldd	r22, Y+21	; 0x15
     702:	7e 89       	ldd	r23, Y+22	; 0x16
     704:	8f 89       	ldd	r24, Y+23	; 0x17
     706:	98 8d       	ldd	r25, Y+24	; 0x18
     708:	2b ea       	ldi	r18, 0xAB	; 171
     70a:	3a ea       	ldi	r19, 0xAA	; 170
     70c:	4a ea       	ldi	r20, 0xAA	; 170
     70e:	50 e4       	ldi	r21, 0x40	; 64
     710:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <__mulsf3>
     714:	dc 01       	movw	r26, r24
     716:	cb 01       	movw	r24, r22
     718:	89 8b       	std	Y+17, r24	; 0x11
     71a:	9a 8b       	std	Y+18, r25	; 0x12
     71c:	ab 8b       	std	Y+19, r26	; 0x13
     71e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     720:	69 89       	ldd	r22, Y+17	; 0x11
     722:	7a 89       	ldd	r23, Y+18	; 0x12
     724:	8b 89       	ldd	r24, Y+19	; 0x13
     726:	9c 89       	ldd	r25, Y+20	; 0x14
     728:	20 e0       	ldi	r18, 0x00	; 0
     72a:	30 e0       	ldi	r19, 0x00	; 0
     72c:	40 e8       	ldi	r20, 0x80	; 128
     72e:	5f e3       	ldi	r21, 0x3F	; 63
     730:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <__ltsf2>
     734:	88 23       	and	r24, r24
     736:	1c f4       	brge	.+6      	; 0x73e <step+0x240>
		__ticks = 1;
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	88 8b       	std	Y+16, r24	; 0x10
     73c:	91 c0       	rjmp	.+290    	; 0x860 <step+0x362>
	else if (__tmp > 255)
     73e:	69 89       	ldd	r22, Y+17	; 0x11
     740:	7a 89       	ldd	r23, Y+18	; 0x12
     742:	8b 89       	ldd	r24, Y+19	; 0x13
     744:	9c 89       	ldd	r25, Y+20	; 0x14
     746:	20 e0       	ldi	r18, 0x00	; 0
     748:	30 e0       	ldi	r19, 0x00	; 0
     74a:	4f e7       	ldi	r20, 0x7F	; 127
     74c:	53 e4       	ldi	r21, 0x43	; 67
     74e:	0e 94 91 09 	call	0x1322	; 0x1322 <__gtsf2>
     752:	18 16       	cp	r1, r24
     754:	0c f0       	brlt	.+2      	; 0x758 <step+0x25a>
     756:	7b c0       	rjmp	.+246    	; 0x84e <step+0x350>
	{
		_delay_ms(__us / 1000.0);
     758:	6d 89       	ldd	r22, Y+21	; 0x15
     75a:	7e 89       	ldd	r23, Y+22	; 0x16
     75c:	8f 89       	ldd	r24, Y+23	; 0x17
     75e:	98 8d       	ldd	r25, Y+24	; 0x18
     760:	20 e0       	ldi	r18, 0x00	; 0
     762:	30 e0       	ldi	r19, 0x00	; 0
     764:	4a e7       	ldi	r20, 0x7A	; 122
     766:	54 e4       	ldi	r21, 0x44	; 68
     768:	0e 94 e5 08 	call	0x11ca	; 0x11ca <__divsf3>
     76c:	dc 01       	movw	r26, r24
     76e:	cb 01       	movw	r24, r22
     770:	8c 87       	std	Y+12, r24	; 0x0c
     772:	9d 87       	std	Y+13, r25	; 0x0d
     774:	ae 87       	std	Y+14, r26	; 0x0e
     776:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     778:	6c 85       	ldd	r22, Y+12	; 0x0c
     77a:	7d 85       	ldd	r23, Y+13	; 0x0d
     77c:	8e 85       	ldd	r24, Y+14	; 0x0e
     77e:	9f 85       	ldd	r25, Y+15	; 0x0f
     780:	20 e0       	ldi	r18, 0x00	; 0
     782:	30 e0       	ldi	r19, 0x00	; 0
     784:	4a e7       	ldi	r20, 0x7A	; 122
     786:	55 e4       	ldi	r21, 0x45	; 69
     788:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <__mulsf3>
     78c:	dc 01       	movw	r26, r24
     78e:	cb 01       	movw	r24, r22
     790:	88 87       	std	Y+8, r24	; 0x08
     792:	99 87       	std	Y+9, r25	; 0x09
     794:	aa 87       	std	Y+10, r26	; 0x0a
     796:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
     798:	68 85       	ldd	r22, Y+8	; 0x08
     79a:	79 85       	ldd	r23, Y+9	; 0x09
     79c:	8a 85       	ldd	r24, Y+10	; 0x0a
     79e:	9b 85       	ldd	r25, Y+11	; 0x0b
     7a0:	20 e0       	ldi	r18, 0x00	; 0
     7a2:	30 e0       	ldi	r19, 0x00	; 0
     7a4:	40 e8       	ldi	r20, 0x80	; 128
     7a6:	5f e3       	ldi	r21, 0x3F	; 63
     7a8:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <__ltsf2>
     7ac:	88 23       	and	r24, r24
     7ae:	2c f4       	brge	.+10     	; 0x7ba <step+0x2bc>
		__ticks = 1;
     7b0:	81 e0       	ldi	r24, 0x01	; 1
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	9f 83       	std	Y+7, r25	; 0x07
     7b6:	8e 83       	std	Y+6, r24	; 0x06
     7b8:	3f c0       	rjmp	.+126    	; 0x838 <step+0x33a>
	else if (__tmp > 65535)
     7ba:	68 85       	ldd	r22, Y+8	; 0x08
     7bc:	79 85       	ldd	r23, Y+9	; 0x09
     7be:	8a 85       	ldd	r24, Y+10	; 0x0a
     7c0:	9b 85       	ldd	r25, Y+11	; 0x0b
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	3f ef       	ldi	r19, 0xFF	; 255
     7c6:	4f e7       	ldi	r20, 0x7F	; 127
     7c8:	57 e4       	ldi	r21, 0x47	; 71
     7ca:	0e 94 91 09 	call	0x1322	; 0x1322 <__gtsf2>
     7ce:	18 16       	cp	r1, r24
     7d0:	4c f5       	brge	.+82     	; 0x824 <step+0x326>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     7d2:	6c 85       	ldd	r22, Y+12	; 0x0c
     7d4:	7d 85       	ldd	r23, Y+13	; 0x0d
     7d6:	8e 85       	ldd	r24, Y+14	; 0x0e
     7d8:	9f 85       	ldd	r25, Y+15	; 0x0f
     7da:	20 e0       	ldi	r18, 0x00	; 0
     7dc:	30 e0       	ldi	r19, 0x00	; 0
     7de:	40 e2       	ldi	r20, 0x20	; 32
     7e0:	51 e4       	ldi	r21, 0x41	; 65
     7e2:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <__mulsf3>
     7e6:	dc 01       	movw	r26, r24
     7e8:	cb 01       	movw	r24, r22
     7ea:	bc 01       	movw	r22, r24
     7ec:	cd 01       	movw	r24, r26
     7ee:	0e 94 15 06 	call	0xc2a	; 0xc2a <__fixunssfsi>
     7f2:	dc 01       	movw	r26, r24
     7f4:	cb 01       	movw	r24, r22
     7f6:	9f 83       	std	Y+7, r25	; 0x07
     7f8:	8e 83       	std	Y+6, r24	; 0x06
     7fa:	0f c0       	rjmp	.+30     	; 0x81a <step+0x31c>
     7fc:	80 e9       	ldi	r24, 0x90	; 144
     7fe:	91 e0       	ldi	r25, 0x01	; 1
     800:	9d 83       	std	Y+5, r25	; 0x05
     802:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     804:	8c 81       	ldd	r24, Y+4	; 0x04
     806:	9d 81       	ldd	r25, Y+5	; 0x05
     808:	01 97       	sbiw	r24, 0x01	; 1
     80a:	f1 f7       	brne	.-4      	; 0x808 <step+0x30a>
     80c:	9d 83       	std	Y+5, r25	; 0x05
     80e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     810:	8e 81       	ldd	r24, Y+6	; 0x06
     812:	9f 81       	ldd	r25, Y+7	; 0x07
     814:	01 97       	sbiw	r24, 0x01	; 1
     816:	9f 83       	std	Y+7, r25	; 0x07
     818:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     81a:	8e 81       	ldd	r24, Y+6	; 0x06
     81c:	9f 81       	ldd	r25, Y+7	; 0x07
     81e:	00 97       	sbiw	r24, 0x00	; 0
     820:	69 f7       	brne	.-38     	; 0x7fc <step+0x2fe>
     822:	24 c0       	rjmp	.+72     	; 0x86c <step+0x36e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     824:	68 85       	ldd	r22, Y+8	; 0x08
     826:	79 85       	ldd	r23, Y+9	; 0x09
     828:	8a 85       	ldd	r24, Y+10	; 0x0a
     82a:	9b 85       	ldd	r25, Y+11	; 0x0b
     82c:	0e 94 15 06 	call	0xc2a	; 0xc2a <__fixunssfsi>
     830:	dc 01       	movw	r26, r24
     832:	cb 01       	movw	r24, r22
     834:	9f 83       	std	Y+7, r25	; 0x07
     836:	8e 83       	std	Y+6, r24	; 0x06
     838:	8e 81       	ldd	r24, Y+6	; 0x06
     83a:	9f 81       	ldd	r25, Y+7	; 0x07
     83c:	9b 83       	std	Y+3, r25	; 0x03
     83e:	8a 83       	std	Y+2, r24	; 0x02
     840:	8a 81       	ldd	r24, Y+2	; 0x02
     842:	9b 81       	ldd	r25, Y+3	; 0x03
     844:	01 97       	sbiw	r24, 0x01	; 1
     846:	f1 f7       	brne	.-4      	; 0x844 <step+0x346>
     848:	9b 83       	std	Y+3, r25	; 0x03
     84a:	8a 83       	std	Y+2, r24	; 0x02
     84c:	0f c0       	rjmp	.+30     	; 0x86c <step+0x36e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     84e:	69 89       	ldd	r22, Y+17	; 0x11
     850:	7a 89       	ldd	r23, Y+18	; 0x12
     852:	8b 89       	ldd	r24, Y+19	; 0x13
     854:	9c 89       	ldd	r25, Y+20	; 0x14
     856:	0e 94 15 06 	call	0xc2a	; 0xc2a <__fixunssfsi>
     85a:	dc 01       	movw	r26, r24
     85c:	cb 01       	movw	r24, r22
     85e:	88 8b       	std	Y+16, r24	; 0x10
     860:	88 89       	ldd	r24, Y+16	; 0x10
     862:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     864:	89 81       	ldd	r24, Y+1	; 0x01
     866:	8a 95       	dec	r24
     868:	f1 f7       	brne	.-4      	; 0x866 <step+0x368>
     86a:	89 83       	std	Y+1, r24	; 0x01
            _delay_us(2);
}
     86c:	ea 96       	adiw	r28, 0x3a	; 58
     86e:	0f b6       	in	r0, 0x3f	; 63
     870:	f8 94       	cli
     872:	de bf       	out	0x3e, r29	; 62
     874:	0f be       	out	0x3f, r0	; 63
     876:	cd bf       	out	0x3d, r28	; 61
     878:	cf 91       	pop	r28
     87a:	df 91       	pop	r29
     87c:	1f 91       	pop	r17
     87e:	0f 91       	pop	r16
     880:	08 95       	ret

00000882 <count_steps>:

void static count_steps(volatile struct stepper *stepperino)
{
     882:	df 93       	push	r29
     884:	cf 93       	push	r28
     886:	00 d0       	rcall	.+0      	; 0x888 <count_steps+0x6>
     888:	0f 92       	push	r0
     88a:	cd b7       	in	r28, 0x3d	; 61
     88c:	de b7       	in	r29, 0x3e	; 62
     88e:	9a 83       	std	Y+2, r25	; 0x02
     890:	89 83       	std	Y+1, r24	; 0x01
    switch(stepperino->direction)
     892:	e9 81       	ldd	r30, Y+1	; 0x01
     894:	fa 81       	ldd	r31, Y+2	; 0x02
     896:	85 81       	ldd	r24, Z+5	; 0x05
     898:	28 2f       	mov	r18, r24
     89a:	30 e0       	ldi	r19, 0x00	; 0
     89c:	3c 83       	std	Y+4, r19	; 0x04
     89e:	2b 83       	std	Y+3, r18	; 0x03
     8a0:	8b 81       	ldd	r24, Y+3	; 0x03
     8a2:	9c 81       	ldd	r25, Y+4	; 0x04
     8a4:	81 30       	cpi	r24, 0x01	; 1
     8a6:	91 05       	cpc	r25, r1
     8a8:	79 f0       	breq	.+30     	; 0x8c8 <count_steps+0x46>
     8aa:	2b 81       	ldd	r18, Y+3	; 0x03
     8ac:	3c 81       	ldd	r19, Y+4	; 0x04
     8ae:	22 30       	cpi	r18, 0x02	; 2
     8b0:	31 05       	cpc	r19, r1
     8b2:	99 f4       	brne	.+38     	; 0x8da <count_steps+0x58>
        {
        case forward:
        stepperino->steps++;
     8b4:	e9 81       	ldd	r30, Y+1	; 0x01
     8b6:	fa 81       	ldd	r31, Y+2	; 0x02
     8b8:	80 85       	ldd	r24, Z+8	; 0x08
     8ba:	91 85       	ldd	r25, Z+9	; 0x09
     8bc:	01 96       	adiw	r24, 0x01	; 1
     8be:	e9 81       	ldd	r30, Y+1	; 0x01
     8c0:	fa 81       	ldd	r31, Y+2	; 0x02
     8c2:	91 87       	std	Z+9, r25	; 0x09
     8c4:	80 87       	std	Z+8, r24	; 0x08
     8c6:	09 c0       	rjmp	.+18     	; 0x8da <count_steps+0x58>
        break;
        case backward:
        stepperino->steps--;
     8c8:	e9 81       	ldd	r30, Y+1	; 0x01
     8ca:	fa 81       	ldd	r31, Y+2	; 0x02
     8cc:	80 85       	ldd	r24, Z+8	; 0x08
     8ce:	91 85       	ldd	r25, Z+9	; 0x09
     8d0:	01 97       	sbiw	r24, 0x01	; 1
     8d2:	e9 81       	ldd	r30, Y+1	; 0x01
     8d4:	fa 81       	ldd	r31, Y+2	; 0x02
     8d6:	91 87       	std	Z+9, r25	; 0x09
     8d8:	80 87       	std	Z+8, r24	; 0x08
        break;
        default:
        break;
        }
}
     8da:	0f 90       	pop	r0
     8dc:	0f 90       	pop	r0
     8de:	0f 90       	pop	r0
     8e0:	0f 90       	pop	r0
     8e2:	cf 91       	pop	r28
     8e4:	df 91       	pop	r29
     8e6:	08 95       	ret

000008e8 <Handle_steps>:

void Handle_steps(volatile struct stepper *stepperino)
{
     8e8:	0f 93       	push	r16
     8ea:	1f 93       	push	r17
     8ec:	df 93       	push	r29
     8ee:	cf 93       	push	r28
     8f0:	0f 92       	push	r0
     8f2:	0f 92       	push	r0
     8f4:	cd b7       	in	r28, 0x3d	; 61
     8f6:	de b7       	in	r29, 0x3e	; 62
     8f8:	9a 83       	std	Y+2, r25	; 0x02
     8fa:	89 83       	std	Y+1, r24	; 0x01
    if(stepperino->time_profile == 0)
     8fc:	e9 81       	ldd	r30, Y+1	; 0x01
     8fe:	fa 81       	ldd	r31, Y+2	; 0x02
     900:	84 81       	ldd	r24, Z+4	; 0x04
     902:	88 23       	and	r24, r24
     904:	09 f4       	brne	.+2      	; 0x908 <Handle_steps+0x20>
     906:	3e c0       	rjmp	.+124    	; 0x984 <Handle_steps+0x9c>
    {

    }
    else if(ms >= (stepperino->last_step + stepperino->time_profile))
     908:	e9 81       	ldd	r30, Y+1	; 0x01
     90a:	fa 81       	ldd	r31, Y+2	; 0x02
     90c:	20 81       	ld	r18, Z
     90e:	31 81       	ldd	r19, Z+1	; 0x01
     910:	42 81       	ldd	r20, Z+2	; 0x02
     912:	53 81       	ldd	r21, Z+3	; 0x03
     914:	e9 81       	ldd	r30, Y+1	; 0x01
     916:	fa 81       	ldd	r31, Y+2	; 0x02
     918:	84 81       	ldd	r24, Z+4	; 0x04
     91a:	88 2f       	mov	r24, r24
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	a0 e0       	ldi	r26, 0x00	; 0
     920:	b0 e0       	ldi	r27, 0x00	; 0
     922:	28 0f       	add	r18, r24
     924:	39 1f       	adc	r19, r25
     926:	4a 1f       	adc	r20, r26
     928:	5b 1f       	adc	r21, r27
     92a:	80 91 1c 03 	lds	r24, 0x031C
     92e:	90 91 1d 03 	lds	r25, 0x031D
     932:	a0 91 1e 03 	lds	r26, 0x031E
     936:	b0 91 1f 03 	lds	r27, 0x031F
     93a:	82 17       	cp	r24, r18
     93c:	93 07       	cpc	r25, r19
     93e:	a4 07       	cpc	r26, r20
     940:	b5 07       	cpc	r27, r21
     942:	04 f1       	brlt	.+64     	; 0x984 <Handle_steps+0x9c>
    {
        step(*stepperino);
     944:	e9 81       	ldd	r30, Y+1	; 0x01
     946:	fa 81       	ldd	r31, Y+2	; 0x02
     948:	00 81       	ld	r16, Z
     94a:	11 81       	ldd	r17, Z+1	; 0x01
     94c:	22 81       	ldd	r18, Z+2	; 0x02
     94e:	33 81       	ldd	r19, Z+3	; 0x03
     950:	44 81       	ldd	r20, Z+4	; 0x04
     952:	55 81       	ldd	r21, Z+5	; 0x05
     954:	66 81       	ldd	r22, Z+6	; 0x06
     956:	77 81       	ldd	r23, Z+7	; 0x07
     958:	80 85       	ldd	r24, Z+8	; 0x08
     95a:	91 85       	ldd	r25, Z+9	; 0x09
     95c:	0e 94 7f 02 	call	0x4fe	; 0x4fe <step>
        stepperino->last_step = ms;
     960:	80 91 1c 03 	lds	r24, 0x031C
     964:	90 91 1d 03 	lds	r25, 0x031D
     968:	a0 91 1e 03 	lds	r26, 0x031E
     96c:	b0 91 1f 03 	lds	r27, 0x031F
     970:	e9 81       	ldd	r30, Y+1	; 0x01
     972:	fa 81       	ldd	r31, Y+2	; 0x02
     974:	80 83       	st	Z, r24
     976:	91 83       	std	Z+1, r25	; 0x01
     978:	a2 83       	std	Z+2, r26	; 0x02
     97a:	b3 83       	std	Z+3, r27	; 0x03
        count_steps(stepperino);
     97c:	89 81       	ldd	r24, Y+1	; 0x01
     97e:	9a 81       	ldd	r25, Y+2	; 0x02
     980:	0e 94 41 04 	call	0x882	; 0x882 <count_steps>

    }
}
     984:	0f 90       	pop	r0
     986:	0f 90       	pop	r0
     988:	cf 91       	pop	r28
     98a:	df 91       	pop	r29
     98c:	1f 91       	pop	r17
     98e:	0f 91       	pop	r16
     990:	08 95       	ret

00000992 <turn>:

void turn(int16_t degrees, volatile struct stepper *stepperino1, volatile struct stepper *stepperino2)
{
     992:	df 93       	push	r29
     994:	cf 93       	push	r28
     996:	cd b7       	in	r28, 0x3d	; 61
     998:	de b7       	in	r29, 0x3e	; 62
     99a:	e0 97       	sbiw	r28, 0x30	; 48
     99c:	0f b6       	in	r0, 0x3f	; 63
     99e:	f8 94       	cli
     9a0:	de bf       	out	0x3e, r29	; 62
     9a2:	0f be       	out	0x3f, r0	; 63
     9a4:	cd bf       	out	0x3d, r28	; 61
     9a6:	98 8f       	std	Y+24, r25	; 0x18
     9a8:	8f 8b       	std	Y+23, r24	; 0x17
     9aa:	7a 8f       	std	Y+26, r23	; 0x1a
     9ac:	69 8f       	std	Y+25, r22	; 0x19
     9ae:	5c 8f       	std	Y+28, r21	; 0x1c
     9b0:	4b 8f       	std	Y+27, r20	; 0x1b
    int16_t turn_steps = (float)(0.55)*degrees * magic;
     9b2:	8f 89       	ldd	r24, Y+23	; 0x17
     9b4:	98 8d       	ldd	r25, Y+24	; 0x18
     9b6:	aa 27       	eor	r26, r26
     9b8:	97 fd       	sbrc	r25, 7
     9ba:	a0 95       	com	r26
     9bc:	ba 2f       	mov	r27, r26
     9be:	bc 01       	movw	r22, r24
     9c0:	cd 01       	movw	r24, r26
     9c2:	0e 94 21 0a 	call	0x1442	; 0x1442 <__floatsisf>
     9c6:	dc 01       	movw	r26, r24
     9c8:	cb 01       	movw	r24, r22
     9ca:	bc 01       	movw	r22, r24
     9cc:	cd 01       	movw	r24, r26
     9ce:	2d ec       	ldi	r18, 0xCD	; 205
     9d0:	3c ec       	ldi	r19, 0xCC	; 204
     9d2:	4c e0       	ldi	r20, 0x0C	; 12
     9d4:	5f e3       	ldi	r21, 0x3F	; 63
     9d6:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <__mulsf3>
     9da:	dc 01       	movw	r26, r24
     9dc:	cb 01       	movw	r24, r22
     9de:	bc 01       	movw	r22, r24
     9e0:	cd 01       	movw	r24, r26
     9e2:	20 e0       	ldi	r18, 0x00	; 0
     9e4:	30 e0       	ldi	r19, 0x00	; 0
     9e6:	40 e8       	ldi	r20, 0x80	; 128
     9e8:	50 e4       	ldi	r21, 0x40	; 64
     9ea:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <__mulsf3>
     9ee:	dc 01       	movw	r26, r24
     9f0:	cb 01       	movw	r24, r22
     9f2:	bc 01       	movw	r22, r24
     9f4:	cd 01       	movw	r24, r26
     9f6:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <__fixsfsi>
     9fa:	dc 01       	movw	r26, r24
     9fc:	cb 01       	movw	r24, r22
     9fe:	9a 83       	std	Y+2, r25	; 0x02
     a00:	89 83       	std	Y+1, r24	; 0x01
    struct stepper copy1 = *stepperino1;
     a02:	89 8d       	ldd	r24, Y+25	; 0x19
     a04:	9a 8d       	ldd	r25, Y+26	; 0x1a
     a06:	9e 01       	movw	r18, r28
     a08:	2d 5f       	subi	r18, 0xFD	; 253
     a0a:	3f 4f       	sbci	r19, 0xFF	; 255
     a0c:	3e 8f       	std	Y+30, r19	; 0x1e
     a0e:	2d 8f       	std	Y+29, r18	; 0x1d
     a10:	98 a3       	std	Y+32, r25	; 0x20
     a12:	8f 8f       	std	Y+31, r24	; 0x1f
     a14:	3a e0       	ldi	r19, 0x0A	; 10
     a16:	39 a3       	std	Y+33, r19	; 0x21
     a18:	ef 8d       	ldd	r30, Y+31	; 0x1f
     a1a:	f8 a1       	ldd	r31, Y+32	; 0x20
     a1c:	00 80       	ld	r0, Z
     a1e:	2f 8d       	ldd	r18, Y+31	; 0x1f
     a20:	38 a1       	ldd	r19, Y+32	; 0x20
     a22:	2f 5f       	subi	r18, 0xFF	; 255
     a24:	3f 4f       	sbci	r19, 0xFF	; 255
     a26:	38 a3       	std	Y+32, r19	; 0x20
     a28:	2f 8f       	std	Y+31, r18	; 0x1f
     a2a:	ed 8d       	ldd	r30, Y+29	; 0x1d
     a2c:	fe 8d       	ldd	r31, Y+30	; 0x1e
     a2e:	00 82       	st	Z, r0
     a30:	2d 8d       	ldd	r18, Y+29	; 0x1d
     a32:	3e 8d       	ldd	r19, Y+30	; 0x1e
     a34:	2f 5f       	subi	r18, 0xFF	; 255
     a36:	3f 4f       	sbci	r19, 0xFF	; 255
     a38:	3e 8f       	std	Y+30, r19	; 0x1e
     a3a:	2d 8f       	std	Y+29, r18	; 0x1d
     a3c:	39 a1       	ldd	r19, Y+33	; 0x21
     a3e:	31 50       	subi	r19, 0x01	; 1
     a40:	39 a3       	std	Y+33, r19	; 0x21
     a42:	89 a1       	ldd	r24, Y+33	; 0x21
     a44:	88 23       	and	r24, r24
     a46:	41 f7       	brne	.-48     	; 0xa18 <turn+0x86>
    struct stepper copy2 = *stepperino2;
     a48:	8b 8d       	ldd	r24, Y+27	; 0x1b
     a4a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     a4c:	fe 01       	movw	r30, r28
     a4e:	3d 96       	adiw	r30, 0x0d	; 13
     a50:	fb a3       	std	Y+35, r31	; 0x23
     a52:	ea a3       	std	Y+34, r30	; 0x22
     a54:	9d a3       	std	Y+37, r25	; 0x25
     a56:	8c a3       	std	Y+36, r24	; 0x24
     a58:	fa e0       	ldi	r31, 0x0A	; 10
     a5a:	fe a3       	std	Y+38, r31	; 0x26
     a5c:	ec a1       	ldd	r30, Y+36	; 0x24
     a5e:	fd a1       	ldd	r31, Y+37	; 0x25
     a60:	00 80       	ld	r0, Z
     a62:	2c a1       	ldd	r18, Y+36	; 0x24
     a64:	3d a1       	ldd	r19, Y+37	; 0x25
     a66:	2f 5f       	subi	r18, 0xFF	; 255
     a68:	3f 4f       	sbci	r19, 0xFF	; 255
     a6a:	3d a3       	std	Y+37, r19	; 0x25
     a6c:	2c a3       	std	Y+36, r18	; 0x24
     a6e:	ea a1       	ldd	r30, Y+34	; 0x22
     a70:	fb a1       	ldd	r31, Y+35	; 0x23
     a72:	00 82       	st	Z, r0
     a74:	2a a1       	ldd	r18, Y+34	; 0x22
     a76:	3b a1       	ldd	r19, Y+35	; 0x23
     a78:	2f 5f       	subi	r18, 0xFF	; 255
     a7a:	3f 4f       	sbci	r19, 0xFF	; 255
     a7c:	3b a3       	std	Y+35, r19	; 0x23
     a7e:	2a a3       	std	Y+34, r18	; 0x22
     a80:	3e a1       	ldd	r19, Y+38	; 0x26
     a82:	31 50       	subi	r19, 0x01	; 1
     a84:	3e a3       	std	Y+38, r19	; 0x26
     a86:	8e a1       	ldd	r24, Y+38	; 0x26
     a88:	88 23       	and	r24, r24
     a8a:	41 f7       	brne	.-48     	; 0xa5c <turn+0xca>

        stepperino1->time_profile = 10;
     a8c:	e9 8d       	ldd	r30, Y+25	; 0x19
     a8e:	fa 8d       	ldd	r31, Y+26	; 0x1a
     a90:	8a e0       	ldi	r24, 0x0A	; 10
     a92:	84 83       	std	Z+4, r24	; 0x04
        stepperino1->steps = 0;
     a94:	e9 8d       	ldd	r30, Y+25	; 0x19
     a96:	fa 8d       	ldd	r31, Y+26	; 0x1a
     a98:	11 86       	std	Z+9, r1	; 0x09
     a9a:	10 86       	std	Z+8, r1	; 0x08
        stepperino2->time_profile = 10;
     a9c:	eb 8d       	ldd	r30, Y+27	; 0x1b
     a9e:	fc 8d       	ldd	r31, Y+28	; 0x1c
     aa0:	8a e0       	ldi	r24, 0x0A	; 10
     aa2:	84 83       	std	Z+4, r24	; 0x04
        stepperino2->steps = 0;
     aa4:	eb 8d       	ldd	r30, Y+27	; 0x1b
     aa6:	fc 8d       	ldd	r31, Y+28	; 0x1c
     aa8:	11 86       	std	Z+9, r1	; 0x09
     aaa:	10 86       	std	Z+8, r1	; 0x08

    if(turn_steps > 0)
     aac:	89 81       	ldd	r24, Y+1	; 0x01
     aae:	9a 81       	ldd	r25, Y+2	; 0x02
     ab0:	18 16       	cp	r1, r24
     ab2:	19 06       	cpc	r1, r25
     ab4:	3c f5       	brge	.+78     	; 0xb04 <turn+0x172>
    {
        turn_steps++;
     ab6:	89 81       	ldd	r24, Y+1	; 0x01
     ab8:	9a 81       	ldd	r25, Y+2	; 0x02
     aba:	01 96       	adiw	r24, 0x01	; 1
     abc:	9a 83       	std	Y+2, r25	; 0x02
     abe:	89 83       	std	Y+1, r24	; 0x01
        stepperino1->direction = forward;
     ac0:	e9 8d       	ldd	r30, Y+25	; 0x19
     ac2:	fa 8d       	ldd	r31, Y+26	; 0x1a
     ac4:	82 e0       	ldi	r24, 0x02	; 2
     ac6:	85 83       	std	Z+5, r24	; 0x05
        stepperino2->direction = forward;
     ac8:	eb 8d       	ldd	r30, Y+27	; 0x1b
     aca:	fc 8d       	ldd	r31, Y+28	; 0x1c
     acc:	82 e0       	ldi	r24, 0x02	; 2
     ace:	85 83       	std	Z+5, r24	; 0x05
        set_dir(stepperino1);
     ad0:	89 8d       	ldd	r24, Y+25	; 0x19
     ad2:	9a 8d       	ldd	r25, Y+26	; 0x1a
     ad4:	0e 94 33 02 	call	0x466	; 0x466 <set_dir>
        set_dir(stepperino2);
     ad8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ada:	9c 8d       	ldd	r25, Y+28	; 0x1c
     adc:	0e 94 33 02 	call	0x466	; 0x466 <set_dir>
     ae0:	08 c0       	rjmp	.+16     	; 0xaf2 <turn+0x160>

        while(stepperino1->steps < (int)turn_steps)
        {
        Handle_steps(stepperino1);
     ae2:	89 8d       	ldd	r24, Y+25	; 0x19
     ae4:	9a 8d       	ldd	r25, Y+26	; 0x1a
     ae6:	0e 94 74 04 	call	0x8e8	; 0x8e8 <Handle_steps>
        Handle_steps(stepperino2);
     aea:	8b 8d       	ldd	r24, Y+27	; 0x1b
     aec:	9c 8d       	ldd	r25, Y+28	; 0x1c
     aee:	0e 94 74 04 	call	0x8e8	; 0x8e8 <Handle_steps>
        stepperino1->direction = forward;
        stepperino2->direction = forward;
        set_dir(stepperino1);
        set_dir(stepperino2);

        while(stepperino1->steps < (int)turn_steps)
     af2:	e9 8d       	ldd	r30, Y+25	; 0x19
     af4:	fa 8d       	ldd	r31, Y+26	; 0x1a
     af6:	20 85       	ldd	r18, Z+8	; 0x08
     af8:	31 85       	ldd	r19, Z+9	; 0x09
     afa:	89 81       	ldd	r24, Y+1	; 0x01
     afc:	9a 81       	ldd	r25, Y+2	; 0x02
     afe:	28 17       	cp	r18, r24
     b00:	39 07       	cpc	r19, r25
     b02:	7c f3       	brlt	.-34     	; 0xae2 <turn+0x150>
        Handle_steps(stepperino1);
        Handle_steps(stepperino2);
        }
    }

    if(turn_steps < 0)
     b04:	89 81       	ldd	r24, Y+1	; 0x01
     b06:	9a 81       	ldd	r25, Y+2	; 0x02
     b08:	99 23       	and	r25, r25
     b0a:	3c f5       	brge	.+78     	; 0xb5a <turn+0x1c8>
    {
        turn_steps--;
     b0c:	89 81       	ldd	r24, Y+1	; 0x01
     b0e:	9a 81       	ldd	r25, Y+2	; 0x02
     b10:	01 97       	sbiw	r24, 0x01	; 1
     b12:	9a 83       	std	Y+2, r25	; 0x02
     b14:	89 83       	std	Y+1, r24	; 0x01
        stepperino1->direction = backward;
     b16:	e9 8d       	ldd	r30, Y+25	; 0x19
     b18:	fa 8d       	ldd	r31, Y+26	; 0x1a
     b1a:	81 e0       	ldi	r24, 0x01	; 1
     b1c:	85 83       	std	Z+5, r24	; 0x05
        stepperino2->direction = backward;
     b1e:	eb 8d       	ldd	r30, Y+27	; 0x1b
     b20:	fc 8d       	ldd	r31, Y+28	; 0x1c
     b22:	81 e0       	ldi	r24, 0x01	; 1
     b24:	85 83       	std	Z+5, r24	; 0x05
        set_dir(stepperino1);
     b26:	89 8d       	ldd	r24, Y+25	; 0x19
     b28:	9a 8d       	ldd	r25, Y+26	; 0x1a
     b2a:	0e 94 33 02 	call	0x466	; 0x466 <set_dir>
        set_dir(stepperino2);
     b2e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     b30:	9c 8d       	ldd	r25, Y+28	; 0x1c
     b32:	0e 94 33 02 	call	0x466	; 0x466 <set_dir>
     b36:	08 c0       	rjmp	.+16     	; 0xb48 <turn+0x1b6>

        while(stepperino2->steps > turn_steps)
        {
        //transmit_byte(turn_steps);
        Handle_steps(stepperino1);
     b38:	89 8d       	ldd	r24, Y+25	; 0x19
     b3a:	9a 8d       	ldd	r25, Y+26	; 0x1a
     b3c:	0e 94 74 04 	call	0x8e8	; 0x8e8 <Handle_steps>
        Handle_steps(stepperino2);
     b40:	8b 8d       	ldd	r24, Y+27	; 0x1b
     b42:	9c 8d       	ldd	r25, Y+28	; 0x1c
     b44:	0e 94 74 04 	call	0x8e8	; 0x8e8 <Handle_steps>
        stepperino1->direction = backward;
        stepperino2->direction = backward;
        set_dir(stepperino1);
        set_dir(stepperino2);

        while(stepperino2->steps > turn_steps)
     b48:	eb 8d       	ldd	r30, Y+27	; 0x1b
     b4a:	fc 8d       	ldd	r31, Y+28	; 0x1c
     b4c:	20 85       	ldd	r18, Z+8	; 0x08
     b4e:	31 85       	ldd	r19, Z+9	; 0x09
     b50:	89 81       	ldd	r24, Y+1	; 0x01
     b52:	9a 81       	ldd	r25, Y+2	; 0x02
     b54:	82 17       	cp	r24, r18
     b56:	93 07       	cpc	r25, r19
     b58:	7c f3       	brlt	.-34     	; 0xb38 <turn+0x1a6>
        //transmit_byte(turn_steps);
        Handle_steps(stepperino1);
        Handle_steps(stepperino2);
        }
    }
        *stepperino1 = copy1;
     b5a:	89 8d       	ldd	r24, Y+25	; 0x19
     b5c:	9a 8d       	ldd	r25, Y+26	; 0x1a
     b5e:	98 a7       	std	Y+40, r25	; 0x28
     b60:	8f a3       	std	Y+39, r24	; 0x27
     b62:	fe 01       	movw	r30, r28
     b64:	33 96       	adiw	r30, 0x03	; 3
     b66:	fa a7       	std	Y+42, r31	; 0x2a
     b68:	e9 a7       	std	Y+41, r30	; 0x29
     b6a:	fa e0       	ldi	r31, 0x0A	; 10
     b6c:	fb a7       	std	Y+43, r31	; 0x2b
     b6e:	e9 a5       	ldd	r30, Y+41	; 0x29
     b70:	fa a5       	ldd	r31, Y+42	; 0x2a
     b72:	00 80       	ld	r0, Z
     b74:	29 a5       	ldd	r18, Y+41	; 0x29
     b76:	3a a5       	ldd	r19, Y+42	; 0x2a
     b78:	2f 5f       	subi	r18, 0xFF	; 255
     b7a:	3f 4f       	sbci	r19, 0xFF	; 255
     b7c:	3a a7       	std	Y+42, r19	; 0x2a
     b7e:	29 a7       	std	Y+41, r18	; 0x29
     b80:	ef a1       	ldd	r30, Y+39	; 0x27
     b82:	f8 a5       	ldd	r31, Y+40	; 0x28
     b84:	00 82       	st	Z, r0
     b86:	2f a1       	ldd	r18, Y+39	; 0x27
     b88:	38 a5       	ldd	r19, Y+40	; 0x28
     b8a:	2f 5f       	subi	r18, 0xFF	; 255
     b8c:	3f 4f       	sbci	r19, 0xFF	; 255
     b8e:	38 a7       	std	Y+40, r19	; 0x28
     b90:	2f a3       	std	Y+39, r18	; 0x27
     b92:	3b a5       	ldd	r19, Y+43	; 0x2b
     b94:	31 50       	subi	r19, 0x01	; 1
     b96:	3b a7       	std	Y+43, r19	; 0x2b
     b98:	8b a5       	ldd	r24, Y+43	; 0x2b
     b9a:	88 23       	and	r24, r24
     b9c:	41 f7       	brne	.-48     	; 0xb6e <turn+0x1dc>
        *stepperino2 = copy2;
     b9e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ba0:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ba2:	9d a7       	std	Y+45, r25	; 0x2d
     ba4:	8c a7       	std	Y+44, r24	; 0x2c
     ba6:	fe 01       	movw	r30, r28
     ba8:	3d 96       	adiw	r30, 0x0d	; 13
     baa:	ff a7       	std	Y+47, r31	; 0x2f
     bac:	ee a7       	std	Y+46, r30	; 0x2e
     bae:	fa e0       	ldi	r31, 0x0A	; 10
     bb0:	f8 ab       	std	Y+48, r31	; 0x30
     bb2:	ee a5       	ldd	r30, Y+46	; 0x2e
     bb4:	ff a5       	ldd	r31, Y+47	; 0x2f
     bb6:	00 80       	ld	r0, Z
     bb8:	2e a5       	ldd	r18, Y+46	; 0x2e
     bba:	3f a5       	ldd	r19, Y+47	; 0x2f
     bbc:	2f 5f       	subi	r18, 0xFF	; 255
     bbe:	3f 4f       	sbci	r19, 0xFF	; 255
     bc0:	3f a7       	std	Y+47, r19	; 0x2f
     bc2:	2e a7       	std	Y+46, r18	; 0x2e
     bc4:	ec a5       	ldd	r30, Y+44	; 0x2c
     bc6:	fd a5       	ldd	r31, Y+45	; 0x2d
     bc8:	00 82       	st	Z, r0
     bca:	2c a5       	ldd	r18, Y+44	; 0x2c
     bcc:	3d a5       	ldd	r19, Y+45	; 0x2d
     bce:	2f 5f       	subi	r18, 0xFF	; 255
     bd0:	3f 4f       	sbci	r19, 0xFF	; 255
     bd2:	3d a7       	std	Y+45, r19	; 0x2d
     bd4:	2c a7       	std	Y+44, r18	; 0x2c
     bd6:	38 a9       	ldd	r19, Y+48	; 0x30
     bd8:	31 50       	subi	r19, 0x01	; 1
     bda:	38 ab       	std	Y+48, r19	; 0x30
     bdc:	88 a9       	ldd	r24, Y+48	; 0x30
     bde:	88 23       	and	r24, r24
     be0:	41 f7       	brne	.-48     	; 0xbb2 <turn+0x220>
}
     be2:	e0 96       	adiw	r28, 0x30	; 48
     be4:	0f b6       	in	r0, 0x3f	; 63
     be6:	f8 94       	cli
     be8:	de bf       	out	0x3e, r29	; 62
     bea:	0f be       	out	0x3f, r0	; 63
     bec:	cd bf       	out	0x3d, r28	; 61
     bee:	cf 91       	pop	r28
     bf0:	df 91       	pop	r29
     bf2:	08 95       	ret

00000bf4 <init_stepper_timer0>:

void init_stepper_timer0()
{
     bf4:	df 93       	push	r29
     bf6:	cf 93       	push	r28
     bf8:	cd b7       	in	r28, 0x3d	; 61
     bfa:	de b7       	in	r29, 0x3e	; 62
    TCCR0A |= (0<<WGM01) | (0<<WGM00);
     bfc:	a4 e4       	ldi	r26, 0x44	; 68
     bfe:	b0 e0       	ldi	r27, 0x00	; 0
     c00:	e4 e4       	ldi	r30, 0x44	; 68
     c02:	f0 e0       	ldi	r31, 0x00	; 0
     c04:	80 81       	ld	r24, Z
     c06:	8c 93       	st	X, r24
    TCCR0B |= (0<<WGM02) | (1<<CS02) | (0<<CS01) | (0<<CS00);
     c08:	a5 e4       	ldi	r26, 0x45	; 69
     c0a:	b0 e0       	ldi	r27, 0x00	; 0
     c0c:	e5 e4       	ldi	r30, 0x45	; 69
     c0e:	f0 e0       	ldi	r31, 0x00	; 0
     c10:	80 81       	ld	r24, Z
     c12:	84 60       	ori	r24, 0x04	; 4
     c14:	8c 93       	st	X, r24
    TIMSK0 |= (1<<TOIE0);
     c16:	ae e6       	ldi	r26, 0x6E	; 110
     c18:	b0 e0       	ldi	r27, 0x00	; 0
     c1a:	ee e6       	ldi	r30, 0x6E	; 110
     c1c:	f0 e0       	ldi	r31, 0x00	; 0
     c1e:	80 81       	ld	r24, Z
     c20:	81 60       	ori	r24, 0x01	; 1
     c22:	8c 93       	st	X, r24
}
     c24:	cf 91       	pop	r28
     c26:	df 91       	pop	r29
     c28:	08 95       	ret

00000c2a <__fixunssfsi>:
     c2a:	ef 92       	push	r14
     c2c:	ff 92       	push	r15
     c2e:	0f 93       	push	r16
     c30:	1f 93       	push	r17
     c32:	7b 01       	movw	r14, r22
     c34:	8c 01       	movw	r16, r24
     c36:	20 e0       	ldi	r18, 0x00	; 0
     c38:	30 e0       	ldi	r19, 0x00	; 0
     c3a:	40 e0       	ldi	r20, 0x00	; 0
     c3c:	5f e4       	ldi	r21, 0x4F	; 79
     c3e:	0e 94 c1 09 	call	0x1382	; 0x1382 <__gesf2>
     c42:	88 23       	and	r24, r24
     c44:	8c f0       	brlt	.+34     	; 0xc68 <__fixunssfsi+0x3e>
     c46:	c8 01       	movw	r24, r16
     c48:	b7 01       	movw	r22, r14
     c4a:	20 e0       	ldi	r18, 0x00	; 0
     c4c:	30 e0       	ldi	r19, 0x00	; 0
     c4e:	40 e0       	ldi	r20, 0x00	; 0
     c50:	5f e4       	ldi	r21, 0x4F	; 79
     c52:	0e 94 8d 07 	call	0xf1a	; 0xf1a <__subsf3>
     c56:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <__fixsfsi>
     c5a:	9b 01       	movw	r18, r22
     c5c:	ac 01       	movw	r20, r24
     c5e:	20 50       	subi	r18, 0x00	; 0
     c60:	30 40       	sbci	r19, 0x00	; 0
     c62:	40 40       	sbci	r20, 0x00	; 0
     c64:	50 48       	sbci	r21, 0x80	; 128
     c66:	06 c0       	rjmp	.+12     	; 0xc74 <__fixunssfsi+0x4a>
     c68:	c8 01       	movw	r24, r16
     c6a:	b7 01       	movw	r22, r14
     c6c:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <__fixsfsi>
     c70:	9b 01       	movw	r18, r22
     c72:	ac 01       	movw	r20, r24
     c74:	b9 01       	movw	r22, r18
     c76:	ca 01       	movw	r24, r20
     c78:	1f 91       	pop	r17
     c7a:	0f 91       	pop	r16
     c7c:	ff 90       	pop	r15
     c7e:	ef 90       	pop	r14
     c80:	08 95       	ret

00000c82 <_fpadd_parts>:
     c82:	a0 e0       	ldi	r26, 0x00	; 0
     c84:	b0 e0       	ldi	r27, 0x00	; 0
     c86:	e7 e4       	ldi	r30, 0x47	; 71
     c88:	f6 e0       	ldi	r31, 0x06	; 6
     c8a:	0c 94 05 0d 	jmp	0x1a0a	; 0x1a0a <__prologue_saves__>
     c8e:	dc 01       	movw	r26, r24
     c90:	2b 01       	movw	r4, r22
     c92:	fa 01       	movw	r30, r20
     c94:	9c 91       	ld	r25, X
     c96:	92 30       	cpi	r25, 0x02	; 2
     c98:	08 f4       	brcc	.+2      	; 0xc9c <_fpadd_parts+0x1a>
     c9a:	39 c1       	rjmp	.+626    	; 0xf0e <_fpadd_parts+0x28c>
     c9c:	eb 01       	movw	r28, r22
     c9e:	88 81       	ld	r24, Y
     ca0:	82 30       	cpi	r24, 0x02	; 2
     ca2:	08 f4       	brcc	.+2      	; 0xca6 <_fpadd_parts+0x24>
     ca4:	33 c1       	rjmp	.+614    	; 0xf0c <_fpadd_parts+0x28a>
     ca6:	94 30       	cpi	r25, 0x04	; 4
     ca8:	69 f4       	brne	.+26     	; 0xcc4 <_fpadd_parts+0x42>
     caa:	84 30       	cpi	r24, 0x04	; 4
     cac:	09 f0       	breq	.+2      	; 0xcb0 <_fpadd_parts+0x2e>
     cae:	2f c1       	rjmp	.+606    	; 0xf0e <_fpadd_parts+0x28c>
     cb0:	11 96       	adiw	r26, 0x01	; 1
     cb2:	9c 91       	ld	r25, X
     cb4:	11 97       	sbiw	r26, 0x01	; 1
     cb6:	89 81       	ldd	r24, Y+1	; 0x01
     cb8:	98 17       	cp	r25, r24
     cba:	09 f4       	brne	.+2      	; 0xcbe <_fpadd_parts+0x3c>
     cbc:	28 c1       	rjmp	.+592    	; 0xf0e <_fpadd_parts+0x28c>
     cbe:	a0 e0       	ldi	r26, 0x00	; 0
     cc0:	b2 e0       	ldi	r27, 0x02	; 2
     cc2:	25 c1       	rjmp	.+586    	; 0xf0e <_fpadd_parts+0x28c>
     cc4:	84 30       	cpi	r24, 0x04	; 4
     cc6:	09 f4       	brne	.+2      	; 0xcca <_fpadd_parts+0x48>
     cc8:	21 c1       	rjmp	.+578    	; 0xf0c <_fpadd_parts+0x28a>
     cca:	82 30       	cpi	r24, 0x02	; 2
     ccc:	a9 f4       	brne	.+42     	; 0xcf8 <_fpadd_parts+0x76>
     cce:	92 30       	cpi	r25, 0x02	; 2
     cd0:	09 f0       	breq	.+2      	; 0xcd4 <_fpadd_parts+0x52>
     cd2:	1d c1       	rjmp	.+570    	; 0xf0e <_fpadd_parts+0x28c>
     cd4:	9a 01       	movw	r18, r20
     cd6:	ad 01       	movw	r20, r26
     cd8:	88 e0       	ldi	r24, 0x08	; 8
     cda:	ea 01       	movw	r28, r20
     cdc:	09 90       	ld	r0, Y+
     cde:	ae 01       	movw	r20, r28
     ce0:	e9 01       	movw	r28, r18
     ce2:	09 92       	st	Y+, r0
     ce4:	9e 01       	movw	r18, r28
     ce6:	81 50       	subi	r24, 0x01	; 1
     ce8:	c1 f7       	brne	.-16     	; 0xcda <_fpadd_parts+0x58>
     cea:	e2 01       	movw	r28, r4
     cec:	89 81       	ldd	r24, Y+1	; 0x01
     cee:	11 96       	adiw	r26, 0x01	; 1
     cf0:	9c 91       	ld	r25, X
     cf2:	89 23       	and	r24, r25
     cf4:	81 83       	std	Z+1, r24	; 0x01
     cf6:	08 c1       	rjmp	.+528    	; 0xf08 <_fpadd_parts+0x286>
     cf8:	92 30       	cpi	r25, 0x02	; 2
     cfa:	09 f4       	brne	.+2      	; 0xcfe <_fpadd_parts+0x7c>
     cfc:	07 c1       	rjmp	.+526    	; 0xf0c <_fpadd_parts+0x28a>
     cfe:	12 96       	adiw	r26, 0x02	; 2
     d00:	2d 90       	ld	r2, X+
     d02:	3c 90       	ld	r3, X
     d04:	13 97       	sbiw	r26, 0x03	; 3
     d06:	eb 01       	movw	r28, r22
     d08:	8a 81       	ldd	r24, Y+2	; 0x02
     d0a:	9b 81       	ldd	r25, Y+3	; 0x03
     d0c:	14 96       	adiw	r26, 0x04	; 4
     d0e:	ad 90       	ld	r10, X+
     d10:	bd 90       	ld	r11, X+
     d12:	cd 90       	ld	r12, X+
     d14:	dc 90       	ld	r13, X
     d16:	17 97       	sbiw	r26, 0x07	; 7
     d18:	ec 80       	ldd	r14, Y+4	; 0x04
     d1a:	fd 80       	ldd	r15, Y+5	; 0x05
     d1c:	0e 81       	ldd	r16, Y+6	; 0x06
     d1e:	1f 81       	ldd	r17, Y+7	; 0x07
     d20:	91 01       	movw	r18, r2
     d22:	28 1b       	sub	r18, r24
     d24:	39 0b       	sbc	r19, r25
     d26:	b9 01       	movw	r22, r18
     d28:	37 ff       	sbrs	r19, 7
     d2a:	04 c0       	rjmp	.+8      	; 0xd34 <_fpadd_parts+0xb2>
     d2c:	66 27       	eor	r22, r22
     d2e:	77 27       	eor	r23, r23
     d30:	62 1b       	sub	r22, r18
     d32:	73 0b       	sbc	r23, r19
     d34:	60 32       	cpi	r22, 0x20	; 32
     d36:	71 05       	cpc	r23, r1
     d38:	0c f0       	brlt	.+2      	; 0xd3c <_fpadd_parts+0xba>
     d3a:	61 c0       	rjmp	.+194    	; 0xdfe <_fpadd_parts+0x17c>
     d3c:	12 16       	cp	r1, r18
     d3e:	13 06       	cpc	r1, r19
     d40:	6c f5       	brge	.+90     	; 0xd9c <_fpadd_parts+0x11a>
     d42:	37 01       	movw	r6, r14
     d44:	48 01       	movw	r8, r16
     d46:	06 2e       	mov	r0, r22
     d48:	04 c0       	rjmp	.+8      	; 0xd52 <_fpadd_parts+0xd0>
     d4a:	96 94       	lsr	r9
     d4c:	87 94       	ror	r8
     d4e:	77 94       	ror	r7
     d50:	67 94       	ror	r6
     d52:	0a 94       	dec	r0
     d54:	d2 f7       	brpl	.-12     	; 0xd4a <_fpadd_parts+0xc8>
     d56:	21 e0       	ldi	r18, 0x01	; 1
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	40 e0       	ldi	r20, 0x00	; 0
     d5c:	50 e0       	ldi	r21, 0x00	; 0
     d5e:	04 c0       	rjmp	.+8      	; 0xd68 <_fpadd_parts+0xe6>
     d60:	22 0f       	add	r18, r18
     d62:	33 1f       	adc	r19, r19
     d64:	44 1f       	adc	r20, r20
     d66:	55 1f       	adc	r21, r21
     d68:	6a 95       	dec	r22
     d6a:	d2 f7       	brpl	.-12     	; 0xd60 <_fpadd_parts+0xde>
     d6c:	21 50       	subi	r18, 0x01	; 1
     d6e:	30 40       	sbci	r19, 0x00	; 0
     d70:	40 40       	sbci	r20, 0x00	; 0
     d72:	50 40       	sbci	r21, 0x00	; 0
     d74:	2e 21       	and	r18, r14
     d76:	3f 21       	and	r19, r15
     d78:	40 23       	and	r20, r16
     d7a:	51 23       	and	r21, r17
     d7c:	21 15       	cp	r18, r1
     d7e:	31 05       	cpc	r19, r1
     d80:	41 05       	cpc	r20, r1
     d82:	51 05       	cpc	r21, r1
     d84:	21 f0       	breq	.+8      	; 0xd8e <_fpadd_parts+0x10c>
     d86:	21 e0       	ldi	r18, 0x01	; 1
     d88:	30 e0       	ldi	r19, 0x00	; 0
     d8a:	40 e0       	ldi	r20, 0x00	; 0
     d8c:	50 e0       	ldi	r21, 0x00	; 0
     d8e:	79 01       	movw	r14, r18
     d90:	8a 01       	movw	r16, r20
     d92:	e6 28       	or	r14, r6
     d94:	f7 28       	or	r15, r7
     d96:	08 29       	or	r16, r8
     d98:	19 29       	or	r17, r9
     d9a:	3c c0       	rjmp	.+120    	; 0xe14 <_fpadd_parts+0x192>
     d9c:	23 2b       	or	r18, r19
     d9e:	d1 f1       	breq	.+116    	; 0xe14 <_fpadd_parts+0x192>
     da0:	26 0e       	add	r2, r22
     da2:	37 1e       	adc	r3, r23
     da4:	35 01       	movw	r6, r10
     da6:	46 01       	movw	r8, r12
     da8:	06 2e       	mov	r0, r22
     daa:	04 c0       	rjmp	.+8      	; 0xdb4 <_fpadd_parts+0x132>
     dac:	96 94       	lsr	r9
     dae:	87 94       	ror	r8
     db0:	77 94       	ror	r7
     db2:	67 94       	ror	r6
     db4:	0a 94       	dec	r0
     db6:	d2 f7       	brpl	.-12     	; 0xdac <_fpadd_parts+0x12a>
     db8:	21 e0       	ldi	r18, 0x01	; 1
     dba:	30 e0       	ldi	r19, 0x00	; 0
     dbc:	40 e0       	ldi	r20, 0x00	; 0
     dbe:	50 e0       	ldi	r21, 0x00	; 0
     dc0:	04 c0       	rjmp	.+8      	; 0xdca <_fpadd_parts+0x148>
     dc2:	22 0f       	add	r18, r18
     dc4:	33 1f       	adc	r19, r19
     dc6:	44 1f       	adc	r20, r20
     dc8:	55 1f       	adc	r21, r21
     dca:	6a 95       	dec	r22
     dcc:	d2 f7       	brpl	.-12     	; 0xdc2 <_fpadd_parts+0x140>
     dce:	21 50       	subi	r18, 0x01	; 1
     dd0:	30 40       	sbci	r19, 0x00	; 0
     dd2:	40 40       	sbci	r20, 0x00	; 0
     dd4:	50 40       	sbci	r21, 0x00	; 0
     dd6:	2a 21       	and	r18, r10
     dd8:	3b 21       	and	r19, r11
     dda:	4c 21       	and	r20, r12
     ddc:	5d 21       	and	r21, r13
     dde:	21 15       	cp	r18, r1
     de0:	31 05       	cpc	r19, r1
     de2:	41 05       	cpc	r20, r1
     de4:	51 05       	cpc	r21, r1
     de6:	21 f0       	breq	.+8      	; 0xdf0 <_fpadd_parts+0x16e>
     de8:	21 e0       	ldi	r18, 0x01	; 1
     dea:	30 e0       	ldi	r19, 0x00	; 0
     dec:	40 e0       	ldi	r20, 0x00	; 0
     dee:	50 e0       	ldi	r21, 0x00	; 0
     df0:	59 01       	movw	r10, r18
     df2:	6a 01       	movw	r12, r20
     df4:	a6 28       	or	r10, r6
     df6:	b7 28       	or	r11, r7
     df8:	c8 28       	or	r12, r8
     dfa:	d9 28       	or	r13, r9
     dfc:	0b c0       	rjmp	.+22     	; 0xe14 <_fpadd_parts+0x192>
     dfe:	82 15       	cp	r24, r2
     e00:	93 05       	cpc	r25, r3
     e02:	2c f0       	brlt	.+10     	; 0xe0e <_fpadd_parts+0x18c>
     e04:	1c 01       	movw	r2, r24
     e06:	aa 24       	eor	r10, r10
     e08:	bb 24       	eor	r11, r11
     e0a:	65 01       	movw	r12, r10
     e0c:	03 c0       	rjmp	.+6      	; 0xe14 <_fpadd_parts+0x192>
     e0e:	ee 24       	eor	r14, r14
     e10:	ff 24       	eor	r15, r15
     e12:	87 01       	movw	r16, r14
     e14:	11 96       	adiw	r26, 0x01	; 1
     e16:	9c 91       	ld	r25, X
     e18:	d2 01       	movw	r26, r4
     e1a:	11 96       	adiw	r26, 0x01	; 1
     e1c:	8c 91       	ld	r24, X
     e1e:	98 17       	cp	r25, r24
     e20:	09 f4       	brne	.+2      	; 0xe24 <_fpadd_parts+0x1a2>
     e22:	45 c0       	rjmp	.+138    	; 0xeae <_fpadd_parts+0x22c>
     e24:	99 23       	and	r25, r25
     e26:	39 f0       	breq	.+14     	; 0xe36 <_fpadd_parts+0x1b4>
     e28:	a8 01       	movw	r20, r16
     e2a:	97 01       	movw	r18, r14
     e2c:	2a 19       	sub	r18, r10
     e2e:	3b 09       	sbc	r19, r11
     e30:	4c 09       	sbc	r20, r12
     e32:	5d 09       	sbc	r21, r13
     e34:	06 c0       	rjmp	.+12     	; 0xe42 <_fpadd_parts+0x1c0>
     e36:	a6 01       	movw	r20, r12
     e38:	95 01       	movw	r18, r10
     e3a:	2e 19       	sub	r18, r14
     e3c:	3f 09       	sbc	r19, r15
     e3e:	40 0b       	sbc	r20, r16
     e40:	51 0b       	sbc	r21, r17
     e42:	57 fd       	sbrc	r21, 7
     e44:	08 c0       	rjmp	.+16     	; 0xe56 <_fpadd_parts+0x1d4>
     e46:	11 82       	std	Z+1, r1	; 0x01
     e48:	33 82       	std	Z+3, r3	; 0x03
     e4a:	22 82       	std	Z+2, r2	; 0x02
     e4c:	24 83       	std	Z+4, r18	; 0x04
     e4e:	35 83       	std	Z+5, r19	; 0x05
     e50:	46 83       	std	Z+6, r20	; 0x06
     e52:	57 83       	std	Z+7, r21	; 0x07
     e54:	1d c0       	rjmp	.+58     	; 0xe90 <_fpadd_parts+0x20e>
     e56:	81 e0       	ldi	r24, 0x01	; 1
     e58:	81 83       	std	Z+1, r24	; 0x01
     e5a:	33 82       	std	Z+3, r3	; 0x03
     e5c:	22 82       	std	Z+2, r2	; 0x02
     e5e:	88 27       	eor	r24, r24
     e60:	99 27       	eor	r25, r25
     e62:	dc 01       	movw	r26, r24
     e64:	82 1b       	sub	r24, r18
     e66:	93 0b       	sbc	r25, r19
     e68:	a4 0b       	sbc	r26, r20
     e6a:	b5 0b       	sbc	r27, r21
     e6c:	84 83       	std	Z+4, r24	; 0x04
     e6e:	95 83       	std	Z+5, r25	; 0x05
     e70:	a6 83       	std	Z+6, r26	; 0x06
     e72:	b7 83       	std	Z+7, r27	; 0x07
     e74:	0d c0       	rjmp	.+26     	; 0xe90 <_fpadd_parts+0x20e>
     e76:	22 0f       	add	r18, r18
     e78:	33 1f       	adc	r19, r19
     e7a:	44 1f       	adc	r20, r20
     e7c:	55 1f       	adc	r21, r21
     e7e:	24 83       	std	Z+4, r18	; 0x04
     e80:	35 83       	std	Z+5, r19	; 0x05
     e82:	46 83       	std	Z+6, r20	; 0x06
     e84:	57 83       	std	Z+7, r21	; 0x07
     e86:	82 81       	ldd	r24, Z+2	; 0x02
     e88:	93 81       	ldd	r25, Z+3	; 0x03
     e8a:	01 97       	sbiw	r24, 0x01	; 1
     e8c:	93 83       	std	Z+3, r25	; 0x03
     e8e:	82 83       	std	Z+2, r24	; 0x02
     e90:	24 81       	ldd	r18, Z+4	; 0x04
     e92:	35 81       	ldd	r19, Z+5	; 0x05
     e94:	46 81       	ldd	r20, Z+6	; 0x06
     e96:	57 81       	ldd	r21, Z+7	; 0x07
     e98:	da 01       	movw	r26, r20
     e9a:	c9 01       	movw	r24, r18
     e9c:	01 97       	sbiw	r24, 0x01	; 1
     e9e:	a1 09       	sbc	r26, r1
     ea0:	b1 09       	sbc	r27, r1
     ea2:	8f 5f       	subi	r24, 0xFF	; 255
     ea4:	9f 4f       	sbci	r25, 0xFF	; 255
     ea6:	af 4f       	sbci	r26, 0xFF	; 255
     ea8:	bf 43       	sbci	r27, 0x3F	; 63
     eaa:	28 f3       	brcs	.-54     	; 0xe76 <_fpadd_parts+0x1f4>
     eac:	0b c0       	rjmp	.+22     	; 0xec4 <_fpadd_parts+0x242>
     eae:	91 83       	std	Z+1, r25	; 0x01
     eb0:	33 82       	std	Z+3, r3	; 0x03
     eb2:	22 82       	std	Z+2, r2	; 0x02
     eb4:	ea 0c       	add	r14, r10
     eb6:	fb 1c       	adc	r15, r11
     eb8:	0c 1d       	adc	r16, r12
     eba:	1d 1d       	adc	r17, r13
     ebc:	e4 82       	std	Z+4, r14	; 0x04
     ebe:	f5 82       	std	Z+5, r15	; 0x05
     ec0:	06 83       	std	Z+6, r16	; 0x06
     ec2:	17 83       	std	Z+7, r17	; 0x07
     ec4:	83 e0       	ldi	r24, 0x03	; 3
     ec6:	80 83       	st	Z, r24
     ec8:	24 81       	ldd	r18, Z+4	; 0x04
     eca:	35 81       	ldd	r19, Z+5	; 0x05
     ecc:	46 81       	ldd	r20, Z+6	; 0x06
     ece:	57 81       	ldd	r21, Z+7	; 0x07
     ed0:	57 ff       	sbrs	r21, 7
     ed2:	1a c0       	rjmp	.+52     	; 0xf08 <_fpadd_parts+0x286>
     ed4:	c9 01       	movw	r24, r18
     ed6:	aa 27       	eor	r26, r26
     ed8:	97 fd       	sbrc	r25, 7
     eda:	a0 95       	com	r26
     edc:	ba 2f       	mov	r27, r26
     ede:	81 70       	andi	r24, 0x01	; 1
     ee0:	90 70       	andi	r25, 0x00	; 0
     ee2:	a0 70       	andi	r26, 0x00	; 0
     ee4:	b0 70       	andi	r27, 0x00	; 0
     ee6:	56 95       	lsr	r21
     ee8:	47 95       	ror	r20
     eea:	37 95       	ror	r19
     eec:	27 95       	ror	r18
     eee:	82 2b       	or	r24, r18
     ef0:	93 2b       	or	r25, r19
     ef2:	a4 2b       	or	r26, r20
     ef4:	b5 2b       	or	r27, r21
     ef6:	84 83       	std	Z+4, r24	; 0x04
     ef8:	95 83       	std	Z+5, r25	; 0x05
     efa:	a6 83       	std	Z+6, r26	; 0x06
     efc:	b7 83       	std	Z+7, r27	; 0x07
     efe:	82 81       	ldd	r24, Z+2	; 0x02
     f00:	93 81       	ldd	r25, Z+3	; 0x03
     f02:	01 96       	adiw	r24, 0x01	; 1
     f04:	93 83       	std	Z+3, r25	; 0x03
     f06:	82 83       	std	Z+2, r24	; 0x02
     f08:	df 01       	movw	r26, r30
     f0a:	01 c0       	rjmp	.+2      	; 0xf0e <_fpadd_parts+0x28c>
     f0c:	d2 01       	movw	r26, r4
     f0e:	cd 01       	movw	r24, r26
     f10:	cd b7       	in	r28, 0x3d	; 61
     f12:	de b7       	in	r29, 0x3e	; 62
     f14:	e2 e1       	ldi	r30, 0x12	; 18
     f16:	0c 94 21 0d 	jmp	0x1a42	; 0x1a42 <__epilogue_restores__>

00000f1a <__subsf3>:
     f1a:	a0 e2       	ldi	r26, 0x20	; 32
     f1c:	b0 e0       	ldi	r27, 0x00	; 0
     f1e:	e3 e9       	ldi	r30, 0x93	; 147
     f20:	f7 e0       	ldi	r31, 0x07	; 7
     f22:	0c 94 11 0d 	jmp	0x1a22	; 0x1a22 <__prologue_saves__+0x18>
     f26:	69 83       	std	Y+1, r22	; 0x01
     f28:	7a 83       	std	Y+2, r23	; 0x02
     f2a:	8b 83       	std	Y+3, r24	; 0x03
     f2c:	9c 83       	std	Y+4, r25	; 0x04
     f2e:	2d 83       	std	Y+5, r18	; 0x05
     f30:	3e 83       	std	Y+6, r19	; 0x06
     f32:	4f 83       	std	Y+7, r20	; 0x07
     f34:	58 87       	std	Y+8, r21	; 0x08
     f36:	e9 e0       	ldi	r30, 0x09	; 9
     f38:	ee 2e       	mov	r14, r30
     f3a:	f1 2c       	mov	r15, r1
     f3c:	ec 0e       	add	r14, r28
     f3e:	fd 1e       	adc	r15, r29
     f40:	ce 01       	movw	r24, r28
     f42:	01 96       	adiw	r24, 0x01	; 1
     f44:	b7 01       	movw	r22, r14
     f46:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <__unpack_f>
     f4a:	8e 01       	movw	r16, r28
     f4c:	0f 5e       	subi	r16, 0xEF	; 239
     f4e:	1f 4f       	sbci	r17, 0xFF	; 255
     f50:	ce 01       	movw	r24, r28
     f52:	05 96       	adiw	r24, 0x05	; 5
     f54:	b8 01       	movw	r22, r16
     f56:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <__unpack_f>
     f5a:	8a 89       	ldd	r24, Y+18	; 0x12
     f5c:	91 e0       	ldi	r25, 0x01	; 1
     f5e:	89 27       	eor	r24, r25
     f60:	8a 8b       	std	Y+18, r24	; 0x12
     f62:	c7 01       	movw	r24, r14
     f64:	b8 01       	movw	r22, r16
     f66:	ae 01       	movw	r20, r28
     f68:	47 5e       	subi	r20, 0xE7	; 231
     f6a:	5f 4f       	sbci	r21, 0xFF	; 255
     f6c:	0e 94 41 06 	call	0xc82	; 0xc82 <_fpadd_parts>
     f70:	0e 94 22 0b 	call	0x1644	; 0x1644 <__pack_f>
     f74:	a0 96       	adiw	r28, 0x20	; 32
     f76:	e6 e0       	ldi	r30, 0x06	; 6
     f78:	0c 94 2d 0d 	jmp	0x1a5a	; 0x1a5a <__epilogue_restores__+0x18>

00000f7c <__addsf3>:
     f7c:	a0 e2       	ldi	r26, 0x20	; 32
     f7e:	b0 e0       	ldi	r27, 0x00	; 0
     f80:	e4 ec       	ldi	r30, 0xC4	; 196
     f82:	f7 e0       	ldi	r31, 0x07	; 7
     f84:	0c 94 11 0d 	jmp	0x1a22	; 0x1a22 <__prologue_saves__+0x18>
     f88:	69 83       	std	Y+1, r22	; 0x01
     f8a:	7a 83       	std	Y+2, r23	; 0x02
     f8c:	8b 83       	std	Y+3, r24	; 0x03
     f8e:	9c 83       	std	Y+4, r25	; 0x04
     f90:	2d 83       	std	Y+5, r18	; 0x05
     f92:	3e 83       	std	Y+6, r19	; 0x06
     f94:	4f 83       	std	Y+7, r20	; 0x07
     f96:	58 87       	std	Y+8, r21	; 0x08
     f98:	f9 e0       	ldi	r31, 0x09	; 9
     f9a:	ef 2e       	mov	r14, r31
     f9c:	f1 2c       	mov	r15, r1
     f9e:	ec 0e       	add	r14, r28
     fa0:	fd 1e       	adc	r15, r29
     fa2:	ce 01       	movw	r24, r28
     fa4:	01 96       	adiw	r24, 0x01	; 1
     fa6:	b7 01       	movw	r22, r14
     fa8:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <__unpack_f>
     fac:	8e 01       	movw	r16, r28
     fae:	0f 5e       	subi	r16, 0xEF	; 239
     fb0:	1f 4f       	sbci	r17, 0xFF	; 255
     fb2:	ce 01       	movw	r24, r28
     fb4:	05 96       	adiw	r24, 0x05	; 5
     fb6:	b8 01       	movw	r22, r16
     fb8:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <__unpack_f>
     fbc:	c7 01       	movw	r24, r14
     fbe:	b8 01       	movw	r22, r16
     fc0:	ae 01       	movw	r20, r28
     fc2:	47 5e       	subi	r20, 0xE7	; 231
     fc4:	5f 4f       	sbci	r21, 0xFF	; 255
     fc6:	0e 94 41 06 	call	0xc82	; 0xc82 <_fpadd_parts>
     fca:	0e 94 22 0b 	call	0x1644	; 0x1644 <__pack_f>
     fce:	a0 96       	adiw	r28, 0x20	; 32
     fd0:	e6 e0       	ldi	r30, 0x06	; 6
     fd2:	0c 94 2d 0d 	jmp	0x1a5a	; 0x1a5a <__epilogue_restores__+0x18>

00000fd6 <__mulsf3>:
     fd6:	a0 e2       	ldi	r26, 0x20	; 32
     fd8:	b0 e0       	ldi	r27, 0x00	; 0
     fda:	e1 ef       	ldi	r30, 0xF1	; 241
     fdc:	f7 e0       	ldi	r31, 0x07	; 7
     fde:	0c 94 05 0d 	jmp	0x1a0a	; 0x1a0a <__prologue_saves__>
     fe2:	69 83       	std	Y+1, r22	; 0x01
     fe4:	7a 83       	std	Y+2, r23	; 0x02
     fe6:	8b 83       	std	Y+3, r24	; 0x03
     fe8:	9c 83       	std	Y+4, r25	; 0x04
     fea:	2d 83       	std	Y+5, r18	; 0x05
     fec:	3e 83       	std	Y+6, r19	; 0x06
     fee:	4f 83       	std	Y+7, r20	; 0x07
     ff0:	58 87       	std	Y+8, r21	; 0x08
     ff2:	ce 01       	movw	r24, r28
     ff4:	01 96       	adiw	r24, 0x01	; 1
     ff6:	be 01       	movw	r22, r28
     ff8:	67 5f       	subi	r22, 0xF7	; 247
     ffa:	7f 4f       	sbci	r23, 0xFF	; 255
     ffc:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <__unpack_f>
    1000:	ce 01       	movw	r24, r28
    1002:	05 96       	adiw	r24, 0x05	; 5
    1004:	be 01       	movw	r22, r28
    1006:	6f 5e       	subi	r22, 0xEF	; 239
    1008:	7f 4f       	sbci	r23, 0xFF	; 255
    100a:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <__unpack_f>
    100e:	99 85       	ldd	r25, Y+9	; 0x09
    1010:	92 30       	cpi	r25, 0x02	; 2
    1012:	88 f0       	brcs	.+34     	; 0x1036 <__mulsf3+0x60>
    1014:	89 89       	ldd	r24, Y+17	; 0x11
    1016:	82 30       	cpi	r24, 0x02	; 2
    1018:	c8 f0       	brcs	.+50     	; 0x104c <__mulsf3+0x76>
    101a:	94 30       	cpi	r25, 0x04	; 4
    101c:	19 f4       	brne	.+6      	; 0x1024 <__mulsf3+0x4e>
    101e:	82 30       	cpi	r24, 0x02	; 2
    1020:	51 f4       	brne	.+20     	; 0x1036 <__mulsf3+0x60>
    1022:	04 c0       	rjmp	.+8      	; 0x102c <__mulsf3+0x56>
    1024:	84 30       	cpi	r24, 0x04	; 4
    1026:	29 f4       	brne	.+10     	; 0x1032 <__mulsf3+0x5c>
    1028:	92 30       	cpi	r25, 0x02	; 2
    102a:	81 f4       	brne	.+32     	; 0x104c <__mulsf3+0x76>
    102c:	80 e0       	ldi	r24, 0x00	; 0
    102e:	92 e0       	ldi	r25, 0x02	; 2
    1030:	c6 c0       	rjmp	.+396    	; 0x11be <__mulsf3+0x1e8>
    1032:	92 30       	cpi	r25, 0x02	; 2
    1034:	49 f4       	brne	.+18     	; 0x1048 <__mulsf3+0x72>
    1036:	20 e0       	ldi	r18, 0x00	; 0
    1038:	9a 85       	ldd	r25, Y+10	; 0x0a
    103a:	8a 89       	ldd	r24, Y+18	; 0x12
    103c:	98 13       	cpse	r25, r24
    103e:	21 e0       	ldi	r18, 0x01	; 1
    1040:	2a 87       	std	Y+10, r18	; 0x0a
    1042:	ce 01       	movw	r24, r28
    1044:	09 96       	adiw	r24, 0x09	; 9
    1046:	bb c0       	rjmp	.+374    	; 0x11be <__mulsf3+0x1e8>
    1048:	82 30       	cpi	r24, 0x02	; 2
    104a:	49 f4       	brne	.+18     	; 0x105e <__mulsf3+0x88>
    104c:	20 e0       	ldi	r18, 0x00	; 0
    104e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1050:	8a 89       	ldd	r24, Y+18	; 0x12
    1052:	98 13       	cpse	r25, r24
    1054:	21 e0       	ldi	r18, 0x01	; 1
    1056:	2a 8b       	std	Y+18, r18	; 0x12
    1058:	ce 01       	movw	r24, r28
    105a:	41 96       	adiw	r24, 0x11	; 17
    105c:	b0 c0       	rjmp	.+352    	; 0x11be <__mulsf3+0x1e8>
    105e:	2d 84       	ldd	r2, Y+13	; 0x0d
    1060:	3e 84       	ldd	r3, Y+14	; 0x0e
    1062:	4f 84       	ldd	r4, Y+15	; 0x0f
    1064:	58 88       	ldd	r5, Y+16	; 0x10
    1066:	6d 88       	ldd	r6, Y+21	; 0x15
    1068:	7e 88       	ldd	r7, Y+22	; 0x16
    106a:	8f 88       	ldd	r8, Y+23	; 0x17
    106c:	98 8c       	ldd	r9, Y+24	; 0x18
    106e:	ee 24       	eor	r14, r14
    1070:	ff 24       	eor	r15, r15
    1072:	87 01       	movw	r16, r14
    1074:	aa 24       	eor	r10, r10
    1076:	bb 24       	eor	r11, r11
    1078:	65 01       	movw	r12, r10
    107a:	40 e0       	ldi	r20, 0x00	; 0
    107c:	50 e0       	ldi	r21, 0x00	; 0
    107e:	60 e0       	ldi	r22, 0x00	; 0
    1080:	70 e0       	ldi	r23, 0x00	; 0
    1082:	e0 e0       	ldi	r30, 0x00	; 0
    1084:	f0 e0       	ldi	r31, 0x00	; 0
    1086:	c1 01       	movw	r24, r2
    1088:	81 70       	andi	r24, 0x01	; 1
    108a:	90 70       	andi	r25, 0x00	; 0
    108c:	89 2b       	or	r24, r25
    108e:	e9 f0       	breq	.+58     	; 0x10ca <__mulsf3+0xf4>
    1090:	e6 0c       	add	r14, r6
    1092:	f7 1c       	adc	r15, r7
    1094:	08 1d       	adc	r16, r8
    1096:	19 1d       	adc	r17, r9
    1098:	9a 01       	movw	r18, r20
    109a:	ab 01       	movw	r20, r22
    109c:	2a 0d       	add	r18, r10
    109e:	3b 1d       	adc	r19, r11
    10a0:	4c 1d       	adc	r20, r12
    10a2:	5d 1d       	adc	r21, r13
    10a4:	80 e0       	ldi	r24, 0x00	; 0
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	a0 e0       	ldi	r26, 0x00	; 0
    10aa:	b0 e0       	ldi	r27, 0x00	; 0
    10ac:	e6 14       	cp	r14, r6
    10ae:	f7 04       	cpc	r15, r7
    10b0:	08 05       	cpc	r16, r8
    10b2:	19 05       	cpc	r17, r9
    10b4:	20 f4       	brcc	.+8      	; 0x10be <__mulsf3+0xe8>
    10b6:	81 e0       	ldi	r24, 0x01	; 1
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	a0 e0       	ldi	r26, 0x00	; 0
    10bc:	b0 e0       	ldi	r27, 0x00	; 0
    10be:	ba 01       	movw	r22, r20
    10c0:	a9 01       	movw	r20, r18
    10c2:	48 0f       	add	r20, r24
    10c4:	59 1f       	adc	r21, r25
    10c6:	6a 1f       	adc	r22, r26
    10c8:	7b 1f       	adc	r23, r27
    10ca:	aa 0c       	add	r10, r10
    10cc:	bb 1c       	adc	r11, r11
    10ce:	cc 1c       	adc	r12, r12
    10d0:	dd 1c       	adc	r13, r13
    10d2:	97 fe       	sbrs	r9, 7
    10d4:	08 c0       	rjmp	.+16     	; 0x10e6 <__mulsf3+0x110>
    10d6:	81 e0       	ldi	r24, 0x01	; 1
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	a0 e0       	ldi	r26, 0x00	; 0
    10dc:	b0 e0       	ldi	r27, 0x00	; 0
    10de:	a8 2a       	or	r10, r24
    10e0:	b9 2a       	or	r11, r25
    10e2:	ca 2a       	or	r12, r26
    10e4:	db 2a       	or	r13, r27
    10e6:	31 96       	adiw	r30, 0x01	; 1
    10e8:	e0 32       	cpi	r30, 0x20	; 32
    10ea:	f1 05       	cpc	r31, r1
    10ec:	49 f0       	breq	.+18     	; 0x1100 <__mulsf3+0x12a>
    10ee:	66 0c       	add	r6, r6
    10f0:	77 1c       	adc	r7, r7
    10f2:	88 1c       	adc	r8, r8
    10f4:	99 1c       	adc	r9, r9
    10f6:	56 94       	lsr	r5
    10f8:	47 94       	ror	r4
    10fa:	37 94       	ror	r3
    10fc:	27 94       	ror	r2
    10fe:	c3 cf       	rjmp	.-122    	; 0x1086 <__mulsf3+0xb0>
    1100:	fa 85       	ldd	r31, Y+10	; 0x0a
    1102:	ea 89       	ldd	r30, Y+18	; 0x12
    1104:	2b 89       	ldd	r18, Y+19	; 0x13
    1106:	3c 89       	ldd	r19, Y+20	; 0x14
    1108:	8b 85       	ldd	r24, Y+11	; 0x0b
    110a:	9c 85       	ldd	r25, Y+12	; 0x0c
    110c:	28 0f       	add	r18, r24
    110e:	39 1f       	adc	r19, r25
    1110:	2e 5f       	subi	r18, 0xFE	; 254
    1112:	3f 4f       	sbci	r19, 0xFF	; 255
    1114:	17 c0       	rjmp	.+46     	; 0x1144 <__mulsf3+0x16e>
    1116:	ca 01       	movw	r24, r20
    1118:	81 70       	andi	r24, 0x01	; 1
    111a:	90 70       	andi	r25, 0x00	; 0
    111c:	89 2b       	or	r24, r25
    111e:	61 f0       	breq	.+24     	; 0x1138 <__mulsf3+0x162>
    1120:	16 95       	lsr	r17
    1122:	07 95       	ror	r16
    1124:	f7 94       	ror	r15
    1126:	e7 94       	ror	r14
    1128:	80 e0       	ldi	r24, 0x00	; 0
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	a0 e0       	ldi	r26, 0x00	; 0
    112e:	b0 e8       	ldi	r27, 0x80	; 128
    1130:	e8 2a       	or	r14, r24
    1132:	f9 2a       	or	r15, r25
    1134:	0a 2b       	or	r16, r26
    1136:	1b 2b       	or	r17, r27
    1138:	76 95       	lsr	r23
    113a:	67 95       	ror	r22
    113c:	57 95       	ror	r21
    113e:	47 95       	ror	r20
    1140:	2f 5f       	subi	r18, 0xFF	; 255
    1142:	3f 4f       	sbci	r19, 0xFF	; 255
    1144:	77 fd       	sbrc	r23, 7
    1146:	e7 cf       	rjmp	.-50     	; 0x1116 <__mulsf3+0x140>
    1148:	0c c0       	rjmp	.+24     	; 0x1162 <__mulsf3+0x18c>
    114a:	44 0f       	add	r20, r20
    114c:	55 1f       	adc	r21, r21
    114e:	66 1f       	adc	r22, r22
    1150:	77 1f       	adc	r23, r23
    1152:	17 fd       	sbrc	r17, 7
    1154:	41 60       	ori	r20, 0x01	; 1
    1156:	ee 0c       	add	r14, r14
    1158:	ff 1c       	adc	r15, r15
    115a:	00 1f       	adc	r16, r16
    115c:	11 1f       	adc	r17, r17
    115e:	21 50       	subi	r18, 0x01	; 1
    1160:	30 40       	sbci	r19, 0x00	; 0
    1162:	40 30       	cpi	r20, 0x00	; 0
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	59 07       	cpc	r21, r25
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	69 07       	cpc	r22, r25
    116c:	90 e4       	ldi	r25, 0x40	; 64
    116e:	79 07       	cpc	r23, r25
    1170:	60 f3       	brcs	.-40     	; 0x114a <__mulsf3+0x174>
    1172:	2b 8f       	std	Y+27, r18	; 0x1b
    1174:	3c 8f       	std	Y+28, r19	; 0x1c
    1176:	db 01       	movw	r26, r22
    1178:	ca 01       	movw	r24, r20
    117a:	8f 77       	andi	r24, 0x7F	; 127
    117c:	90 70       	andi	r25, 0x00	; 0
    117e:	a0 70       	andi	r26, 0x00	; 0
    1180:	b0 70       	andi	r27, 0x00	; 0
    1182:	80 34       	cpi	r24, 0x40	; 64
    1184:	91 05       	cpc	r25, r1
    1186:	a1 05       	cpc	r26, r1
    1188:	b1 05       	cpc	r27, r1
    118a:	61 f4       	brne	.+24     	; 0x11a4 <__mulsf3+0x1ce>
    118c:	47 fd       	sbrc	r20, 7
    118e:	0a c0       	rjmp	.+20     	; 0x11a4 <__mulsf3+0x1ce>
    1190:	e1 14       	cp	r14, r1
    1192:	f1 04       	cpc	r15, r1
    1194:	01 05       	cpc	r16, r1
    1196:	11 05       	cpc	r17, r1
    1198:	29 f0       	breq	.+10     	; 0x11a4 <__mulsf3+0x1ce>
    119a:	40 5c       	subi	r20, 0xC0	; 192
    119c:	5f 4f       	sbci	r21, 0xFF	; 255
    119e:	6f 4f       	sbci	r22, 0xFF	; 255
    11a0:	7f 4f       	sbci	r23, 0xFF	; 255
    11a2:	40 78       	andi	r20, 0x80	; 128
    11a4:	1a 8e       	std	Y+26, r1	; 0x1a
    11a6:	fe 17       	cp	r31, r30
    11a8:	11 f0       	breq	.+4      	; 0x11ae <__mulsf3+0x1d8>
    11aa:	81 e0       	ldi	r24, 0x01	; 1
    11ac:	8a 8f       	std	Y+26, r24	; 0x1a
    11ae:	4d 8f       	std	Y+29, r20	; 0x1d
    11b0:	5e 8f       	std	Y+30, r21	; 0x1e
    11b2:	6f 8f       	std	Y+31, r22	; 0x1f
    11b4:	78 a3       	std	Y+32, r23	; 0x20
    11b6:	83 e0       	ldi	r24, 0x03	; 3
    11b8:	89 8f       	std	Y+25, r24	; 0x19
    11ba:	ce 01       	movw	r24, r28
    11bc:	49 96       	adiw	r24, 0x19	; 25
    11be:	0e 94 22 0b 	call	0x1644	; 0x1644 <__pack_f>
    11c2:	a0 96       	adiw	r28, 0x20	; 32
    11c4:	e2 e1       	ldi	r30, 0x12	; 18
    11c6:	0c 94 21 0d 	jmp	0x1a42	; 0x1a42 <__epilogue_restores__>

000011ca <__divsf3>:
    11ca:	a8 e1       	ldi	r26, 0x18	; 24
    11cc:	b0 e0       	ldi	r27, 0x00	; 0
    11ce:	eb ee       	ldi	r30, 0xEB	; 235
    11d0:	f8 e0       	ldi	r31, 0x08	; 8
    11d2:	0c 94 0d 0d 	jmp	0x1a1a	; 0x1a1a <__prologue_saves__+0x10>
    11d6:	69 83       	std	Y+1, r22	; 0x01
    11d8:	7a 83       	std	Y+2, r23	; 0x02
    11da:	8b 83       	std	Y+3, r24	; 0x03
    11dc:	9c 83       	std	Y+4, r25	; 0x04
    11de:	2d 83       	std	Y+5, r18	; 0x05
    11e0:	3e 83       	std	Y+6, r19	; 0x06
    11e2:	4f 83       	std	Y+7, r20	; 0x07
    11e4:	58 87       	std	Y+8, r21	; 0x08
    11e6:	b9 e0       	ldi	r27, 0x09	; 9
    11e8:	eb 2e       	mov	r14, r27
    11ea:	f1 2c       	mov	r15, r1
    11ec:	ec 0e       	add	r14, r28
    11ee:	fd 1e       	adc	r15, r29
    11f0:	ce 01       	movw	r24, r28
    11f2:	01 96       	adiw	r24, 0x01	; 1
    11f4:	b7 01       	movw	r22, r14
    11f6:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <__unpack_f>
    11fa:	8e 01       	movw	r16, r28
    11fc:	0f 5e       	subi	r16, 0xEF	; 239
    11fe:	1f 4f       	sbci	r17, 0xFF	; 255
    1200:	ce 01       	movw	r24, r28
    1202:	05 96       	adiw	r24, 0x05	; 5
    1204:	b8 01       	movw	r22, r16
    1206:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <__unpack_f>
    120a:	29 85       	ldd	r18, Y+9	; 0x09
    120c:	22 30       	cpi	r18, 0x02	; 2
    120e:	08 f4       	brcc	.+2      	; 0x1212 <__divsf3+0x48>
    1210:	7e c0       	rjmp	.+252    	; 0x130e <__divsf3+0x144>
    1212:	39 89       	ldd	r19, Y+17	; 0x11
    1214:	32 30       	cpi	r19, 0x02	; 2
    1216:	10 f4       	brcc	.+4      	; 0x121c <__divsf3+0x52>
    1218:	b8 01       	movw	r22, r16
    121a:	7c c0       	rjmp	.+248    	; 0x1314 <__divsf3+0x14a>
    121c:	8a 85       	ldd	r24, Y+10	; 0x0a
    121e:	9a 89       	ldd	r25, Y+18	; 0x12
    1220:	89 27       	eor	r24, r25
    1222:	8a 87       	std	Y+10, r24	; 0x0a
    1224:	24 30       	cpi	r18, 0x04	; 4
    1226:	11 f0       	breq	.+4      	; 0x122c <__divsf3+0x62>
    1228:	22 30       	cpi	r18, 0x02	; 2
    122a:	31 f4       	brne	.+12     	; 0x1238 <__divsf3+0x6e>
    122c:	23 17       	cp	r18, r19
    122e:	09 f0       	breq	.+2      	; 0x1232 <__divsf3+0x68>
    1230:	6e c0       	rjmp	.+220    	; 0x130e <__divsf3+0x144>
    1232:	60 e0       	ldi	r22, 0x00	; 0
    1234:	72 e0       	ldi	r23, 0x02	; 2
    1236:	6e c0       	rjmp	.+220    	; 0x1314 <__divsf3+0x14a>
    1238:	34 30       	cpi	r19, 0x04	; 4
    123a:	39 f4       	brne	.+14     	; 0x124a <__divsf3+0x80>
    123c:	1d 86       	std	Y+13, r1	; 0x0d
    123e:	1e 86       	std	Y+14, r1	; 0x0e
    1240:	1f 86       	std	Y+15, r1	; 0x0f
    1242:	18 8a       	std	Y+16, r1	; 0x10
    1244:	1c 86       	std	Y+12, r1	; 0x0c
    1246:	1b 86       	std	Y+11, r1	; 0x0b
    1248:	04 c0       	rjmp	.+8      	; 0x1252 <__divsf3+0x88>
    124a:	32 30       	cpi	r19, 0x02	; 2
    124c:	21 f4       	brne	.+8      	; 0x1256 <__divsf3+0x8c>
    124e:	84 e0       	ldi	r24, 0x04	; 4
    1250:	89 87       	std	Y+9, r24	; 0x09
    1252:	b7 01       	movw	r22, r14
    1254:	5f c0       	rjmp	.+190    	; 0x1314 <__divsf3+0x14a>
    1256:	2b 85       	ldd	r18, Y+11	; 0x0b
    1258:	3c 85       	ldd	r19, Y+12	; 0x0c
    125a:	8b 89       	ldd	r24, Y+19	; 0x13
    125c:	9c 89       	ldd	r25, Y+20	; 0x14
    125e:	28 1b       	sub	r18, r24
    1260:	39 0b       	sbc	r19, r25
    1262:	3c 87       	std	Y+12, r19	; 0x0c
    1264:	2b 87       	std	Y+11, r18	; 0x0b
    1266:	ed 84       	ldd	r14, Y+13	; 0x0d
    1268:	fe 84       	ldd	r15, Y+14	; 0x0e
    126a:	0f 85       	ldd	r16, Y+15	; 0x0f
    126c:	18 89       	ldd	r17, Y+16	; 0x10
    126e:	ad 88       	ldd	r10, Y+21	; 0x15
    1270:	be 88       	ldd	r11, Y+22	; 0x16
    1272:	cf 88       	ldd	r12, Y+23	; 0x17
    1274:	d8 8c       	ldd	r13, Y+24	; 0x18
    1276:	ea 14       	cp	r14, r10
    1278:	fb 04       	cpc	r15, r11
    127a:	0c 05       	cpc	r16, r12
    127c:	1d 05       	cpc	r17, r13
    127e:	40 f4       	brcc	.+16     	; 0x1290 <__divsf3+0xc6>
    1280:	ee 0c       	add	r14, r14
    1282:	ff 1c       	adc	r15, r15
    1284:	00 1f       	adc	r16, r16
    1286:	11 1f       	adc	r17, r17
    1288:	21 50       	subi	r18, 0x01	; 1
    128a:	30 40       	sbci	r19, 0x00	; 0
    128c:	3c 87       	std	Y+12, r19	; 0x0c
    128e:	2b 87       	std	Y+11, r18	; 0x0b
    1290:	20 e0       	ldi	r18, 0x00	; 0
    1292:	30 e0       	ldi	r19, 0x00	; 0
    1294:	40 e0       	ldi	r20, 0x00	; 0
    1296:	50 e0       	ldi	r21, 0x00	; 0
    1298:	80 e0       	ldi	r24, 0x00	; 0
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	a0 e0       	ldi	r26, 0x00	; 0
    129e:	b0 e4       	ldi	r27, 0x40	; 64
    12a0:	60 e0       	ldi	r22, 0x00	; 0
    12a2:	70 e0       	ldi	r23, 0x00	; 0
    12a4:	ea 14       	cp	r14, r10
    12a6:	fb 04       	cpc	r15, r11
    12a8:	0c 05       	cpc	r16, r12
    12aa:	1d 05       	cpc	r17, r13
    12ac:	40 f0       	brcs	.+16     	; 0x12be <__divsf3+0xf4>
    12ae:	28 2b       	or	r18, r24
    12b0:	39 2b       	or	r19, r25
    12b2:	4a 2b       	or	r20, r26
    12b4:	5b 2b       	or	r21, r27
    12b6:	ea 18       	sub	r14, r10
    12b8:	fb 08       	sbc	r15, r11
    12ba:	0c 09       	sbc	r16, r12
    12bc:	1d 09       	sbc	r17, r13
    12be:	b6 95       	lsr	r27
    12c0:	a7 95       	ror	r26
    12c2:	97 95       	ror	r25
    12c4:	87 95       	ror	r24
    12c6:	ee 0c       	add	r14, r14
    12c8:	ff 1c       	adc	r15, r15
    12ca:	00 1f       	adc	r16, r16
    12cc:	11 1f       	adc	r17, r17
    12ce:	6f 5f       	subi	r22, 0xFF	; 255
    12d0:	7f 4f       	sbci	r23, 0xFF	; 255
    12d2:	6f 31       	cpi	r22, 0x1F	; 31
    12d4:	71 05       	cpc	r23, r1
    12d6:	31 f7       	brne	.-52     	; 0x12a4 <__divsf3+0xda>
    12d8:	da 01       	movw	r26, r20
    12da:	c9 01       	movw	r24, r18
    12dc:	8f 77       	andi	r24, 0x7F	; 127
    12de:	90 70       	andi	r25, 0x00	; 0
    12e0:	a0 70       	andi	r26, 0x00	; 0
    12e2:	b0 70       	andi	r27, 0x00	; 0
    12e4:	80 34       	cpi	r24, 0x40	; 64
    12e6:	91 05       	cpc	r25, r1
    12e8:	a1 05       	cpc	r26, r1
    12ea:	b1 05       	cpc	r27, r1
    12ec:	61 f4       	brne	.+24     	; 0x1306 <__divsf3+0x13c>
    12ee:	27 fd       	sbrc	r18, 7
    12f0:	0a c0       	rjmp	.+20     	; 0x1306 <__divsf3+0x13c>
    12f2:	e1 14       	cp	r14, r1
    12f4:	f1 04       	cpc	r15, r1
    12f6:	01 05       	cpc	r16, r1
    12f8:	11 05       	cpc	r17, r1
    12fa:	29 f0       	breq	.+10     	; 0x1306 <__divsf3+0x13c>
    12fc:	20 5c       	subi	r18, 0xC0	; 192
    12fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1300:	4f 4f       	sbci	r20, 0xFF	; 255
    1302:	5f 4f       	sbci	r21, 0xFF	; 255
    1304:	20 78       	andi	r18, 0x80	; 128
    1306:	2d 87       	std	Y+13, r18	; 0x0d
    1308:	3e 87       	std	Y+14, r19	; 0x0e
    130a:	4f 87       	std	Y+15, r20	; 0x0f
    130c:	58 8b       	std	Y+16, r21	; 0x10
    130e:	be 01       	movw	r22, r28
    1310:	67 5f       	subi	r22, 0xF7	; 247
    1312:	7f 4f       	sbci	r23, 0xFF	; 255
    1314:	cb 01       	movw	r24, r22
    1316:	0e 94 22 0b 	call	0x1644	; 0x1644 <__pack_f>
    131a:	68 96       	adiw	r28, 0x18	; 24
    131c:	ea e0       	ldi	r30, 0x0A	; 10
    131e:	0c 94 29 0d 	jmp	0x1a52	; 0x1a52 <__epilogue_restores__+0x10>

00001322 <__gtsf2>:
    1322:	a8 e1       	ldi	r26, 0x18	; 24
    1324:	b0 e0       	ldi	r27, 0x00	; 0
    1326:	e7 e9       	ldi	r30, 0x97	; 151
    1328:	f9 e0       	ldi	r31, 0x09	; 9
    132a:	0c 94 11 0d 	jmp	0x1a22	; 0x1a22 <__prologue_saves__+0x18>
    132e:	69 83       	std	Y+1, r22	; 0x01
    1330:	7a 83       	std	Y+2, r23	; 0x02
    1332:	8b 83       	std	Y+3, r24	; 0x03
    1334:	9c 83       	std	Y+4, r25	; 0x04
    1336:	2d 83       	std	Y+5, r18	; 0x05
    1338:	3e 83       	std	Y+6, r19	; 0x06
    133a:	4f 83       	std	Y+7, r20	; 0x07
    133c:	58 87       	std	Y+8, r21	; 0x08
    133e:	89 e0       	ldi	r24, 0x09	; 9
    1340:	e8 2e       	mov	r14, r24
    1342:	f1 2c       	mov	r15, r1
    1344:	ec 0e       	add	r14, r28
    1346:	fd 1e       	adc	r15, r29
    1348:	ce 01       	movw	r24, r28
    134a:	01 96       	adiw	r24, 0x01	; 1
    134c:	b7 01       	movw	r22, r14
    134e:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <__unpack_f>
    1352:	8e 01       	movw	r16, r28
    1354:	0f 5e       	subi	r16, 0xEF	; 239
    1356:	1f 4f       	sbci	r17, 0xFF	; 255
    1358:	ce 01       	movw	r24, r28
    135a:	05 96       	adiw	r24, 0x05	; 5
    135c:	b8 01       	movw	r22, r16
    135e:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <__unpack_f>
    1362:	89 85       	ldd	r24, Y+9	; 0x09
    1364:	82 30       	cpi	r24, 0x02	; 2
    1366:	40 f0       	brcs	.+16     	; 0x1378 <__gtsf2+0x56>
    1368:	89 89       	ldd	r24, Y+17	; 0x11
    136a:	82 30       	cpi	r24, 0x02	; 2
    136c:	28 f0       	brcs	.+10     	; 0x1378 <__gtsf2+0x56>
    136e:	c7 01       	movw	r24, r14
    1370:	b8 01       	movw	r22, r16
    1372:	0e 94 6f 0c 	call	0x18de	; 0x18de <__fpcmp_parts_f>
    1376:	01 c0       	rjmp	.+2      	; 0x137a <__gtsf2+0x58>
    1378:	8f ef       	ldi	r24, 0xFF	; 255
    137a:	68 96       	adiw	r28, 0x18	; 24
    137c:	e6 e0       	ldi	r30, 0x06	; 6
    137e:	0c 94 2d 0d 	jmp	0x1a5a	; 0x1a5a <__epilogue_restores__+0x18>

00001382 <__gesf2>:
    1382:	a8 e1       	ldi	r26, 0x18	; 24
    1384:	b0 e0       	ldi	r27, 0x00	; 0
    1386:	e7 ec       	ldi	r30, 0xC7	; 199
    1388:	f9 e0       	ldi	r31, 0x09	; 9
    138a:	0c 94 11 0d 	jmp	0x1a22	; 0x1a22 <__prologue_saves__+0x18>
    138e:	69 83       	std	Y+1, r22	; 0x01
    1390:	7a 83       	std	Y+2, r23	; 0x02
    1392:	8b 83       	std	Y+3, r24	; 0x03
    1394:	9c 83       	std	Y+4, r25	; 0x04
    1396:	2d 83       	std	Y+5, r18	; 0x05
    1398:	3e 83       	std	Y+6, r19	; 0x06
    139a:	4f 83       	std	Y+7, r20	; 0x07
    139c:	58 87       	std	Y+8, r21	; 0x08
    139e:	89 e0       	ldi	r24, 0x09	; 9
    13a0:	e8 2e       	mov	r14, r24
    13a2:	f1 2c       	mov	r15, r1
    13a4:	ec 0e       	add	r14, r28
    13a6:	fd 1e       	adc	r15, r29
    13a8:	ce 01       	movw	r24, r28
    13aa:	01 96       	adiw	r24, 0x01	; 1
    13ac:	b7 01       	movw	r22, r14
    13ae:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <__unpack_f>
    13b2:	8e 01       	movw	r16, r28
    13b4:	0f 5e       	subi	r16, 0xEF	; 239
    13b6:	1f 4f       	sbci	r17, 0xFF	; 255
    13b8:	ce 01       	movw	r24, r28
    13ba:	05 96       	adiw	r24, 0x05	; 5
    13bc:	b8 01       	movw	r22, r16
    13be:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <__unpack_f>
    13c2:	89 85       	ldd	r24, Y+9	; 0x09
    13c4:	82 30       	cpi	r24, 0x02	; 2
    13c6:	40 f0       	brcs	.+16     	; 0x13d8 <__gesf2+0x56>
    13c8:	89 89       	ldd	r24, Y+17	; 0x11
    13ca:	82 30       	cpi	r24, 0x02	; 2
    13cc:	28 f0       	brcs	.+10     	; 0x13d8 <__gesf2+0x56>
    13ce:	c7 01       	movw	r24, r14
    13d0:	b8 01       	movw	r22, r16
    13d2:	0e 94 6f 0c 	call	0x18de	; 0x18de <__fpcmp_parts_f>
    13d6:	01 c0       	rjmp	.+2      	; 0x13da <__gesf2+0x58>
    13d8:	8f ef       	ldi	r24, 0xFF	; 255
    13da:	68 96       	adiw	r28, 0x18	; 24
    13dc:	e6 e0       	ldi	r30, 0x06	; 6
    13de:	0c 94 2d 0d 	jmp	0x1a5a	; 0x1a5a <__epilogue_restores__+0x18>

000013e2 <__ltsf2>:
    13e2:	a8 e1       	ldi	r26, 0x18	; 24
    13e4:	b0 e0       	ldi	r27, 0x00	; 0
    13e6:	e7 ef       	ldi	r30, 0xF7	; 247
    13e8:	f9 e0       	ldi	r31, 0x09	; 9
    13ea:	0c 94 11 0d 	jmp	0x1a22	; 0x1a22 <__prologue_saves__+0x18>
    13ee:	69 83       	std	Y+1, r22	; 0x01
    13f0:	7a 83       	std	Y+2, r23	; 0x02
    13f2:	8b 83       	std	Y+3, r24	; 0x03
    13f4:	9c 83       	std	Y+4, r25	; 0x04
    13f6:	2d 83       	std	Y+5, r18	; 0x05
    13f8:	3e 83       	std	Y+6, r19	; 0x06
    13fa:	4f 83       	std	Y+7, r20	; 0x07
    13fc:	58 87       	std	Y+8, r21	; 0x08
    13fe:	89 e0       	ldi	r24, 0x09	; 9
    1400:	e8 2e       	mov	r14, r24
    1402:	f1 2c       	mov	r15, r1
    1404:	ec 0e       	add	r14, r28
    1406:	fd 1e       	adc	r15, r29
    1408:	ce 01       	movw	r24, r28
    140a:	01 96       	adiw	r24, 0x01	; 1
    140c:	b7 01       	movw	r22, r14
    140e:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <__unpack_f>
    1412:	8e 01       	movw	r16, r28
    1414:	0f 5e       	subi	r16, 0xEF	; 239
    1416:	1f 4f       	sbci	r17, 0xFF	; 255
    1418:	ce 01       	movw	r24, r28
    141a:	05 96       	adiw	r24, 0x05	; 5
    141c:	b8 01       	movw	r22, r16
    141e:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <__unpack_f>
    1422:	89 85       	ldd	r24, Y+9	; 0x09
    1424:	82 30       	cpi	r24, 0x02	; 2
    1426:	40 f0       	brcs	.+16     	; 0x1438 <__ltsf2+0x56>
    1428:	89 89       	ldd	r24, Y+17	; 0x11
    142a:	82 30       	cpi	r24, 0x02	; 2
    142c:	28 f0       	brcs	.+10     	; 0x1438 <__ltsf2+0x56>
    142e:	c7 01       	movw	r24, r14
    1430:	b8 01       	movw	r22, r16
    1432:	0e 94 6f 0c 	call	0x18de	; 0x18de <__fpcmp_parts_f>
    1436:	01 c0       	rjmp	.+2      	; 0x143a <__ltsf2+0x58>
    1438:	81 e0       	ldi	r24, 0x01	; 1
    143a:	68 96       	adiw	r28, 0x18	; 24
    143c:	e6 e0       	ldi	r30, 0x06	; 6
    143e:	0c 94 2d 0d 	jmp	0x1a5a	; 0x1a5a <__epilogue_restores__+0x18>

00001442 <__floatsisf>:
    1442:	a8 e0       	ldi	r26, 0x08	; 8
    1444:	b0 e0       	ldi	r27, 0x00	; 0
    1446:	e7 e2       	ldi	r30, 0x27	; 39
    1448:	fa e0       	ldi	r31, 0x0A	; 10
    144a:	0c 94 0e 0d 	jmp	0x1a1c	; 0x1a1c <__prologue_saves__+0x12>
    144e:	9b 01       	movw	r18, r22
    1450:	ac 01       	movw	r20, r24
    1452:	83 e0       	ldi	r24, 0x03	; 3
    1454:	89 83       	std	Y+1, r24	; 0x01
    1456:	da 01       	movw	r26, r20
    1458:	c9 01       	movw	r24, r18
    145a:	88 27       	eor	r24, r24
    145c:	b7 fd       	sbrc	r27, 7
    145e:	83 95       	inc	r24
    1460:	99 27       	eor	r25, r25
    1462:	aa 27       	eor	r26, r26
    1464:	bb 27       	eor	r27, r27
    1466:	b8 2e       	mov	r11, r24
    1468:	21 15       	cp	r18, r1
    146a:	31 05       	cpc	r19, r1
    146c:	41 05       	cpc	r20, r1
    146e:	51 05       	cpc	r21, r1
    1470:	19 f4       	brne	.+6      	; 0x1478 <__floatsisf+0x36>
    1472:	82 e0       	ldi	r24, 0x02	; 2
    1474:	89 83       	std	Y+1, r24	; 0x01
    1476:	3a c0       	rjmp	.+116    	; 0x14ec <__floatsisf+0xaa>
    1478:	88 23       	and	r24, r24
    147a:	a9 f0       	breq	.+42     	; 0x14a6 <__floatsisf+0x64>
    147c:	20 30       	cpi	r18, 0x00	; 0
    147e:	80 e0       	ldi	r24, 0x00	; 0
    1480:	38 07       	cpc	r19, r24
    1482:	80 e0       	ldi	r24, 0x00	; 0
    1484:	48 07       	cpc	r20, r24
    1486:	80 e8       	ldi	r24, 0x80	; 128
    1488:	58 07       	cpc	r21, r24
    148a:	29 f4       	brne	.+10     	; 0x1496 <__floatsisf+0x54>
    148c:	60 e0       	ldi	r22, 0x00	; 0
    148e:	70 e0       	ldi	r23, 0x00	; 0
    1490:	80 e0       	ldi	r24, 0x00	; 0
    1492:	9f ec       	ldi	r25, 0xCF	; 207
    1494:	30 c0       	rjmp	.+96     	; 0x14f6 <__floatsisf+0xb4>
    1496:	ee 24       	eor	r14, r14
    1498:	ff 24       	eor	r15, r15
    149a:	87 01       	movw	r16, r14
    149c:	e2 1a       	sub	r14, r18
    149e:	f3 0a       	sbc	r15, r19
    14a0:	04 0b       	sbc	r16, r20
    14a2:	15 0b       	sbc	r17, r21
    14a4:	02 c0       	rjmp	.+4      	; 0x14aa <__floatsisf+0x68>
    14a6:	79 01       	movw	r14, r18
    14a8:	8a 01       	movw	r16, r20
    14aa:	8e e1       	ldi	r24, 0x1E	; 30
    14ac:	c8 2e       	mov	r12, r24
    14ae:	d1 2c       	mov	r13, r1
    14b0:	dc 82       	std	Y+4, r13	; 0x04
    14b2:	cb 82       	std	Y+3, r12	; 0x03
    14b4:	ed 82       	std	Y+5, r14	; 0x05
    14b6:	fe 82       	std	Y+6, r15	; 0x06
    14b8:	0f 83       	std	Y+7, r16	; 0x07
    14ba:	18 87       	std	Y+8, r17	; 0x08
    14bc:	c8 01       	movw	r24, r16
    14be:	b7 01       	movw	r22, r14
    14c0:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <__clzsi2>
    14c4:	01 97       	sbiw	r24, 0x01	; 1
    14c6:	18 16       	cp	r1, r24
    14c8:	19 06       	cpc	r1, r25
    14ca:	84 f4       	brge	.+32     	; 0x14ec <__floatsisf+0xaa>
    14cc:	08 2e       	mov	r0, r24
    14ce:	04 c0       	rjmp	.+8      	; 0x14d8 <__floatsisf+0x96>
    14d0:	ee 0c       	add	r14, r14
    14d2:	ff 1c       	adc	r15, r15
    14d4:	00 1f       	adc	r16, r16
    14d6:	11 1f       	adc	r17, r17
    14d8:	0a 94       	dec	r0
    14da:	d2 f7       	brpl	.-12     	; 0x14d0 <__floatsisf+0x8e>
    14dc:	ed 82       	std	Y+5, r14	; 0x05
    14de:	fe 82       	std	Y+6, r15	; 0x06
    14e0:	0f 83       	std	Y+7, r16	; 0x07
    14e2:	18 87       	std	Y+8, r17	; 0x08
    14e4:	c8 1a       	sub	r12, r24
    14e6:	d9 0a       	sbc	r13, r25
    14e8:	dc 82       	std	Y+4, r13	; 0x04
    14ea:	cb 82       	std	Y+3, r12	; 0x03
    14ec:	ba 82       	std	Y+2, r11	; 0x02
    14ee:	ce 01       	movw	r24, r28
    14f0:	01 96       	adiw	r24, 0x01	; 1
    14f2:	0e 94 22 0b 	call	0x1644	; 0x1644 <__pack_f>
    14f6:	28 96       	adiw	r28, 0x08	; 8
    14f8:	e9 e0       	ldi	r30, 0x09	; 9
    14fa:	0c 94 2a 0d 	jmp	0x1a54	; 0x1a54 <__epilogue_restores__+0x12>

000014fe <__fixsfsi>:
    14fe:	ac e0       	ldi	r26, 0x0C	; 12
    1500:	b0 e0       	ldi	r27, 0x00	; 0
    1502:	e5 e8       	ldi	r30, 0x85	; 133
    1504:	fa e0       	ldi	r31, 0x0A	; 10
    1506:	0c 94 15 0d 	jmp	0x1a2a	; 0x1a2a <__prologue_saves__+0x20>
    150a:	69 83       	std	Y+1, r22	; 0x01
    150c:	7a 83       	std	Y+2, r23	; 0x02
    150e:	8b 83       	std	Y+3, r24	; 0x03
    1510:	9c 83       	std	Y+4, r25	; 0x04
    1512:	ce 01       	movw	r24, r28
    1514:	01 96       	adiw	r24, 0x01	; 1
    1516:	be 01       	movw	r22, r28
    1518:	6b 5f       	subi	r22, 0xFB	; 251
    151a:	7f 4f       	sbci	r23, 0xFF	; 255
    151c:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <__unpack_f>
    1520:	8d 81       	ldd	r24, Y+5	; 0x05
    1522:	82 30       	cpi	r24, 0x02	; 2
    1524:	61 f1       	breq	.+88     	; 0x157e <__fixsfsi+0x80>
    1526:	82 30       	cpi	r24, 0x02	; 2
    1528:	50 f1       	brcs	.+84     	; 0x157e <__fixsfsi+0x80>
    152a:	84 30       	cpi	r24, 0x04	; 4
    152c:	21 f4       	brne	.+8      	; 0x1536 <__fixsfsi+0x38>
    152e:	8e 81       	ldd	r24, Y+6	; 0x06
    1530:	88 23       	and	r24, r24
    1532:	51 f1       	breq	.+84     	; 0x1588 <__fixsfsi+0x8a>
    1534:	2e c0       	rjmp	.+92     	; 0x1592 <__fixsfsi+0x94>
    1536:	2f 81       	ldd	r18, Y+7	; 0x07
    1538:	38 85       	ldd	r19, Y+8	; 0x08
    153a:	37 fd       	sbrc	r19, 7
    153c:	20 c0       	rjmp	.+64     	; 0x157e <__fixsfsi+0x80>
    153e:	6e 81       	ldd	r22, Y+6	; 0x06
    1540:	2f 31       	cpi	r18, 0x1F	; 31
    1542:	31 05       	cpc	r19, r1
    1544:	1c f0       	brlt	.+6      	; 0x154c <__fixsfsi+0x4e>
    1546:	66 23       	and	r22, r22
    1548:	f9 f0       	breq	.+62     	; 0x1588 <__fixsfsi+0x8a>
    154a:	23 c0       	rjmp	.+70     	; 0x1592 <__fixsfsi+0x94>
    154c:	8e e1       	ldi	r24, 0x1E	; 30
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	82 1b       	sub	r24, r18
    1552:	93 0b       	sbc	r25, r19
    1554:	29 85       	ldd	r18, Y+9	; 0x09
    1556:	3a 85       	ldd	r19, Y+10	; 0x0a
    1558:	4b 85       	ldd	r20, Y+11	; 0x0b
    155a:	5c 85       	ldd	r21, Y+12	; 0x0c
    155c:	04 c0       	rjmp	.+8      	; 0x1566 <__fixsfsi+0x68>
    155e:	56 95       	lsr	r21
    1560:	47 95       	ror	r20
    1562:	37 95       	ror	r19
    1564:	27 95       	ror	r18
    1566:	8a 95       	dec	r24
    1568:	d2 f7       	brpl	.-12     	; 0x155e <__fixsfsi+0x60>
    156a:	66 23       	and	r22, r22
    156c:	b1 f0       	breq	.+44     	; 0x159a <__fixsfsi+0x9c>
    156e:	50 95       	com	r21
    1570:	40 95       	com	r20
    1572:	30 95       	com	r19
    1574:	21 95       	neg	r18
    1576:	3f 4f       	sbci	r19, 0xFF	; 255
    1578:	4f 4f       	sbci	r20, 0xFF	; 255
    157a:	5f 4f       	sbci	r21, 0xFF	; 255
    157c:	0e c0       	rjmp	.+28     	; 0x159a <__fixsfsi+0x9c>
    157e:	20 e0       	ldi	r18, 0x00	; 0
    1580:	30 e0       	ldi	r19, 0x00	; 0
    1582:	40 e0       	ldi	r20, 0x00	; 0
    1584:	50 e0       	ldi	r21, 0x00	; 0
    1586:	09 c0       	rjmp	.+18     	; 0x159a <__fixsfsi+0x9c>
    1588:	2f ef       	ldi	r18, 0xFF	; 255
    158a:	3f ef       	ldi	r19, 0xFF	; 255
    158c:	4f ef       	ldi	r20, 0xFF	; 255
    158e:	5f e7       	ldi	r21, 0x7F	; 127
    1590:	04 c0       	rjmp	.+8      	; 0x159a <__fixsfsi+0x9c>
    1592:	20 e0       	ldi	r18, 0x00	; 0
    1594:	30 e0       	ldi	r19, 0x00	; 0
    1596:	40 e0       	ldi	r20, 0x00	; 0
    1598:	50 e8       	ldi	r21, 0x80	; 128
    159a:	b9 01       	movw	r22, r18
    159c:	ca 01       	movw	r24, r20
    159e:	2c 96       	adiw	r28, 0x0c	; 12
    15a0:	e2 e0       	ldi	r30, 0x02	; 2
    15a2:	0c 94 31 0d 	jmp	0x1a62	; 0x1a62 <__epilogue_restores__+0x20>

000015a6 <__clzsi2>:
    15a6:	ef 92       	push	r14
    15a8:	ff 92       	push	r15
    15aa:	0f 93       	push	r16
    15ac:	1f 93       	push	r17
    15ae:	7b 01       	movw	r14, r22
    15b0:	8c 01       	movw	r16, r24
    15b2:	80 e0       	ldi	r24, 0x00	; 0
    15b4:	e8 16       	cp	r14, r24
    15b6:	80 e0       	ldi	r24, 0x00	; 0
    15b8:	f8 06       	cpc	r15, r24
    15ba:	81 e0       	ldi	r24, 0x01	; 1
    15bc:	08 07       	cpc	r16, r24
    15be:	80 e0       	ldi	r24, 0x00	; 0
    15c0:	18 07       	cpc	r17, r24
    15c2:	88 f4       	brcc	.+34     	; 0x15e6 <__clzsi2+0x40>
    15c4:	8f ef       	ldi	r24, 0xFF	; 255
    15c6:	e8 16       	cp	r14, r24
    15c8:	f1 04       	cpc	r15, r1
    15ca:	01 05       	cpc	r16, r1
    15cc:	11 05       	cpc	r17, r1
    15ce:	31 f0       	breq	.+12     	; 0x15dc <__clzsi2+0x36>
    15d0:	28 f0       	brcs	.+10     	; 0x15dc <__clzsi2+0x36>
    15d2:	88 e0       	ldi	r24, 0x08	; 8
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	a0 e0       	ldi	r26, 0x00	; 0
    15d8:	b0 e0       	ldi	r27, 0x00	; 0
    15da:	17 c0       	rjmp	.+46     	; 0x160a <__clzsi2+0x64>
    15dc:	80 e0       	ldi	r24, 0x00	; 0
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	a0 e0       	ldi	r26, 0x00	; 0
    15e2:	b0 e0       	ldi	r27, 0x00	; 0
    15e4:	12 c0       	rjmp	.+36     	; 0x160a <__clzsi2+0x64>
    15e6:	80 e0       	ldi	r24, 0x00	; 0
    15e8:	e8 16       	cp	r14, r24
    15ea:	80 e0       	ldi	r24, 0x00	; 0
    15ec:	f8 06       	cpc	r15, r24
    15ee:	80 e0       	ldi	r24, 0x00	; 0
    15f0:	08 07       	cpc	r16, r24
    15f2:	81 e0       	ldi	r24, 0x01	; 1
    15f4:	18 07       	cpc	r17, r24
    15f6:	28 f0       	brcs	.+10     	; 0x1602 <__clzsi2+0x5c>
    15f8:	88 e1       	ldi	r24, 0x18	; 24
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	a0 e0       	ldi	r26, 0x00	; 0
    15fe:	b0 e0       	ldi	r27, 0x00	; 0
    1600:	04 c0       	rjmp	.+8      	; 0x160a <__clzsi2+0x64>
    1602:	80 e1       	ldi	r24, 0x10	; 16
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	a0 e0       	ldi	r26, 0x00	; 0
    1608:	b0 e0       	ldi	r27, 0x00	; 0
    160a:	20 e2       	ldi	r18, 0x20	; 32
    160c:	30 e0       	ldi	r19, 0x00	; 0
    160e:	40 e0       	ldi	r20, 0x00	; 0
    1610:	50 e0       	ldi	r21, 0x00	; 0
    1612:	28 1b       	sub	r18, r24
    1614:	39 0b       	sbc	r19, r25
    1616:	4a 0b       	sbc	r20, r26
    1618:	5b 0b       	sbc	r21, r27
    161a:	04 c0       	rjmp	.+8      	; 0x1624 <__clzsi2+0x7e>
    161c:	16 95       	lsr	r17
    161e:	07 95       	ror	r16
    1620:	f7 94       	ror	r15
    1622:	e7 94       	ror	r14
    1624:	8a 95       	dec	r24
    1626:	d2 f7       	brpl	.-12     	; 0x161c <__clzsi2+0x76>
    1628:	f7 01       	movw	r30, r14
    162a:	e8 5f       	subi	r30, 0xF8	; 248
    162c:	fd 4f       	sbci	r31, 0xFD	; 253
    162e:	80 81       	ld	r24, Z
    1630:	28 1b       	sub	r18, r24
    1632:	31 09       	sbc	r19, r1
    1634:	41 09       	sbc	r20, r1
    1636:	51 09       	sbc	r21, r1
    1638:	c9 01       	movw	r24, r18
    163a:	1f 91       	pop	r17
    163c:	0f 91       	pop	r16
    163e:	ff 90       	pop	r15
    1640:	ef 90       	pop	r14
    1642:	08 95       	ret

00001644 <__pack_f>:
    1644:	df 92       	push	r13
    1646:	ef 92       	push	r14
    1648:	ff 92       	push	r15
    164a:	0f 93       	push	r16
    164c:	1f 93       	push	r17
    164e:	fc 01       	movw	r30, r24
    1650:	e4 80       	ldd	r14, Z+4	; 0x04
    1652:	f5 80       	ldd	r15, Z+5	; 0x05
    1654:	06 81       	ldd	r16, Z+6	; 0x06
    1656:	17 81       	ldd	r17, Z+7	; 0x07
    1658:	d1 80       	ldd	r13, Z+1	; 0x01
    165a:	80 81       	ld	r24, Z
    165c:	82 30       	cpi	r24, 0x02	; 2
    165e:	48 f4       	brcc	.+18     	; 0x1672 <__pack_f+0x2e>
    1660:	80 e0       	ldi	r24, 0x00	; 0
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	a0 e1       	ldi	r26, 0x10	; 16
    1666:	b0 e0       	ldi	r27, 0x00	; 0
    1668:	e8 2a       	or	r14, r24
    166a:	f9 2a       	or	r15, r25
    166c:	0a 2b       	or	r16, r26
    166e:	1b 2b       	or	r17, r27
    1670:	a5 c0       	rjmp	.+330    	; 0x17bc <__pack_f+0x178>
    1672:	84 30       	cpi	r24, 0x04	; 4
    1674:	09 f4       	brne	.+2      	; 0x1678 <__pack_f+0x34>
    1676:	9f c0       	rjmp	.+318    	; 0x17b6 <__pack_f+0x172>
    1678:	82 30       	cpi	r24, 0x02	; 2
    167a:	21 f4       	brne	.+8      	; 0x1684 <__pack_f+0x40>
    167c:	ee 24       	eor	r14, r14
    167e:	ff 24       	eor	r15, r15
    1680:	87 01       	movw	r16, r14
    1682:	05 c0       	rjmp	.+10     	; 0x168e <__pack_f+0x4a>
    1684:	e1 14       	cp	r14, r1
    1686:	f1 04       	cpc	r15, r1
    1688:	01 05       	cpc	r16, r1
    168a:	11 05       	cpc	r17, r1
    168c:	19 f4       	brne	.+6      	; 0x1694 <__pack_f+0x50>
    168e:	e0 e0       	ldi	r30, 0x00	; 0
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	96 c0       	rjmp	.+300    	; 0x17c0 <__pack_f+0x17c>
    1694:	62 81       	ldd	r22, Z+2	; 0x02
    1696:	73 81       	ldd	r23, Z+3	; 0x03
    1698:	9f ef       	ldi	r25, 0xFF	; 255
    169a:	62 38       	cpi	r22, 0x82	; 130
    169c:	79 07       	cpc	r23, r25
    169e:	0c f0       	brlt	.+2      	; 0x16a2 <__pack_f+0x5e>
    16a0:	5b c0       	rjmp	.+182    	; 0x1758 <__pack_f+0x114>
    16a2:	22 e8       	ldi	r18, 0x82	; 130
    16a4:	3f ef       	ldi	r19, 0xFF	; 255
    16a6:	26 1b       	sub	r18, r22
    16a8:	37 0b       	sbc	r19, r23
    16aa:	2a 31       	cpi	r18, 0x1A	; 26
    16ac:	31 05       	cpc	r19, r1
    16ae:	2c f0       	brlt	.+10     	; 0x16ba <__pack_f+0x76>
    16b0:	20 e0       	ldi	r18, 0x00	; 0
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	40 e0       	ldi	r20, 0x00	; 0
    16b6:	50 e0       	ldi	r21, 0x00	; 0
    16b8:	2a c0       	rjmp	.+84     	; 0x170e <__pack_f+0xca>
    16ba:	b8 01       	movw	r22, r16
    16bc:	a7 01       	movw	r20, r14
    16be:	02 2e       	mov	r0, r18
    16c0:	04 c0       	rjmp	.+8      	; 0x16ca <__pack_f+0x86>
    16c2:	76 95       	lsr	r23
    16c4:	67 95       	ror	r22
    16c6:	57 95       	ror	r21
    16c8:	47 95       	ror	r20
    16ca:	0a 94       	dec	r0
    16cc:	d2 f7       	brpl	.-12     	; 0x16c2 <__pack_f+0x7e>
    16ce:	81 e0       	ldi	r24, 0x01	; 1
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	a0 e0       	ldi	r26, 0x00	; 0
    16d4:	b0 e0       	ldi	r27, 0x00	; 0
    16d6:	04 c0       	rjmp	.+8      	; 0x16e0 <__pack_f+0x9c>
    16d8:	88 0f       	add	r24, r24
    16da:	99 1f       	adc	r25, r25
    16dc:	aa 1f       	adc	r26, r26
    16de:	bb 1f       	adc	r27, r27
    16e0:	2a 95       	dec	r18
    16e2:	d2 f7       	brpl	.-12     	; 0x16d8 <__pack_f+0x94>
    16e4:	01 97       	sbiw	r24, 0x01	; 1
    16e6:	a1 09       	sbc	r26, r1
    16e8:	b1 09       	sbc	r27, r1
    16ea:	8e 21       	and	r24, r14
    16ec:	9f 21       	and	r25, r15
    16ee:	a0 23       	and	r26, r16
    16f0:	b1 23       	and	r27, r17
    16f2:	00 97       	sbiw	r24, 0x00	; 0
    16f4:	a1 05       	cpc	r26, r1
    16f6:	b1 05       	cpc	r27, r1
    16f8:	21 f0       	breq	.+8      	; 0x1702 <__pack_f+0xbe>
    16fa:	81 e0       	ldi	r24, 0x01	; 1
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	a0 e0       	ldi	r26, 0x00	; 0
    1700:	b0 e0       	ldi	r27, 0x00	; 0
    1702:	9a 01       	movw	r18, r20
    1704:	ab 01       	movw	r20, r22
    1706:	28 2b       	or	r18, r24
    1708:	39 2b       	or	r19, r25
    170a:	4a 2b       	or	r20, r26
    170c:	5b 2b       	or	r21, r27
    170e:	da 01       	movw	r26, r20
    1710:	c9 01       	movw	r24, r18
    1712:	8f 77       	andi	r24, 0x7F	; 127
    1714:	90 70       	andi	r25, 0x00	; 0
    1716:	a0 70       	andi	r26, 0x00	; 0
    1718:	b0 70       	andi	r27, 0x00	; 0
    171a:	80 34       	cpi	r24, 0x40	; 64
    171c:	91 05       	cpc	r25, r1
    171e:	a1 05       	cpc	r26, r1
    1720:	b1 05       	cpc	r27, r1
    1722:	39 f4       	brne	.+14     	; 0x1732 <__pack_f+0xee>
    1724:	27 ff       	sbrs	r18, 7
    1726:	09 c0       	rjmp	.+18     	; 0x173a <__pack_f+0xf6>
    1728:	20 5c       	subi	r18, 0xC0	; 192
    172a:	3f 4f       	sbci	r19, 0xFF	; 255
    172c:	4f 4f       	sbci	r20, 0xFF	; 255
    172e:	5f 4f       	sbci	r21, 0xFF	; 255
    1730:	04 c0       	rjmp	.+8      	; 0x173a <__pack_f+0xf6>
    1732:	21 5c       	subi	r18, 0xC1	; 193
    1734:	3f 4f       	sbci	r19, 0xFF	; 255
    1736:	4f 4f       	sbci	r20, 0xFF	; 255
    1738:	5f 4f       	sbci	r21, 0xFF	; 255
    173a:	e0 e0       	ldi	r30, 0x00	; 0
    173c:	f0 e0       	ldi	r31, 0x00	; 0
    173e:	20 30       	cpi	r18, 0x00	; 0
    1740:	a0 e0       	ldi	r26, 0x00	; 0
    1742:	3a 07       	cpc	r19, r26
    1744:	a0 e0       	ldi	r26, 0x00	; 0
    1746:	4a 07       	cpc	r20, r26
    1748:	a0 e4       	ldi	r26, 0x40	; 64
    174a:	5a 07       	cpc	r21, r26
    174c:	10 f0       	brcs	.+4      	; 0x1752 <__pack_f+0x10e>
    174e:	e1 e0       	ldi	r30, 0x01	; 1
    1750:	f0 e0       	ldi	r31, 0x00	; 0
    1752:	79 01       	movw	r14, r18
    1754:	8a 01       	movw	r16, r20
    1756:	27 c0       	rjmp	.+78     	; 0x17a6 <__pack_f+0x162>
    1758:	60 38       	cpi	r22, 0x80	; 128
    175a:	71 05       	cpc	r23, r1
    175c:	64 f5       	brge	.+88     	; 0x17b6 <__pack_f+0x172>
    175e:	fb 01       	movw	r30, r22
    1760:	e1 58       	subi	r30, 0x81	; 129
    1762:	ff 4f       	sbci	r31, 0xFF	; 255
    1764:	d8 01       	movw	r26, r16
    1766:	c7 01       	movw	r24, r14
    1768:	8f 77       	andi	r24, 0x7F	; 127
    176a:	90 70       	andi	r25, 0x00	; 0
    176c:	a0 70       	andi	r26, 0x00	; 0
    176e:	b0 70       	andi	r27, 0x00	; 0
    1770:	80 34       	cpi	r24, 0x40	; 64
    1772:	91 05       	cpc	r25, r1
    1774:	a1 05       	cpc	r26, r1
    1776:	b1 05       	cpc	r27, r1
    1778:	39 f4       	brne	.+14     	; 0x1788 <__pack_f+0x144>
    177a:	e7 fe       	sbrs	r14, 7
    177c:	0d c0       	rjmp	.+26     	; 0x1798 <__pack_f+0x154>
    177e:	80 e4       	ldi	r24, 0x40	; 64
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	a0 e0       	ldi	r26, 0x00	; 0
    1784:	b0 e0       	ldi	r27, 0x00	; 0
    1786:	04 c0       	rjmp	.+8      	; 0x1790 <__pack_f+0x14c>
    1788:	8f e3       	ldi	r24, 0x3F	; 63
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	a0 e0       	ldi	r26, 0x00	; 0
    178e:	b0 e0       	ldi	r27, 0x00	; 0
    1790:	e8 0e       	add	r14, r24
    1792:	f9 1e       	adc	r15, r25
    1794:	0a 1f       	adc	r16, r26
    1796:	1b 1f       	adc	r17, r27
    1798:	17 ff       	sbrs	r17, 7
    179a:	05 c0       	rjmp	.+10     	; 0x17a6 <__pack_f+0x162>
    179c:	16 95       	lsr	r17
    179e:	07 95       	ror	r16
    17a0:	f7 94       	ror	r15
    17a2:	e7 94       	ror	r14
    17a4:	31 96       	adiw	r30, 0x01	; 1
    17a6:	87 e0       	ldi	r24, 0x07	; 7
    17a8:	16 95       	lsr	r17
    17aa:	07 95       	ror	r16
    17ac:	f7 94       	ror	r15
    17ae:	e7 94       	ror	r14
    17b0:	8a 95       	dec	r24
    17b2:	d1 f7       	brne	.-12     	; 0x17a8 <__pack_f+0x164>
    17b4:	05 c0       	rjmp	.+10     	; 0x17c0 <__pack_f+0x17c>
    17b6:	ee 24       	eor	r14, r14
    17b8:	ff 24       	eor	r15, r15
    17ba:	87 01       	movw	r16, r14
    17bc:	ef ef       	ldi	r30, 0xFF	; 255
    17be:	f0 e0       	ldi	r31, 0x00	; 0
    17c0:	6e 2f       	mov	r22, r30
    17c2:	67 95       	ror	r22
    17c4:	66 27       	eor	r22, r22
    17c6:	67 95       	ror	r22
    17c8:	90 2f       	mov	r25, r16
    17ca:	9f 77       	andi	r25, 0x7F	; 127
    17cc:	d7 94       	ror	r13
    17ce:	dd 24       	eor	r13, r13
    17d0:	d7 94       	ror	r13
    17d2:	8e 2f       	mov	r24, r30
    17d4:	86 95       	lsr	r24
    17d6:	49 2f       	mov	r20, r25
    17d8:	46 2b       	or	r20, r22
    17da:	58 2f       	mov	r21, r24
    17dc:	5d 29       	or	r21, r13
    17de:	b7 01       	movw	r22, r14
    17e0:	ca 01       	movw	r24, r20
    17e2:	1f 91       	pop	r17
    17e4:	0f 91       	pop	r16
    17e6:	ff 90       	pop	r15
    17e8:	ef 90       	pop	r14
    17ea:	df 90       	pop	r13
    17ec:	08 95       	ret

000017ee <__unpack_f>:
    17ee:	fc 01       	movw	r30, r24
    17f0:	db 01       	movw	r26, r22
    17f2:	40 81       	ld	r20, Z
    17f4:	51 81       	ldd	r21, Z+1	; 0x01
    17f6:	22 81       	ldd	r18, Z+2	; 0x02
    17f8:	62 2f       	mov	r22, r18
    17fa:	6f 77       	andi	r22, 0x7F	; 127
    17fc:	70 e0       	ldi	r23, 0x00	; 0
    17fe:	22 1f       	adc	r18, r18
    1800:	22 27       	eor	r18, r18
    1802:	22 1f       	adc	r18, r18
    1804:	93 81       	ldd	r25, Z+3	; 0x03
    1806:	89 2f       	mov	r24, r25
    1808:	88 0f       	add	r24, r24
    180a:	82 2b       	or	r24, r18
    180c:	28 2f       	mov	r18, r24
    180e:	30 e0       	ldi	r19, 0x00	; 0
    1810:	99 1f       	adc	r25, r25
    1812:	99 27       	eor	r25, r25
    1814:	99 1f       	adc	r25, r25
    1816:	11 96       	adiw	r26, 0x01	; 1
    1818:	9c 93       	st	X, r25
    181a:	11 97       	sbiw	r26, 0x01	; 1
    181c:	21 15       	cp	r18, r1
    181e:	31 05       	cpc	r19, r1
    1820:	a9 f5       	brne	.+106    	; 0x188c <__unpack_f+0x9e>
    1822:	41 15       	cp	r20, r1
    1824:	51 05       	cpc	r21, r1
    1826:	61 05       	cpc	r22, r1
    1828:	71 05       	cpc	r23, r1
    182a:	11 f4       	brne	.+4      	; 0x1830 <__unpack_f+0x42>
    182c:	82 e0       	ldi	r24, 0x02	; 2
    182e:	37 c0       	rjmp	.+110    	; 0x189e <__unpack_f+0xb0>
    1830:	82 e8       	ldi	r24, 0x82	; 130
    1832:	9f ef       	ldi	r25, 0xFF	; 255
    1834:	13 96       	adiw	r26, 0x03	; 3
    1836:	9c 93       	st	X, r25
    1838:	8e 93       	st	-X, r24
    183a:	12 97       	sbiw	r26, 0x02	; 2
    183c:	9a 01       	movw	r18, r20
    183e:	ab 01       	movw	r20, r22
    1840:	67 e0       	ldi	r22, 0x07	; 7
    1842:	22 0f       	add	r18, r18
    1844:	33 1f       	adc	r19, r19
    1846:	44 1f       	adc	r20, r20
    1848:	55 1f       	adc	r21, r21
    184a:	6a 95       	dec	r22
    184c:	d1 f7       	brne	.-12     	; 0x1842 <__unpack_f+0x54>
    184e:	83 e0       	ldi	r24, 0x03	; 3
    1850:	8c 93       	st	X, r24
    1852:	0d c0       	rjmp	.+26     	; 0x186e <__unpack_f+0x80>
    1854:	22 0f       	add	r18, r18
    1856:	33 1f       	adc	r19, r19
    1858:	44 1f       	adc	r20, r20
    185a:	55 1f       	adc	r21, r21
    185c:	12 96       	adiw	r26, 0x02	; 2
    185e:	8d 91       	ld	r24, X+
    1860:	9c 91       	ld	r25, X
    1862:	13 97       	sbiw	r26, 0x03	; 3
    1864:	01 97       	sbiw	r24, 0x01	; 1
    1866:	13 96       	adiw	r26, 0x03	; 3
    1868:	9c 93       	st	X, r25
    186a:	8e 93       	st	-X, r24
    186c:	12 97       	sbiw	r26, 0x02	; 2
    186e:	20 30       	cpi	r18, 0x00	; 0
    1870:	80 e0       	ldi	r24, 0x00	; 0
    1872:	38 07       	cpc	r19, r24
    1874:	80 e0       	ldi	r24, 0x00	; 0
    1876:	48 07       	cpc	r20, r24
    1878:	80 e4       	ldi	r24, 0x40	; 64
    187a:	58 07       	cpc	r21, r24
    187c:	58 f3       	brcs	.-42     	; 0x1854 <__unpack_f+0x66>
    187e:	14 96       	adiw	r26, 0x04	; 4
    1880:	2d 93       	st	X+, r18
    1882:	3d 93       	st	X+, r19
    1884:	4d 93       	st	X+, r20
    1886:	5c 93       	st	X, r21
    1888:	17 97       	sbiw	r26, 0x07	; 7
    188a:	08 95       	ret
    188c:	2f 3f       	cpi	r18, 0xFF	; 255
    188e:	31 05       	cpc	r19, r1
    1890:	79 f4       	brne	.+30     	; 0x18b0 <__unpack_f+0xc2>
    1892:	41 15       	cp	r20, r1
    1894:	51 05       	cpc	r21, r1
    1896:	61 05       	cpc	r22, r1
    1898:	71 05       	cpc	r23, r1
    189a:	19 f4       	brne	.+6      	; 0x18a2 <__unpack_f+0xb4>
    189c:	84 e0       	ldi	r24, 0x04	; 4
    189e:	8c 93       	st	X, r24
    18a0:	08 95       	ret
    18a2:	64 ff       	sbrs	r22, 4
    18a4:	03 c0       	rjmp	.+6      	; 0x18ac <__unpack_f+0xbe>
    18a6:	81 e0       	ldi	r24, 0x01	; 1
    18a8:	8c 93       	st	X, r24
    18aa:	12 c0       	rjmp	.+36     	; 0x18d0 <__unpack_f+0xe2>
    18ac:	1c 92       	st	X, r1
    18ae:	10 c0       	rjmp	.+32     	; 0x18d0 <__unpack_f+0xe2>
    18b0:	2f 57       	subi	r18, 0x7F	; 127
    18b2:	30 40       	sbci	r19, 0x00	; 0
    18b4:	13 96       	adiw	r26, 0x03	; 3
    18b6:	3c 93       	st	X, r19
    18b8:	2e 93       	st	-X, r18
    18ba:	12 97       	sbiw	r26, 0x02	; 2
    18bc:	83 e0       	ldi	r24, 0x03	; 3
    18be:	8c 93       	st	X, r24
    18c0:	87 e0       	ldi	r24, 0x07	; 7
    18c2:	44 0f       	add	r20, r20
    18c4:	55 1f       	adc	r21, r21
    18c6:	66 1f       	adc	r22, r22
    18c8:	77 1f       	adc	r23, r23
    18ca:	8a 95       	dec	r24
    18cc:	d1 f7       	brne	.-12     	; 0x18c2 <__unpack_f+0xd4>
    18ce:	70 64       	ori	r23, 0x40	; 64
    18d0:	14 96       	adiw	r26, 0x04	; 4
    18d2:	4d 93       	st	X+, r20
    18d4:	5d 93       	st	X+, r21
    18d6:	6d 93       	st	X+, r22
    18d8:	7c 93       	st	X, r23
    18da:	17 97       	sbiw	r26, 0x07	; 7
    18dc:	08 95       	ret

000018de <__fpcmp_parts_f>:
    18de:	1f 93       	push	r17
    18e0:	dc 01       	movw	r26, r24
    18e2:	fb 01       	movw	r30, r22
    18e4:	9c 91       	ld	r25, X
    18e6:	92 30       	cpi	r25, 0x02	; 2
    18e8:	08 f4       	brcc	.+2      	; 0x18ec <__fpcmp_parts_f+0xe>
    18ea:	47 c0       	rjmp	.+142    	; 0x197a <__fpcmp_parts_f+0x9c>
    18ec:	80 81       	ld	r24, Z
    18ee:	82 30       	cpi	r24, 0x02	; 2
    18f0:	08 f4       	brcc	.+2      	; 0x18f4 <__fpcmp_parts_f+0x16>
    18f2:	43 c0       	rjmp	.+134    	; 0x197a <__fpcmp_parts_f+0x9c>
    18f4:	94 30       	cpi	r25, 0x04	; 4
    18f6:	51 f4       	brne	.+20     	; 0x190c <__fpcmp_parts_f+0x2e>
    18f8:	11 96       	adiw	r26, 0x01	; 1
    18fa:	1c 91       	ld	r17, X
    18fc:	84 30       	cpi	r24, 0x04	; 4
    18fe:	99 f5       	brne	.+102    	; 0x1966 <__fpcmp_parts_f+0x88>
    1900:	81 81       	ldd	r24, Z+1	; 0x01
    1902:	68 2f       	mov	r22, r24
    1904:	70 e0       	ldi	r23, 0x00	; 0
    1906:	61 1b       	sub	r22, r17
    1908:	71 09       	sbc	r23, r1
    190a:	3f c0       	rjmp	.+126    	; 0x198a <__fpcmp_parts_f+0xac>
    190c:	84 30       	cpi	r24, 0x04	; 4
    190e:	21 f0       	breq	.+8      	; 0x1918 <__fpcmp_parts_f+0x3a>
    1910:	92 30       	cpi	r25, 0x02	; 2
    1912:	31 f4       	brne	.+12     	; 0x1920 <__fpcmp_parts_f+0x42>
    1914:	82 30       	cpi	r24, 0x02	; 2
    1916:	b9 f1       	breq	.+110    	; 0x1986 <__fpcmp_parts_f+0xa8>
    1918:	81 81       	ldd	r24, Z+1	; 0x01
    191a:	88 23       	and	r24, r24
    191c:	89 f1       	breq	.+98     	; 0x1980 <__fpcmp_parts_f+0xa2>
    191e:	2d c0       	rjmp	.+90     	; 0x197a <__fpcmp_parts_f+0x9c>
    1920:	11 96       	adiw	r26, 0x01	; 1
    1922:	1c 91       	ld	r17, X
    1924:	11 97       	sbiw	r26, 0x01	; 1
    1926:	82 30       	cpi	r24, 0x02	; 2
    1928:	f1 f0       	breq	.+60     	; 0x1966 <__fpcmp_parts_f+0x88>
    192a:	81 81       	ldd	r24, Z+1	; 0x01
    192c:	18 17       	cp	r17, r24
    192e:	d9 f4       	brne	.+54     	; 0x1966 <__fpcmp_parts_f+0x88>
    1930:	12 96       	adiw	r26, 0x02	; 2
    1932:	2d 91       	ld	r18, X+
    1934:	3c 91       	ld	r19, X
    1936:	13 97       	sbiw	r26, 0x03	; 3
    1938:	82 81       	ldd	r24, Z+2	; 0x02
    193a:	93 81       	ldd	r25, Z+3	; 0x03
    193c:	82 17       	cp	r24, r18
    193e:	93 07       	cpc	r25, r19
    1940:	94 f0       	brlt	.+36     	; 0x1966 <__fpcmp_parts_f+0x88>
    1942:	28 17       	cp	r18, r24
    1944:	39 07       	cpc	r19, r25
    1946:	bc f0       	brlt	.+46     	; 0x1976 <__fpcmp_parts_f+0x98>
    1948:	14 96       	adiw	r26, 0x04	; 4
    194a:	8d 91       	ld	r24, X+
    194c:	9d 91       	ld	r25, X+
    194e:	0d 90       	ld	r0, X+
    1950:	bc 91       	ld	r27, X
    1952:	a0 2d       	mov	r26, r0
    1954:	24 81       	ldd	r18, Z+4	; 0x04
    1956:	35 81       	ldd	r19, Z+5	; 0x05
    1958:	46 81       	ldd	r20, Z+6	; 0x06
    195a:	57 81       	ldd	r21, Z+7	; 0x07
    195c:	28 17       	cp	r18, r24
    195e:	39 07       	cpc	r19, r25
    1960:	4a 07       	cpc	r20, r26
    1962:	5b 07       	cpc	r21, r27
    1964:	18 f4       	brcc	.+6      	; 0x196c <__fpcmp_parts_f+0x8e>
    1966:	11 23       	and	r17, r17
    1968:	41 f0       	breq	.+16     	; 0x197a <__fpcmp_parts_f+0x9c>
    196a:	0a c0       	rjmp	.+20     	; 0x1980 <__fpcmp_parts_f+0xa2>
    196c:	82 17       	cp	r24, r18
    196e:	93 07       	cpc	r25, r19
    1970:	a4 07       	cpc	r26, r20
    1972:	b5 07       	cpc	r27, r21
    1974:	40 f4       	brcc	.+16     	; 0x1986 <__fpcmp_parts_f+0xa8>
    1976:	11 23       	and	r17, r17
    1978:	19 f0       	breq	.+6      	; 0x1980 <__fpcmp_parts_f+0xa2>
    197a:	61 e0       	ldi	r22, 0x01	; 1
    197c:	70 e0       	ldi	r23, 0x00	; 0
    197e:	05 c0       	rjmp	.+10     	; 0x198a <__fpcmp_parts_f+0xac>
    1980:	6f ef       	ldi	r22, 0xFF	; 255
    1982:	7f ef       	ldi	r23, 0xFF	; 255
    1984:	02 c0       	rjmp	.+4      	; 0x198a <__fpcmp_parts_f+0xac>
    1986:	60 e0       	ldi	r22, 0x00	; 0
    1988:	70 e0       	ldi	r23, 0x00	; 0
    198a:	cb 01       	movw	r24, r22
    198c:	1f 91       	pop	r17
    198e:	08 95       	ret

00001990 <__divmodsi4>:
    1990:	97 fb       	bst	r25, 7
    1992:	09 2e       	mov	r0, r25
    1994:	05 26       	eor	r0, r21
    1996:	0e d0       	rcall	.+28     	; 0x19b4 <__divmodsi4_neg1>
    1998:	57 fd       	sbrc	r21, 7
    199a:	04 d0       	rcall	.+8      	; 0x19a4 <__divmodsi4_neg2>
    199c:	14 d0       	rcall	.+40     	; 0x19c6 <__udivmodsi4>
    199e:	0a d0       	rcall	.+20     	; 0x19b4 <__divmodsi4_neg1>
    19a0:	00 1c       	adc	r0, r0
    19a2:	38 f4       	brcc	.+14     	; 0x19b2 <__divmodsi4_exit>

000019a4 <__divmodsi4_neg2>:
    19a4:	50 95       	com	r21
    19a6:	40 95       	com	r20
    19a8:	30 95       	com	r19
    19aa:	21 95       	neg	r18
    19ac:	3f 4f       	sbci	r19, 0xFF	; 255
    19ae:	4f 4f       	sbci	r20, 0xFF	; 255
    19b0:	5f 4f       	sbci	r21, 0xFF	; 255

000019b2 <__divmodsi4_exit>:
    19b2:	08 95       	ret

000019b4 <__divmodsi4_neg1>:
    19b4:	f6 f7       	brtc	.-4      	; 0x19b2 <__divmodsi4_exit>
    19b6:	90 95       	com	r25
    19b8:	80 95       	com	r24
    19ba:	70 95       	com	r23
    19bc:	61 95       	neg	r22
    19be:	7f 4f       	sbci	r23, 0xFF	; 255
    19c0:	8f 4f       	sbci	r24, 0xFF	; 255
    19c2:	9f 4f       	sbci	r25, 0xFF	; 255
    19c4:	08 95       	ret

000019c6 <__udivmodsi4>:
    19c6:	a1 e2       	ldi	r26, 0x21	; 33
    19c8:	1a 2e       	mov	r1, r26
    19ca:	aa 1b       	sub	r26, r26
    19cc:	bb 1b       	sub	r27, r27
    19ce:	fd 01       	movw	r30, r26
    19d0:	0d c0       	rjmp	.+26     	; 0x19ec <__udivmodsi4_ep>

000019d2 <__udivmodsi4_loop>:
    19d2:	aa 1f       	adc	r26, r26
    19d4:	bb 1f       	adc	r27, r27
    19d6:	ee 1f       	adc	r30, r30
    19d8:	ff 1f       	adc	r31, r31
    19da:	a2 17       	cp	r26, r18
    19dc:	b3 07       	cpc	r27, r19
    19de:	e4 07       	cpc	r30, r20
    19e0:	f5 07       	cpc	r31, r21
    19e2:	20 f0       	brcs	.+8      	; 0x19ec <__udivmodsi4_ep>
    19e4:	a2 1b       	sub	r26, r18
    19e6:	b3 0b       	sbc	r27, r19
    19e8:	e4 0b       	sbc	r30, r20
    19ea:	f5 0b       	sbc	r31, r21

000019ec <__udivmodsi4_ep>:
    19ec:	66 1f       	adc	r22, r22
    19ee:	77 1f       	adc	r23, r23
    19f0:	88 1f       	adc	r24, r24
    19f2:	99 1f       	adc	r25, r25
    19f4:	1a 94       	dec	r1
    19f6:	69 f7       	brne	.-38     	; 0x19d2 <__udivmodsi4_loop>
    19f8:	60 95       	com	r22
    19fa:	70 95       	com	r23
    19fc:	80 95       	com	r24
    19fe:	90 95       	com	r25
    1a00:	9b 01       	movw	r18, r22
    1a02:	ac 01       	movw	r20, r24
    1a04:	bd 01       	movw	r22, r26
    1a06:	cf 01       	movw	r24, r30
    1a08:	08 95       	ret

00001a0a <__prologue_saves__>:
    1a0a:	2f 92       	push	r2
    1a0c:	3f 92       	push	r3
    1a0e:	4f 92       	push	r4
    1a10:	5f 92       	push	r5
    1a12:	6f 92       	push	r6
    1a14:	7f 92       	push	r7
    1a16:	8f 92       	push	r8
    1a18:	9f 92       	push	r9
    1a1a:	af 92       	push	r10
    1a1c:	bf 92       	push	r11
    1a1e:	cf 92       	push	r12
    1a20:	df 92       	push	r13
    1a22:	ef 92       	push	r14
    1a24:	ff 92       	push	r15
    1a26:	0f 93       	push	r16
    1a28:	1f 93       	push	r17
    1a2a:	cf 93       	push	r28
    1a2c:	df 93       	push	r29
    1a2e:	cd b7       	in	r28, 0x3d	; 61
    1a30:	de b7       	in	r29, 0x3e	; 62
    1a32:	ca 1b       	sub	r28, r26
    1a34:	db 0b       	sbc	r29, r27
    1a36:	0f b6       	in	r0, 0x3f	; 63
    1a38:	f8 94       	cli
    1a3a:	de bf       	out	0x3e, r29	; 62
    1a3c:	0f be       	out	0x3f, r0	; 63
    1a3e:	cd bf       	out	0x3d, r28	; 61
    1a40:	19 94       	eijmp

00001a42 <__epilogue_restores__>:
    1a42:	2a 88       	ldd	r2, Y+18	; 0x12
    1a44:	39 88       	ldd	r3, Y+17	; 0x11
    1a46:	48 88       	ldd	r4, Y+16	; 0x10
    1a48:	5f 84       	ldd	r5, Y+15	; 0x0f
    1a4a:	6e 84       	ldd	r6, Y+14	; 0x0e
    1a4c:	7d 84       	ldd	r7, Y+13	; 0x0d
    1a4e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1a50:	9b 84       	ldd	r9, Y+11	; 0x0b
    1a52:	aa 84       	ldd	r10, Y+10	; 0x0a
    1a54:	b9 84       	ldd	r11, Y+9	; 0x09
    1a56:	c8 84       	ldd	r12, Y+8	; 0x08
    1a58:	df 80       	ldd	r13, Y+7	; 0x07
    1a5a:	ee 80       	ldd	r14, Y+6	; 0x06
    1a5c:	fd 80       	ldd	r15, Y+5	; 0x05
    1a5e:	0c 81       	ldd	r16, Y+4	; 0x04
    1a60:	1b 81       	ldd	r17, Y+3	; 0x03
    1a62:	aa 81       	ldd	r26, Y+2	; 0x02
    1a64:	b9 81       	ldd	r27, Y+1	; 0x01
    1a66:	ce 0f       	add	r28, r30
    1a68:	d1 1d       	adc	r29, r1
    1a6a:	0f b6       	in	r0, 0x3f	; 63
    1a6c:	f8 94       	cli
    1a6e:	de bf       	out	0x3e, r29	; 62
    1a70:	0f be       	out	0x3f, r0	; 63
    1a72:	cd bf       	out	0x3d, r28	; 61
    1a74:	ed 01       	movw	r28, r26
    1a76:	08 95       	ret

00001a78 <_exit>:
    1a78:	f8 94       	cli

00001a7a <__stop_program>:
    1a7a:	ff cf       	rjmp	.-2      	; 0x1a7a <__stop_program>
