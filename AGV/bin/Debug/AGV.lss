
bin\Debug\AGV.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000108  00800200  00001a38  00001aec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a38  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000018  00800308  00800308  00001bf4  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  00001bf4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 000001e0  00000000  00000000  00001bf7  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000344  00000000  00000000  00001dd7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002a86  00000000  00000000  0000211b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000015fe  00000000  00000000  00004ba1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001889  00000000  00000000  0000619f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002d0  00000000  00000000  00007a28  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000550  00000000  00000000  00007cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009ce  00000000  00000000  00008248  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00008c16  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 f1 04 	jmp	0x9e2	; 0x9e2 <__vector_23>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	13 e0       	ldi	r17, 0x03	; 3
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e8 e3       	ldi	r30, 0x38	; 56
      fc:	fa e1       	ldi	r31, 0x1A	; 26
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a8 30       	cpi	r26, 0x08	; 8
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	13 e0       	ldi	r17, 0x03	; 3
     110:	a8 e0       	ldi	r26, 0x08	; 8
     112:	b3 e0       	ldi	r27, 0x03	; 3
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a0 32       	cpi	r26, 0x20	; 32
     11a:	b1 07       	cpc	r27, r17
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 bb 04 	call	0x976	; 0x976 <main>
     122:	0c 94 1a 0d 	jmp	0x1a34	; 0x1a34 <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <construct_stepper>:
volatile long int ms;
volatile struct stepper stepper1;
volatile struct stepper stepper2;

void construct_stepper(volatile struct stepper *stepper, uint8_t step_pin, uint8_t dir_pin)
{
     12a:	df 93       	push	r29
     12c:	cf 93       	push	r28
     12e:	00 d0       	rcall	.+0      	; 0x130 <construct_stepper+0x6>
     130:	0f 92       	push	r0
     132:	cd b7       	in	r28, 0x3d	; 61
     134:	de b7       	in	r29, 0x3e	; 62
     136:	9a 83       	std	Y+2, r25	; 0x02
     138:	89 83       	std	Y+1, r24	; 0x01
     13a:	6b 83       	std	Y+3, r22	; 0x03
     13c:	4c 83       	std	Y+4, r20	; 0x04
    stepper->last_step = ms;
     13e:	80 91 1c 03 	lds	r24, 0x031C
     142:	90 91 1d 03 	lds	r25, 0x031D
     146:	a0 91 1e 03 	lds	r26, 0x031E
     14a:	b0 91 1f 03 	lds	r27, 0x031F
     14e:	e9 81       	ldd	r30, Y+1	; 0x01
     150:	fa 81       	ldd	r31, Y+2	; 0x02
     152:	80 83       	st	Z, r24
     154:	91 83       	std	Z+1, r25	; 0x01
     156:	a2 83       	std	Z+2, r26	; 0x02
     158:	b3 83       	std	Z+3, r27	; 0x03
    stepper->time_profile = 1;
     15a:	e9 81       	ldd	r30, Y+1	; 0x01
     15c:	fa 81       	ldd	r31, Y+2	; 0x02
     15e:	81 e0       	ldi	r24, 0x01	; 1
     160:	84 83       	std	Z+4, r24	; 0x04
    stepper->steps = 0;
     162:	e9 81       	ldd	r30, Y+1	; 0x01
     164:	fa 81       	ldd	r31, Y+2	; 0x02
     166:	11 86       	std	Z+9, r1	; 0x09
     168:	10 86       	std	Z+8, r1	; 0x08
    stepper->step_pin = step_pin;
     16a:	e9 81       	ldd	r30, Y+1	; 0x01
     16c:	fa 81       	ldd	r31, Y+2	; 0x02
     16e:	8b 81       	ldd	r24, Y+3	; 0x03
     170:	86 83       	std	Z+6, r24	; 0x06
    stepper->dir_pin = dir_pin;
     172:	e9 81       	ldd	r30, Y+1	; 0x01
     174:	fa 81       	ldd	r31, Y+2	; 0x02
     176:	8c 81       	ldd	r24, Y+4	; 0x04
     178:	87 83       	std	Z+7, r24	; 0x07
    stepper->direction = 0;
     17a:	e9 81       	ldd	r30, Y+1	; 0x01
     17c:	fa 81       	ldd	r31, Y+2	; 0x02
     17e:	15 82       	std	Z+5, r1	; 0x05
}
     180:	0f 90       	pop	r0
     182:	0f 90       	pop	r0
     184:	0f 90       	pop	r0
     186:	0f 90       	pop	r0
     188:	cf 91       	pop	r28
     18a:	df 91       	pop	r29
     18c:	08 95       	ret

0000018e <initialize_steppers>:

void initialize_steppers()
{
     18e:	df 93       	push	r29
     190:	cf 93       	push	r28
     192:	0f 92       	push	r0
     194:	cd b7       	in	r28, 0x3d	; 61
     196:	de b7       	in	r29, 0x3e	; 62
    stepper_DDR |= 0xFF;//init all pins in bank C
     198:	e7 e0       	ldi	r30, 0x07	; 7
     19a:	f1 e0       	ldi	r31, 0x01	; 1
     19c:	80 81       	ld	r24, Z
     19e:	e7 e0       	ldi	r30, 0x07	; 7
     1a0:	f1 e0       	ldi	r31, 0x01	; 1
     1a2:	8f ef       	ldi	r24, 0xFF	; 255
     1a4:	80 83       	st	Z, r24
}
     1a6:	0f 90       	pop	r0
     1a8:	cf 91       	pop	r28
     1aa:	df 91       	pop	r29
     1ac:	08 95       	ret

000001ae <set_dir>:

void set_dir(volatile struct stepper *stepper)
{
     1ae:	df 93       	push	r29
     1b0:	cf 93       	push	r28
     1b2:	00 d0       	rcall	.+0      	; 0x1b4 <set_dir+0x6>
     1b4:	0f 92       	push	r0
     1b6:	cd b7       	in	r28, 0x3d	; 61
     1b8:	de b7       	in	r29, 0x3e	; 62
     1ba:	9a 83       	std	Y+2, r25	; 0x02
     1bc:	89 83       	std	Y+1, r24	; 0x01
    switch(stepper->direction)
     1be:	e9 81       	ldd	r30, Y+1	; 0x01
     1c0:	fa 81       	ldd	r31, Y+2	; 0x02
     1c2:	85 81       	ldd	r24, Z+5	; 0x05
     1c4:	28 2f       	mov	r18, r24
     1c6:	30 e0       	ldi	r19, 0x00	; 0
     1c8:	3c 83       	std	Y+4, r19	; 0x04
     1ca:	2b 83       	std	Y+3, r18	; 0x03
     1cc:	8b 81       	ldd	r24, Y+3	; 0x03
     1ce:	9c 81       	ldd	r25, Y+4	; 0x04
     1d0:	81 30       	cpi	r24, 0x01	; 1
     1d2:	91 05       	cpc	r25, r1
     1d4:	31 f0       	breq	.+12     	; 0x1e2 <set_dir+0x34>
     1d6:	2b 81       	ldd	r18, Y+3	; 0x03
     1d8:	3c 81       	ldd	r19, Y+4	; 0x04
     1da:	22 30       	cpi	r18, 0x02	; 2
     1dc:	31 05       	cpc	r19, r1
     1de:	b9 f0       	breq	.+46     	; 0x20e <set_dir+0x60>
     1e0:	2c c0       	rjmp	.+88     	; 0x23a <set_dir+0x8c>
    {
    case forward:
        stepper_port |= (1<<stepper->dir_pin);
     1e2:	a8 e0       	ldi	r26, 0x08	; 8
     1e4:	b1 e0       	ldi	r27, 0x01	; 1
     1e6:	e8 e0       	ldi	r30, 0x08	; 8
     1e8:	f1 e0       	ldi	r31, 0x01	; 1
     1ea:	80 81       	ld	r24, Z
     1ec:	48 2f       	mov	r20, r24
     1ee:	e9 81       	ldd	r30, Y+1	; 0x01
     1f0:	fa 81       	ldd	r31, Y+2	; 0x02
     1f2:	87 81       	ldd	r24, Z+7	; 0x07
     1f4:	28 2f       	mov	r18, r24
     1f6:	30 e0       	ldi	r19, 0x00	; 0
     1f8:	81 e0       	ldi	r24, 0x01	; 1
     1fa:	90 e0       	ldi	r25, 0x00	; 0
     1fc:	02 2e       	mov	r0, r18
     1fe:	02 c0       	rjmp	.+4      	; 0x204 <set_dir+0x56>
     200:	88 0f       	add	r24, r24
     202:	99 1f       	adc	r25, r25
     204:	0a 94       	dec	r0
     206:	e2 f7       	brpl	.-8      	; 0x200 <set_dir+0x52>
     208:	84 2b       	or	r24, r20
     20a:	8c 93       	st	X, r24
     20c:	16 c0       	rjmp	.+44     	; 0x23a <set_dir+0x8c>
        break;
    case backward:
        stepper_port &= ~(1<<stepper->dir_pin);
     20e:	a8 e0       	ldi	r26, 0x08	; 8
     210:	b1 e0       	ldi	r27, 0x01	; 1
     212:	e8 e0       	ldi	r30, 0x08	; 8
     214:	f1 e0       	ldi	r31, 0x01	; 1
     216:	80 81       	ld	r24, Z
     218:	48 2f       	mov	r20, r24
     21a:	e9 81       	ldd	r30, Y+1	; 0x01
     21c:	fa 81       	ldd	r31, Y+2	; 0x02
     21e:	87 81       	ldd	r24, Z+7	; 0x07
     220:	28 2f       	mov	r18, r24
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	81 e0       	ldi	r24, 0x01	; 1
     226:	90 e0       	ldi	r25, 0x00	; 0
     228:	02 2e       	mov	r0, r18
     22a:	02 c0       	rjmp	.+4      	; 0x230 <set_dir+0x82>
     22c:	88 0f       	add	r24, r24
     22e:	99 1f       	adc	r25, r25
     230:	0a 94       	dec	r0
     232:	e2 f7       	brpl	.-8      	; 0x22c <set_dir+0x7e>
     234:	80 95       	com	r24
     236:	84 23       	and	r24, r20
     238:	8c 93       	st	X, r24
        break;
    default:
        break;
    }
}
     23a:	0f 90       	pop	r0
     23c:	0f 90       	pop	r0
     23e:	0f 90       	pop	r0
     240:	0f 90       	pop	r0
     242:	cf 91       	pop	r28
     244:	df 91       	pop	r29
     246:	08 95       	ret

00000248 <step>:

void step(volatile struct stepper stepper)
{
     248:	0f 93       	push	r16
     24a:	1f 93       	push	r17
     24c:	df 93       	push	r29
     24e:	cf 93       	push	r28
     250:	cd b7       	in	r28, 0x3d	; 61
     252:	de b7       	in	r29, 0x3e	; 62
     254:	ea 97       	sbiw	r28, 0x3a	; 58
     256:	0f b6       	in	r0, 0x3f	; 63
     258:	f8 94       	cli
     25a:	de bf       	out	0x3e, r29	; 62
     25c:	0f be       	out	0x3f, r0	; 63
     25e:	cd bf       	out	0x3d, r28	; 61
     260:	09 ab       	std	Y+49, r16	; 0x31
     262:	1a ab       	std	Y+50, r17	; 0x32
     264:	2b ab       	std	Y+51, r18	; 0x33
     266:	3c ab       	std	Y+52, r19	; 0x34
     268:	4d ab       	std	Y+53, r20	; 0x35
     26a:	5e ab       	std	Y+54, r21	; 0x36
     26c:	6f ab       	std	Y+55, r22	; 0x37
     26e:	78 af       	std	Y+56, r23	; 0x38
     270:	89 af       	std	Y+57, r24	; 0x39
     272:	9a af       	std	Y+58, r25	; 0x3a

            stepper_port |= (1<<stepper.step_pin);
     274:	a8 e0       	ldi	r26, 0x08	; 8
     276:	b1 e0       	ldi	r27, 0x01	; 1
     278:	e8 e0       	ldi	r30, 0x08	; 8
     27a:	f1 e0       	ldi	r31, 0x01	; 1
     27c:	80 81       	ld	r24, Z
     27e:	48 2f       	mov	r20, r24
     280:	8f a9       	ldd	r24, Y+55	; 0x37
     282:	28 2f       	mov	r18, r24
     284:	30 e0       	ldi	r19, 0x00	; 0
     286:	81 e0       	ldi	r24, 0x01	; 1
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	02 c0       	rjmp	.+4      	; 0x290 <step+0x48>
     28c:	88 0f       	add	r24, r24
     28e:	99 1f       	adc	r25, r25
     290:	2a 95       	dec	r18
     292:	e2 f7       	brpl	.-8      	; 0x28c <step+0x44>
     294:	84 2b       	or	r24, r20
     296:	8c 93       	st	X, r24
     298:	80 e0       	ldi	r24, 0x00	; 0
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	a0 e0       	ldi	r26, 0x00	; 0
     29e:	b0 e4       	ldi	r27, 0x40	; 64
     2a0:	8d a7       	std	Y+45, r24	; 0x2d
     2a2:	9e a7       	std	Y+46, r25	; 0x2e
     2a4:	af a7       	std	Y+47, r26	; 0x2f
     2a6:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     2a8:	6d a5       	ldd	r22, Y+45	; 0x2d
     2aa:	7e a5       	ldd	r23, Y+46	; 0x2e
     2ac:	8f a5       	ldd	r24, Y+47	; 0x2f
     2ae:	98 a9       	ldd	r25, Y+48	; 0x30
     2b0:	2b ea       	ldi	r18, 0xAB	; 171
     2b2:	3a ea       	ldi	r19, 0xAA	; 170
     2b4:	4a ea       	ldi	r20, 0xAA	; 170
     2b6:	50 e4       	ldi	r21, 0x40	; 64
     2b8:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <__mulsf3>
     2bc:	dc 01       	movw	r26, r24
     2be:	cb 01       	movw	r24, r22
     2c0:	89 a7       	std	Y+41, r24	; 0x29
     2c2:	9a a7       	std	Y+42, r25	; 0x2a
     2c4:	ab a7       	std	Y+43, r26	; 0x2b
     2c6:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
     2c8:	69 a5       	ldd	r22, Y+41	; 0x29
     2ca:	7a a5       	ldd	r23, Y+42	; 0x2a
     2cc:	8b a5       	ldd	r24, Y+43	; 0x2b
     2ce:	9c a5       	ldd	r25, Y+44	; 0x2c
     2d0:	20 e0       	ldi	r18, 0x00	; 0
     2d2:	30 e0       	ldi	r19, 0x00	; 0
     2d4:	40 e8       	ldi	r20, 0x80	; 128
     2d6:	5f e3       	ldi	r21, 0x3F	; 63
     2d8:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <__ltsf2>
     2dc:	88 23       	and	r24, r24
     2de:	1c f4       	brge	.+6      	; 0x2e6 <step+0x9e>
		__ticks = 1;
     2e0:	81 e0       	ldi	r24, 0x01	; 1
     2e2:	88 a7       	std	Y+40, r24	; 0x28
     2e4:	91 c0       	rjmp	.+290    	; 0x408 <step+0x1c0>
	else if (__tmp > 255)
     2e6:	69 a5       	ldd	r22, Y+41	; 0x29
     2e8:	7a a5       	ldd	r23, Y+42	; 0x2a
     2ea:	8b a5       	ldd	r24, Y+43	; 0x2b
     2ec:	9c a5       	ldd	r25, Y+44	; 0x2c
     2ee:	20 e0       	ldi	r18, 0x00	; 0
     2f0:	30 e0       	ldi	r19, 0x00	; 0
     2f2:	4f e7       	ldi	r20, 0x7F	; 127
     2f4:	53 e4       	ldi	r21, 0x43	; 67
     2f6:	0e 94 8a 09 	call	0x1314	; 0x1314 <__gtsf2>
     2fa:	18 16       	cp	r1, r24
     2fc:	0c f0       	brlt	.+2      	; 0x300 <step+0xb8>
     2fe:	7b c0       	rjmp	.+246    	; 0x3f6 <step+0x1ae>
	{
		_delay_ms(__us / 1000.0);
     300:	6d a5       	ldd	r22, Y+45	; 0x2d
     302:	7e a5       	ldd	r23, Y+46	; 0x2e
     304:	8f a5       	ldd	r24, Y+47	; 0x2f
     306:	98 a9       	ldd	r25, Y+48	; 0x30
     308:	20 e0       	ldi	r18, 0x00	; 0
     30a:	30 e0       	ldi	r19, 0x00	; 0
     30c:	4a e7       	ldi	r20, 0x7A	; 122
     30e:	54 e4       	ldi	r21, 0x44	; 68
     310:	0e 94 de 08 	call	0x11bc	; 0x11bc <__divsf3>
     314:	dc 01       	movw	r26, r24
     316:	cb 01       	movw	r24, r22
     318:	8c a3       	std	Y+36, r24	; 0x24
     31a:	9d a3       	std	Y+37, r25	; 0x25
     31c:	ae a3       	std	Y+38, r26	; 0x26
     31e:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     320:	6c a1       	ldd	r22, Y+36	; 0x24
     322:	7d a1       	ldd	r23, Y+37	; 0x25
     324:	8e a1       	ldd	r24, Y+38	; 0x26
     326:	9f a1       	ldd	r25, Y+39	; 0x27
     328:	20 e0       	ldi	r18, 0x00	; 0
     32a:	30 e0       	ldi	r19, 0x00	; 0
     32c:	4a e7       	ldi	r20, 0x7A	; 122
     32e:	55 e4       	ldi	r21, 0x45	; 69
     330:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <__mulsf3>
     334:	dc 01       	movw	r26, r24
     336:	cb 01       	movw	r24, r22
     338:	88 a3       	std	Y+32, r24	; 0x20
     33a:	99 a3       	std	Y+33, r25	; 0x21
     33c:	aa a3       	std	Y+34, r26	; 0x22
     33e:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
     340:	68 a1       	ldd	r22, Y+32	; 0x20
     342:	79 a1       	ldd	r23, Y+33	; 0x21
     344:	8a a1       	ldd	r24, Y+34	; 0x22
     346:	9b a1       	ldd	r25, Y+35	; 0x23
     348:	20 e0       	ldi	r18, 0x00	; 0
     34a:	30 e0       	ldi	r19, 0x00	; 0
     34c:	40 e8       	ldi	r20, 0x80	; 128
     34e:	5f e3       	ldi	r21, 0x3F	; 63
     350:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <__ltsf2>
     354:	88 23       	and	r24, r24
     356:	2c f4       	brge	.+10     	; 0x362 <step+0x11a>
		__ticks = 1;
     358:	81 e0       	ldi	r24, 0x01	; 1
     35a:	90 e0       	ldi	r25, 0x00	; 0
     35c:	9f 8f       	std	Y+31, r25	; 0x1f
     35e:	8e 8f       	std	Y+30, r24	; 0x1e
     360:	3f c0       	rjmp	.+126    	; 0x3e0 <step+0x198>
	else if (__tmp > 65535)
     362:	68 a1       	ldd	r22, Y+32	; 0x20
     364:	79 a1       	ldd	r23, Y+33	; 0x21
     366:	8a a1       	ldd	r24, Y+34	; 0x22
     368:	9b a1       	ldd	r25, Y+35	; 0x23
     36a:	20 e0       	ldi	r18, 0x00	; 0
     36c:	3f ef       	ldi	r19, 0xFF	; 255
     36e:	4f e7       	ldi	r20, 0x7F	; 127
     370:	57 e4       	ldi	r21, 0x47	; 71
     372:	0e 94 8a 09 	call	0x1314	; 0x1314 <__gtsf2>
     376:	18 16       	cp	r1, r24
     378:	4c f5       	brge	.+82     	; 0x3cc <step+0x184>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     37a:	6c a1       	ldd	r22, Y+36	; 0x24
     37c:	7d a1       	ldd	r23, Y+37	; 0x25
     37e:	8e a1       	ldd	r24, Y+38	; 0x26
     380:	9f a1       	ldd	r25, Y+39	; 0x27
     382:	20 e0       	ldi	r18, 0x00	; 0
     384:	30 e0       	ldi	r19, 0x00	; 0
     386:	40 e2       	ldi	r20, 0x20	; 32
     388:	51 e4       	ldi	r21, 0x41	; 65
     38a:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <__mulsf3>
     38e:	dc 01       	movw	r26, r24
     390:	cb 01       	movw	r24, r22
     392:	bc 01       	movw	r22, r24
     394:	cd 01       	movw	r24, r26
     396:	0e 94 0e 06 	call	0xc1c	; 0xc1c <__fixunssfsi>
     39a:	dc 01       	movw	r26, r24
     39c:	cb 01       	movw	r24, r22
     39e:	9f 8f       	std	Y+31, r25	; 0x1f
     3a0:	8e 8f       	std	Y+30, r24	; 0x1e
     3a2:	0f c0       	rjmp	.+30     	; 0x3c2 <step+0x17a>
     3a4:	80 e9       	ldi	r24, 0x90	; 144
     3a6:	91 e0       	ldi	r25, 0x01	; 1
     3a8:	9d 8f       	std	Y+29, r25	; 0x1d
     3aa:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     3ac:	8c 8d       	ldd	r24, Y+28	; 0x1c
     3ae:	9d 8d       	ldd	r25, Y+29	; 0x1d
     3b0:	01 97       	sbiw	r24, 0x01	; 1
     3b2:	f1 f7       	brne	.-4      	; 0x3b0 <step+0x168>
     3b4:	9d 8f       	std	Y+29, r25	; 0x1d
     3b6:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     3b8:	8e 8d       	ldd	r24, Y+30	; 0x1e
     3ba:	9f 8d       	ldd	r25, Y+31	; 0x1f
     3bc:	01 97       	sbiw	r24, 0x01	; 1
     3be:	9f 8f       	std	Y+31, r25	; 0x1f
     3c0:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3c2:	8e 8d       	ldd	r24, Y+30	; 0x1e
     3c4:	9f 8d       	ldd	r25, Y+31	; 0x1f
     3c6:	00 97       	sbiw	r24, 0x00	; 0
     3c8:	69 f7       	brne	.-38     	; 0x3a4 <step+0x15c>
     3ca:	24 c0       	rjmp	.+72     	; 0x414 <step+0x1cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     3cc:	68 a1       	ldd	r22, Y+32	; 0x20
     3ce:	79 a1       	ldd	r23, Y+33	; 0x21
     3d0:	8a a1       	ldd	r24, Y+34	; 0x22
     3d2:	9b a1       	ldd	r25, Y+35	; 0x23
     3d4:	0e 94 0e 06 	call	0xc1c	; 0xc1c <__fixunssfsi>
     3d8:	dc 01       	movw	r26, r24
     3da:	cb 01       	movw	r24, r22
     3dc:	9f 8f       	std	Y+31, r25	; 0x1f
     3de:	8e 8f       	std	Y+30, r24	; 0x1e
     3e0:	8e 8d       	ldd	r24, Y+30	; 0x1e
     3e2:	9f 8d       	ldd	r25, Y+31	; 0x1f
     3e4:	9b 8f       	std	Y+27, r25	; 0x1b
     3e6:	8a 8f       	std	Y+26, r24	; 0x1a
     3e8:	8a 8d       	ldd	r24, Y+26	; 0x1a
     3ea:	9b 8d       	ldd	r25, Y+27	; 0x1b
     3ec:	01 97       	sbiw	r24, 0x01	; 1
     3ee:	f1 f7       	brne	.-4      	; 0x3ec <step+0x1a4>
     3f0:	9b 8f       	std	Y+27, r25	; 0x1b
     3f2:	8a 8f       	std	Y+26, r24	; 0x1a
     3f4:	0f c0       	rjmp	.+30     	; 0x414 <step+0x1cc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     3f6:	69 a5       	ldd	r22, Y+41	; 0x29
     3f8:	7a a5       	ldd	r23, Y+42	; 0x2a
     3fa:	8b a5       	ldd	r24, Y+43	; 0x2b
     3fc:	9c a5       	ldd	r25, Y+44	; 0x2c
     3fe:	0e 94 0e 06 	call	0xc1c	; 0xc1c <__fixunssfsi>
     402:	dc 01       	movw	r26, r24
     404:	cb 01       	movw	r24, r22
     406:	88 a7       	std	Y+40, r24	; 0x28
     408:	88 a5       	ldd	r24, Y+40	; 0x28
     40a:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     40c:	89 8d       	ldd	r24, Y+25	; 0x19
     40e:	8a 95       	dec	r24
     410:	f1 f7       	brne	.-4      	; 0x40e <step+0x1c6>
     412:	89 8f       	std	Y+25, r24	; 0x19
            _delay_us(2);
            stepper_port &= ~(1<<stepper.step_pin);
     414:	a8 e0       	ldi	r26, 0x08	; 8
     416:	b1 e0       	ldi	r27, 0x01	; 1
     418:	e8 e0       	ldi	r30, 0x08	; 8
     41a:	f1 e0       	ldi	r31, 0x01	; 1
     41c:	80 81       	ld	r24, Z
     41e:	48 2f       	mov	r20, r24
     420:	8f a9       	ldd	r24, Y+55	; 0x37
     422:	28 2f       	mov	r18, r24
     424:	30 e0       	ldi	r19, 0x00	; 0
     426:	81 e0       	ldi	r24, 0x01	; 1
     428:	90 e0       	ldi	r25, 0x00	; 0
     42a:	02 c0       	rjmp	.+4      	; 0x430 <step+0x1e8>
     42c:	88 0f       	add	r24, r24
     42e:	99 1f       	adc	r25, r25
     430:	2a 95       	dec	r18
     432:	e2 f7       	brpl	.-8      	; 0x42c <step+0x1e4>
     434:	80 95       	com	r24
     436:	84 23       	and	r24, r20
     438:	8c 93       	st	X, r24
     43a:	80 e0       	ldi	r24, 0x00	; 0
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	a0 e0       	ldi	r26, 0x00	; 0
     440:	b0 e4       	ldi	r27, 0x40	; 64
     442:	8d 8b       	std	Y+21, r24	; 0x15
     444:	9e 8b       	std	Y+22, r25	; 0x16
     446:	af 8b       	std	Y+23, r26	; 0x17
     448:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     44a:	6d 89       	ldd	r22, Y+21	; 0x15
     44c:	7e 89       	ldd	r23, Y+22	; 0x16
     44e:	8f 89       	ldd	r24, Y+23	; 0x17
     450:	98 8d       	ldd	r25, Y+24	; 0x18
     452:	2b ea       	ldi	r18, 0xAB	; 171
     454:	3a ea       	ldi	r19, 0xAA	; 170
     456:	4a ea       	ldi	r20, 0xAA	; 170
     458:	50 e4       	ldi	r21, 0x40	; 64
     45a:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <__mulsf3>
     45e:	dc 01       	movw	r26, r24
     460:	cb 01       	movw	r24, r22
     462:	89 8b       	std	Y+17, r24	; 0x11
     464:	9a 8b       	std	Y+18, r25	; 0x12
     466:	ab 8b       	std	Y+19, r26	; 0x13
     468:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     46a:	69 89       	ldd	r22, Y+17	; 0x11
     46c:	7a 89       	ldd	r23, Y+18	; 0x12
     46e:	8b 89       	ldd	r24, Y+19	; 0x13
     470:	9c 89       	ldd	r25, Y+20	; 0x14
     472:	20 e0       	ldi	r18, 0x00	; 0
     474:	30 e0       	ldi	r19, 0x00	; 0
     476:	40 e8       	ldi	r20, 0x80	; 128
     478:	5f e3       	ldi	r21, 0x3F	; 63
     47a:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <__ltsf2>
     47e:	88 23       	and	r24, r24
     480:	1c f4       	brge	.+6      	; 0x488 <step+0x240>
		__ticks = 1;
     482:	81 e0       	ldi	r24, 0x01	; 1
     484:	88 8b       	std	Y+16, r24	; 0x10
     486:	91 c0       	rjmp	.+290    	; 0x5aa <step+0x362>
	else if (__tmp > 255)
     488:	69 89       	ldd	r22, Y+17	; 0x11
     48a:	7a 89       	ldd	r23, Y+18	; 0x12
     48c:	8b 89       	ldd	r24, Y+19	; 0x13
     48e:	9c 89       	ldd	r25, Y+20	; 0x14
     490:	20 e0       	ldi	r18, 0x00	; 0
     492:	30 e0       	ldi	r19, 0x00	; 0
     494:	4f e7       	ldi	r20, 0x7F	; 127
     496:	53 e4       	ldi	r21, 0x43	; 67
     498:	0e 94 8a 09 	call	0x1314	; 0x1314 <__gtsf2>
     49c:	18 16       	cp	r1, r24
     49e:	0c f0       	brlt	.+2      	; 0x4a2 <step+0x25a>
     4a0:	7b c0       	rjmp	.+246    	; 0x598 <step+0x350>
	{
		_delay_ms(__us / 1000.0);
     4a2:	6d 89       	ldd	r22, Y+21	; 0x15
     4a4:	7e 89       	ldd	r23, Y+22	; 0x16
     4a6:	8f 89       	ldd	r24, Y+23	; 0x17
     4a8:	98 8d       	ldd	r25, Y+24	; 0x18
     4aa:	20 e0       	ldi	r18, 0x00	; 0
     4ac:	30 e0       	ldi	r19, 0x00	; 0
     4ae:	4a e7       	ldi	r20, 0x7A	; 122
     4b0:	54 e4       	ldi	r21, 0x44	; 68
     4b2:	0e 94 de 08 	call	0x11bc	; 0x11bc <__divsf3>
     4b6:	dc 01       	movw	r26, r24
     4b8:	cb 01       	movw	r24, r22
     4ba:	8c 87       	std	Y+12, r24	; 0x0c
     4bc:	9d 87       	std	Y+13, r25	; 0x0d
     4be:	ae 87       	std	Y+14, r26	; 0x0e
     4c0:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     4c2:	6c 85       	ldd	r22, Y+12	; 0x0c
     4c4:	7d 85       	ldd	r23, Y+13	; 0x0d
     4c6:	8e 85       	ldd	r24, Y+14	; 0x0e
     4c8:	9f 85       	ldd	r25, Y+15	; 0x0f
     4ca:	20 e0       	ldi	r18, 0x00	; 0
     4cc:	30 e0       	ldi	r19, 0x00	; 0
     4ce:	4a e7       	ldi	r20, 0x7A	; 122
     4d0:	55 e4       	ldi	r21, 0x45	; 69
     4d2:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <__mulsf3>
     4d6:	dc 01       	movw	r26, r24
     4d8:	cb 01       	movw	r24, r22
     4da:	88 87       	std	Y+8, r24	; 0x08
     4dc:	99 87       	std	Y+9, r25	; 0x09
     4de:	aa 87       	std	Y+10, r26	; 0x0a
     4e0:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
     4e2:	68 85       	ldd	r22, Y+8	; 0x08
     4e4:	79 85       	ldd	r23, Y+9	; 0x09
     4e6:	8a 85       	ldd	r24, Y+10	; 0x0a
     4e8:	9b 85       	ldd	r25, Y+11	; 0x0b
     4ea:	20 e0       	ldi	r18, 0x00	; 0
     4ec:	30 e0       	ldi	r19, 0x00	; 0
     4ee:	40 e8       	ldi	r20, 0x80	; 128
     4f0:	5f e3       	ldi	r21, 0x3F	; 63
     4f2:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <__ltsf2>
     4f6:	88 23       	and	r24, r24
     4f8:	2c f4       	brge	.+10     	; 0x504 <step+0x2bc>
		__ticks = 1;
     4fa:	81 e0       	ldi	r24, 0x01	; 1
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	9f 83       	std	Y+7, r25	; 0x07
     500:	8e 83       	std	Y+6, r24	; 0x06
     502:	3f c0       	rjmp	.+126    	; 0x582 <step+0x33a>
	else if (__tmp > 65535)
     504:	68 85       	ldd	r22, Y+8	; 0x08
     506:	79 85       	ldd	r23, Y+9	; 0x09
     508:	8a 85       	ldd	r24, Y+10	; 0x0a
     50a:	9b 85       	ldd	r25, Y+11	; 0x0b
     50c:	20 e0       	ldi	r18, 0x00	; 0
     50e:	3f ef       	ldi	r19, 0xFF	; 255
     510:	4f e7       	ldi	r20, 0x7F	; 127
     512:	57 e4       	ldi	r21, 0x47	; 71
     514:	0e 94 8a 09 	call	0x1314	; 0x1314 <__gtsf2>
     518:	18 16       	cp	r1, r24
     51a:	4c f5       	brge	.+82     	; 0x56e <step+0x326>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     51c:	6c 85       	ldd	r22, Y+12	; 0x0c
     51e:	7d 85       	ldd	r23, Y+13	; 0x0d
     520:	8e 85       	ldd	r24, Y+14	; 0x0e
     522:	9f 85       	ldd	r25, Y+15	; 0x0f
     524:	20 e0       	ldi	r18, 0x00	; 0
     526:	30 e0       	ldi	r19, 0x00	; 0
     528:	40 e2       	ldi	r20, 0x20	; 32
     52a:	51 e4       	ldi	r21, 0x41	; 65
     52c:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <__mulsf3>
     530:	dc 01       	movw	r26, r24
     532:	cb 01       	movw	r24, r22
     534:	bc 01       	movw	r22, r24
     536:	cd 01       	movw	r24, r26
     538:	0e 94 0e 06 	call	0xc1c	; 0xc1c <__fixunssfsi>
     53c:	dc 01       	movw	r26, r24
     53e:	cb 01       	movw	r24, r22
     540:	9f 83       	std	Y+7, r25	; 0x07
     542:	8e 83       	std	Y+6, r24	; 0x06
     544:	0f c0       	rjmp	.+30     	; 0x564 <step+0x31c>
     546:	80 e9       	ldi	r24, 0x90	; 144
     548:	91 e0       	ldi	r25, 0x01	; 1
     54a:	9d 83       	std	Y+5, r25	; 0x05
     54c:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     54e:	8c 81       	ldd	r24, Y+4	; 0x04
     550:	9d 81       	ldd	r25, Y+5	; 0x05
     552:	01 97       	sbiw	r24, 0x01	; 1
     554:	f1 f7       	brne	.-4      	; 0x552 <step+0x30a>
     556:	9d 83       	std	Y+5, r25	; 0x05
     558:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     55a:	8e 81       	ldd	r24, Y+6	; 0x06
     55c:	9f 81       	ldd	r25, Y+7	; 0x07
     55e:	01 97       	sbiw	r24, 0x01	; 1
     560:	9f 83       	std	Y+7, r25	; 0x07
     562:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     564:	8e 81       	ldd	r24, Y+6	; 0x06
     566:	9f 81       	ldd	r25, Y+7	; 0x07
     568:	00 97       	sbiw	r24, 0x00	; 0
     56a:	69 f7       	brne	.-38     	; 0x546 <step+0x2fe>
     56c:	24 c0       	rjmp	.+72     	; 0x5b6 <step+0x36e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     56e:	68 85       	ldd	r22, Y+8	; 0x08
     570:	79 85       	ldd	r23, Y+9	; 0x09
     572:	8a 85       	ldd	r24, Y+10	; 0x0a
     574:	9b 85       	ldd	r25, Y+11	; 0x0b
     576:	0e 94 0e 06 	call	0xc1c	; 0xc1c <__fixunssfsi>
     57a:	dc 01       	movw	r26, r24
     57c:	cb 01       	movw	r24, r22
     57e:	9f 83       	std	Y+7, r25	; 0x07
     580:	8e 83       	std	Y+6, r24	; 0x06
     582:	8e 81       	ldd	r24, Y+6	; 0x06
     584:	9f 81       	ldd	r25, Y+7	; 0x07
     586:	9b 83       	std	Y+3, r25	; 0x03
     588:	8a 83       	std	Y+2, r24	; 0x02
     58a:	8a 81       	ldd	r24, Y+2	; 0x02
     58c:	9b 81       	ldd	r25, Y+3	; 0x03
     58e:	01 97       	sbiw	r24, 0x01	; 1
     590:	f1 f7       	brne	.-4      	; 0x58e <step+0x346>
     592:	9b 83       	std	Y+3, r25	; 0x03
     594:	8a 83       	std	Y+2, r24	; 0x02
     596:	0f c0       	rjmp	.+30     	; 0x5b6 <step+0x36e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     598:	69 89       	ldd	r22, Y+17	; 0x11
     59a:	7a 89       	ldd	r23, Y+18	; 0x12
     59c:	8b 89       	ldd	r24, Y+19	; 0x13
     59e:	9c 89       	ldd	r25, Y+20	; 0x14
     5a0:	0e 94 0e 06 	call	0xc1c	; 0xc1c <__fixunssfsi>
     5a4:	dc 01       	movw	r26, r24
     5a6:	cb 01       	movw	r24, r22
     5a8:	88 8b       	std	Y+16, r24	; 0x10
     5aa:	88 89       	ldd	r24, Y+16	; 0x10
     5ac:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     5ae:	89 81       	ldd	r24, Y+1	; 0x01
     5b0:	8a 95       	dec	r24
     5b2:	f1 f7       	brne	.-4      	; 0x5b0 <step+0x368>
     5b4:	89 83       	std	Y+1, r24	; 0x01
            _delay_us(2);
}
     5b6:	ea 96       	adiw	r28, 0x3a	; 58
     5b8:	0f b6       	in	r0, 0x3f	; 63
     5ba:	f8 94       	cli
     5bc:	de bf       	out	0x3e, r29	; 62
     5be:	0f be       	out	0x3f, r0	; 63
     5c0:	cd bf       	out	0x3d, r28	; 61
     5c2:	cf 91       	pop	r28
     5c4:	df 91       	pop	r29
     5c6:	1f 91       	pop	r17
     5c8:	0f 91       	pop	r16
     5ca:	08 95       	ret

000005cc <count_steps>:

void count_steps(volatile struct stepper *stepperino)
{
     5cc:	df 93       	push	r29
     5ce:	cf 93       	push	r28
     5d0:	00 d0       	rcall	.+0      	; 0x5d2 <count_steps+0x6>
     5d2:	0f 92       	push	r0
     5d4:	cd b7       	in	r28, 0x3d	; 61
     5d6:	de b7       	in	r29, 0x3e	; 62
     5d8:	9a 83       	std	Y+2, r25	; 0x02
     5da:	89 83       	std	Y+1, r24	; 0x01
    switch(stepperino->direction)
     5dc:	e9 81       	ldd	r30, Y+1	; 0x01
     5de:	fa 81       	ldd	r31, Y+2	; 0x02
     5e0:	85 81       	ldd	r24, Z+5	; 0x05
     5e2:	28 2f       	mov	r18, r24
     5e4:	30 e0       	ldi	r19, 0x00	; 0
     5e6:	3c 83       	std	Y+4, r19	; 0x04
     5e8:	2b 83       	std	Y+3, r18	; 0x03
     5ea:	8b 81       	ldd	r24, Y+3	; 0x03
     5ec:	9c 81       	ldd	r25, Y+4	; 0x04
     5ee:	81 30       	cpi	r24, 0x01	; 1
     5f0:	91 05       	cpc	r25, r1
     5f2:	31 f0       	breq	.+12     	; 0x600 <count_steps+0x34>
     5f4:	2b 81       	ldd	r18, Y+3	; 0x03
     5f6:	3c 81       	ldd	r19, Y+4	; 0x04
     5f8:	22 30       	cpi	r18, 0x02	; 2
     5fa:	31 05       	cpc	r19, r1
     5fc:	59 f0       	breq	.+22     	; 0x614 <count_steps+0x48>
     5fe:	13 c0       	rjmp	.+38     	; 0x626 <count_steps+0x5a>
        {
        case forward:
        stepperino->steps++;
     600:	e9 81       	ldd	r30, Y+1	; 0x01
     602:	fa 81       	ldd	r31, Y+2	; 0x02
     604:	80 85       	ldd	r24, Z+8	; 0x08
     606:	91 85       	ldd	r25, Z+9	; 0x09
     608:	01 96       	adiw	r24, 0x01	; 1
     60a:	e9 81       	ldd	r30, Y+1	; 0x01
     60c:	fa 81       	ldd	r31, Y+2	; 0x02
     60e:	91 87       	std	Z+9, r25	; 0x09
     610:	80 87       	std	Z+8, r24	; 0x08
     612:	09 c0       	rjmp	.+18     	; 0x626 <count_steps+0x5a>
        break;
        case backward:
        stepperino->steps--;
     614:	e9 81       	ldd	r30, Y+1	; 0x01
     616:	fa 81       	ldd	r31, Y+2	; 0x02
     618:	80 85       	ldd	r24, Z+8	; 0x08
     61a:	91 85       	ldd	r25, Z+9	; 0x09
     61c:	01 97       	sbiw	r24, 0x01	; 1
     61e:	e9 81       	ldd	r30, Y+1	; 0x01
     620:	fa 81       	ldd	r31, Y+2	; 0x02
     622:	91 87       	std	Z+9, r25	; 0x09
     624:	80 87       	std	Z+8, r24	; 0x08
        break;
        default:
        break;
        }
}
     626:	0f 90       	pop	r0
     628:	0f 90       	pop	r0
     62a:	0f 90       	pop	r0
     62c:	0f 90       	pop	r0
     62e:	cf 91       	pop	r28
     630:	df 91       	pop	r29
     632:	08 95       	ret

00000634 <Handle_steps>:

void Handle_steps(volatile struct stepper *stepperino)
{
     634:	0f 93       	push	r16
     636:	1f 93       	push	r17
     638:	df 93       	push	r29
     63a:	cf 93       	push	r28
     63c:	0f 92       	push	r0
     63e:	0f 92       	push	r0
     640:	cd b7       	in	r28, 0x3d	; 61
     642:	de b7       	in	r29, 0x3e	; 62
     644:	9a 83       	std	Y+2, r25	; 0x02
     646:	89 83       	std	Y+1, r24	; 0x01
    if(stepperino->time_profile == 0)
     648:	e9 81       	ldd	r30, Y+1	; 0x01
     64a:	fa 81       	ldd	r31, Y+2	; 0x02
     64c:	84 81       	ldd	r24, Z+4	; 0x04
     64e:	88 23       	and	r24, r24
     650:	09 f4       	brne	.+2      	; 0x654 <Handle_steps+0x20>
     652:	3e c0       	rjmp	.+124    	; 0x6d0 <Handle_steps+0x9c>
    {

    }
    else if(ms >= (stepperino->last_step + stepperino->time_profile))
     654:	e9 81       	ldd	r30, Y+1	; 0x01
     656:	fa 81       	ldd	r31, Y+2	; 0x02
     658:	20 81       	ld	r18, Z
     65a:	31 81       	ldd	r19, Z+1	; 0x01
     65c:	42 81       	ldd	r20, Z+2	; 0x02
     65e:	53 81       	ldd	r21, Z+3	; 0x03
     660:	e9 81       	ldd	r30, Y+1	; 0x01
     662:	fa 81       	ldd	r31, Y+2	; 0x02
     664:	84 81       	ldd	r24, Z+4	; 0x04
     666:	88 2f       	mov	r24, r24
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	a0 e0       	ldi	r26, 0x00	; 0
     66c:	b0 e0       	ldi	r27, 0x00	; 0
     66e:	28 0f       	add	r18, r24
     670:	39 1f       	adc	r19, r25
     672:	4a 1f       	adc	r20, r26
     674:	5b 1f       	adc	r21, r27
     676:	80 91 1c 03 	lds	r24, 0x031C
     67a:	90 91 1d 03 	lds	r25, 0x031D
     67e:	a0 91 1e 03 	lds	r26, 0x031E
     682:	b0 91 1f 03 	lds	r27, 0x031F
     686:	82 17       	cp	r24, r18
     688:	93 07       	cpc	r25, r19
     68a:	a4 07       	cpc	r26, r20
     68c:	b5 07       	cpc	r27, r21
     68e:	04 f1       	brlt	.+64     	; 0x6d0 <Handle_steps+0x9c>
    {
        step(*stepperino);
     690:	e9 81       	ldd	r30, Y+1	; 0x01
     692:	fa 81       	ldd	r31, Y+2	; 0x02
     694:	00 81       	ld	r16, Z
     696:	11 81       	ldd	r17, Z+1	; 0x01
     698:	22 81       	ldd	r18, Z+2	; 0x02
     69a:	33 81       	ldd	r19, Z+3	; 0x03
     69c:	44 81       	ldd	r20, Z+4	; 0x04
     69e:	55 81       	ldd	r21, Z+5	; 0x05
     6a0:	66 81       	ldd	r22, Z+6	; 0x06
     6a2:	77 81       	ldd	r23, Z+7	; 0x07
     6a4:	80 85       	ldd	r24, Z+8	; 0x08
     6a6:	91 85       	ldd	r25, Z+9	; 0x09
     6a8:	0e 94 24 01 	call	0x248	; 0x248 <step>
        stepperino->last_step = ms;
     6ac:	80 91 1c 03 	lds	r24, 0x031C
     6b0:	90 91 1d 03 	lds	r25, 0x031D
     6b4:	a0 91 1e 03 	lds	r26, 0x031E
     6b8:	b0 91 1f 03 	lds	r27, 0x031F
     6bc:	e9 81       	ldd	r30, Y+1	; 0x01
     6be:	fa 81       	ldd	r31, Y+2	; 0x02
     6c0:	80 83       	st	Z, r24
     6c2:	91 83       	std	Z+1, r25	; 0x01
     6c4:	a2 83       	std	Z+2, r26	; 0x02
     6c6:	b3 83       	std	Z+3, r27	; 0x03
        count_steps(stepperino);
     6c8:	89 81       	ldd	r24, Y+1	; 0x01
     6ca:	9a 81       	ldd	r25, Y+2	; 0x02
     6cc:	0e 94 e6 02 	call	0x5cc	; 0x5cc <count_steps>

    }
}
     6d0:	0f 90       	pop	r0
     6d2:	0f 90       	pop	r0
     6d4:	cf 91       	pop	r28
     6d6:	df 91       	pop	r29
     6d8:	1f 91       	pop	r17
     6da:	0f 91       	pop	r16
     6dc:	08 95       	ret

000006de <turn>:

void turn(int16_t degrees, volatile struct stepper *stepperino1, volatile struct stepper *stepperino2)
{
     6de:	df 93       	push	r29
     6e0:	cf 93       	push	r28
     6e2:	cd b7       	in	r28, 0x3d	; 61
     6e4:	de b7       	in	r29, 0x3e	; 62
     6e6:	e2 97       	sbiw	r28, 0x32	; 50
     6e8:	0f b6       	in	r0, 0x3f	; 63
     6ea:	f8 94       	cli
     6ec:	de bf       	out	0x3e, r29	; 62
     6ee:	0f be       	out	0x3f, r0	; 63
     6f0:	cd bf       	out	0x3d, r28	; 61
     6f2:	98 8f       	std	Y+24, r25	; 0x18
     6f4:	8f 8b       	std	Y+23, r24	; 0x17
     6f6:	7a 8f       	std	Y+26, r23	; 0x1a
     6f8:	69 8f       	std	Y+25, r22	; 0x19
     6fa:	5c 8f       	std	Y+28, r21	; 0x1c
     6fc:	4b 8f       	std	Y+27, r20	; 0x1b
    int16_t turn_steps = (float)(0.55)*degrees;
     6fe:	8f 89       	ldd	r24, Y+23	; 0x17
     700:	98 8d       	ldd	r25, Y+24	; 0x18
     702:	aa 27       	eor	r26, r26
     704:	97 fd       	sbrc	r25, 7
     706:	a0 95       	com	r26
     708:	ba 2f       	mov	r27, r26
     70a:	bc 01       	movw	r22, r24
     70c:	cd 01       	movw	r24, r26
     70e:	0e 94 1a 0a 	call	0x1434	; 0x1434 <__floatsisf>
     712:	dc 01       	movw	r26, r24
     714:	cb 01       	movw	r24, r22
     716:	bc 01       	movw	r22, r24
     718:	cd 01       	movw	r24, r26
     71a:	2d ec       	ldi	r18, 0xCD	; 205
     71c:	3c ec       	ldi	r19, 0xCC	; 204
     71e:	4c e0       	ldi	r20, 0x0C	; 12
     720:	5f e3       	ldi	r21, 0x3F	; 63
     722:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <__mulsf3>
     726:	dc 01       	movw	r26, r24
     728:	cb 01       	movw	r24, r22
     72a:	bc 01       	movw	r22, r24
     72c:	cd 01       	movw	r24, r26
     72e:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <__fixsfsi>
     732:	dc 01       	movw	r26, r24
     734:	cb 01       	movw	r24, r22
     736:	9a 83       	std	Y+2, r25	; 0x02
     738:	89 83       	std	Y+1, r24	; 0x01
    struct stepper copy1 = *stepperino1;
     73a:	89 8d       	ldd	r24, Y+25	; 0x19
     73c:	9a 8d       	ldd	r25, Y+26	; 0x1a
     73e:	9e 01       	movw	r18, r28
     740:	2d 5f       	subi	r18, 0xFD	; 253
     742:	3f 4f       	sbci	r19, 0xFF	; 255
     744:	3e 8f       	std	Y+30, r19	; 0x1e
     746:	2d 8f       	std	Y+29, r18	; 0x1d
     748:	98 a3       	std	Y+32, r25	; 0x20
     74a:	8f 8f       	std	Y+31, r24	; 0x1f
     74c:	3a e0       	ldi	r19, 0x0A	; 10
     74e:	39 a3       	std	Y+33, r19	; 0x21
     750:	ef 8d       	ldd	r30, Y+31	; 0x1f
     752:	f8 a1       	ldd	r31, Y+32	; 0x20
     754:	00 80       	ld	r0, Z
     756:	2f 8d       	ldd	r18, Y+31	; 0x1f
     758:	38 a1       	ldd	r19, Y+32	; 0x20
     75a:	2f 5f       	subi	r18, 0xFF	; 255
     75c:	3f 4f       	sbci	r19, 0xFF	; 255
     75e:	38 a3       	std	Y+32, r19	; 0x20
     760:	2f 8f       	std	Y+31, r18	; 0x1f
     762:	ed 8d       	ldd	r30, Y+29	; 0x1d
     764:	fe 8d       	ldd	r31, Y+30	; 0x1e
     766:	00 82       	st	Z, r0
     768:	2d 8d       	ldd	r18, Y+29	; 0x1d
     76a:	3e 8d       	ldd	r19, Y+30	; 0x1e
     76c:	2f 5f       	subi	r18, 0xFF	; 255
     76e:	3f 4f       	sbci	r19, 0xFF	; 255
     770:	3e 8f       	std	Y+30, r19	; 0x1e
     772:	2d 8f       	std	Y+29, r18	; 0x1d
     774:	39 a1       	ldd	r19, Y+33	; 0x21
     776:	31 50       	subi	r19, 0x01	; 1
     778:	39 a3       	std	Y+33, r19	; 0x21
     77a:	89 a1       	ldd	r24, Y+33	; 0x21
     77c:	88 23       	and	r24, r24
     77e:	41 f7       	brne	.-48     	; 0x750 <turn+0x72>
    struct stepper copy2 = *stepperino2;
     780:	8b 8d       	ldd	r24, Y+27	; 0x1b
     782:	9c 8d       	ldd	r25, Y+28	; 0x1c
     784:	fe 01       	movw	r30, r28
     786:	3d 96       	adiw	r30, 0x0d	; 13
     788:	fb a3       	std	Y+35, r31	; 0x23
     78a:	ea a3       	std	Y+34, r30	; 0x22
     78c:	9d a3       	std	Y+37, r25	; 0x25
     78e:	8c a3       	std	Y+36, r24	; 0x24
     790:	fa e0       	ldi	r31, 0x0A	; 10
     792:	fe a3       	std	Y+38, r31	; 0x26
     794:	ec a1       	ldd	r30, Y+36	; 0x24
     796:	fd a1       	ldd	r31, Y+37	; 0x25
     798:	00 80       	ld	r0, Z
     79a:	2c a1       	ldd	r18, Y+36	; 0x24
     79c:	3d a1       	ldd	r19, Y+37	; 0x25
     79e:	2f 5f       	subi	r18, 0xFF	; 255
     7a0:	3f 4f       	sbci	r19, 0xFF	; 255
     7a2:	3d a3       	std	Y+37, r19	; 0x25
     7a4:	2c a3       	std	Y+36, r18	; 0x24
     7a6:	ea a1       	ldd	r30, Y+34	; 0x22
     7a8:	fb a1       	ldd	r31, Y+35	; 0x23
     7aa:	00 82       	st	Z, r0
     7ac:	2a a1       	ldd	r18, Y+34	; 0x22
     7ae:	3b a1       	ldd	r19, Y+35	; 0x23
     7b0:	2f 5f       	subi	r18, 0xFF	; 255
     7b2:	3f 4f       	sbci	r19, 0xFF	; 255
     7b4:	3b a3       	std	Y+35, r19	; 0x23
     7b6:	2a a3       	std	Y+34, r18	; 0x22
     7b8:	3e a1       	ldd	r19, Y+38	; 0x26
     7ba:	31 50       	subi	r19, 0x01	; 1
     7bc:	3e a3       	std	Y+38, r19	; 0x26
     7be:	8e a1       	ldd	r24, Y+38	; 0x26
     7c0:	88 23       	and	r24, r24
     7c2:	41 f7       	brne	.-48     	; 0x794 <turn+0xb6>

        stepperino1->time_profile = 10;
     7c4:	e9 8d       	ldd	r30, Y+25	; 0x19
     7c6:	fa 8d       	ldd	r31, Y+26	; 0x1a
     7c8:	8a e0       	ldi	r24, 0x0A	; 10
     7ca:	84 83       	std	Z+4, r24	; 0x04
        stepperino1->steps = 0;
     7cc:	e9 8d       	ldd	r30, Y+25	; 0x19
     7ce:	fa 8d       	ldd	r31, Y+26	; 0x1a
     7d0:	11 86       	std	Z+9, r1	; 0x09
     7d2:	10 86       	std	Z+8, r1	; 0x08
        stepperino2->time_profile = 10;
     7d4:	eb 8d       	ldd	r30, Y+27	; 0x1b
     7d6:	fc 8d       	ldd	r31, Y+28	; 0x1c
     7d8:	8a e0       	ldi	r24, 0x0A	; 10
     7da:	84 83       	std	Z+4, r24	; 0x04
        stepperino2->steps = 0;
     7dc:	eb 8d       	ldd	r30, Y+27	; 0x1b
     7de:	fc 8d       	ldd	r31, Y+28	; 0x1c
     7e0:	11 86       	std	Z+9, r1	; 0x09
     7e2:	10 86       	std	Z+8, r1	; 0x08

    if(turn_steps > 0)
     7e4:	89 81       	ldd	r24, Y+1	; 0x01
     7e6:	9a 81       	ldd	r25, Y+2	; 0x02
     7e8:	18 16       	cp	r1, r24
     7ea:	19 06       	cpc	r1, r25
     7ec:	14 f5       	brge	.+68     	; 0x832 <turn+0x154>
    {
        stepperino1->direction = forward;
     7ee:	e9 8d       	ldd	r30, Y+25	; 0x19
     7f0:	fa 8d       	ldd	r31, Y+26	; 0x1a
     7f2:	81 e0       	ldi	r24, 0x01	; 1
     7f4:	85 83       	std	Z+5, r24	; 0x05
        stepperino2->direction = backward;
     7f6:	eb 8d       	ldd	r30, Y+27	; 0x1b
     7f8:	fc 8d       	ldd	r31, Y+28	; 0x1c
     7fa:	82 e0       	ldi	r24, 0x02	; 2
     7fc:	85 83       	std	Z+5, r24	; 0x05
        set_dir(stepperino1);
     7fe:	89 8d       	ldd	r24, Y+25	; 0x19
     800:	9a 8d       	ldd	r25, Y+26	; 0x1a
     802:	0e 94 d7 00 	call	0x1ae	; 0x1ae <set_dir>
        set_dir(stepperino2);
     806:	8b 8d       	ldd	r24, Y+27	; 0x1b
     808:	9c 8d       	ldd	r25, Y+28	; 0x1c
     80a:	0e 94 d7 00 	call	0x1ae	; 0x1ae <set_dir>
     80e:	08 c0       	rjmp	.+16     	; 0x820 <turn+0x142>

        while(stepperino1->steps <= (int)turn_steps)
        {
        Handle_steps(stepperino1);
     810:	89 8d       	ldd	r24, Y+25	; 0x19
     812:	9a 8d       	ldd	r25, Y+26	; 0x1a
     814:	0e 94 1a 03 	call	0x634	; 0x634 <Handle_steps>
        Handle_steps(stepperino2);
     818:	8b 8d       	ldd	r24, Y+27	; 0x1b
     81a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     81c:	0e 94 1a 03 	call	0x634	; 0x634 <Handle_steps>
        stepperino1->direction = forward;
        stepperino2->direction = backward;
        set_dir(stepperino1);
        set_dir(stepperino2);

        while(stepperino1->steps <= (int)turn_steps)
     820:	e9 8d       	ldd	r30, Y+25	; 0x19
     822:	fa 8d       	ldd	r31, Y+26	; 0x1a
     824:	20 85       	ldd	r18, Z+8	; 0x08
     826:	31 85       	ldd	r19, Z+9	; 0x09
     828:	89 81       	ldd	r24, Y+1	; 0x01
     82a:	9a 81       	ldd	r25, Y+2	; 0x02
     82c:	82 17       	cp	r24, r18
     82e:	93 07       	cpc	r25, r19
     830:	78 f7       	brcc	.-34     	; 0x810 <turn+0x132>
        Handle_steps(stepperino1);
        Handle_steps(stepperino2);
        }
    }

    if(turn_steps < 0)
     832:	89 81       	ldd	r24, Y+1	; 0x01
     834:	9a 81       	ldd	r25, Y+2	; 0x02
     836:	99 23       	and	r25, r25
     838:	ac f5       	brge	.+106    	; 0x8a4 <turn+0x1c6>
    {
        turn_steps = abs(turn_steps);
     83a:	e9 81       	ldd	r30, Y+1	; 0x01
     83c:	fa 81       	ldd	r31, Y+2	; 0x02
     83e:	f8 a7       	std	Y+40, r31	; 0x28
     840:	ef a3       	std	Y+39, r30	; 0x27
     842:	2f a1       	ldd	r18, Y+39	; 0x27
     844:	38 a5       	ldd	r19, Y+40	; 0x28
     846:	33 23       	and	r19, r19
     848:	3c f4       	brge	.+14     	; 0x858 <turn+0x17a>
     84a:	8f a1       	ldd	r24, Y+39	; 0x27
     84c:	98 a5       	ldd	r25, Y+40	; 0x28
     84e:	90 95       	com	r25
     850:	81 95       	neg	r24
     852:	9f 4f       	sbci	r25, 0xFF	; 255
     854:	98 a7       	std	Y+40, r25	; 0x28
     856:	8f a3       	std	Y+39, r24	; 0x27
     858:	ef a1       	ldd	r30, Y+39	; 0x27
     85a:	f8 a5       	ldd	r31, Y+40	; 0x28
     85c:	fa 83       	std	Y+2, r31	; 0x02
     85e:	e9 83       	std	Y+1, r30	; 0x01
        stepperino1->direction = backward;
     860:	e9 8d       	ldd	r30, Y+25	; 0x19
     862:	fa 8d       	ldd	r31, Y+26	; 0x1a
     864:	82 e0       	ldi	r24, 0x02	; 2
     866:	85 83       	std	Z+5, r24	; 0x05
        stepperino2->direction = forward;
     868:	eb 8d       	ldd	r30, Y+27	; 0x1b
     86a:	fc 8d       	ldd	r31, Y+28	; 0x1c
     86c:	81 e0       	ldi	r24, 0x01	; 1
     86e:	85 83       	std	Z+5, r24	; 0x05
        set_dir(stepperino1);
     870:	89 8d       	ldd	r24, Y+25	; 0x19
     872:	9a 8d       	ldd	r25, Y+26	; 0x1a
     874:	0e 94 d7 00 	call	0x1ae	; 0x1ae <set_dir>
        set_dir(stepperino2);
     878:	8b 8d       	ldd	r24, Y+27	; 0x1b
     87a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     87c:	0e 94 d7 00 	call	0x1ae	; 0x1ae <set_dir>
     880:	08 c0       	rjmp	.+16     	; 0x892 <turn+0x1b4>

        while(stepperino2->steps <= turn_steps)
        {
        //transmit_byte(turn_steps);
        Handle_steps(stepperino1);
     882:	89 8d       	ldd	r24, Y+25	; 0x19
     884:	9a 8d       	ldd	r25, Y+26	; 0x1a
     886:	0e 94 1a 03 	call	0x634	; 0x634 <Handle_steps>
        Handle_steps(stepperino2);
     88a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     88c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     88e:	0e 94 1a 03 	call	0x634	; 0x634 <Handle_steps>
        stepperino1->direction = backward;
        stepperino2->direction = forward;
        set_dir(stepperino1);
        set_dir(stepperino2);

        while(stepperino2->steps <= turn_steps)
     892:	eb 8d       	ldd	r30, Y+27	; 0x1b
     894:	fc 8d       	ldd	r31, Y+28	; 0x1c
     896:	20 85       	ldd	r18, Z+8	; 0x08
     898:	31 85       	ldd	r19, Z+9	; 0x09
     89a:	89 81       	ldd	r24, Y+1	; 0x01
     89c:	9a 81       	ldd	r25, Y+2	; 0x02
     89e:	82 17       	cp	r24, r18
     8a0:	93 07       	cpc	r25, r19
     8a2:	78 f7       	brcc	.-34     	; 0x882 <turn+0x1a4>
        //transmit_byte(turn_steps);
        Handle_steps(stepperino1);
        Handle_steps(stepperino2);
        }
    }
        *stepperino1 = copy1;
     8a4:	89 8d       	ldd	r24, Y+25	; 0x19
     8a6:	9a 8d       	ldd	r25, Y+26	; 0x1a
     8a8:	9a a7       	std	Y+42, r25	; 0x2a
     8aa:	89 a7       	std	Y+41, r24	; 0x29
     8ac:	9e 01       	movw	r18, r28
     8ae:	2d 5f       	subi	r18, 0xFD	; 253
     8b0:	3f 4f       	sbci	r19, 0xFF	; 255
     8b2:	3c a7       	std	Y+44, r19	; 0x2c
     8b4:	2b a7       	std	Y+43, r18	; 0x2b
     8b6:	3a e0       	ldi	r19, 0x0A	; 10
     8b8:	3d a7       	std	Y+45, r19	; 0x2d
     8ba:	eb a5       	ldd	r30, Y+43	; 0x2b
     8bc:	fc a5       	ldd	r31, Y+44	; 0x2c
     8be:	00 80       	ld	r0, Z
     8c0:	2b a5       	ldd	r18, Y+43	; 0x2b
     8c2:	3c a5       	ldd	r19, Y+44	; 0x2c
     8c4:	2f 5f       	subi	r18, 0xFF	; 255
     8c6:	3f 4f       	sbci	r19, 0xFF	; 255
     8c8:	3c a7       	std	Y+44, r19	; 0x2c
     8ca:	2b a7       	std	Y+43, r18	; 0x2b
     8cc:	e9 a5       	ldd	r30, Y+41	; 0x29
     8ce:	fa a5       	ldd	r31, Y+42	; 0x2a
     8d0:	00 82       	st	Z, r0
     8d2:	29 a5       	ldd	r18, Y+41	; 0x29
     8d4:	3a a5       	ldd	r19, Y+42	; 0x2a
     8d6:	2f 5f       	subi	r18, 0xFF	; 255
     8d8:	3f 4f       	sbci	r19, 0xFF	; 255
     8da:	3a a7       	std	Y+42, r19	; 0x2a
     8dc:	29 a7       	std	Y+41, r18	; 0x29
     8de:	3d a5       	ldd	r19, Y+45	; 0x2d
     8e0:	31 50       	subi	r19, 0x01	; 1
     8e2:	3d a7       	std	Y+45, r19	; 0x2d
     8e4:	8d a5       	ldd	r24, Y+45	; 0x2d
     8e6:	88 23       	and	r24, r24
     8e8:	41 f7       	brne	.-48     	; 0x8ba <turn+0x1dc>
        *stepperino2 = copy2;
     8ea:	8b 8d       	ldd	r24, Y+27	; 0x1b
     8ec:	9c 8d       	ldd	r25, Y+28	; 0x1c
     8ee:	9f a7       	std	Y+47, r25	; 0x2f
     8f0:	8e a7       	std	Y+46, r24	; 0x2e
     8f2:	fe 01       	movw	r30, r28
     8f4:	3d 96       	adiw	r30, 0x0d	; 13
     8f6:	f9 ab       	std	Y+49, r31	; 0x31
     8f8:	e8 ab       	std	Y+48, r30	; 0x30
     8fa:	fa e0       	ldi	r31, 0x0A	; 10
     8fc:	fa ab       	std	Y+50, r31	; 0x32
     8fe:	e8 a9       	ldd	r30, Y+48	; 0x30
     900:	f9 a9       	ldd	r31, Y+49	; 0x31
     902:	00 80       	ld	r0, Z
     904:	28 a9       	ldd	r18, Y+48	; 0x30
     906:	39 a9       	ldd	r19, Y+49	; 0x31
     908:	2f 5f       	subi	r18, 0xFF	; 255
     90a:	3f 4f       	sbci	r19, 0xFF	; 255
     90c:	39 ab       	std	Y+49, r19	; 0x31
     90e:	28 ab       	std	Y+48, r18	; 0x30
     910:	ee a5       	ldd	r30, Y+46	; 0x2e
     912:	ff a5       	ldd	r31, Y+47	; 0x2f
     914:	00 82       	st	Z, r0
     916:	2e a5       	ldd	r18, Y+46	; 0x2e
     918:	3f a5       	ldd	r19, Y+47	; 0x2f
     91a:	2f 5f       	subi	r18, 0xFF	; 255
     91c:	3f 4f       	sbci	r19, 0xFF	; 255
     91e:	3f a7       	std	Y+47, r19	; 0x2f
     920:	2e a7       	std	Y+46, r18	; 0x2e
     922:	3a a9       	ldd	r19, Y+50	; 0x32
     924:	31 50       	subi	r19, 0x01	; 1
     926:	3a ab       	std	Y+50, r19	; 0x32
     928:	8a a9       	ldd	r24, Y+50	; 0x32
     92a:	88 23       	and	r24, r24
     92c:	41 f7       	brne	.-48     	; 0x8fe <turn+0x220>
}
     92e:	e2 96       	adiw	r28, 0x32	; 50
     930:	0f b6       	in	r0, 0x3f	; 63
     932:	f8 94       	cli
     934:	de bf       	out	0x3e, r29	; 62
     936:	0f be       	out	0x3f, r0	; 63
     938:	cd bf       	out	0x3d, r28	; 61
     93a:	cf 91       	pop	r28
     93c:	df 91       	pop	r29
     93e:	08 95       	ret

00000940 <init_stepper_timer0>:

void init_stepper_timer0()
{
     940:	df 93       	push	r29
     942:	cf 93       	push	r28
     944:	cd b7       	in	r28, 0x3d	; 61
     946:	de b7       	in	r29, 0x3e	; 62
    TCCR0A |= (0<<WGM01) | (0<<WGM00);
     948:	a4 e4       	ldi	r26, 0x44	; 68
     94a:	b0 e0       	ldi	r27, 0x00	; 0
     94c:	e4 e4       	ldi	r30, 0x44	; 68
     94e:	f0 e0       	ldi	r31, 0x00	; 0
     950:	80 81       	ld	r24, Z
     952:	8c 93       	st	X, r24
    TCCR0B |= (0<<WGM02) | (1<<CS02) | (0<<CS01) | (0<<CS00);
     954:	a5 e4       	ldi	r26, 0x45	; 69
     956:	b0 e0       	ldi	r27, 0x00	; 0
     958:	e5 e4       	ldi	r30, 0x45	; 69
     95a:	f0 e0       	ldi	r31, 0x00	; 0
     95c:	80 81       	ld	r24, Z
     95e:	84 60       	ori	r24, 0x04	; 4
     960:	8c 93       	st	X, r24
    TIMSK0 |= (1<<TOIE0);
     962:	ae e6       	ldi	r26, 0x6E	; 110
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	ee e6       	ldi	r30, 0x6E	; 110
     968:	f0 e0       	ldi	r31, 0x00	; 0
     96a:	80 81       	ld	r24, Z
     96c:	81 60       	ori	r24, 0x01	; 1
     96e:	8c 93       	st	X, r24
}
     970:	cf 91       	pop	r28
     972:	df 91       	pop	r29
     974:	08 95       	ret

00000976 <main>:

int main(void)
{
     976:	df 93       	push	r29
     978:	cf 93       	push	r28
     97a:	cd b7       	in	r28, 0x3d	; 61
     97c:	de b7       	in	r29, 0x3e	; 62
    ///initializing stepper motors///
    construct_stepper(&stepper1, PK0, PK1);
     97e:	82 e1       	ldi	r24, 0x12	; 18
     980:	93 e0       	ldi	r25, 0x03	; 3
     982:	60 e0       	ldi	r22, 0x00	; 0
     984:	41 e0       	ldi	r20, 0x01	; 1
     986:	0e 94 95 00 	call	0x12a	; 0x12a <construct_stepper>
    construct_stepper(&stepper2, PK2, PK3);
     98a:	88 e0       	ldi	r24, 0x08	; 8
     98c:	93 e0       	ldi	r25, 0x03	; 3
     98e:	62 e0       	ldi	r22, 0x02	; 2
     990:	43 e0       	ldi	r20, 0x03	; 3
     992:	0e 94 95 00 	call	0x12a	; 0x12a <construct_stepper>
    initialize_steppers();
     996:	0e 94 c7 00 	call	0x18e	; 0x18e <initialize_steppers>
    init_stepper_timer0();
     99a:	0e 94 a0 04 	call	0x940	; 0x940 <init_stepper_timer0>
    sei();
     99e:	78 94       	sei

    ///initializing serial coms
    USART_Init(MYUBRR);
     9a0:	87 e6       	ldi	r24, 0x67	; 103
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	0e 94 1c 05 	call	0xa38	; 0xa38 <USART_Init>
    stepper2.direction = forward;
     9a8:	81 e0       	ldi	r24, 0x01	; 1
     9aa:	80 93 0d 03 	sts	0x030D, r24
    stepper1.direction = forward;
     9ae:	81 e0       	ldi	r24, 0x01	; 1
     9b0:	80 93 17 03 	sts	0x0317, r24

    stepper1.time_profile = 3;
     9b4:	83 e0       	ldi	r24, 0x03	; 3
     9b6:	80 93 16 03 	sts	0x0316, r24
    stepper2.time_profile = 3;
     9ba:	83 e0       	ldi	r24, 0x03	; 3
     9bc:	80 93 0c 03 	sts	0x030C, r24

    //turn(90, &stepper1, &stepper2);
    while(1)
    {
        Handle_steps(&stepper1);
     9c0:	82 e1       	ldi	r24, 0x12	; 18
     9c2:	93 e0       	ldi	r25, 0x03	; 3
     9c4:	0e 94 1a 03 	call	0x634	; 0x634 <Handle_steps>
        Handle_steps(&stepper2);
     9c8:	88 e0       	ldi	r24, 0x08	; 8
     9ca:	93 e0       	ldi	r25, 0x03	; 3
     9cc:	0e 94 1a 03 	call	0x634	; 0x634 <Handle_steps>
        set_dir(&stepper1);
     9d0:	82 e1       	ldi	r24, 0x12	; 18
     9d2:	93 e0       	ldi	r25, 0x03	; 3
     9d4:	0e 94 d7 00 	call	0x1ae	; 0x1ae <set_dir>
        set_dir(&stepper2);
     9d8:	88 e0       	ldi	r24, 0x08	; 8
     9da:	93 e0       	ldi	r25, 0x03	; 3
     9dc:	0e 94 d7 00 	call	0x1ae	; 0x1ae <set_dir>
     9e0:	ef cf       	rjmp	.-34     	; 0x9c0 <main+0x4a>

000009e2 <__vector_23>:

    return 0;
}

ISR(TIMER0_OVF_vect)
{
     9e2:	1f 92       	push	r1
     9e4:	0f 92       	push	r0
     9e6:	0f b6       	in	r0, 0x3f	; 63
     9e8:	0f 92       	push	r0
     9ea:	11 24       	eor	r1, r1
     9ec:	8f 93       	push	r24
     9ee:	9f 93       	push	r25
     9f0:	af 93       	push	r26
     9f2:	bf 93       	push	r27
     9f4:	df 93       	push	r29
     9f6:	cf 93       	push	r28
     9f8:	cd b7       	in	r28, 0x3d	; 61
     9fa:	de b7       	in	r29, 0x3e	; 62
    ms++;
     9fc:	80 91 1c 03 	lds	r24, 0x031C
     a00:	90 91 1d 03 	lds	r25, 0x031D
     a04:	a0 91 1e 03 	lds	r26, 0x031E
     a08:	b0 91 1f 03 	lds	r27, 0x031F
     a0c:	01 96       	adiw	r24, 0x01	; 1
     a0e:	a1 1d       	adc	r26, r1
     a10:	b1 1d       	adc	r27, r1
     a12:	80 93 1c 03 	sts	0x031C, r24
     a16:	90 93 1d 03 	sts	0x031D, r25
     a1a:	a0 93 1e 03 	sts	0x031E, r26
     a1e:	b0 93 1f 03 	sts	0x031F, r27
}
     a22:	cf 91       	pop	r28
     a24:	df 91       	pop	r29
     a26:	bf 91       	pop	r27
     a28:	af 91       	pop	r26
     a2a:	9f 91       	pop	r25
     a2c:	8f 91       	pop	r24
     a2e:	0f 90       	pop	r0
     a30:	0f be       	out	0x3f, r0	; 63
     a32:	0f 90       	pop	r0
     a34:	1f 90       	pop	r1
     a36:	18 95       	reti

00000a38 <USART_Init>:

#include "serial.h"

void USART_Init( unsigned int ubrr)
{
     a38:	df 93       	push	r29
     a3a:	cf 93       	push	r28
     a3c:	0f 92       	push	r0
     a3e:	0f 92       	push	r0
     a40:	cd b7       	in	r28, 0x3d	; 61
     a42:	de b7       	in	r29, 0x3e	; 62
     a44:	9a 83       	std	Y+2, r25	; 0x02
     a46:	89 83       	std	Y+1, r24	; 0x01
    /*Set baud rate */
    UBRR0H = (unsigned char)(ubrr>>8);
     a48:	e5 ec       	ldi	r30, 0xC5	; 197
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	89 81       	ldd	r24, Y+1	; 0x01
     a4e:	9a 81       	ldd	r25, Y+2	; 0x02
     a50:	89 2f       	mov	r24, r25
     a52:	99 27       	eor	r25, r25
     a54:	80 83       	st	Z, r24
    UBRR0L = (unsigned char)ubrr;
     a56:	e4 ec       	ldi	r30, 0xC4	; 196
     a58:	f0 e0       	ldi	r31, 0x00	; 0
     a5a:	89 81       	ldd	r24, Y+1	; 0x01
     a5c:	80 83       	st	Z, r24
    /*Enable receiver and transmitter */
    UCSR0B |= (1<<RXEN0);
     a5e:	a1 ec       	ldi	r26, 0xC1	; 193
     a60:	b0 e0       	ldi	r27, 0x00	; 0
     a62:	e1 ec       	ldi	r30, 0xC1	; 193
     a64:	f0 e0       	ldi	r31, 0x00	; 0
     a66:	80 81       	ld	r24, Z
     a68:	80 61       	ori	r24, 0x10	; 16
     a6a:	8c 93       	st	X, r24
    UCSR0B |= (1<<TXEN0);
     a6c:	a1 ec       	ldi	r26, 0xC1	; 193
     a6e:	b0 e0       	ldi	r27, 0x00	; 0
     a70:	e1 ec       	ldi	r30, 0xC1	; 193
     a72:	f0 e0       	ldi	r31, 0x00	; 0
     a74:	80 81       	ld	r24, Z
     a76:	88 60       	ori	r24, 0x08	; 8
     a78:	8c 93       	st	X, r24
    /* Set frame format: 8data, 2stop bit */
    UCSR0C = (1<<UCSZ01)|(3<<UCSZ00);
     a7a:	e2 ec       	ldi	r30, 0xC2	; 194
     a7c:	f0 e0       	ldi	r31, 0x00	; 0
     a7e:	86 e0       	ldi	r24, 0x06	; 6
     a80:	80 83       	st	Z, r24
}
     a82:	0f 90       	pop	r0
     a84:	0f 90       	pop	r0
     a86:	cf 91       	pop	r28
     a88:	df 91       	pop	r29
     a8a:	08 95       	ret

00000a8c <recieve_Byte>:


uint8_t recieve_Byte(void)
{
     a8c:	df 93       	push	r29
     a8e:	cf 93       	push	r28
     a90:	cd b7       	in	r28, 0x3d	; 61
     a92:	de b7       	in	r29, 0x3e	; 62
    //moet worden vervangen met if. anders blijft de code hier hangen. als het aankomt blijft het toch in UDR0 staan totdat het wordt uitgelezen.
    loop_until_bit_is_set(UCSR0A, RXC0);
     a94:	e0 ec       	ldi	r30, 0xC0	; 192
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	80 81       	ld	r24, Z
     a9a:	88 23       	and	r24, r24
     a9c:	dc f7       	brge	.-10     	; 0xa94 <recieve_Byte+0x8>
    {
     return UDR0;
     a9e:	e6 ec       	ldi	r30, 0xC6	; 198
     aa0:	f0 e0       	ldi	r31, 0x00	; 0
     aa2:	80 81       	ld	r24, Z
    }
    /*else
    {
        return -1;
    }*/
}
     aa4:	cf 91       	pop	r28
     aa6:	df 91       	pop	r29
     aa8:	08 95       	ret

00000aaa <transmit_byte>:

void transmit_byte(uint8_t byte)
{
     aaa:	df 93       	push	r29
     aac:	cf 93       	push	r28
     aae:	0f 92       	push	r0
     ab0:	cd b7       	in	r28, 0x3d	; 61
     ab2:	de b7       	in	r29, 0x3e	; 62
     ab4:	89 83       	std	Y+1, r24	; 0x01
    //vervangen met if
    loop_until_bit_is_set(UCSR0A, UDRE0);
     ab6:	e0 ec       	ldi	r30, 0xC0	; 192
     ab8:	f0 e0       	ldi	r31, 0x00	; 0
     aba:	80 81       	ld	r24, Z
     abc:	88 2f       	mov	r24, r24
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	80 72       	andi	r24, 0x20	; 32
     ac2:	90 70       	andi	r25, 0x00	; 0
     ac4:	00 97       	sbiw	r24, 0x00	; 0
     ac6:	b9 f3       	breq	.-18     	; 0xab6 <transmit_byte+0xc>
    UDR0 = byte;
     ac8:	e6 ec       	ldi	r30, 0xC6	; 198
     aca:	f0 e0       	ldi	r31, 0x00	; 0
     acc:	89 81       	ldd	r24, Y+1	; 0x01
     ace:	80 83       	st	Z, r24

}
     ad0:	0f 90       	pop	r0
     ad2:	cf 91       	pop	r28
     ad4:	df 91       	pop	r29
     ad6:	08 95       	ret

00000ad8 <print_byte>:

void print_byte(uint32_t byte)
{
     ad8:	df 93       	push	r29
     ada:	cf 93       	push	r28
     adc:	00 d0       	rcall	.+0      	; 0xade <print_byte+0x6>
     ade:	0f 92       	push	r0
     ae0:	cd b7       	in	r28, 0x3d	; 61
     ae2:	de b7       	in	r29, 0x3e	; 62
     ae4:	69 83       	std	Y+1, r22	; 0x01
     ae6:	7a 83       	std	Y+2, r23	; 0x02
     ae8:	8b 83       	std	Y+3, r24	; 0x03
     aea:	9c 83       	std	Y+4, r25	; 0x04
    //werkt niet zoals het hoort. volgorde verkeert?
    transmit_byte((byte/1000)%10);
     aec:	89 81       	ldd	r24, Y+1	; 0x01
     aee:	9a 81       	ldd	r25, Y+2	; 0x02
     af0:	ab 81       	ldd	r26, Y+3	; 0x03
     af2:	bc 81       	ldd	r27, Y+4	; 0x04
     af4:	28 ee       	ldi	r18, 0xE8	; 232
     af6:	33 e0       	ldi	r19, 0x03	; 3
     af8:	40 e0       	ldi	r20, 0x00	; 0
     afa:	50 e0       	ldi	r21, 0x00	; 0
     afc:	bc 01       	movw	r22, r24
     afe:	cd 01       	movw	r24, r26
     b00:	0e 94 c1 0c 	call	0x1982	; 0x1982 <__udivmodsi4>
     b04:	da 01       	movw	r26, r20
     b06:	c9 01       	movw	r24, r18
     b08:	2a e0       	ldi	r18, 0x0A	; 10
     b0a:	30 e0       	ldi	r19, 0x00	; 0
     b0c:	40 e0       	ldi	r20, 0x00	; 0
     b0e:	50 e0       	ldi	r21, 0x00	; 0
     b10:	bc 01       	movw	r22, r24
     b12:	cd 01       	movw	r24, r26
     b14:	0e 94 c1 0c 	call	0x1982	; 0x1982 <__udivmodsi4>
     b18:	dc 01       	movw	r26, r24
     b1a:	cb 01       	movw	r24, r22
     b1c:	0e 94 55 05 	call	0xaaa	; 0xaaa <transmit_byte>
    transmit_byte((byte/100)%10);
     b20:	89 81       	ldd	r24, Y+1	; 0x01
     b22:	9a 81       	ldd	r25, Y+2	; 0x02
     b24:	ab 81       	ldd	r26, Y+3	; 0x03
     b26:	bc 81       	ldd	r27, Y+4	; 0x04
     b28:	24 e6       	ldi	r18, 0x64	; 100
     b2a:	30 e0       	ldi	r19, 0x00	; 0
     b2c:	40 e0       	ldi	r20, 0x00	; 0
     b2e:	50 e0       	ldi	r21, 0x00	; 0
     b30:	bc 01       	movw	r22, r24
     b32:	cd 01       	movw	r24, r26
     b34:	0e 94 c1 0c 	call	0x1982	; 0x1982 <__udivmodsi4>
     b38:	da 01       	movw	r26, r20
     b3a:	c9 01       	movw	r24, r18
     b3c:	2a e0       	ldi	r18, 0x0A	; 10
     b3e:	30 e0       	ldi	r19, 0x00	; 0
     b40:	40 e0       	ldi	r20, 0x00	; 0
     b42:	50 e0       	ldi	r21, 0x00	; 0
     b44:	bc 01       	movw	r22, r24
     b46:	cd 01       	movw	r24, r26
     b48:	0e 94 c1 0c 	call	0x1982	; 0x1982 <__udivmodsi4>
     b4c:	dc 01       	movw	r26, r24
     b4e:	cb 01       	movw	r24, r22
     b50:	0e 94 55 05 	call	0xaaa	; 0xaaa <transmit_byte>
    transmit_byte((byte/10)%10);
     b54:	89 81       	ldd	r24, Y+1	; 0x01
     b56:	9a 81       	ldd	r25, Y+2	; 0x02
     b58:	ab 81       	ldd	r26, Y+3	; 0x03
     b5a:	bc 81       	ldd	r27, Y+4	; 0x04
     b5c:	2a e0       	ldi	r18, 0x0A	; 10
     b5e:	30 e0       	ldi	r19, 0x00	; 0
     b60:	40 e0       	ldi	r20, 0x00	; 0
     b62:	50 e0       	ldi	r21, 0x00	; 0
     b64:	bc 01       	movw	r22, r24
     b66:	cd 01       	movw	r24, r26
     b68:	0e 94 c1 0c 	call	0x1982	; 0x1982 <__udivmodsi4>
     b6c:	da 01       	movw	r26, r20
     b6e:	c9 01       	movw	r24, r18
     b70:	2a e0       	ldi	r18, 0x0A	; 10
     b72:	30 e0       	ldi	r19, 0x00	; 0
     b74:	40 e0       	ldi	r20, 0x00	; 0
     b76:	50 e0       	ldi	r21, 0x00	; 0
     b78:	bc 01       	movw	r22, r24
     b7a:	cd 01       	movw	r24, r26
     b7c:	0e 94 c1 0c 	call	0x1982	; 0x1982 <__udivmodsi4>
     b80:	dc 01       	movw	r26, r24
     b82:	cb 01       	movw	r24, r22
     b84:	0e 94 55 05 	call	0xaaa	; 0xaaa <transmit_byte>
    transmit_byte((byte%10));
     b88:	89 81       	ldd	r24, Y+1	; 0x01
     b8a:	9a 81       	ldd	r25, Y+2	; 0x02
     b8c:	ab 81       	ldd	r26, Y+3	; 0x03
     b8e:	bc 81       	ldd	r27, Y+4	; 0x04
     b90:	2a e0       	ldi	r18, 0x0A	; 10
     b92:	30 e0       	ldi	r19, 0x00	; 0
     b94:	40 e0       	ldi	r20, 0x00	; 0
     b96:	50 e0       	ldi	r21, 0x00	; 0
     b98:	bc 01       	movw	r22, r24
     b9a:	cd 01       	movw	r24, r26
     b9c:	0e 94 c1 0c 	call	0x1982	; 0x1982 <__udivmodsi4>
     ba0:	dc 01       	movw	r26, r24
     ba2:	cb 01       	movw	r24, r22
     ba4:	0e 94 55 05 	call	0xaaa	; 0xaaa <transmit_byte>
    transmit_byte(0xA5);
     ba8:	85 ea       	ldi	r24, 0xA5	; 165
     baa:	0e 94 55 05 	call	0xaaa	; 0xaaa <transmit_byte>
}
     bae:	0f 90       	pop	r0
     bb0:	0f 90       	pop	r0
     bb2:	0f 90       	pop	r0
     bb4:	0f 90       	pop	r0
     bb6:	cf 91       	pop	r28
     bb8:	df 91       	pop	r29
     bba:	08 95       	ret

00000bbc <recieve_string>:



void recieve_string(char code[])
{
     bbc:	df 93       	push	r29
     bbe:	cf 93       	push	r28
     bc0:	00 d0       	rcall	.+0      	; 0xbc2 <recieve_string+0x6>
     bc2:	0f 92       	push	r0
     bc4:	0f 92       	push	r0
     bc6:	cd b7       	in	r28, 0x3d	; 61
     bc8:	de b7       	in	r29, 0x3e	; 62
     bca:	9d 83       	std	Y+5, r25	; 0x05
     bcc:	8c 83       	std	Y+4, r24	; 0x04
    //code ontworpen voor een GPS module. dollar teken is begin van de string. kan wel gebruikt worden voor het onvangen van complexe instructies.
    char byte = recieve_Byte();
     bce:	0e 94 46 05 	call	0xa8c	; 0xa8c <recieve_Byte>
     bd2:	8b 83       	std	Y+3, r24	; 0x03
    if(byte == '$')
     bd4:	8b 81       	ldd	r24, Y+3	; 0x03
     bd6:	84 32       	cpi	r24, 0x24	; 36
     bd8:	c9 f4       	brne	.+50     	; 0xc0c <recieve_string+0x50>
    {
        int x = 1;
     bda:	81 e0       	ldi	r24, 0x01	; 1
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	9a 83       	std	Y+2, r25	; 0x02
     be0:	89 83       	std	Y+1, r24	; 0x01
     be2:	11 c0       	rjmp	.+34     	; 0xc06 <recieve_string+0x4a>
        while(byte != '\n')
        {
            byte = recieve_Byte();
     be4:	0e 94 46 05 	call	0xa8c	; 0xa8c <recieve_Byte>
     be8:	8b 83       	std	Y+3, r24	; 0x03
            code[x] = byte;
     bea:	29 81       	ldd	r18, Y+1	; 0x01
     bec:	3a 81       	ldd	r19, Y+2	; 0x02
     bee:	8c 81       	ldd	r24, Y+4	; 0x04
     bf0:	9d 81       	ldd	r25, Y+5	; 0x05
     bf2:	fc 01       	movw	r30, r24
     bf4:	e2 0f       	add	r30, r18
     bf6:	f3 1f       	adc	r31, r19
     bf8:	8b 81       	ldd	r24, Y+3	; 0x03
     bfa:	80 83       	st	Z, r24
            x++;
     bfc:	89 81       	ldd	r24, Y+1	; 0x01
     bfe:	9a 81       	ldd	r25, Y+2	; 0x02
     c00:	01 96       	adiw	r24, 0x01	; 1
     c02:	9a 83       	std	Y+2, r25	; 0x02
     c04:	89 83       	std	Y+1, r24	; 0x01
    //code ontworpen voor een GPS module. dollar teken is begin van de string. kan wel gebruikt worden voor het onvangen van complexe instructies.
    char byte = recieve_Byte();
    if(byte == '$')
    {
        int x = 1;
        while(byte != '\n')
     c06:	8b 81       	ldd	r24, Y+3	; 0x03
     c08:	8a 30       	cpi	r24, 0x0A	; 10
     c0a:	61 f7       	brne	.-40     	; 0xbe4 <recieve_string+0x28>
            byte = recieve_Byte();
            code[x] = byte;
            x++;
        }
    }
}
     c0c:	0f 90       	pop	r0
     c0e:	0f 90       	pop	r0
     c10:	0f 90       	pop	r0
     c12:	0f 90       	pop	r0
     c14:	0f 90       	pop	r0
     c16:	cf 91       	pop	r28
     c18:	df 91       	pop	r29
     c1a:	08 95       	ret

00000c1c <__fixunssfsi>:
     c1c:	ef 92       	push	r14
     c1e:	ff 92       	push	r15
     c20:	0f 93       	push	r16
     c22:	1f 93       	push	r17
     c24:	7b 01       	movw	r14, r22
     c26:	8c 01       	movw	r16, r24
     c28:	20 e0       	ldi	r18, 0x00	; 0
     c2a:	30 e0       	ldi	r19, 0x00	; 0
     c2c:	40 e0       	ldi	r20, 0x00	; 0
     c2e:	5f e4       	ldi	r21, 0x4F	; 79
     c30:	0e 94 ba 09 	call	0x1374	; 0x1374 <__gesf2>
     c34:	88 23       	and	r24, r24
     c36:	8c f0       	brlt	.+34     	; 0xc5a <__fixunssfsi+0x3e>
     c38:	c8 01       	movw	r24, r16
     c3a:	b7 01       	movw	r22, r14
     c3c:	20 e0       	ldi	r18, 0x00	; 0
     c3e:	30 e0       	ldi	r19, 0x00	; 0
     c40:	40 e0       	ldi	r20, 0x00	; 0
     c42:	5f e4       	ldi	r21, 0x4F	; 79
     c44:	0e 94 86 07 	call	0xf0c	; 0xf0c <__subsf3>
     c48:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <__fixsfsi>
     c4c:	9b 01       	movw	r18, r22
     c4e:	ac 01       	movw	r20, r24
     c50:	20 50       	subi	r18, 0x00	; 0
     c52:	30 40       	sbci	r19, 0x00	; 0
     c54:	40 40       	sbci	r20, 0x00	; 0
     c56:	50 48       	sbci	r21, 0x80	; 128
     c58:	06 c0       	rjmp	.+12     	; 0xc66 <__fixunssfsi+0x4a>
     c5a:	c8 01       	movw	r24, r16
     c5c:	b7 01       	movw	r22, r14
     c5e:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <__fixsfsi>
     c62:	9b 01       	movw	r18, r22
     c64:	ac 01       	movw	r20, r24
     c66:	b9 01       	movw	r22, r18
     c68:	ca 01       	movw	r24, r20
     c6a:	1f 91       	pop	r17
     c6c:	0f 91       	pop	r16
     c6e:	ff 90       	pop	r15
     c70:	ef 90       	pop	r14
     c72:	08 95       	ret

00000c74 <_fpadd_parts>:
     c74:	a0 e0       	ldi	r26, 0x00	; 0
     c76:	b0 e0       	ldi	r27, 0x00	; 0
     c78:	e0 e4       	ldi	r30, 0x40	; 64
     c7a:	f6 e0       	ldi	r31, 0x06	; 6
     c7c:	0c 94 e3 0c 	jmp	0x19c6	; 0x19c6 <__prologue_saves__>
     c80:	dc 01       	movw	r26, r24
     c82:	2b 01       	movw	r4, r22
     c84:	fa 01       	movw	r30, r20
     c86:	9c 91       	ld	r25, X
     c88:	92 30       	cpi	r25, 0x02	; 2
     c8a:	08 f4       	brcc	.+2      	; 0xc8e <_fpadd_parts+0x1a>
     c8c:	39 c1       	rjmp	.+626    	; 0xf00 <_fpadd_parts+0x28c>
     c8e:	eb 01       	movw	r28, r22
     c90:	88 81       	ld	r24, Y
     c92:	82 30       	cpi	r24, 0x02	; 2
     c94:	08 f4       	brcc	.+2      	; 0xc98 <_fpadd_parts+0x24>
     c96:	33 c1       	rjmp	.+614    	; 0xefe <_fpadd_parts+0x28a>
     c98:	94 30       	cpi	r25, 0x04	; 4
     c9a:	69 f4       	brne	.+26     	; 0xcb6 <_fpadd_parts+0x42>
     c9c:	84 30       	cpi	r24, 0x04	; 4
     c9e:	09 f0       	breq	.+2      	; 0xca2 <_fpadd_parts+0x2e>
     ca0:	2f c1       	rjmp	.+606    	; 0xf00 <_fpadd_parts+0x28c>
     ca2:	11 96       	adiw	r26, 0x01	; 1
     ca4:	9c 91       	ld	r25, X
     ca6:	11 97       	sbiw	r26, 0x01	; 1
     ca8:	89 81       	ldd	r24, Y+1	; 0x01
     caa:	98 17       	cp	r25, r24
     cac:	09 f4       	brne	.+2      	; 0xcb0 <_fpadd_parts+0x3c>
     cae:	28 c1       	rjmp	.+592    	; 0xf00 <_fpadd_parts+0x28c>
     cb0:	a0 e0       	ldi	r26, 0x00	; 0
     cb2:	b2 e0       	ldi	r27, 0x02	; 2
     cb4:	25 c1       	rjmp	.+586    	; 0xf00 <_fpadd_parts+0x28c>
     cb6:	84 30       	cpi	r24, 0x04	; 4
     cb8:	09 f4       	brne	.+2      	; 0xcbc <_fpadd_parts+0x48>
     cba:	21 c1       	rjmp	.+578    	; 0xefe <_fpadd_parts+0x28a>
     cbc:	82 30       	cpi	r24, 0x02	; 2
     cbe:	a9 f4       	brne	.+42     	; 0xcea <_fpadd_parts+0x76>
     cc0:	92 30       	cpi	r25, 0x02	; 2
     cc2:	09 f0       	breq	.+2      	; 0xcc6 <_fpadd_parts+0x52>
     cc4:	1d c1       	rjmp	.+570    	; 0xf00 <_fpadd_parts+0x28c>
     cc6:	9a 01       	movw	r18, r20
     cc8:	ad 01       	movw	r20, r26
     cca:	88 e0       	ldi	r24, 0x08	; 8
     ccc:	ea 01       	movw	r28, r20
     cce:	09 90       	ld	r0, Y+
     cd0:	ae 01       	movw	r20, r28
     cd2:	e9 01       	movw	r28, r18
     cd4:	09 92       	st	Y+, r0
     cd6:	9e 01       	movw	r18, r28
     cd8:	81 50       	subi	r24, 0x01	; 1
     cda:	c1 f7       	brne	.-16     	; 0xccc <_fpadd_parts+0x58>
     cdc:	e2 01       	movw	r28, r4
     cde:	89 81       	ldd	r24, Y+1	; 0x01
     ce0:	11 96       	adiw	r26, 0x01	; 1
     ce2:	9c 91       	ld	r25, X
     ce4:	89 23       	and	r24, r25
     ce6:	81 83       	std	Z+1, r24	; 0x01
     ce8:	08 c1       	rjmp	.+528    	; 0xefa <_fpadd_parts+0x286>
     cea:	92 30       	cpi	r25, 0x02	; 2
     cec:	09 f4       	brne	.+2      	; 0xcf0 <_fpadd_parts+0x7c>
     cee:	07 c1       	rjmp	.+526    	; 0xefe <_fpadd_parts+0x28a>
     cf0:	12 96       	adiw	r26, 0x02	; 2
     cf2:	2d 90       	ld	r2, X+
     cf4:	3c 90       	ld	r3, X
     cf6:	13 97       	sbiw	r26, 0x03	; 3
     cf8:	eb 01       	movw	r28, r22
     cfa:	8a 81       	ldd	r24, Y+2	; 0x02
     cfc:	9b 81       	ldd	r25, Y+3	; 0x03
     cfe:	14 96       	adiw	r26, 0x04	; 4
     d00:	ad 90       	ld	r10, X+
     d02:	bd 90       	ld	r11, X+
     d04:	cd 90       	ld	r12, X+
     d06:	dc 90       	ld	r13, X
     d08:	17 97       	sbiw	r26, 0x07	; 7
     d0a:	ec 80       	ldd	r14, Y+4	; 0x04
     d0c:	fd 80       	ldd	r15, Y+5	; 0x05
     d0e:	0e 81       	ldd	r16, Y+6	; 0x06
     d10:	1f 81       	ldd	r17, Y+7	; 0x07
     d12:	91 01       	movw	r18, r2
     d14:	28 1b       	sub	r18, r24
     d16:	39 0b       	sbc	r19, r25
     d18:	b9 01       	movw	r22, r18
     d1a:	37 ff       	sbrs	r19, 7
     d1c:	04 c0       	rjmp	.+8      	; 0xd26 <_fpadd_parts+0xb2>
     d1e:	66 27       	eor	r22, r22
     d20:	77 27       	eor	r23, r23
     d22:	62 1b       	sub	r22, r18
     d24:	73 0b       	sbc	r23, r19
     d26:	60 32       	cpi	r22, 0x20	; 32
     d28:	71 05       	cpc	r23, r1
     d2a:	0c f0       	brlt	.+2      	; 0xd2e <_fpadd_parts+0xba>
     d2c:	61 c0       	rjmp	.+194    	; 0xdf0 <_fpadd_parts+0x17c>
     d2e:	12 16       	cp	r1, r18
     d30:	13 06       	cpc	r1, r19
     d32:	6c f5       	brge	.+90     	; 0xd8e <_fpadd_parts+0x11a>
     d34:	37 01       	movw	r6, r14
     d36:	48 01       	movw	r8, r16
     d38:	06 2e       	mov	r0, r22
     d3a:	04 c0       	rjmp	.+8      	; 0xd44 <_fpadd_parts+0xd0>
     d3c:	96 94       	lsr	r9
     d3e:	87 94       	ror	r8
     d40:	77 94       	ror	r7
     d42:	67 94       	ror	r6
     d44:	0a 94       	dec	r0
     d46:	d2 f7       	brpl	.-12     	; 0xd3c <_fpadd_parts+0xc8>
     d48:	21 e0       	ldi	r18, 0x01	; 1
     d4a:	30 e0       	ldi	r19, 0x00	; 0
     d4c:	40 e0       	ldi	r20, 0x00	; 0
     d4e:	50 e0       	ldi	r21, 0x00	; 0
     d50:	04 c0       	rjmp	.+8      	; 0xd5a <_fpadd_parts+0xe6>
     d52:	22 0f       	add	r18, r18
     d54:	33 1f       	adc	r19, r19
     d56:	44 1f       	adc	r20, r20
     d58:	55 1f       	adc	r21, r21
     d5a:	6a 95       	dec	r22
     d5c:	d2 f7       	brpl	.-12     	; 0xd52 <_fpadd_parts+0xde>
     d5e:	21 50       	subi	r18, 0x01	; 1
     d60:	30 40       	sbci	r19, 0x00	; 0
     d62:	40 40       	sbci	r20, 0x00	; 0
     d64:	50 40       	sbci	r21, 0x00	; 0
     d66:	2e 21       	and	r18, r14
     d68:	3f 21       	and	r19, r15
     d6a:	40 23       	and	r20, r16
     d6c:	51 23       	and	r21, r17
     d6e:	21 15       	cp	r18, r1
     d70:	31 05       	cpc	r19, r1
     d72:	41 05       	cpc	r20, r1
     d74:	51 05       	cpc	r21, r1
     d76:	21 f0       	breq	.+8      	; 0xd80 <_fpadd_parts+0x10c>
     d78:	21 e0       	ldi	r18, 0x01	; 1
     d7a:	30 e0       	ldi	r19, 0x00	; 0
     d7c:	40 e0       	ldi	r20, 0x00	; 0
     d7e:	50 e0       	ldi	r21, 0x00	; 0
     d80:	79 01       	movw	r14, r18
     d82:	8a 01       	movw	r16, r20
     d84:	e6 28       	or	r14, r6
     d86:	f7 28       	or	r15, r7
     d88:	08 29       	or	r16, r8
     d8a:	19 29       	or	r17, r9
     d8c:	3c c0       	rjmp	.+120    	; 0xe06 <_fpadd_parts+0x192>
     d8e:	23 2b       	or	r18, r19
     d90:	d1 f1       	breq	.+116    	; 0xe06 <_fpadd_parts+0x192>
     d92:	26 0e       	add	r2, r22
     d94:	37 1e       	adc	r3, r23
     d96:	35 01       	movw	r6, r10
     d98:	46 01       	movw	r8, r12
     d9a:	06 2e       	mov	r0, r22
     d9c:	04 c0       	rjmp	.+8      	; 0xda6 <_fpadd_parts+0x132>
     d9e:	96 94       	lsr	r9
     da0:	87 94       	ror	r8
     da2:	77 94       	ror	r7
     da4:	67 94       	ror	r6
     da6:	0a 94       	dec	r0
     da8:	d2 f7       	brpl	.-12     	; 0xd9e <_fpadd_parts+0x12a>
     daa:	21 e0       	ldi	r18, 0x01	; 1
     dac:	30 e0       	ldi	r19, 0x00	; 0
     dae:	40 e0       	ldi	r20, 0x00	; 0
     db0:	50 e0       	ldi	r21, 0x00	; 0
     db2:	04 c0       	rjmp	.+8      	; 0xdbc <_fpadd_parts+0x148>
     db4:	22 0f       	add	r18, r18
     db6:	33 1f       	adc	r19, r19
     db8:	44 1f       	adc	r20, r20
     dba:	55 1f       	adc	r21, r21
     dbc:	6a 95       	dec	r22
     dbe:	d2 f7       	brpl	.-12     	; 0xdb4 <_fpadd_parts+0x140>
     dc0:	21 50       	subi	r18, 0x01	; 1
     dc2:	30 40       	sbci	r19, 0x00	; 0
     dc4:	40 40       	sbci	r20, 0x00	; 0
     dc6:	50 40       	sbci	r21, 0x00	; 0
     dc8:	2a 21       	and	r18, r10
     dca:	3b 21       	and	r19, r11
     dcc:	4c 21       	and	r20, r12
     dce:	5d 21       	and	r21, r13
     dd0:	21 15       	cp	r18, r1
     dd2:	31 05       	cpc	r19, r1
     dd4:	41 05       	cpc	r20, r1
     dd6:	51 05       	cpc	r21, r1
     dd8:	21 f0       	breq	.+8      	; 0xde2 <_fpadd_parts+0x16e>
     dda:	21 e0       	ldi	r18, 0x01	; 1
     ddc:	30 e0       	ldi	r19, 0x00	; 0
     dde:	40 e0       	ldi	r20, 0x00	; 0
     de0:	50 e0       	ldi	r21, 0x00	; 0
     de2:	59 01       	movw	r10, r18
     de4:	6a 01       	movw	r12, r20
     de6:	a6 28       	or	r10, r6
     de8:	b7 28       	or	r11, r7
     dea:	c8 28       	or	r12, r8
     dec:	d9 28       	or	r13, r9
     dee:	0b c0       	rjmp	.+22     	; 0xe06 <_fpadd_parts+0x192>
     df0:	82 15       	cp	r24, r2
     df2:	93 05       	cpc	r25, r3
     df4:	2c f0       	brlt	.+10     	; 0xe00 <_fpadd_parts+0x18c>
     df6:	1c 01       	movw	r2, r24
     df8:	aa 24       	eor	r10, r10
     dfa:	bb 24       	eor	r11, r11
     dfc:	65 01       	movw	r12, r10
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <_fpadd_parts+0x192>
     e00:	ee 24       	eor	r14, r14
     e02:	ff 24       	eor	r15, r15
     e04:	87 01       	movw	r16, r14
     e06:	11 96       	adiw	r26, 0x01	; 1
     e08:	9c 91       	ld	r25, X
     e0a:	d2 01       	movw	r26, r4
     e0c:	11 96       	adiw	r26, 0x01	; 1
     e0e:	8c 91       	ld	r24, X
     e10:	98 17       	cp	r25, r24
     e12:	09 f4       	brne	.+2      	; 0xe16 <_fpadd_parts+0x1a2>
     e14:	45 c0       	rjmp	.+138    	; 0xea0 <_fpadd_parts+0x22c>
     e16:	99 23       	and	r25, r25
     e18:	39 f0       	breq	.+14     	; 0xe28 <_fpadd_parts+0x1b4>
     e1a:	a8 01       	movw	r20, r16
     e1c:	97 01       	movw	r18, r14
     e1e:	2a 19       	sub	r18, r10
     e20:	3b 09       	sbc	r19, r11
     e22:	4c 09       	sbc	r20, r12
     e24:	5d 09       	sbc	r21, r13
     e26:	06 c0       	rjmp	.+12     	; 0xe34 <_fpadd_parts+0x1c0>
     e28:	a6 01       	movw	r20, r12
     e2a:	95 01       	movw	r18, r10
     e2c:	2e 19       	sub	r18, r14
     e2e:	3f 09       	sbc	r19, r15
     e30:	40 0b       	sbc	r20, r16
     e32:	51 0b       	sbc	r21, r17
     e34:	57 fd       	sbrc	r21, 7
     e36:	08 c0       	rjmp	.+16     	; 0xe48 <_fpadd_parts+0x1d4>
     e38:	11 82       	std	Z+1, r1	; 0x01
     e3a:	33 82       	std	Z+3, r3	; 0x03
     e3c:	22 82       	std	Z+2, r2	; 0x02
     e3e:	24 83       	std	Z+4, r18	; 0x04
     e40:	35 83       	std	Z+5, r19	; 0x05
     e42:	46 83       	std	Z+6, r20	; 0x06
     e44:	57 83       	std	Z+7, r21	; 0x07
     e46:	1d c0       	rjmp	.+58     	; 0xe82 <_fpadd_parts+0x20e>
     e48:	81 e0       	ldi	r24, 0x01	; 1
     e4a:	81 83       	std	Z+1, r24	; 0x01
     e4c:	33 82       	std	Z+3, r3	; 0x03
     e4e:	22 82       	std	Z+2, r2	; 0x02
     e50:	88 27       	eor	r24, r24
     e52:	99 27       	eor	r25, r25
     e54:	dc 01       	movw	r26, r24
     e56:	82 1b       	sub	r24, r18
     e58:	93 0b       	sbc	r25, r19
     e5a:	a4 0b       	sbc	r26, r20
     e5c:	b5 0b       	sbc	r27, r21
     e5e:	84 83       	std	Z+4, r24	; 0x04
     e60:	95 83       	std	Z+5, r25	; 0x05
     e62:	a6 83       	std	Z+6, r26	; 0x06
     e64:	b7 83       	std	Z+7, r27	; 0x07
     e66:	0d c0       	rjmp	.+26     	; 0xe82 <_fpadd_parts+0x20e>
     e68:	22 0f       	add	r18, r18
     e6a:	33 1f       	adc	r19, r19
     e6c:	44 1f       	adc	r20, r20
     e6e:	55 1f       	adc	r21, r21
     e70:	24 83       	std	Z+4, r18	; 0x04
     e72:	35 83       	std	Z+5, r19	; 0x05
     e74:	46 83       	std	Z+6, r20	; 0x06
     e76:	57 83       	std	Z+7, r21	; 0x07
     e78:	82 81       	ldd	r24, Z+2	; 0x02
     e7a:	93 81       	ldd	r25, Z+3	; 0x03
     e7c:	01 97       	sbiw	r24, 0x01	; 1
     e7e:	93 83       	std	Z+3, r25	; 0x03
     e80:	82 83       	std	Z+2, r24	; 0x02
     e82:	24 81       	ldd	r18, Z+4	; 0x04
     e84:	35 81       	ldd	r19, Z+5	; 0x05
     e86:	46 81       	ldd	r20, Z+6	; 0x06
     e88:	57 81       	ldd	r21, Z+7	; 0x07
     e8a:	da 01       	movw	r26, r20
     e8c:	c9 01       	movw	r24, r18
     e8e:	01 97       	sbiw	r24, 0x01	; 1
     e90:	a1 09       	sbc	r26, r1
     e92:	b1 09       	sbc	r27, r1
     e94:	8f 5f       	subi	r24, 0xFF	; 255
     e96:	9f 4f       	sbci	r25, 0xFF	; 255
     e98:	af 4f       	sbci	r26, 0xFF	; 255
     e9a:	bf 43       	sbci	r27, 0x3F	; 63
     e9c:	28 f3       	brcs	.-54     	; 0xe68 <_fpadd_parts+0x1f4>
     e9e:	0b c0       	rjmp	.+22     	; 0xeb6 <_fpadd_parts+0x242>
     ea0:	91 83       	std	Z+1, r25	; 0x01
     ea2:	33 82       	std	Z+3, r3	; 0x03
     ea4:	22 82       	std	Z+2, r2	; 0x02
     ea6:	ea 0c       	add	r14, r10
     ea8:	fb 1c       	adc	r15, r11
     eaa:	0c 1d       	adc	r16, r12
     eac:	1d 1d       	adc	r17, r13
     eae:	e4 82       	std	Z+4, r14	; 0x04
     eb0:	f5 82       	std	Z+5, r15	; 0x05
     eb2:	06 83       	std	Z+6, r16	; 0x06
     eb4:	17 83       	std	Z+7, r17	; 0x07
     eb6:	83 e0       	ldi	r24, 0x03	; 3
     eb8:	80 83       	st	Z, r24
     eba:	24 81       	ldd	r18, Z+4	; 0x04
     ebc:	35 81       	ldd	r19, Z+5	; 0x05
     ebe:	46 81       	ldd	r20, Z+6	; 0x06
     ec0:	57 81       	ldd	r21, Z+7	; 0x07
     ec2:	57 ff       	sbrs	r21, 7
     ec4:	1a c0       	rjmp	.+52     	; 0xefa <_fpadd_parts+0x286>
     ec6:	c9 01       	movw	r24, r18
     ec8:	aa 27       	eor	r26, r26
     eca:	97 fd       	sbrc	r25, 7
     ecc:	a0 95       	com	r26
     ece:	ba 2f       	mov	r27, r26
     ed0:	81 70       	andi	r24, 0x01	; 1
     ed2:	90 70       	andi	r25, 0x00	; 0
     ed4:	a0 70       	andi	r26, 0x00	; 0
     ed6:	b0 70       	andi	r27, 0x00	; 0
     ed8:	56 95       	lsr	r21
     eda:	47 95       	ror	r20
     edc:	37 95       	ror	r19
     ede:	27 95       	ror	r18
     ee0:	82 2b       	or	r24, r18
     ee2:	93 2b       	or	r25, r19
     ee4:	a4 2b       	or	r26, r20
     ee6:	b5 2b       	or	r27, r21
     ee8:	84 83       	std	Z+4, r24	; 0x04
     eea:	95 83       	std	Z+5, r25	; 0x05
     eec:	a6 83       	std	Z+6, r26	; 0x06
     eee:	b7 83       	std	Z+7, r27	; 0x07
     ef0:	82 81       	ldd	r24, Z+2	; 0x02
     ef2:	93 81       	ldd	r25, Z+3	; 0x03
     ef4:	01 96       	adiw	r24, 0x01	; 1
     ef6:	93 83       	std	Z+3, r25	; 0x03
     ef8:	82 83       	std	Z+2, r24	; 0x02
     efa:	df 01       	movw	r26, r30
     efc:	01 c0       	rjmp	.+2      	; 0xf00 <_fpadd_parts+0x28c>
     efe:	d2 01       	movw	r26, r4
     f00:	cd 01       	movw	r24, r26
     f02:	cd b7       	in	r28, 0x3d	; 61
     f04:	de b7       	in	r29, 0x3e	; 62
     f06:	e2 e1       	ldi	r30, 0x12	; 18
     f08:	0c 94 ff 0c 	jmp	0x19fe	; 0x19fe <__epilogue_restores__>

00000f0c <__subsf3>:
     f0c:	a0 e2       	ldi	r26, 0x20	; 32
     f0e:	b0 e0       	ldi	r27, 0x00	; 0
     f10:	ec e8       	ldi	r30, 0x8C	; 140
     f12:	f7 e0       	ldi	r31, 0x07	; 7
     f14:	0c 94 ef 0c 	jmp	0x19de	; 0x19de <__prologue_saves__+0x18>
     f18:	69 83       	std	Y+1, r22	; 0x01
     f1a:	7a 83       	std	Y+2, r23	; 0x02
     f1c:	8b 83       	std	Y+3, r24	; 0x03
     f1e:	9c 83       	std	Y+4, r25	; 0x04
     f20:	2d 83       	std	Y+5, r18	; 0x05
     f22:	3e 83       	std	Y+6, r19	; 0x06
     f24:	4f 83       	std	Y+7, r20	; 0x07
     f26:	58 87       	std	Y+8, r21	; 0x08
     f28:	e9 e0       	ldi	r30, 0x09	; 9
     f2a:	ee 2e       	mov	r14, r30
     f2c:	f1 2c       	mov	r15, r1
     f2e:	ec 0e       	add	r14, r28
     f30:	fd 1e       	adc	r15, r29
     f32:	ce 01       	movw	r24, r28
     f34:	01 96       	adiw	r24, 0x01	; 1
     f36:	b7 01       	movw	r22, r14
     f38:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <__unpack_f>
     f3c:	8e 01       	movw	r16, r28
     f3e:	0f 5e       	subi	r16, 0xEF	; 239
     f40:	1f 4f       	sbci	r17, 0xFF	; 255
     f42:	ce 01       	movw	r24, r28
     f44:	05 96       	adiw	r24, 0x05	; 5
     f46:	b8 01       	movw	r22, r16
     f48:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <__unpack_f>
     f4c:	8a 89       	ldd	r24, Y+18	; 0x12
     f4e:	91 e0       	ldi	r25, 0x01	; 1
     f50:	89 27       	eor	r24, r25
     f52:	8a 8b       	std	Y+18, r24	; 0x12
     f54:	c7 01       	movw	r24, r14
     f56:	b8 01       	movw	r22, r16
     f58:	ae 01       	movw	r20, r28
     f5a:	47 5e       	subi	r20, 0xE7	; 231
     f5c:	5f 4f       	sbci	r21, 0xFF	; 255
     f5e:	0e 94 3a 06 	call	0xc74	; 0xc74 <_fpadd_parts>
     f62:	0e 94 1b 0b 	call	0x1636	; 0x1636 <__pack_f>
     f66:	a0 96       	adiw	r28, 0x20	; 32
     f68:	e6 e0       	ldi	r30, 0x06	; 6
     f6a:	0c 94 0b 0d 	jmp	0x1a16	; 0x1a16 <__epilogue_restores__+0x18>

00000f6e <__addsf3>:
     f6e:	a0 e2       	ldi	r26, 0x20	; 32
     f70:	b0 e0       	ldi	r27, 0x00	; 0
     f72:	ed eb       	ldi	r30, 0xBD	; 189
     f74:	f7 e0       	ldi	r31, 0x07	; 7
     f76:	0c 94 ef 0c 	jmp	0x19de	; 0x19de <__prologue_saves__+0x18>
     f7a:	69 83       	std	Y+1, r22	; 0x01
     f7c:	7a 83       	std	Y+2, r23	; 0x02
     f7e:	8b 83       	std	Y+3, r24	; 0x03
     f80:	9c 83       	std	Y+4, r25	; 0x04
     f82:	2d 83       	std	Y+5, r18	; 0x05
     f84:	3e 83       	std	Y+6, r19	; 0x06
     f86:	4f 83       	std	Y+7, r20	; 0x07
     f88:	58 87       	std	Y+8, r21	; 0x08
     f8a:	f9 e0       	ldi	r31, 0x09	; 9
     f8c:	ef 2e       	mov	r14, r31
     f8e:	f1 2c       	mov	r15, r1
     f90:	ec 0e       	add	r14, r28
     f92:	fd 1e       	adc	r15, r29
     f94:	ce 01       	movw	r24, r28
     f96:	01 96       	adiw	r24, 0x01	; 1
     f98:	b7 01       	movw	r22, r14
     f9a:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <__unpack_f>
     f9e:	8e 01       	movw	r16, r28
     fa0:	0f 5e       	subi	r16, 0xEF	; 239
     fa2:	1f 4f       	sbci	r17, 0xFF	; 255
     fa4:	ce 01       	movw	r24, r28
     fa6:	05 96       	adiw	r24, 0x05	; 5
     fa8:	b8 01       	movw	r22, r16
     faa:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <__unpack_f>
     fae:	c7 01       	movw	r24, r14
     fb0:	b8 01       	movw	r22, r16
     fb2:	ae 01       	movw	r20, r28
     fb4:	47 5e       	subi	r20, 0xE7	; 231
     fb6:	5f 4f       	sbci	r21, 0xFF	; 255
     fb8:	0e 94 3a 06 	call	0xc74	; 0xc74 <_fpadd_parts>
     fbc:	0e 94 1b 0b 	call	0x1636	; 0x1636 <__pack_f>
     fc0:	a0 96       	adiw	r28, 0x20	; 32
     fc2:	e6 e0       	ldi	r30, 0x06	; 6
     fc4:	0c 94 0b 0d 	jmp	0x1a16	; 0x1a16 <__epilogue_restores__+0x18>

00000fc8 <__mulsf3>:
     fc8:	a0 e2       	ldi	r26, 0x20	; 32
     fca:	b0 e0       	ldi	r27, 0x00	; 0
     fcc:	ea ee       	ldi	r30, 0xEA	; 234
     fce:	f7 e0       	ldi	r31, 0x07	; 7
     fd0:	0c 94 e3 0c 	jmp	0x19c6	; 0x19c6 <__prologue_saves__>
     fd4:	69 83       	std	Y+1, r22	; 0x01
     fd6:	7a 83       	std	Y+2, r23	; 0x02
     fd8:	8b 83       	std	Y+3, r24	; 0x03
     fda:	9c 83       	std	Y+4, r25	; 0x04
     fdc:	2d 83       	std	Y+5, r18	; 0x05
     fde:	3e 83       	std	Y+6, r19	; 0x06
     fe0:	4f 83       	std	Y+7, r20	; 0x07
     fe2:	58 87       	std	Y+8, r21	; 0x08
     fe4:	ce 01       	movw	r24, r28
     fe6:	01 96       	adiw	r24, 0x01	; 1
     fe8:	be 01       	movw	r22, r28
     fea:	67 5f       	subi	r22, 0xF7	; 247
     fec:	7f 4f       	sbci	r23, 0xFF	; 255
     fee:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <__unpack_f>
     ff2:	ce 01       	movw	r24, r28
     ff4:	05 96       	adiw	r24, 0x05	; 5
     ff6:	be 01       	movw	r22, r28
     ff8:	6f 5e       	subi	r22, 0xEF	; 239
     ffa:	7f 4f       	sbci	r23, 0xFF	; 255
     ffc:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <__unpack_f>
    1000:	99 85       	ldd	r25, Y+9	; 0x09
    1002:	92 30       	cpi	r25, 0x02	; 2
    1004:	88 f0       	brcs	.+34     	; 0x1028 <__mulsf3+0x60>
    1006:	89 89       	ldd	r24, Y+17	; 0x11
    1008:	82 30       	cpi	r24, 0x02	; 2
    100a:	c8 f0       	brcs	.+50     	; 0x103e <__mulsf3+0x76>
    100c:	94 30       	cpi	r25, 0x04	; 4
    100e:	19 f4       	brne	.+6      	; 0x1016 <__mulsf3+0x4e>
    1010:	82 30       	cpi	r24, 0x02	; 2
    1012:	51 f4       	brne	.+20     	; 0x1028 <__mulsf3+0x60>
    1014:	04 c0       	rjmp	.+8      	; 0x101e <__mulsf3+0x56>
    1016:	84 30       	cpi	r24, 0x04	; 4
    1018:	29 f4       	brne	.+10     	; 0x1024 <__mulsf3+0x5c>
    101a:	92 30       	cpi	r25, 0x02	; 2
    101c:	81 f4       	brne	.+32     	; 0x103e <__mulsf3+0x76>
    101e:	80 e0       	ldi	r24, 0x00	; 0
    1020:	92 e0       	ldi	r25, 0x02	; 2
    1022:	c6 c0       	rjmp	.+396    	; 0x11b0 <__mulsf3+0x1e8>
    1024:	92 30       	cpi	r25, 0x02	; 2
    1026:	49 f4       	brne	.+18     	; 0x103a <__mulsf3+0x72>
    1028:	20 e0       	ldi	r18, 0x00	; 0
    102a:	9a 85       	ldd	r25, Y+10	; 0x0a
    102c:	8a 89       	ldd	r24, Y+18	; 0x12
    102e:	98 13       	cpse	r25, r24
    1030:	21 e0       	ldi	r18, 0x01	; 1
    1032:	2a 87       	std	Y+10, r18	; 0x0a
    1034:	ce 01       	movw	r24, r28
    1036:	09 96       	adiw	r24, 0x09	; 9
    1038:	bb c0       	rjmp	.+374    	; 0x11b0 <__mulsf3+0x1e8>
    103a:	82 30       	cpi	r24, 0x02	; 2
    103c:	49 f4       	brne	.+18     	; 0x1050 <__mulsf3+0x88>
    103e:	20 e0       	ldi	r18, 0x00	; 0
    1040:	9a 85       	ldd	r25, Y+10	; 0x0a
    1042:	8a 89       	ldd	r24, Y+18	; 0x12
    1044:	98 13       	cpse	r25, r24
    1046:	21 e0       	ldi	r18, 0x01	; 1
    1048:	2a 8b       	std	Y+18, r18	; 0x12
    104a:	ce 01       	movw	r24, r28
    104c:	41 96       	adiw	r24, 0x11	; 17
    104e:	b0 c0       	rjmp	.+352    	; 0x11b0 <__mulsf3+0x1e8>
    1050:	2d 84       	ldd	r2, Y+13	; 0x0d
    1052:	3e 84       	ldd	r3, Y+14	; 0x0e
    1054:	4f 84       	ldd	r4, Y+15	; 0x0f
    1056:	58 88       	ldd	r5, Y+16	; 0x10
    1058:	6d 88       	ldd	r6, Y+21	; 0x15
    105a:	7e 88       	ldd	r7, Y+22	; 0x16
    105c:	8f 88       	ldd	r8, Y+23	; 0x17
    105e:	98 8c       	ldd	r9, Y+24	; 0x18
    1060:	ee 24       	eor	r14, r14
    1062:	ff 24       	eor	r15, r15
    1064:	87 01       	movw	r16, r14
    1066:	aa 24       	eor	r10, r10
    1068:	bb 24       	eor	r11, r11
    106a:	65 01       	movw	r12, r10
    106c:	40 e0       	ldi	r20, 0x00	; 0
    106e:	50 e0       	ldi	r21, 0x00	; 0
    1070:	60 e0       	ldi	r22, 0x00	; 0
    1072:	70 e0       	ldi	r23, 0x00	; 0
    1074:	e0 e0       	ldi	r30, 0x00	; 0
    1076:	f0 e0       	ldi	r31, 0x00	; 0
    1078:	c1 01       	movw	r24, r2
    107a:	81 70       	andi	r24, 0x01	; 1
    107c:	90 70       	andi	r25, 0x00	; 0
    107e:	89 2b       	or	r24, r25
    1080:	e9 f0       	breq	.+58     	; 0x10bc <__mulsf3+0xf4>
    1082:	e6 0c       	add	r14, r6
    1084:	f7 1c       	adc	r15, r7
    1086:	08 1d       	adc	r16, r8
    1088:	19 1d       	adc	r17, r9
    108a:	9a 01       	movw	r18, r20
    108c:	ab 01       	movw	r20, r22
    108e:	2a 0d       	add	r18, r10
    1090:	3b 1d       	adc	r19, r11
    1092:	4c 1d       	adc	r20, r12
    1094:	5d 1d       	adc	r21, r13
    1096:	80 e0       	ldi	r24, 0x00	; 0
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	a0 e0       	ldi	r26, 0x00	; 0
    109c:	b0 e0       	ldi	r27, 0x00	; 0
    109e:	e6 14       	cp	r14, r6
    10a0:	f7 04       	cpc	r15, r7
    10a2:	08 05       	cpc	r16, r8
    10a4:	19 05       	cpc	r17, r9
    10a6:	20 f4       	brcc	.+8      	; 0x10b0 <__mulsf3+0xe8>
    10a8:	81 e0       	ldi	r24, 0x01	; 1
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	a0 e0       	ldi	r26, 0x00	; 0
    10ae:	b0 e0       	ldi	r27, 0x00	; 0
    10b0:	ba 01       	movw	r22, r20
    10b2:	a9 01       	movw	r20, r18
    10b4:	48 0f       	add	r20, r24
    10b6:	59 1f       	adc	r21, r25
    10b8:	6a 1f       	adc	r22, r26
    10ba:	7b 1f       	adc	r23, r27
    10bc:	aa 0c       	add	r10, r10
    10be:	bb 1c       	adc	r11, r11
    10c0:	cc 1c       	adc	r12, r12
    10c2:	dd 1c       	adc	r13, r13
    10c4:	97 fe       	sbrs	r9, 7
    10c6:	08 c0       	rjmp	.+16     	; 0x10d8 <__mulsf3+0x110>
    10c8:	81 e0       	ldi	r24, 0x01	; 1
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	a0 e0       	ldi	r26, 0x00	; 0
    10ce:	b0 e0       	ldi	r27, 0x00	; 0
    10d0:	a8 2a       	or	r10, r24
    10d2:	b9 2a       	or	r11, r25
    10d4:	ca 2a       	or	r12, r26
    10d6:	db 2a       	or	r13, r27
    10d8:	31 96       	adiw	r30, 0x01	; 1
    10da:	e0 32       	cpi	r30, 0x20	; 32
    10dc:	f1 05       	cpc	r31, r1
    10de:	49 f0       	breq	.+18     	; 0x10f2 <__mulsf3+0x12a>
    10e0:	66 0c       	add	r6, r6
    10e2:	77 1c       	adc	r7, r7
    10e4:	88 1c       	adc	r8, r8
    10e6:	99 1c       	adc	r9, r9
    10e8:	56 94       	lsr	r5
    10ea:	47 94       	ror	r4
    10ec:	37 94       	ror	r3
    10ee:	27 94       	ror	r2
    10f0:	c3 cf       	rjmp	.-122    	; 0x1078 <__mulsf3+0xb0>
    10f2:	fa 85       	ldd	r31, Y+10	; 0x0a
    10f4:	ea 89       	ldd	r30, Y+18	; 0x12
    10f6:	2b 89       	ldd	r18, Y+19	; 0x13
    10f8:	3c 89       	ldd	r19, Y+20	; 0x14
    10fa:	8b 85       	ldd	r24, Y+11	; 0x0b
    10fc:	9c 85       	ldd	r25, Y+12	; 0x0c
    10fe:	28 0f       	add	r18, r24
    1100:	39 1f       	adc	r19, r25
    1102:	2e 5f       	subi	r18, 0xFE	; 254
    1104:	3f 4f       	sbci	r19, 0xFF	; 255
    1106:	17 c0       	rjmp	.+46     	; 0x1136 <__mulsf3+0x16e>
    1108:	ca 01       	movw	r24, r20
    110a:	81 70       	andi	r24, 0x01	; 1
    110c:	90 70       	andi	r25, 0x00	; 0
    110e:	89 2b       	or	r24, r25
    1110:	61 f0       	breq	.+24     	; 0x112a <__mulsf3+0x162>
    1112:	16 95       	lsr	r17
    1114:	07 95       	ror	r16
    1116:	f7 94       	ror	r15
    1118:	e7 94       	ror	r14
    111a:	80 e0       	ldi	r24, 0x00	; 0
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	a0 e0       	ldi	r26, 0x00	; 0
    1120:	b0 e8       	ldi	r27, 0x80	; 128
    1122:	e8 2a       	or	r14, r24
    1124:	f9 2a       	or	r15, r25
    1126:	0a 2b       	or	r16, r26
    1128:	1b 2b       	or	r17, r27
    112a:	76 95       	lsr	r23
    112c:	67 95       	ror	r22
    112e:	57 95       	ror	r21
    1130:	47 95       	ror	r20
    1132:	2f 5f       	subi	r18, 0xFF	; 255
    1134:	3f 4f       	sbci	r19, 0xFF	; 255
    1136:	77 fd       	sbrc	r23, 7
    1138:	e7 cf       	rjmp	.-50     	; 0x1108 <__mulsf3+0x140>
    113a:	0c c0       	rjmp	.+24     	; 0x1154 <__mulsf3+0x18c>
    113c:	44 0f       	add	r20, r20
    113e:	55 1f       	adc	r21, r21
    1140:	66 1f       	adc	r22, r22
    1142:	77 1f       	adc	r23, r23
    1144:	17 fd       	sbrc	r17, 7
    1146:	41 60       	ori	r20, 0x01	; 1
    1148:	ee 0c       	add	r14, r14
    114a:	ff 1c       	adc	r15, r15
    114c:	00 1f       	adc	r16, r16
    114e:	11 1f       	adc	r17, r17
    1150:	21 50       	subi	r18, 0x01	; 1
    1152:	30 40       	sbci	r19, 0x00	; 0
    1154:	40 30       	cpi	r20, 0x00	; 0
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	59 07       	cpc	r21, r25
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	69 07       	cpc	r22, r25
    115e:	90 e4       	ldi	r25, 0x40	; 64
    1160:	79 07       	cpc	r23, r25
    1162:	60 f3       	brcs	.-40     	; 0x113c <__mulsf3+0x174>
    1164:	2b 8f       	std	Y+27, r18	; 0x1b
    1166:	3c 8f       	std	Y+28, r19	; 0x1c
    1168:	db 01       	movw	r26, r22
    116a:	ca 01       	movw	r24, r20
    116c:	8f 77       	andi	r24, 0x7F	; 127
    116e:	90 70       	andi	r25, 0x00	; 0
    1170:	a0 70       	andi	r26, 0x00	; 0
    1172:	b0 70       	andi	r27, 0x00	; 0
    1174:	80 34       	cpi	r24, 0x40	; 64
    1176:	91 05       	cpc	r25, r1
    1178:	a1 05       	cpc	r26, r1
    117a:	b1 05       	cpc	r27, r1
    117c:	61 f4       	brne	.+24     	; 0x1196 <__mulsf3+0x1ce>
    117e:	47 fd       	sbrc	r20, 7
    1180:	0a c0       	rjmp	.+20     	; 0x1196 <__mulsf3+0x1ce>
    1182:	e1 14       	cp	r14, r1
    1184:	f1 04       	cpc	r15, r1
    1186:	01 05       	cpc	r16, r1
    1188:	11 05       	cpc	r17, r1
    118a:	29 f0       	breq	.+10     	; 0x1196 <__mulsf3+0x1ce>
    118c:	40 5c       	subi	r20, 0xC0	; 192
    118e:	5f 4f       	sbci	r21, 0xFF	; 255
    1190:	6f 4f       	sbci	r22, 0xFF	; 255
    1192:	7f 4f       	sbci	r23, 0xFF	; 255
    1194:	40 78       	andi	r20, 0x80	; 128
    1196:	1a 8e       	std	Y+26, r1	; 0x1a
    1198:	fe 17       	cp	r31, r30
    119a:	11 f0       	breq	.+4      	; 0x11a0 <__mulsf3+0x1d8>
    119c:	81 e0       	ldi	r24, 0x01	; 1
    119e:	8a 8f       	std	Y+26, r24	; 0x1a
    11a0:	4d 8f       	std	Y+29, r20	; 0x1d
    11a2:	5e 8f       	std	Y+30, r21	; 0x1e
    11a4:	6f 8f       	std	Y+31, r22	; 0x1f
    11a6:	78 a3       	std	Y+32, r23	; 0x20
    11a8:	83 e0       	ldi	r24, 0x03	; 3
    11aa:	89 8f       	std	Y+25, r24	; 0x19
    11ac:	ce 01       	movw	r24, r28
    11ae:	49 96       	adiw	r24, 0x19	; 25
    11b0:	0e 94 1b 0b 	call	0x1636	; 0x1636 <__pack_f>
    11b4:	a0 96       	adiw	r28, 0x20	; 32
    11b6:	e2 e1       	ldi	r30, 0x12	; 18
    11b8:	0c 94 ff 0c 	jmp	0x19fe	; 0x19fe <__epilogue_restores__>

000011bc <__divsf3>:
    11bc:	a8 e1       	ldi	r26, 0x18	; 24
    11be:	b0 e0       	ldi	r27, 0x00	; 0
    11c0:	e4 ee       	ldi	r30, 0xE4	; 228
    11c2:	f8 e0       	ldi	r31, 0x08	; 8
    11c4:	0c 94 eb 0c 	jmp	0x19d6	; 0x19d6 <__prologue_saves__+0x10>
    11c8:	69 83       	std	Y+1, r22	; 0x01
    11ca:	7a 83       	std	Y+2, r23	; 0x02
    11cc:	8b 83       	std	Y+3, r24	; 0x03
    11ce:	9c 83       	std	Y+4, r25	; 0x04
    11d0:	2d 83       	std	Y+5, r18	; 0x05
    11d2:	3e 83       	std	Y+6, r19	; 0x06
    11d4:	4f 83       	std	Y+7, r20	; 0x07
    11d6:	58 87       	std	Y+8, r21	; 0x08
    11d8:	b9 e0       	ldi	r27, 0x09	; 9
    11da:	eb 2e       	mov	r14, r27
    11dc:	f1 2c       	mov	r15, r1
    11de:	ec 0e       	add	r14, r28
    11e0:	fd 1e       	adc	r15, r29
    11e2:	ce 01       	movw	r24, r28
    11e4:	01 96       	adiw	r24, 0x01	; 1
    11e6:	b7 01       	movw	r22, r14
    11e8:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <__unpack_f>
    11ec:	8e 01       	movw	r16, r28
    11ee:	0f 5e       	subi	r16, 0xEF	; 239
    11f0:	1f 4f       	sbci	r17, 0xFF	; 255
    11f2:	ce 01       	movw	r24, r28
    11f4:	05 96       	adiw	r24, 0x05	; 5
    11f6:	b8 01       	movw	r22, r16
    11f8:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <__unpack_f>
    11fc:	29 85       	ldd	r18, Y+9	; 0x09
    11fe:	22 30       	cpi	r18, 0x02	; 2
    1200:	08 f4       	brcc	.+2      	; 0x1204 <__divsf3+0x48>
    1202:	7e c0       	rjmp	.+252    	; 0x1300 <__divsf3+0x144>
    1204:	39 89       	ldd	r19, Y+17	; 0x11
    1206:	32 30       	cpi	r19, 0x02	; 2
    1208:	10 f4       	brcc	.+4      	; 0x120e <__divsf3+0x52>
    120a:	b8 01       	movw	r22, r16
    120c:	7c c0       	rjmp	.+248    	; 0x1306 <__divsf3+0x14a>
    120e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1210:	9a 89       	ldd	r25, Y+18	; 0x12
    1212:	89 27       	eor	r24, r25
    1214:	8a 87       	std	Y+10, r24	; 0x0a
    1216:	24 30       	cpi	r18, 0x04	; 4
    1218:	11 f0       	breq	.+4      	; 0x121e <__divsf3+0x62>
    121a:	22 30       	cpi	r18, 0x02	; 2
    121c:	31 f4       	brne	.+12     	; 0x122a <__divsf3+0x6e>
    121e:	23 17       	cp	r18, r19
    1220:	09 f0       	breq	.+2      	; 0x1224 <__divsf3+0x68>
    1222:	6e c0       	rjmp	.+220    	; 0x1300 <__divsf3+0x144>
    1224:	60 e0       	ldi	r22, 0x00	; 0
    1226:	72 e0       	ldi	r23, 0x02	; 2
    1228:	6e c0       	rjmp	.+220    	; 0x1306 <__divsf3+0x14a>
    122a:	34 30       	cpi	r19, 0x04	; 4
    122c:	39 f4       	brne	.+14     	; 0x123c <__divsf3+0x80>
    122e:	1d 86       	std	Y+13, r1	; 0x0d
    1230:	1e 86       	std	Y+14, r1	; 0x0e
    1232:	1f 86       	std	Y+15, r1	; 0x0f
    1234:	18 8a       	std	Y+16, r1	; 0x10
    1236:	1c 86       	std	Y+12, r1	; 0x0c
    1238:	1b 86       	std	Y+11, r1	; 0x0b
    123a:	04 c0       	rjmp	.+8      	; 0x1244 <__divsf3+0x88>
    123c:	32 30       	cpi	r19, 0x02	; 2
    123e:	21 f4       	brne	.+8      	; 0x1248 <__divsf3+0x8c>
    1240:	84 e0       	ldi	r24, 0x04	; 4
    1242:	89 87       	std	Y+9, r24	; 0x09
    1244:	b7 01       	movw	r22, r14
    1246:	5f c0       	rjmp	.+190    	; 0x1306 <__divsf3+0x14a>
    1248:	2b 85       	ldd	r18, Y+11	; 0x0b
    124a:	3c 85       	ldd	r19, Y+12	; 0x0c
    124c:	8b 89       	ldd	r24, Y+19	; 0x13
    124e:	9c 89       	ldd	r25, Y+20	; 0x14
    1250:	28 1b       	sub	r18, r24
    1252:	39 0b       	sbc	r19, r25
    1254:	3c 87       	std	Y+12, r19	; 0x0c
    1256:	2b 87       	std	Y+11, r18	; 0x0b
    1258:	ed 84       	ldd	r14, Y+13	; 0x0d
    125a:	fe 84       	ldd	r15, Y+14	; 0x0e
    125c:	0f 85       	ldd	r16, Y+15	; 0x0f
    125e:	18 89       	ldd	r17, Y+16	; 0x10
    1260:	ad 88       	ldd	r10, Y+21	; 0x15
    1262:	be 88       	ldd	r11, Y+22	; 0x16
    1264:	cf 88       	ldd	r12, Y+23	; 0x17
    1266:	d8 8c       	ldd	r13, Y+24	; 0x18
    1268:	ea 14       	cp	r14, r10
    126a:	fb 04       	cpc	r15, r11
    126c:	0c 05       	cpc	r16, r12
    126e:	1d 05       	cpc	r17, r13
    1270:	40 f4       	brcc	.+16     	; 0x1282 <__divsf3+0xc6>
    1272:	ee 0c       	add	r14, r14
    1274:	ff 1c       	adc	r15, r15
    1276:	00 1f       	adc	r16, r16
    1278:	11 1f       	adc	r17, r17
    127a:	21 50       	subi	r18, 0x01	; 1
    127c:	30 40       	sbci	r19, 0x00	; 0
    127e:	3c 87       	std	Y+12, r19	; 0x0c
    1280:	2b 87       	std	Y+11, r18	; 0x0b
    1282:	20 e0       	ldi	r18, 0x00	; 0
    1284:	30 e0       	ldi	r19, 0x00	; 0
    1286:	40 e0       	ldi	r20, 0x00	; 0
    1288:	50 e0       	ldi	r21, 0x00	; 0
    128a:	80 e0       	ldi	r24, 0x00	; 0
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	a0 e0       	ldi	r26, 0x00	; 0
    1290:	b0 e4       	ldi	r27, 0x40	; 64
    1292:	60 e0       	ldi	r22, 0x00	; 0
    1294:	70 e0       	ldi	r23, 0x00	; 0
    1296:	ea 14       	cp	r14, r10
    1298:	fb 04       	cpc	r15, r11
    129a:	0c 05       	cpc	r16, r12
    129c:	1d 05       	cpc	r17, r13
    129e:	40 f0       	brcs	.+16     	; 0x12b0 <__divsf3+0xf4>
    12a0:	28 2b       	or	r18, r24
    12a2:	39 2b       	or	r19, r25
    12a4:	4a 2b       	or	r20, r26
    12a6:	5b 2b       	or	r21, r27
    12a8:	ea 18       	sub	r14, r10
    12aa:	fb 08       	sbc	r15, r11
    12ac:	0c 09       	sbc	r16, r12
    12ae:	1d 09       	sbc	r17, r13
    12b0:	b6 95       	lsr	r27
    12b2:	a7 95       	ror	r26
    12b4:	97 95       	ror	r25
    12b6:	87 95       	ror	r24
    12b8:	ee 0c       	add	r14, r14
    12ba:	ff 1c       	adc	r15, r15
    12bc:	00 1f       	adc	r16, r16
    12be:	11 1f       	adc	r17, r17
    12c0:	6f 5f       	subi	r22, 0xFF	; 255
    12c2:	7f 4f       	sbci	r23, 0xFF	; 255
    12c4:	6f 31       	cpi	r22, 0x1F	; 31
    12c6:	71 05       	cpc	r23, r1
    12c8:	31 f7       	brne	.-52     	; 0x1296 <__divsf3+0xda>
    12ca:	da 01       	movw	r26, r20
    12cc:	c9 01       	movw	r24, r18
    12ce:	8f 77       	andi	r24, 0x7F	; 127
    12d0:	90 70       	andi	r25, 0x00	; 0
    12d2:	a0 70       	andi	r26, 0x00	; 0
    12d4:	b0 70       	andi	r27, 0x00	; 0
    12d6:	80 34       	cpi	r24, 0x40	; 64
    12d8:	91 05       	cpc	r25, r1
    12da:	a1 05       	cpc	r26, r1
    12dc:	b1 05       	cpc	r27, r1
    12de:	61 f4       	brne	.+24     	; 0x12f8 <__divsf3+0x13c>
    12e0:	27 fd       	sbrc	r18, 7
    12e2:	0a c0       	rjmp	.+20     	; 0x12f8 <__divsf3+0x13c>
    12e4:	e1 14       	cp	r14, r1
    12e6:	f1 04       	cpc	r15, r1
    12e8:	01 05       	cpc	r16, r1
    12ea:	11 05       	cpc	r17, r1
    12ec:	29 f0       	breq	.+10     	; 0x12f8 <__divsf3+0x13c>
    12ee:	20 5c       	subi	r18, 0xC0	; 192
    12f0:	3f 4f       	sbci	r19, 0xFF	; 255
    12f2:	4f 4f       	sbci	r20, 0xFF	; 255
    12f4:	5f 4f       	sbci	r21, 0xFF	; 255
    12f6:	20 78       	andi	r18, 0x80	; 128
    12f8:	2d 87       	std	Y+13, r18	; 0x0d
    12fa:	3e 87       	std	Y+14, r19	; 0x0e
    12fc:	4f 87       	std	Y+15, r20	; 0x0f
    12fe:	58 8b       	std	Y+16, r21	; 0x10
    1300:	be 01       	movw	r22, r28
    1302:	67 5f       	subi	r22, 0xF7	; 247
    1304:	7f 4f       	sbci	r23, 0xFF	; 255
    1306:	cb 01       	movw	r24, r22
    1308:	0e 94 1b 0b 	call	0x1636	; 0x1636 <__pack_f>
    130c:	68 96       	adiw	r28, 0x18	; 24
    130e:	ea e0       	ldi	r30, 0x0A	; 10
    1310:	0c 94 07 0d 	jmp	0x1a0e	; 0x1a0e <__epilogue_restores__+0x10>

00001314 <__gtsf2>:
    1314:	a8 e1       	ldi	r26, 0x18	; 24
    1316:	b0 e0       	ldi	r27, 0x00	; 0
    1318:	e0 e9       	ldi	r30, 0x90	; 144
    131a:	f9 e0       	ldi	r31, 0x09	; 9
    131c:	0c 94 ef 0c 	jmp	0x19de	; 0x19de <__prologue_saves__+0x18>
    1320:	69 83       	std	Y+1, r22	; 0x01
    1322:	7a 83       	std	Y+2, r23	; 0x02
    1324:	8b 83       	std	Y+3, r24	; 0x03
    1326:	9c 83       	std	Y+4, r25	; 0x04
    1328:	2d 83       	std	Y+5, r18	; 0x05
    132a:	3e 83       	std	Y+6, r19	; 0x06
    132c:	4f 83       	std	Y+7, r20	; 0x07
    132e:	58 87       	std	Y+8, r21	; 0x08
    1330:	89 e0       	ldi	r24, 0x09	; 9
    1332:	e8 2e       	mov	r14, r24
    1334:	f1 2c       	mov	r15, r1
    1336:	ec 0e       	add	r14, r28
    1338:	fd 1e       	adc	r15, r29
    133a:	ce 01       	movw	r24, r28
    133c:	01 96       	adiw	r24, 0x01	; 1
    133e:	b7 01       	movw	r22, r14
    1340:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <__unpack_f>
    1344:	8e 01       	movw	r16, r28
    1346:	0f 5e       	subi	r16, 0xEF	; 239
    1348:	1f 4f       	sbci	r17, 0xFF	; 255
    134a:	ce 01       	movw	r24, r28
    134c:	05 96       	adiw	r24, 0x05	; 5
    134e:	b8 01       	movw	r22, r16
    1350:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <__unpack_f>
    1354:	89 85       	ldd	r24, Y+9	; 0x09
    1356:	82 30       	cpi	r24, 0x02	; 2
    1358:	40 f0       	brcs	.+16     	; 0x136a <__gtsf2+0x56>
    135a:	89 89       	ldd	r24, Y+17	; 0x11
    135c:	82 30       	cpi	r24, 0x02	; 2
    135e:	28 f0       	brcs	.+10     	; 0x136a <__gtsf2+0x56>
    1360:	c7 01       	movw	r24, r14
    1362:	b8 01       	movw	r22, r16
    1364:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <__fpcmp_parts_f>
    1368:	01 c0       	rjmp	.+2      	; 0x136c <__gtsf2+0x58>
    136a:	8f ef       	ldi	r24, 0xFF	; 255
    136c:	68 96       	adiw	r28, 0x18	; 24
    136e:	e6 e0       	ldi	r30, 0x06	; 6
    1370:	0c 94 0b 0d 	jmp	0x1a16	; 0x1a16 <__epilogue_restores__+0x18>

00001374 <__gesf2>:
    1374:	a8 e1       	ldi	r26, 0x18	; 24
    1376:	b0 e0       	ldi	r27, 0x00	; 0
    1378:	e0 ec       	ldi	r30, 0xC0	; 192
    137a:	f9 e0       	ldi	r31, 0x09	; 9
    137c:	0c 94 ef 0c 	jmp	0x19de	; 0x19de <__prologue_saves__+0x18>
    1380:	69 83       	std	Y+1, r22	; 0x01
    1382:	7a 83       	std	Y+2, r23	; 0x02
    1384:	8b 83       	std	Y+3, r24	; 0x03
    1386:	9c 83       	std	Y+4, r25	; 0x04
    1388:	2d 83       	std	Y+5, r18	; 0x05
    138a:	3e 83       	std	Y+6, r19	; 0x06
    138c:	4f 83       	std	Y+7, r20	; 0x07
    138e:	58 87       	std	Y+8, r21	; 0x08
    1390:	89 e0       	ldi	r24, 0x09	; 9
    1392:	e8 2e       	mov	r14, r24
    1394:	f1 2c       	mov	r15, r1
    1396:	ec 0e       	add	r14, r28
    1398:	fd 1e       	adc	r15, r29
    139a:	ce 01       	movw	r24, r28
    139c:	01 96       	adiw	r24, 0x01	; 1
    139e:	b7 01       	movw	r22, r14
    13a0:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <__unpack_f>
    13a4:	8e 01       	movw	r16, r28
    13a6:	0f 5e       	subi	r16, 0xEF	; 239
    13a8:	1f 4f       	sbci	r17, 0xFF	; 255
    13aa:	ce 01       	movw	r24, r28
    13ac:	05 96       	adiw	r24, 0x05	; 5
    13ae:	b8 01       	movw	r22, r16
    13b0:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <__unpack_f>
    13b4:	89 85       	ldd	r24, Y+9	; 0x09
    13b6:	82 30       	cpi	r24, 0x02	; 2
    13b8:	40 f0       	brcs	.+16     	; 0x13ca <__gesf2+0x56>
    13ba:	89 89       	ldd	r24, Y+17	; 0x11
    13bc:	82 30       	cpi	r24, 0x02	; 2
    13be:	28 f0       	brcs	.+10     	; 0x13ca <__gesf2+0x56>
    13c0:	c7 01       	movw	r24, r14
    13c2:	b8 01       	movw	r22, r16
    13c4:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <__fpcmp_parts_f>
    13c8:	01 c0       	rjmp	.+2      	; 0x13cc <__gesf2+0x58>
    13ca:	8f ef       	ldi	r24, 0xFF	; 255
    13cc:	68 96       	adiw	r28, 0x18	; 24
    13ce:	e6 e0       	ldi	r30, 0x06	; 6
    13d0:	0c 94 0b 0d 	jmp	0x1a16	; 0x1a16 <__epilogue_restores__+0x18>

000013d4 <__ltsf2>:
    13d4:	a8 e1       	ldi	r26, 0x18	; 24
    13d6:	b0 e0       	ldi	r27, 0x00	; 0
    13d8:	e0 ef       	ldi	r30, 0xF0	; 240
    13da:	f9 e0       	ldi	r31, 0x09	; 9
    13dc:	0c 94 ef 0c 	jmp	0x19de	; 0x19de <__prologue_saves__+0x18>
    13e0:	69 83       	std	Y+1, r22	; 0x01
    13e2:	7a 83       	std	Y+2, r23	; 0x02
    13e4:	8b 83       	std	Y+3, r24	; 0x03
    13e6:	9c 83       	std	Y+4, r25	; 0x04
    13e8:	2d 83       	std	Y+5, r18	; 0x05
    13ea:	3e 83       	std	Y+6, r19	; 0x06
    13ec:	4f 83       	std	Y+7, r20	; 0x07
    13ee:	58 87       	std	Y+8, r21	; 0x08
    13f0:	89 e0       	ldi	r24, 0x09	; 9
    13f2:	e8 2e       	mov	r14, r24
    13f4:	f1 2c       	mov	r15, r1
    13f6:	ec 0e       	add	r14, r28
    13f8:	fd 1e       	adc	r15, r29
    13fa:	ce 01       	movw	r24, r28
    13fc:	01 96       	adiw	r24, 0x01	; 1
    13fe:	b7 01       	movw	r22, r14
    1400:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <__unpack_f>
    1404:	8e 01       	movw	r16, r28
    1406:	0f 5e       	subi	r16, 0xEF	; 239
    1408:	1f 4f       	sbci	r17, 0xFF	; 255
    140a:	ce 01       	movw	r24, r28
    140c:	05 96       	adiw	r24, 0x05	; 5
    140e:	b8 01       	movw	r22, r16
    1410:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <__unpack_f>
    1414:	89 85       	ldd	r24, Y+9	; 0x09
    1416:	82 30       	cpi	r24, 0x02	; 2
    1418:	40 f0       	brcs	.+16     	; 0x142a <__ltsf2+0x56>
    141a:	89 89       	ldd	r24, Y+17	; 0x11
    141c:	82 30       	cpi	r24, 0x02	; 2
    141e:	28 f0       	brcs	.+10     	; 0x142a <__ltsf2+0x56>
    1420:	c7 01       	movw	r24, r14
    1422:	b8 01       	movw	r22, r16
    1424:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <__fpcmp_parts_f>
    1428:	01 c0       	rjmp	.+2      	; 0x142c <__ltsf2+0x58>
    142a:	81 e0       	ldi	r24, 0x01	; 1
    142c:	68 96       	adiw	r28, 0x18	; 24
    142e:	e6 e0       	ldi	r30, 0x06	; 6
    1430:	0c 94 0b 0d 	jmp	0x1a16	; 0x1a16 <__epilogue_restores__+0x18>

00001434 <__floatsisf>:
    1434:	a8 e0       	ldi	r26, 0x08	; 8
    1436:	b0 e0       	ldi	r27, 0x00	; 0
    1438:	e0 e2       	ldi	r30, 0x20	; 32
    143a:	fa e0       	ldi	r31, 0x0A	; 10
    143c:	0c 94 ec 0c 	jmp	0x19d8	; 0x19d8 <__prologue_saves__+0x12>
    1440:	9b 01       	movw	r18, r22
    1442:	ac 01       	movw	r20, r24
    1444:	83 e0       	ldi	r24, 0x03	; 3
    1446:	89 83       	std	Y+1, r24	; 0x01
    1448:	da 01       	movw	r26, r20
    144a:	c9 01       	movw	r24, r18
    144c:	88 27       	eor	r24, r24
    144e:	b7 fd       	sbrc	r27, 7
    1450:	83 95       	inc	r24
    1452:	99 27       	eor	r25, r25
    1454:	aa 27       	eor	r26, r26
    1456:	bb 27       	eor	r27, r27
    1458:	b8 2e       	mov	r11, r24
    145a:	21 15       	cp	r18, r1
    145c:	31 05       	cpc	r19, r1
    145e:	41 05       	cpc	r20, r1
    1460:	51 05       	cpc	r21, r1
    1462:	19 f4       	brne	.+6      	; 0x146a <__floatsisf+0x36>
    1464:	82 e0       	ldi	r24, 0x02	; 2
    1466:	89 83       	std	Y+1, r24	; 0x01
    1468:	3a c0       	rjmp	.+116    	; 0x14de <__floatsisf+0xaa>
    146a:	88 23       	and	r24, r24
    146c:	a9 f0       	breq	.+42     	; 0x1498 <__floatsisf+0x64>
    146e:	20 30       	cpi	r18, 0x00	; 0
    1470:	80 e0       	ldi	r24, 0x00	; 0
    1472:	38 07       	cpc	r19, r24
    1474:	80 e0       	ldi	r24, 0x00	; 0
    1476:	48 07       	cpc	r20, r24
    1478:	80 e8       	ldi	r24, 0x80	; 128
    147a:	58 07       	cpc	r21, r24
    147c:	29 f4       	brne	.+10     	; 0x1488 <__floatsisf+0x54>
    147e:	60 e0       	ldi	r22, 0x00	; 0
    1480:	70 e0       	ldi	r23, 0x00	; 0
    1482:	80 e0       	ldi	r24, 0x00	; 0
    1484:	9f ec       	ldi	r25, 0xCF	; 207
    1486:	30 c0       	rjmp	.+96     	; 0x14e8 <__floatsisf+0xb4>
    1488:	ee 24       	eor	r14, r14
    148a:	ff 24       	eor	r15, r15
    148c:	87 01       	movw	r16, r14
    148e:	e2 1a       	sub	r14, r18
    1490:	f3 0a       	sbc	r15, r19
    1492:	04 0b       	sbc	r16, r20
    1494:	15 0b       	sbc	r17, r21
    1496:	02 c0       	rjmp	.+4      	; 0x149c <__floatsisf+0x68>
    1498:	79 01       	movw	r14, r18
    149a:	8a 01       	movw	r16, r20
    149c:	8e e1       	ldi	r24, 0x1E	; 30
    149e:	c8 2e       	mov	r12, r24
    14a0:	d1 2c       	mov	r13, r1
    14a2:	dc 82       	std	Y+4, r13	; 0x04
    14a4:	cb 82       	std	Y+3, r12	; 0x03
    14a6:	ed 82       	std	Y+5, r14	; 0x05
    14a8:	fe 82       	std	Y+6, r15	; 0x06
    14aa:	0f 83       	std	Y+7, r16	; 0x07
    14ac:	18 87       	std	Y+8, r17	; 0x08
    14ae:	c8 01       	movw	r24, r16
    14b0:	b7 01       	movw	r22, r14
    14b2:	0e 94 cc 0a 	call	0x1598	; 0x1598 <__clzsi2>
    14b6:	01 97       	sbiw	r24, 0x01	; 1
    14b8:	18 16       	cp	r1, r24
    14ba:	19 06       	cpc	r1, r25
    14bc:	84 f4       	brge	.+32     	; 0x14de <__floatsisf+0xaa>
    14be:	08 2e       	mov	r0, r24
    14c0:	04 c0       	rjmp	.+8      	; 0x14ca <__floatsisf+0x96>
    14c2:	ee 0c       	add	r14, r14
    14c4:	ff 1c       	adc	r15, r15
    14c6:	00 1f       	adc	r16, r16
    14c8:	11 1f       	adc	r17, r17
    14ca:	0a 94       	dec	r0
    14cc:	d2 f7       	brpl	.-12     	; 0x14c2 <__floatsisf+0x8e>
    14ce:	ed 82       	std	Y+5, r14	; 0x05
    14d0:	fe 82       	std	Y+6, r15	; 0x06
    14d2:	0f 83       	std	Y+7, r16	; 0x07
    14d4:	18 87       	std	Y+8, r17	; 0x08
    14d6:	c8 1a       	sub	r12, r24
    14d8:	d9 0a       	sbc	r13, r25
    14da:	dc 82       	std	Y+4, r13	; 0x04
    14dc:	cb 82       	std	Y+3, r12	; 0x03
    14de:	ba 82       	std	Y+2, r11	; 0x02
    14e0:	ce 01       	movw	r24, r28
    14e2:	01 96       	adiw	r24, 0x01	; 1
    14e4:	0e 94 1b 0b 	call	0x1636	; 0x1636 <__pack_f>
    14e8:	28 96       	adiw	r28, 0x08	; 8
    14ea:	e9 e0       	ldi	r30, 0x09	; 9
    14ec:	0c 94 08 0d 	jmp	0x1a10	; 0x1a10 <__epilogue_restores__+0x12>

000014f0 <__fixsfsi>:
    14f0:	ac e0       	ldi	r26, 0x0C	; 12
    14f2:	b0 e0       	ldi	r27, 0x00	; 0
    14f4:	ee e7       	ldi	r30, 0x7E	; 126
    14f6:	fa e0       	ldi	r31, 0x0A	; 10
    14f8:	0c 94 f3 0c 	jmp	0x19e6	; 0x19e6 <__prologue_saves__+0x20>
    14fc:	69 83       	std	Y+1, r22	; 0x01
    14fe:	7a 83       	std	Y+2, r23	; 0x02
    1500:	8b 83       	std	Y+3, r24	; 0x03
    1502:	9c 83       	std	Y+4, r25	; 0x04
    1504:	ce 01       	movw	r24, r28
    1506:	01 96       	adiw	r24, 0x01	; 1
    1508:	be 01       	movw	r22, r28
    150a:	6b 5f       	subi	r22, 0xFB	; 251
    150c:	7f 4f       	sbci	r23, 0xFF	; 255
    150e:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <__unpack_f>
    1512:	8d 81       	ldd	r24, Y+5	; 0x05
    1514:	82 30       	cpi	r24, 0x02	; 2
    1516:	61 f1       	breq	.+88     	; 0x1570 <__fixsfsi+0x80>
    1518:	82 30       	cpi	r24, 0x02	; 2
    151a:	50 f1       	brcs	.+84     	; 0x1570 <__fixsfsi+0x80>
    151c:	84 30       	cpi	r24, 0x04	; 4
    151e:	21 f4       	brne	.+8      	; 0x1528 <__fixsfsi+0x38>
    1520:	8e 81       	ldd	r24, Y+6	; 0x06
    1522:	88 23       	and	r24, r24
    1524:	51 f1       	breq	.+84     	; 0x157a <__fixsfsi+0x8a>
    1526:	2e c0       	rjmp	.+92     	; 0x1584 <__fixsfsi+0x94>
    1528:	2f 81       	ldd	r18, Y+7	; 0x07
    152a:	38 85       	ldd	r19, Y+8	; 0x08
    152c:	37 fd       	sbrc	r19, 7
    152e:	20 c0       	rjmp	.+64     	; 0x1570 <__fixsfsi+0x80>
    1530:	6e 81       	ldd	r22, Y+6	; 0x06
    1532:	2f 31       	cpi	r18, 0x1F	; 31
    1534:	31 05       	cpc	r19, r1
    1536:	1c f0       	brlt	.+6      	; 0x153e <__fixsfsi+0x4e>
    1538:	66 23       	and	r22, r22
    153a:	f9 f0       	breq	.+62     	; 0x157a <__fixsfsi+0x8a>
    153c:	23 c0       	rjmp	.+70     	; 0x1584 <__fixsfsi+0x94>
    153e:	8e e1       	ldi	r24, 0x1E	; 30
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	82 1b       	sub	r24, r18
    1544:	93 0b       	sbc	r25, r19
    1546:	29 85       	ldd	r18, Y+9	; 0x09
    1548:	3a 85       	ldd	r19, Y+10	; 0x0a
    154a:	4b 85       	ldd	r20, Y+11	; 0x0b
    154c:	5c 85       	ldd	r21, Y+12	; 0x0c
    154e:	04 c0       	rjmp	.+8      	; 0x1558 <__fixsfsi+0x68>
    1550:	56 95       	lsr	r21
    1552:	47 95       	ror	r20
    1554:	37 95       	ror	r19
    1556:	27 95       	ror	r18
    1558:	8a 95       	dec	r24
    155a:	d2 f7       	brpl	.-12     	; 0x1550 <__fixsfsi+0x60>
    155c:	66 23       	and	r22, r22
    155e:	b1 f0       	breq	.+44     	; 0x158c <__fixsfsi+0x9c>
    1560:	50 95       	com	r21
    1562:	40 95       	com	r20
    1564:	30 95       	com	r19
    1566:	21 95       	neg	r18
    1568:	3f 4f       	sbci	r19, 0xFF	; 255
    156a:	4f 4f       	sbci	r20, 0xFF	; 255
    156c:	5f 4f       	sbci	r21, 0xFF	; 255
    156e:	0e c0       	rjmp	.+28     	; 0x158c <__fixsfsi+0x9c>
    1570:	20 e0       	ldi	r18, 0x00	; 0
    1572:	30 e0       	ldi	r19, 0x00	; 0
    1574:	40 e0       	ldi	r20, 0x00	; 0
    1576:	50 e0       	ldi	r21, 0x00	; 0
    1578:	09 c0       	rjmp	.+18     	; 0x158c <__fixsfsi+0x9c>
    157a:	2f ef       	ldi	r18, 0xFF	; 255
    157c:	3f ef       	ldi	r19, 0xFF	; 255
    157e:	4f ef       	ldi	r20, 0xFF	; 255
    1580:	5f e7       	ldi	r21, 0x7F	; 127
    1582:	04 c0       	rjmp	.+8      	; 0x158c <__fixsfsi+0x9c>
    1584:	20 e0       	ldi	r18, 0x00	; 0
    1586:	30 e0       	ldi	r19, 0x00	; 0
    1588:	40 e0       	ldi	r20, 0x00	; 0
    158a:	50 e8       	ldi	r21, 0x80	; 128
    158c:	b9 01       	movw	r22, r18
    158e:	ca 01       	movw	r24, r20
    1590:	2c 96       	adiw	r28, 0x0c	; 12
    1592:	e2 e0       	ldi	r30, 0x02	; 2
    1594:	0c 94 0f 0d 	jmp	0x1a1e	; 0x1a1e <__epilogue_restores__+0x20>

00001598 <__clzsi2>:
    1598:	ef 92       	push	r14
    159a:	ff 92       	push	r15
    159c:	0f 93       	push	r16
    159e:	1f 93       	push	r17
    15a0:	7b 01       	movw	r14, r22
    15a2:	8c 01       	movw	r16, r24
    15a4:	80 e0       	ldi	r24, 0x00	; 0
    15a6:	e8 16       	cp	r14, r24
    15a8:	80 e0       	ldi	r24, 0x00	; 0
    15aa:	f8 06       	cpc	r15, r24
    15ac:	81 e0       	ldi	r24, 0x01	; 1
    15ae:	08 07       	cpc	r16, r24
    15b0:	80 e0       	ldi	r24, 0x00	; 0
    15b2:	18 07       	cpc	r17, r24
    15b4:	88 f4       	brcc	.+34     	; 0x15d8 <__clzsi2+0x40>
    15b6:	8f ef       	ldi	r24, 0xFF	; 255
    15b8:	e8 16       	cp	r14, r24
    15ba:	f1 04       	cpc	r15, r1
    15bc:	01 05       	cpc	r16, r1
    15be:	11 05       	cpc	r17, r1
    15c0:	31 f0       	breq	.+12     	; 0x15ce <__clzsi2+0x36>
    15c2:	28 f0       	brcs	.+10     	; 0x15ce <__clzsi2+0x36>
    15c4:	88 e0       	ldi	r24, 0x08	; 8
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	a0 e0       	ldi	r26, 0x00	; 0
    15ca:	b0 e0       	ldi	r27, 0x00	; 0
    15cc:	17 c0       	rjmp	.+46     	; 0x15fc <__clzsi2+0x64>
    15ce:	80 e0       	ldi	r24, 0x00	; 0
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	a0 e0       	ldi	r26, 0x00	; 0
    15d4:	b0 e0       	ldi	r27, 0x00	; 0
    15d6:	12 c0       	rjmp	.+36     	; 0x15fc <__clzsi2+0x64>
    15d8:	80 e0       	ldi	r24, 0x00	; 0
    15da:	e8 16       	cp	r14, r24
    15dc:	80 e0       	ldi	r24, 0x00	; 0
    15de:	f8 06       	cpc	r15, r24
    15e0:	80 e0       	ldi	r24, 0x00	; 0
    15e2:	08 07       	cpc	r16, r24
    15e4:	81 e0       	ldi	r24, 0x01	; 1
    15e6:	18 07       	cpc	r17, r24
    15e8:	28 f0       	brcs	.+10     	; 0x15f4 <__clzsi2+0x5c>
    15ea:	88 e1       	ldi	r24, 0x18	; 24
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	a0 e0       	ldi	r26, 0x00	; 0
    15f0:	b0 e0       	ldi	r27, 0x00	; 0
    15f2:	04 c0       	rjmp	.+8      	; 0x15fc <__clzsi2+0x64>
    15f4:	80 e1       	ldi	r24, 0x10	; 16
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	a0 e0       	ldi	r26, 0x00	; 0
    15fa:	b0 e0       	ldi	r27, 0x00	; 0
    15fc:	20 e2       	ldi	r18, 0x20	; 32
    15fe:	30 e0       	ldi	r19, 0x00	; 0
    1600:	40 e0       	ldi	r20, 0x00	; 0
    1602:	50 e0       	ldi	r21, 0x00	; 0
    1604:	28 1b       	sub	r18, r24
    1606:	39 0b       	sbc	r19, r25
    1608:	4a 0b       	sbc	r20, r26
    160a:	5b 0b       	sbc	r21, r27
    160c:	04 c0       	rjmp	.+8      	; 0x1616 <__clzsi2+0x7e>
    160e:	16 95       	lsr	r17
    1610:	07 95       	ror	r16
    1612:	f7 94       	ror	r15
    1614:	e7 94       	ror	r14
    1616:	8a 95       	dec	r24
    1618:	d2 f7       	brpl	.-12     	; 0x160e <__clzsi2+0x76>
    161a:	f7 01       	movw	r30, r14
    161c:	e8 5f       	subi	r30, 0xF8	; 248
    161e:	fd 4f       	sbci	r31, 0xFD	; 253
    1620:	80 81       	ld	r24, Z
    1622:	28 1b       	sub	r18, r24
    1624:	31 09       	sbc	r19, r1
    1626:	41 09       	sbc	r20, r1
    1628:	51 09       	sbc	r21, r1
    162a:	c9 01       	movw	r24, r18
    162c:	1f 91       	pop	r17
    162e:	0f 91       	pop	r16
    1630:	ff 90       	pop	r15
    1632:	ef 90       	pop	r14
    1634:	08 95       	ret

00001636 <__pack_f>:
    1636:	df 92       	push	r13
    1638:	ef 92       	push	r14
    163a:	ff 92       	push	r15
    163c:	0f 93       	push	r16
    163e:	1f 93       	push	r17
    1640:	fc 01       	movw	r30, r24
    1642:	e4 80       	ldd	r14, Z+4	; 0x04
    1644:	f5 80       	ldd	r15, Z+5	; 0x05
    1646:	06 81       	ldd	r16, Z+6	; 0x06
    1648:	17 81       	ldd	r17, Z+7	; 0x07
    164a:	d1 80       	ldd	r13, Z+1	; 0x01
    164c:	80 81       	ld	r24, Z
    164e:	82 30       	cpi	r24, 0x02	; 2
    1650:	48 f4       	brcc	.+18     	; 0x1664 <__pack_f+0x2e>
    1652:	80 e0       	ldi	r24, 0x00	; 0
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	a0 e1       	ldi	r26, 0x10	; 16
    1658:	b0 e0       	ldi	r27, 0x00	; 0
    165a:	e8 2a       	or	r14, r24
    165c:	f9 2a       	or	r15, r25
    165e:	0a 2b       	or	r16, r26
    1660:	1b 2b       	or	r17, r27
    1662:	a5 c0       	rjmp	.+330    	; 0x17ae <__pack_f+0x178>
    1664:	84 30       	cpi	r24, 0x04	; 4
    1666:	09 f4       	brne	.+2      	; 0x166a <__pack_f+0x34>
    1668:	9f c0       	rjmp	.+318    	; 0x17a8 <__pack_f+0x172>
    166a:	82 30       	cpi	r24, 0x02	; 2
    166c:	21 f4       	brne	.+8      	; 0x1676 <__pack_f+0x40>
    166e:	ee 24       	eor	r14, r14
    1670:	ff 24       	eor	r15, r15
    1672:	87 01       	movw	r16, r14
    1674:	05 c0       	rjmp	.+10     	; 0x1680 <__pack_f+0x4a>
    1676:	e1 14       	cp	r14, r1
    1678:	f1 04       	cpc	r15, r1
    167a:	01 05       	cpc	r16, r1
    167c:	11 05       	cpc	r17, r1
    167e:	19 f4       	brne	.+6      	; 0x1686 <__pack_f+0x50>
    1680:	e0 e0       	ldi	r30, 0x00	; 0
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	96 c0       	rjmp	.+300    	; 0x17b2 <__pack_f+0x17c>
    1686:	62 81       	ldd	r22, Z+2	; 0x02
    1688:	73 81       	ldd	r23, Z+3	; 0x03
    168a:	9f ef       	ldi	r25, 0xFF	; 255
    168c:	62 38       	cpi	r22, 0x82	; 130
    168e:	79 07       	cpc	r23, r25
    1690:	0c f0       	brlt	.+2      	; 0x1694 <__pack_f+0x5e>
    1692:	5b c0       	rjmp	.+182    	; 0x174a <__pack_f+0x114>
    1694:	22 e8       	ldi	r18, 0x82	; 130
    1696:	3f ef       	ldi	r19, 0xFF	; 255
    1698:	26 1b       	sub	r18, r22
    169a:	37 0b       	sbc	r19, r23
    169c:	2a 31       	cpi	r18, 0x1A	; 26
    169e:	31 05       	cpc	r19, r1
    16a0:	2c f0       	brlt	.+10     	; 0x16ac <__pack_f+0x76>
    16a2:	20 e0       	ldi	r18, 0x00	; 0
    16a4:	30 e0       	ldi	r19, 0x00	; 0
    16a6:	40 e0       	ldi	r20, 0x00	; 0
    16a8:	50 e0       	ldi	r21, 0x00	; 0
    16aa:	2a c0       	rjmp	.+84     	; 0x1700 <__pack_f+0xca>
    16ac:	b8 01       	movw	r22, r16
    16ae:	a7 01       	movw	r20, r14
    16b0:	02 2e       	mov	r0, r18
    16b2:	04 c0       	rjmp	.+8      	; 0x16bc <__pack_f+0x86>
    16b4:	76 95       	lsr	r23
    16b6:	67 95       	ror	r22
    16b8:	57 95       	ror	r21
    16ba:	47 95       	ror	r20
    16bc:	0a 94       	dec	r0
    16be:	d2 f7       	brpl	.-12     	; 0x16b4 <__pack_f+0x7e>
    16c0:	81 e0       	ldi	r24, 0x01	; 1
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	a0 e0       	ldi	r26, 0x00	; 0
    16c6:	b0 e0       	ldi	r27, 0x00	; 0
    16c8:	04 c0       	rjmp	.+8      	; 0x16d2 <__pack_f+0x9c>
    16ca:	88 0f       	add	r24, r24
    16cc:	99 1f       	adc	r25, r25
    16ce:	aa 1f       	adc	r26, r26
    16d0:	bb 1f       	adc	r27, r27
    16d2:	2a 95       	dec	r18
    16d4:	d2 f7       	brpl	.-12     	; 0x16ca <__pack_f+0x94>
    16d6:	01 97       	sbiw	r24, 0x01	; 1
    16d8:	a1 09       	sbc	r26, r1
    16da:	b1 09       	sbc	r27, r1
    16dc:	8e 21       	and	r24, r14
    16de:	9f 21       	and	r25, r15
    16e0:	a0 23       	and	r26, r16
    16e2:	b1 23       	and	r27, r17
    16e4:	00 97       	sbiw	r24, 0x00	; 0
    16e6:	a1 05       	cpc	r26, r1
    16e8:	b1 05       	cpc	r27, r1
    16ea:	21 f0       	breq	.+8      	; 0x16f4 <__pack_f+0xbe>
    16ec:	81 e0       	ldi	r24, 0x01	; 1
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	a0 e0       	ldi	r26, 0x00	; 0
    16f2:	b0 e0       	ldi	r27, 0x00	; 0
    16f4:	9a 01       	movw	r18, r20
    16f6:	ab 01       	movw	r20, r22
    16f8:	28 2b       	or	r18, r24
    16fa:	39 2b       	or	r19, r25
    16fc:	4a 2b       	or	r20, r26
    16fe:	5b 2b       	or	r21, r27
    1700:	da 01       	movw	r26, r20
    1702:	c9 01       	movw	r24, r18
    1704:	8f 77       	andi	r24, 0x7F	; 127
    1706:	90 70       	andi	r25, 0x00	; 0
    1708:	a0 70       	andi	r26, 0x00	; 0
    170a:	b0 70       	andi	r27, 0x00	; 0
    170c:	80 34       	cpi	r24, 0x40	; 64
    170e:	91 05       	cpc	r25, r1
    1710:	a1 05       	cpc	r26, r1
    1712:	b1 05       	cpc	r27, r1
    1714:	39 f4       	brne	.+14     	; 0x1724 <__pack_f+0xee>
    1716:	27 ff       	sbrs	r18, 7
    1718:	09 c0       	rjmp	.+18     	; 0x172c <__pack_f+0xf6>
    171a:	20 5c       	subi	r18, 0xC0	; 192
    171c:	3f 4f       	sbci	r19, 0xFF	; 255
    171e:	4f 4f       	sbci	r20, 0xFF	; 255
    1720:	5f 4f       	sbci	r21, 0xFF	; 255
    1722:	04 c0       	rjmp	.+8      	; 0x172c <__pack_f+0xf6>
    1724:	21 5c       	subi	r18, 0xC1	; 193
    1726:	3f 4f       	sbci	r19, 0xFF	; 255
    1728:	4f 4f       	sbci	r20, 0xFF	; 255
    172a:	5f 4f       	sbci	r21, 0xFF	; 255
    172c:	e0 e0       	ldi	r30, 0x00	; 0
    172e:	f0 e0       	ldi	r31, 0x00	; 0
    1730:	20 30       	cpi	r18, 0x00	; 0
    1732:	a0 e0       	ldi	r26, 0x00	; 0
    1734:	3a 07       	cpc	r19, r26
    1736:	a0 e0       	ldi	r26, 0x00	; 0
    1738:	4a 07       	cpc	r20, r26
    173a:	a0 e4       	ldi	r26, 0x40	; 64
    173c:	5a 07       	cpc	r21, r26
    173e:	10 f0       	brcs	.+4      	; 0x1744 <__pack_f+0x10e>
    1740:	e1 e0       	ldi	r30, 0x01	; 1
    1742:	f0 e0       	ldi	r31, 0x00	; 0
    1744:	79 01       	movw	r14, r18
    1746:	8a 01       	movw	r16, r20
    1748:	27 c0       	rjmp	.+78     	; 0x1798 <__pack_f+0x162>
    174a:	60 38       	cpi	r22, 0x80	; 128
    174c:	71 05       	cpc	r23, r1
    174e:	64 f5       	brge	.+88     	; 0x17a8 <__pack_f+0x172>
    1750:	fb 01       	movw	r30, r22
    1752:	e1 58       	subi	r30, 0x81	; 129
    1754:	ff 4f       	sbci	r31, 0xFF	; 255
    1756:	d8 01       	movw	r26, r16
    1758:	c7 01       	movw	r24, r14
    175a:	8f 77       	andi	r24, 0x7F	; 127
    175c:	90 70       	andi	r25, 0x00	; 0
    175e:	a0 70       	andi	r26, 0x00	; 0
    1760:	b0 70       	andi	r27, 0x00	; 0
    1762:	80 34       	cpi	r24, 0x40	; 64
    1764:	91 05       	cpc	r25, r1
    1766:	a1 05       	cpc	r26, r1
    1768:	b1 05       	cpc	r27, r1
    176a:	39 f4       	brne	.+14     	; 0x177a <__pack_f+0x144>
    176c:	e7 fe       	sbrs	r14, 7
    176e:	0d c0       	rjmp	.+26     	; 0x178a <__pack_f+0x154>
    1770:	80 e4       	ldi	r24, 0x40	; 64
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	a0 e0       	ldi	r26, 0x00	; 0
    1776:	b0 e0       	ldi	r27, 0x00	; 0
    1778:	04 c0       	rjmp	.+8      	; 0x1782 <__pack_f+0x14c>
    177a:	8f e3       	ldi	r24, 0x3F	; 63
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	a0 e0       	ldi	r26, 0x00	; 0
    1780:	b0 e0       	ldi	r27, 0x00	; 0
    1782:	e8 0e       	add	r14, r24
    1784:	f9 1e       	adc	r15, r25
    1786:	0a 1f       	adc	r16, r26
    1788:	1b 1f       	adc	r17, r27
    178a:	17 ff       	sbrs	r17, 7
    178c:	05 c0       	rjmp	.+10     	; 0x1798 <__pack_f+0x162>
    178e:	16 95       	lsr	r17
    1790:	07 95       	ror	r16
    1792:	f7 94       	ror	r15
    1794:	e7 94       	ror	r14
    1796:	31 96       	adiw	r30, 0x01	; 1
    1798:	87 e0       	ldi	r24, 0x07	; 7
    179a:	16 95       	lsr	r17
    179c:	07 95       	ror	r16
    179e:	f7 94       	ror	r15
    17a0:	e7 94       	ror	r14
    17a2:	8a 95       	dec	r24
    17a4:	d1 f7       	brne	.-12     	; 0x179a <__pack_f+0x164>
    17a6:	05 c0       	rjmp	.+10     	; 0x17b2 <__pack_f+0x17c>
    17a8:	ee 24       	eor	r14, r14
    17aa:	ff 24       	eor	r15, r15
    17ac:	87 01       	movw	r16, r14
    17ae:	ef ef       	ldi	r30, 0xFF	; 255
    17b0:	f0 e0       	ldi	r31, 0x00	; 0
    17b2:	6e 2f       	mov	r22, r30
    17b4:	67 95       	ror	r22
    17b6:	66 27       	eor	r22, r22
    17b8:	67 95       	ror	r22
    17ba:	90 2f       	mov	r25, r16
    17bc:	9f 77       	andi	r25, 0x7F	; 127
    17be:	d7 94       	ror	r13
    17c0:	dd 24       	eor	r13, r13
    17c2:	d7 94       	ror	r13
    17c4:	8e 2f       	mov	r24, r30
    17c6:	86 95       	lsr	r24
    17c8:	49 2f       	mov	r20, r25
    17ca:	46 2b       	or	r20, r22
    17cc:	58 2f       	mov	r21, r24
    17ce:	5d 29       	or	r21, r13
    17d0:	b7 01       	movw	r22, r14
    17d2:	ca 01       	movw	r24, r20
    17d4:	1f 91       	pop	r17
    17d6:	0f 91       	pop	r16
    17d8:	ff 90       	pop	r15
    17da:	ef 90       	pop	r14
    17dc:	df 90       	pop	r13
    17de:	08 95       	ret

000017e0 <__unpack_f>:
    17e0:	fc 01       	movw	r30, r24
    17e2:	db 01       	movw	r26, r22
    17e4:	40 81       	ld	r20, Z
    17e6:	51 81       	ldd	r21, Z+1	; 0x01
    17e8:	22 81       	ldd	r18, Z+2	; 0x02
    17ea:	62 2f       	mov	r22, r18
    17ec:	6f 77       	andi	r22, 0x7F	; 127
    17ee:	70 e0       	ldi	r23, 0x00	; 0
    17f0:	22 1f       	adc	r18, r18
    17f2:	22 27       	eor	r18, r18
    17f4:	22 1f       	adc	r18, r18
    17f6:	93 81       	ldd	r25, Z+3	; 0x03
    17f8:	89 2f       	mov	r24, r25
    17fa:	88 0f       	add	r24, r24
    17fc:	82 2b       	or	r24, r18
    17fe:	28 2f       	mov	r18, r24
    1800:	30 e0       	ldi	r19, 0x00	; 0
    1802:	99 1f       	adc	r25, r25
    1804:	99 27       	eor	r25, r25
    1806:	99 1f       	adc	r25, r25
    1808:	11 96       	adiw	r26, 0x01	; 1
    180a:	9c 93       	st	X, r25
    180c:	11 97       	sbiw	r26, 0x01	; 1
    180e:	21 15       	cp	r18, r1
    1810:	31 05       	cpc	r19, r1
    1812:	a9 f5       	brne	.+106    	; 0x187e <__unpack_f+0x9e>
    1814:	41 15       	cp	r20, r1
    1816:	51 05       	cpc	r21, r1
    1818:	61 05       	cpc	r22, r1
    181a:	71 05       	cpc	r23, r1
    181c:	11 f4       	brne	.+4      	; 0x1822 <__unpack_f+0x42>
    181e:	82 e0       	ldi	r24, 0x02	; 2
    1820:	37 c0       	rjmp	.+110    	; 0x1890 <__unpack_f+0xb0>
    1822:	82 e8       	ldi	r24, 0x82	; 130
    1824:	9f ef       	ldi	r25, 0xFF	; 255
    1826:	13 96       	adiw	r26, 0x03	; 3
    1828:	9c 93       	st	X, r25
    182a:	8e 93       	st	-X, r24
    182c:	12 97       	sbiw	r26, 0x02	; 2
    182e:	9a 01       	movw	r18, r20
    1830:	ab 01       	movw	r20, r22
    1832:	67 e0       	ldi	r22, 0x07	; 7
    1834:	22 0f       	add	r18, r18
    1836:	33 1f       	adc	r19, r19
    1838:	44 1f       	adc	r20, r20
    183a:	55 1f       	adc	r21, r21
    183c:	6a 95       	dec	r22
    183e:	d1 f7       	brne	.-12     	; 0x1834 <__unpack_f+0x54>
    1840:	83 e0       	ldi	r24, 0x03	; 3
    1842:	8c 93       	st	X, r24
    1844:	0d c0       	rjmp	.+26     	; 0x1860 <__unpack_f+0x80>
    1846:	22 0f       	add	r18, r18
    1848:	33 1f       	adc	r19, r19
    184a:	44 1f       	adc	r20, r20
    184c:	55 1f       	adc	r21, r21
    184e:	12 96       	adiw	r26, 0x02	; 2
    1850:	8d 91       	ld	r24, X+
    1852:	9c 91       	ld	r25, X
    1854:	13 97       	sbiw	r26, 0x03	; 3
    1856:	01 97       	sbiw	r24, 0x01	; 1
    1858:	13 96       	adiw	r26, 0x03	; 3
    185a:	9c 93       	st	X, r25
    185c:	8e 93       	st	-X, r24
    185e:	12 97       	sbiw	r26, 0x02	; 2
    1860:	20 30       	cpi	r18, 0x00	; 0
    1862:	80 e0       	ldi	r24, 0x00	; 0
    1864:	38 07       	cpc	r19, r24
    1866:	80 e0       	ldi	r24, 0x00	; 0
    1868:	48 07       	cpc	r20, r24
    186a:	80 e4       	ldi	r24, 0x40	; 64
    186c:	58 07       	cpc	r21, r24
    186e:	58 f3       	brcs	.-42     	; 0x1846 <__unpack_f+0x66>
    1870:	14 96       	adiw	r26, 0x04	; 4
    1872:	2d 93       	st	X+, r18
    1874:	3d 93       	st	X+, r19
    1876:	4d 93       	st	X+, r20
    1878:	5c 93       	st	X, r21
    187a:	17 97       	sbiw	r26, 0x07	; 7
    187c:	08 95       	ret
    187e:	2f 3f       	cpi	r18, 0xFF	; 255
    1880:	31 05       	cpc	r19, r1
    1882:	79 f4       	brne	.+30     	; 0x18a2 <__unpack_f+0xc2>
    1884:	41 15       	cp	r20, r1
    1886:	51 05       	cpc	r21, r1
    1888:	61 05       	cpc	r22, r1
    188a:	71 05       	cpc	r23, r1
    188c:	19 f4       	brne	.+6      	; 0x1894 <__unpack_f+0xb4>
    188e:	84 e0       	ldi	r24, 0x04	; 4
    1890:	8c 93       	st	X, r24
    1892:	08 95       	ret
    1894:	64 ff       	sbrs	r22, 4
    1896:	03 c0       	rjmp	.+6      	; 0x189e <__unpack_f+0xbe>
    1898:	81 e0       	ldi	r24, 0x01	; 1
    189a:	8c 93       	st	X, r24
    189c:	12 c0       	rjmp	.+36     	; 0x18c2 <__unpack_f+0xe2>
    189e:	1c 92       	st	X, r1
    18a0:	10 c0       	rjmp	.+32     	; 0x18c2 <__unpack_f+0xe2>
    18a2:	2f 57       	subi	r18, 0x7F	; 127
    18a4:	30 40       	sbci	r19, 0x00	; 0
    18a6:	13 96       	adiw	r26, 0x03	; 3
    18a8:	3c 93       	st	X, r19
    18aa:	2e 93       	st	-X, r18
    18ac:	12 97       	sbiw	r26, 0x02	; 2
    18ae:	83 e0       	ldi	r24, 0x03	; 3
    18b0:	8c 93       	st	X, r24
    18b2:	87 e0       	ldi	r24, 0x07	; 7
    18b4:	44 0f       	add	r20, r20
    18b6:	55 1f       	adc	r21, r21
    18b8:	66 1f       	adc	r22, r22
    18ba:	77 1f       	adc	r23, r23
    18bc:	8a 95       	dec	r24
    18be:	d1 f7       	brne	.-12     	; 0x18b4 <__unpack_f+0xd4>
    18c0:	70 64       	ori	r23, 0x40	; 64
    18c2:	14 96       	adiw	r26, 0x04	; 4
    18c4:	4d 93       	st	X+, r20
    18c6:	5d 93       	st	X+, r21
    18c8:	6d 93       	st	X+, r22
    18ca:	7c 93       	st	X, r23
    18cc:	17 97       	sbiw	r26, 0x07	; 7
    18ce:	08 95       	ret

000018d0 <__fpcmp_parts_f>:
    18d0:	1f 93       	push	r17
    18d2:	dc 01       	movw	r26, r24
    18d4:	fb 01       	movw	r30, r22
    18d6:	9c 91       	ld	r25, X
    18d8:	92 30       	cpi	r25, 0x02	; 2
    18da:	08 f4       	brcc	.+2      	; 0x18de <__fpcmp_parts_f+0xe>
    18dc:	47 c0       	rjmp	.+142    	; 0x196c <__fpcmp_parts_f+0x9c>
    18de:	80 81       	ld	r24, Z
    18e0:	82 30       	cpi	r24, 0x02	; 2
    18e2:	08 f4       	brcc	.+2      	; 0x18e6 <__fpcmp_parts_f+0x16>
    18e4:	43 c0       	rjmp	.+134    	; 0x196c <__fpcmp_parts_f+0x9c>
    18e6:	94 30       	cpi	r25, 0x04	; 4
    18e8:	51 f4       	brne	.+20     	; 0x18fe <__fpcmp_parts_f+0x2e>
    18ea:	11 96       	adiw	r26, 0x01	; 1
    18ec:	1c 91       	ld	r17, X
    18ee:	84 30       	cpi	r24, 0x04	; 4
    18f0:	99 f5       	brne	.+102    	; 0x1958 <__fpcmp_parts_f+0x88>
    18f2:	81 81       	ldd	r24, Z+1	; 0x01
    18f4:	68 2f       	mov	r22, r24
    18f6:	70 e0       	ldi	r23, 0x00	; 0
    18f8:	61 1b       	sub	r22, r17
    18fa:	71 09       	sbc	r23, r1
    18fc:	3f c0       	rjmp	.+126    	; 0x197c <__fpcmp_parts_f+0xac>
    18fe:	84 30       	cpi	r24, 0x04	; 4
    1900:	21 f0       	breq	.+8      	; 0x190a <__fpcmp_parts_f+0x3a>
    1902:	92 30       	cpi	r25, 0x02	; 2
    1904:	31 f4       	brne	.+12     	; 0x1912 <__fpcmp_parts_f+0x42>
    1906:	82 30       	cpi	r24, 0x02	; 2
    1908:	b9 f1       	breq	.+110    	; 0x1978 <__fpcmp_parts_f+0xa8>
    190a:	81 81       	ldd	r24, Z+1	; 0x01
    190c:	88 23       	and	r24, r24
    190e:	89 f1       	breq	.+98     	; 0x1972 <__fpcmp_parts_f+0xa2>
    1910:	2d c0       	rjmp	.+90     	; 0x196c <__fpcmp_parts_f+0x9c>
    1912:	11 96       	adiw	r26, 0x01	; 1
    1914:	1c 91       	ld	r17, X
    1916:	11 97       	sbiw	r26, 0x01	; 1
    1918:	82 30       	cpi	r24, 0x02	; 2
    191a:	f1 f0       	breq	.+60     	; 0x1958 <__fpcmp_parts_f+0x88>
    191c:	81 81       	ldd	r24, Z+1	; 0x01
    191e:	18 17       	cp	r17, r24
    1920:	d9 f4       	brne	.+54     	; 0x1958 <__fpcmp_parts_f+0x88>
    1922:	12 96       	adiw	r26, 0x02	; 2
    1924:	2d 91       	ld	r18, X+
    1926:	3c 91       	ld	r19, X
    1928:	13 97       	sbiw	r26, 0x03	; 3
    192a:	82 81       	ldd	r24, Z+2	; 0x02
    192c:	93 81       	ldd	r25, Z+3	; 0x03
    192e:	82 17       	cp	r24, r18
    1930:	93 07       	cpc	r25, r19
    1932:	94 f0       	brlt	.+36     	; 0x1958 <__fpcmp_parts_f+0x88>
    1934:	28 17       	cp	r18, r24
    1936:	39 07       	cpc	r19, r25
    1938:	bc f0       	brlt	.+46     	; 0x1968 <__fpcmp_parts_f+0x98>
    193a:	14 96       	adiw	r26, 0x04	; 4
    193c:	8d 91       	ld	r24, X+
    193e:	9d 91       	ld	r25, X+
    1940:	0d 90       	ld	r0, X+
    1942:	bc 91       	ld	r27, X
    1944:	a0 2d       	mov	r26, r0
    1946:	24 81       	ldd	r18, Z+4	; 0x04
    1948:	35 81       	ldd	r19, Z+5	; 0x05
    194a:	46 81       	ldd	r20, Z+6	; 0x06
    194c:	57 81       	ldd	r21, Z+7	; 0x07
    194e:	28 17       	cp	r18, r24
    1950:	39 07       	cpc	r19, r25
    1952:	4a 07       	cpc	r20, r26
    1954:	5b 07       	cpc	r21, r27
    1956:	18 f4       	brcc	.+6      	; 0x195e <__fpcmp_parts_f+0x8e>
    1958:	11 23       	and	r17, r17
    195a:	41 f0       	breq	.+16     	; 0x196c <__fpcmp_parts_f+0x9c>
    195c:	0a c0       	rjmp	.+20     	; 0x1972 <__fpcmp_parts_f+0xa2>
    195e:	82 17       	cp	r24, r18
    1960:	93 07       	cpc	r25, r19
    1962:	a4 07       	cpc	r26, r20
    1964:	b5 07       	cpc	r27, r21
    1966:	40 f4       	brcc	.+16     	; 0x1978 <__fpcmp_parts_f+0xa8>
    1968:	11 23       	and	r17, r17
    196a:	19 f0       	breq	.+6      	; 0x1972 <__fpcmp_parts_f+0xa2>
    196c:	61 e0       	ldi	r22, 0x01	; 1
    196e:	70 e0       	ldi	r23, 0x00	; 0
    1970:	05 c0       	rjmp	.+10     	; 0x197c <__fpcmp_parts_f+0xac>
    1972:	6f ef       	ldi	r22, 0xFF	; 255
    1974:	7f ef       	ldi	r23, 0xFF	; 255
    1976:	02 c0       	rjmp	.+4      	; 0x197c <__fpcmp_parts_f+0xac>
    1978:	60 e0       	ldi	r22, 0x00	; 0
    197a:	70 e0       	ldi	r23, 0x00	; 0
    197c:	cb 01       	movw	r24, r22
    197e:	1f 91       	pop	r17
    1980:	08 95       	ret

00001982 <__udivmodsi4>:
    1982:	a1 e2       	ldi	r26, 0x21	; 33
    1984:	1a 2e       	mov	r1, r26
    1986:	aa 1b       	sub	r26, r26
    1988:	bb 1b       	sub	r27, r27
    198a:	fd 01       	movw	r30, r26
    198c:	0d c0       	rjmp	.+26     	; 0x19a8 <__udivmodsi4_ep>

0000198e <__udivmodsi4_loop>:
    198e:	aa 1f       	adc	r26, r26
    1990:	bb 1f       	adc	r27, r27
    1992:	ee 1f       	adc	r30, r30
    1994:	ff 1f       	adc	r31, r31
    1996:	a2 17       	cp	r26, r18
    1998:	b3 07       	cpc	r27, r19
    199a:	e4 07       	cpc	r30, r20
    199c:	f5 07       	cpc	r31, r21
    199e:	20 f0       	brcs	.+8      	; 0x19a8 <__udivmodsi4_ep>
    19a0:	a2 1b       	sub	r26, r18
    19a2:	b3 0b       	sbc	r27, r19
    19a4:	e4 0b       	sbc	r30, r20
    19a6:	f5 0b       	sbc	r31, r21

000019a8 <__udivmodsi4_ep>:
    19a8:	66 1f       	adc	r22, r22
    19aa:	77 1f       	adc	r23, r23
    19ac:	88 1f       	adc	r24, r24
    19ae:	99 1f       	adc	r25, r25
    19b0:	1a 94       	dec	r1
    19b2:	69 f7       	brne	.-38     	; 0x198e <__udivmodsi4_loop>
    19b4:	60 95       	com	r22
    19b6:	70 95       	com	r23
    19b8:	80 95       	com	r24
    19ba:	90 95       	com	r25
    19bc:	9b 01       	movw	r18, r22
    19be:	ac 01       	movw	r20, r24
    19c0:	bd 01       	movw	r22, r26
    19c2:	cf 01       	movw	r24, r30
    19c4:	08 95       	ret

000019c6 <__prologue_saves__>:
    19c6:	2f 92       	push	r2
    19c8:	3f 92       	push	r3
    19ca:	4f 92       	push	r4
    19cc:	5f 92       	push	r5
    19ce:	6f 92       	push	r6
    19d0:	7f 92       	push	r7
    19d2:	8f 92       	push	r8
    19d4:	9f 92       	push	r9
    19d6:	af 92       	push	r10
    19d8:	bf 92       	push	r11
    19da:	cf 92       	push	r12
    19dc:	df 92       	push	r13
    19de:	ef 92       	push	r14
    19e0:	ff 92       	push	r15
    19e2:	0f 93       	push	r16
    19e4:	1f 93       	push	r17
    19e6:	cf 93       	push	r28
    19e8:	df 93       	push	r29
    19ea:	cd b7       	in	r28, 0x3d	; 61
    19ec:	de b7       	in	r29, 0x3e	; 62
    19ee:	ca 1b       	sub	r28, r26
    19f0:	db 0b       	sbc	r29, r27
    19f2:	0f b6       	in	r0, 0x3f	; 63
    19f4:	f8 94       	cli
    19f6:	de bf       	out	0x3e, r29	; 62
    19f8:	0f be       	out	0x3f, r0	; 63
    19fa:	cd bf       	out	0x3d, r28	; 61
    19fc:	19 94       	eijmp

000019fe <__epilogue_restores__>:
    19fe:	2a 88       	ldd	r2, Y+18	; 0x12
    1a00:	39 88       	ldd	r3, Y+17	; 0x11
    1a02:	48 88       	ldd	r4, Y+16	; 0x10
    1a04:	5f 84       	ldd	r5, Y+15	; 0x0f
    1a06:	6e 84       	ldd	r6, Y+14	; 0x0e
    1a08:	7d 84       	ldd	r7, Y+13	; 0x0d
    1a0a:	8c 84       	ldd	r8, Y+12	; 0x0c
    1a0c:	9b 84       	ldd	r9, Y+11	; 0x0b
    1a0e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1a10:	b9 84       	ldd	r11, Y+9	; 0x09
    1a12:	c8 84       	ldd	r12, Y+8	; 0x08
    1a14:	df 80       	ldd	r13, Y+7	; 0x07
    1a16:	ee 80       	ldd	r14, Y+6	; 0x06
    1a18:	fd 80       	ldd	r15, Y+5	; 0x05
    1a1a:	0c 81       	ldd	r16, Y+4	; 0x04
    1a1c:	1b 81       	ldd	r17, Y+3	; 0x03
    1a1e:	aa 81       	ldd	r26, Y+2	; 0x02
    1a20:	b9 81       	ldd	r27, Y+1	; 0x01
    1a22:	ce 0f       	add	r28, r30
    1a24:	d1 1d       	adc	r29, r1
    1a26:	0f b6       	in	r0, 0x3f	; 63
    1a28:	f8 94       	cli
    1a2a:	de bf       	out	0x3e, r29	; 62
    1a2c:	0f be       	out	0x3f, r0	; 63
    1a2e:	cd bf       	out	0x3d, r28	; 61
    1a30:	ed 01       	movw	r28, r26
    1a32:	08 95       	ret

00001a34 <_exit>:
    1a34:	f8 94       	cli

00001a36 <__stop_program>:
    1a36:	ff cf       	rjmp	.-2      	; 0x1a36 <__stop_program>
