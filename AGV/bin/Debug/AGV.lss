
bin\Debug\AGV.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000108  00800200  00001a02  00001ab6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a02  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000018  00800308  00800308  00001bbe  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  00001bbe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 00000200  00000000  00000000  00001bc1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000035e  00000000  00000000  00001dc1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002ba3  00000000  00000000  0000211f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000169a  00000000  00000000  00004cc2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001907  00000000  00000000  0000635c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002e0  00000000  00000000  00007c64  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000055a  00000000  00000000  00007f44  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009ce  00000000  00000000  0000849e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00008e6c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__vector_23>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	13 e0       	ldi	r17, 0x03	; 3
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e2 e0       	ldi	r30, 0x02	; 2
      fc:	fa e1       	ldi	r31, 0x1A	; 26
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a8 30       	cpi	r26, 0x08	; 8
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	13 e0       	ldi	r17, 0x03	; 3
     110:	a8 e0       	ldi	r26, 0x08	; 8
     112:	b3 e0       	ldi	r27, 0x03	; 3
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a0 32       	cpi	r26, 0x20	; 32
     11a:	b1 07       	cpc	r27, r17
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 95 00 	call	0x12a	; 0x12a <main>
     122:	0c 94 ff 0c 	jmp	0x19fe	; 0x19fe <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <main>:
#include <avr/interrupt.h>

#include "stepper.h"

int main(void)
{
     12a:	df 93       	push	r29
     12c:	cf 93       	push	r28
     12e:	cd b7       	in	r28, 0x3d	; 61
     130:	de b7       	in	r29, 0x3e	; 62
    ///initializing stepper motors///
    construct_stepper(&stepper1, PK0, PK1);
     132:	82 e1       	ldi	r24, 0x12	; 18
     134:	93 e0       	ldi	r25, 0x03	; 3
     136:	60 e0       	ldi	r22, 0x00	; 0
     138:	41 e0       	ldi	r20, 0x01	; 1
     13a:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <construct_stepper>
    construct_stepper(&stepper2, PK2, PK3);
     13e:	88 e0       	ldi	r24, 0x08	; 8
     140:	93 e0       	ldi	r25, 0x03	; 3
     142:	62 e0       	ldi	r22, 0x02	; 2
     144:	43 e0       	ldi	r20, 0x03	; 3
     146:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <construct_stepper>
    initialize_steppers();
     14a:	0e 94 13 02 	call	0x426	; 0x426 <initialize_steppers>
    init_stepper_timer0();
     14e:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <init_stepper_timer0>
    sei();
     152:	78 94       	sei

    ///initializing serial coms
    USART_Init(MYUBRR);
     154:	87 e6       	ldi	r24, 0x67	; 103
     156:	90 e0       	ldi	r25, 0x00	; 0
     158:	0e 94 ef 00 	call	0x1de	; 0x1de <USART_Init>

    stepper2.direction = forward;
     15c:	81 e0       	ldi	r24, 0x01	; 1
     15e:	80 93 0d 03 	sts	0x030D, r24
    stepper1.direction = backward;
     162:	82 e0       	ldi	r24, 0x02	; 2
     164:	80 93 17 03 	sts	0x0317, r24
    stepper1.time_profile = 10;
     168:	8a e0       	ldi	r24, 0x0A	; 10
     16a:	80 93 16 03 	sts	0x0316, r24
    stepper2.time_profile = 10;
     16e:	8a e0       	ldi	r24, 0x0A	; 10
     170:	80 93 0c 03 	sts	0x030C, r24

    turn(-360, &stepper1, &stepper2);
     174:	22 e1       	ldi	r18, 0x12	; 18
     176:	33 e0       	ldi	r19, 0x03	; 3
     178:	48 e0       	ldi	r20, 0x08	; 8
     17a:	53 e0       	ldi	r21, 0x03	; 3
     17c:	88 e9       	ldi	r24, 0x98	; 152
     17e:	9e ef       	ldi	r25, 0xFE	; 254
     180:	b9 01       	movw	r22, r18
     182:	0e 94 bb 04 	call	0x976	; 0x976 <turn>
     186:	ff cf       	rjmp	.-2      	; 0x186 <main+0x5c>

00000188 <__vector_23>:

    return 0;
}

ISR(TIMER0_OVF_vect)
{
     188:	1f 92       	push	r1
     18a:	0f 92       	push	r0
     18c:	0f b6       	in	r0, 0x3f	; 63
     18e:	0f 92       	push	r0
     190:	11 24       	eor	r1, r1
     192:	8f 93       	push	r24
     194:	9f 93       	push	r25
     196:	af 93       	push	r26
     198:	bf 93       	push	r27
     19a:	df 93       	push	r29
     19c:	cf 93       	push	r28
     19e:	cd b7       	in	r28, 0x3d	; 61
     1a0:	de b7       	in	r29, 0x3e	; 62
    ms++;
     1a2:	80 91 1c 03 	lds	r24, 0x031C
     1a6:	90 91 1d 03 	lds	r25, 0x031D
     1aa:	a0 91 1e 03 	lds	r26, 0x031E
     1ae:	b0 91 1f 03 	lds	r27, 0x031F
     1b2:	01 96       	adiw	r24, 0x01	; 1
     1b4:	a1 1d       	adc	r26, r1
     1b6:	b1 1d       	adc	r27, r1
     1b8:	80 93 1c 03 	sts	0x031C, r24
     1bc:	90 93 1d 03 	sts	0x031D, r25
     1c0:	a0 93 1e 03 	sts	0x031E, r26
     1c4:	b0 93 1f 03 	sts	0x031F, r27
}
     1c8:	cf 91       	pop	r28
     1ca:	df 91       	pop	r29
     1cc:	bf 91       	pop	r27
     1ce:	af 91       	pop	r26
     1d0:	9f 91       	pop	r25
     1d2:	8f 91       	pop	r24
     1d4:	0f 90       	pop	r0
     1d6:	0f be       	out	0x3f, r0	; 63
     1d8:	0f 90       	pop	r0
     1da:	1f 90       	pop	r1
     1dc:	18 95       	reti

000001de <USART_Init>:

#include "serial.h"

void USART_Init( unsigned int ubrr)
{
     1de:	df 93       	push	r29
     1e0:	cf 93       	push	r28
     1e2:	0f 92       	push	r0
     1e4:	0f 92       	push	r0
     1e6:	cd b7       	in	r28, 0x3d	; 61
     1e8:	de b7       	in	r29, 0x3e	; 62
     1ea:	9a 83       	std	Y+2, r25	; 0x02
     1ec:	89 83       	std	Y+1, r24	; 0x01
    /*Set baud rate */
    UBRR0H = (unsigned char)(ubrr>>8);
     1ee:	e5 ec       	ldi	r30, 0xC5	; 197
     1f0:	f0 e0       	ldi	r31, 0x00	; 0
     1f2:	89 81       	ldd	r24, Y+1	; 0x01
     1f4:	9a 81       	ldd	r25, Y+2	; 0x02
     1f6:	89 2f       	mov	r24, r25
     1f8:	99 27       	eor	r25, r25
     1fa:	80 83       	st	Z, r24
    UBRR0L = (unsigned char)ubrr;
     1fc:	e4 ec       	ldi	r30, 0xC4	; 196
     1fe:	f0 e0       	ldi	r31, 0x00	; 0
     200:	89 81       	ldd	r24, Y+1	; 0x01
     202:	80 83       	st	Z, r24
    /*Enable receiver and transmitter */
    UCSR0B |= (1<<RXEN0);
     204:	a1 ec       	ldi	r26, 0xC1	; 193
     206:	b0 e0       	ldi	r27, 0x00	; 0
     208:	e1 ec       	ldi	r30, 0xC1	; 193
     20a:	f0 e0       	ldi	r31, 0x00	; 0
     20c:	80 81       	ld	r24, Z
     20e:	80 61       	ori	r24, 0x10	; 16
     210:	8c 93       	st	X, r24
    UCSR0B |= (1<<TXEN0);
     212:	a1 ec       	ldi	r26, 0xC1	; 193
     214:	b0 e0       	ldi	r27, 0x00	; 0
     216:	e1 ec       	ldi	r30, 0xC1	; 193
     218:	f0 e0       	ldi	r31, 0x00	; 0
     21a:	80 81       	ld	r24, Z
     21c:	88 60       	ori	r24, 0x08	; 8
     21e:	8c 93       	st	X, r24
    /* Set frame format: 8data, 2stop bit */
    UCSR0C = (1<<UCSZ01)|(3<<UCSZ00);
     220:	e2 ec       	ldi	r30, 0xC2	; 194
     222:	f0 e0       	ldi	r31, 0x00	; 0
     224:	86 e0       	ldi	r24, 0x06	; 6
     226:	80 83       	st	Z, r24
}
     228:	0f 90       	pop	r0
     22a:	0f 90       	pop	r0
     22c:	cf 91       	pop	r28
     22e:	df 91       	pop	r29
     230:	08 95       	ret

00000232 <recieve_Byte>:


uint8_t recieve_Byte(void)
{
     232:	df 93       	push	r29
     234:	cf 93       	push	r28
     236:	cd b7       	in	r28, 0x3d	; 61
     238:	de b7       	in	r29, 0x3e	; 62
    //moet worden vervangen met if. anders blijft de code hier hangen. als het aankomt blijft het toch in UDR0 staan totdat het wordt uitgelezen.
    loop_until_bit_is_set(UCSR0A, RXC0);
     23a:	e0 ec       	ldi	r30, 0xC0	; 192
     23c:	f0 e0       	ldi	r31, 0x00	; 0
     23e:	80 81       	ld	r24, Z
     240:	88 23       	and	r24, r24
     242:	dc f7       	brge	.-10     	; 0x23a <recieve_Byte+0x8>
    {
     return UDR0;
     244:	e6 ec       	ldi	r30, 0xC6	; 198
     246:	f0 e0       	ldi	r31, 0x00	; 0
     248:	80 81       	ld	r24, Z
    }
    /*else
    {
        return -1;
    }*/
}
     24a:	cf 91       	pop	r28
     24c:	df 91       	pop	r29
     24e:	08 95       	ret

00000250 <transmit_byte>:

void transmit_byte(uint8_t byte)
{
     250:	df 93       	push	r29
     252:	cf 93       	push	r28
     254:	0f 92       	push	r0
     256:	cd b7       	in	r28, 0x3d	; 61
     258:	de b7       	in	r29, 0x3e	; 62
     25a:	89 83       	std	Y+1, r24	; 0x01
    //vervangen met if
    loop_until_bit_is_set(UCSR0A, UDRE0);
     25c:	e0 ec       	ldi	r30, 0xC0	; 192
     25e:	f0 e0       	ldi	r31, 0x00	; 0
     260:	80 81       	ld	r24, Z
     262:	88 2f       	mov	r24, r24
     264:	90 e0       	ldi	r25, 0x00	; 0
     266:	80 72       	andi	r24, 0x20	; 32
     268:	90 70       	andi	r25, 0x00	; 0
     26a:	00 97       	sbiw	r24, 0x00	; 0
     26c:	b9 f3       	breq	.-18     	; 0x25c <transmit_byte+0xc>
    UDR0 = byte;
     26e:	e6 ec       	ldi	r30, 0xC6	; 198
     270:	f0 e0       	ldi	r31, 0x00	; 0
     272:	89 81       	ldd	r24, Y+1	; 0x01
     274:	80 83       	st	Z, r24

}
     276:	0f 90       	pop	r0
     278:	cf 91       	pop	r28
     27a:	df 91       	pop	r29
     27c:	08 95       	ret

0000027e <print_byte>:

void print_byte(uint32_t byte)
{
     27e:	df 93       	push	r29
     280:	cf 93       	push	r28
     282:	00 d0       	rcall	.+0      	; 0x284 <print_byte+0x6>
     284:	0f 92       	push	r0
     286:	cd b7       	in	r28, 0x3d	; 61
     288:	de b7       	in	r29, 0x3e	; 62
     28a:	69 83       	std	Y+1, r22	; 0x01
     28c:	7a 83       	std	Y+2, r23	; 0x02
     28e:	8b 83       	std	Y+3, r24	; 0x03
     290:	9c 83       	std	Y+4, r25	; 0x04
    //werkt niet zoals het hoort. volgorde verkeert?
    transmit_byte((byte/1000)%10);
     292:	89 81       	ldd	r24, Y+1	; 0x01
     294:	9a 81       	ldd	r25, Y+2	; 0x02
     296:	ab 81       	ldd	r26, Y+3	; 0x03
     298:	bc 81       	ldd	r27, Y+4	; 0x04
     29a:	28 ee       	ldi	r18, 0xE8	; 232
     29c:	33 e0       	ldi	r19, 0x03	; 3
     29e:	40 e0       	ldi	r20, 0x00	; 0
     2a0:	50 e0       	ldi	r21, 0x00	; 0
     2a2:	bc 01       	movw	r22, r24
     2a4:	cd 01       	movw	r24, r26
     2a6:	0e 94 a6 0c 	call	0x194c	; 0x194c <__udivmodsi4>
     2aa:	da 01       	movw	r26, r20
     2ac:	c9 01       	movw	r24, r18
     2ae:	2a e0       	ldi	r18, 0x0A	; 10
     2b0:	30 e0       	ldi	r19, 0x00	; 0
     2b2:	40 e0       	ldi	r20, 0x00	; 0
     2b4:	50 e0       	ldi	r21, 0x00	; 0
     2b6:	bc 01       	movw	r22, r24
     2b8:	cd 01       	movw	r24, r26
     2ba:	0e 94 a6 0c 	call	0x194c	; 0x194c <__udivmodsi4>
     2be:	dc 01       	movw	r26, r24
     2c0:	cb 01       	movw	r24, r22
     2c2:	0e 94 28 01 	call	0x250	; 0x250 <transmit_byte>
    transmit_byte((byte/100)%10);
     2c6:	89 81       	ldd	r24, Y+1	; 0x01
     2c8:	9a 81       	ldd	r25, Y+2	; 0x02
     2ca:	ab 81       	ldd	r26, Y+3	; 0x03
     2cc:	bc 81       	ldd	r27, Y+4	; 0x04
     2ce:	24 e6       	ldi	r18, 0x64	; 100
     2d0:	30 e0       	ldi	r19, 0x00	; 0
     2d2:	40 e0       	ldi	r20, 0x00	; 0
     2d4:	50 e0       	ldi	r21, 0x00	; 0
     2d6:	bc 01       	movw	r22, r24
     2d8:	cd 01       	movw	r24, r26
     2da:	0e 94 a6 0c 	call	0x194c	; 0x194c <__udivmodsi4>
     2de:	da 01       	movw	r26, r20
     2e0:	c9 01       	movw	r24, r18
     2e2:	2a e0       	ldi	r18, 0x0A	; 10
     2e4:	30 e0       	ldi	r19, 0x00	; 0
     2e6:	40 e0       	ldi	r20, 0x00	; 0
     2e8:	50 e0       	ldi	r21, 0x00	; 0
     2ea:	bc 01       	movw	r22, r24
     2ec:	cd 01       	movw	r24, r26
     2ee:	0e 94 a6 0c 	call	0x194c	; 0x194c <__udivmodsi4>
     2f2:	dc 01       	movw	r26, r24
     2f4:	cb 01       	movw	r24, r22
     2f6:	0e 94 28 01 	call	0x250	; 0x250 <transmit_byte>
    transmit_byte((byte/10)%10);
     2fa:	89 81       	ldd	r24, Y+1	; 0x01
     2fc:	9a 81       	ldd	r25, Y+2	; 0x02
     2fe:	ab 81       	ldd	r26, Y+3	; 0x03
     300:	bc 81       	ldd	r27, Y+4	; 0x04
     302:	2a e0       	ldi	r18, 0x0A	; 10
     304:	30 e0       	ldi	r19, 0x00	; 0
     306:	40 e0       	ldi	r20, 0x00	; 0
     308:	50 e0       	ldi	r21, 0x00	; 0
     30a:	bc 01       	movw	r22, r24
     30c:	cd 01       	movw	r24, r26
     30e:	0e 94 a6 0c 	call	0x194c	; 0x194c <__udivmodsi4>
     312:	da 01       	movw	r26, r20
     314:	c9 01       	movw	r24, r18
     316:	2a e0       	ldi	r18, 0x0A	; 10
     318:	30 e0       	ldi	r19, 0x00	; 0
     31a:	40 e0       	ldi	r20, 0x00	; 0
     31c:	50 e0       	ldi	r21, 0x00	; 0
     31e:	bc 01       	movw	r22, r24
     320:	cd 01       	movw	r24, r26
     322:	0e 94 a6 0c 	call	0x194c	; 0x194c <__udivmodsi4>
     326:	dc 01       	movw	r26, r24
     328:	cb 01       	movw	r24, r22
     32a:	0e 94 28 01 	call	0x250	; 0x250 <transmit_byte>
    transmit_byte((byte%10));
     32e:	89 81       	ldd	r24, Y+1	; 0x01
     330:	9a 81       	ldd	r25, Y+2	; 0x02
     332:	ab 81       	ldd	r26, Y+3	; 0x03
     334:	bc 81       	ldd	r27, Y+4	; 0x04
     336:	2a e0       	ldi	r18, 0x0A	; 10
     338:	30 e0       	ldi	r19, 0x00	; 0
     33a:	40 e0       	ldi	r20, 0x00	; 0
     33c:	50 e0       	ldi	r21, 0x00	; 0
     33e:	bc 01       	movw	r22, r24
     340:	cd 01       	movw	r24, r26
     342:	0e 94 a6 0c 	call	0x194c	; 0x194c <__udivmodsi4>
     346:	dc 01       	movw	r26, r24
     348:	cb 01       	movw	r24, r22
     34a:	0e 94 28 01 	call	0x250	; 0x250 <transmit_byte>
    transmit_byte(0xA5);
     34e:	85 ea       	ldi	r24, 0xA5	; 165
     350:	0e 94 28 01 	call	0x250	; 0x250 <transmit_byte>
}
     354:	0f 90       	pop	r0
     356:	0f 90       	pop	r0
     358:	0f 90       	pop	r0
     35a:	0f 90       	pop	r0
     35c:	cf 91       	pop	r28
     35e:	df 91       	pop	r29
     360:	08 95       	ret

00000362 <recieve_string>:



void recieve_string(char code[])
{
     362:	df 93       	push	r29
     364:	cf 93       	push	r28
     366:	00 d0       	rcall	.+0      	; 0x368 <recieve_string+0x6>
     368:	0f 92       	push	r0
     36a:	0f 92       	push	r0
     36c:	cd b7       	in	r28, 0x3d	; 61
     36e:	de b7       	in	r29, 0x3e	; 62
     370:	9d 83       	std	Y+5, r25	; 0x05
     372:	8c 83       	std	Y+4, r24	; 0x04
    //code ontworpen voor een GPS module. dollar teken is begin van de string. kan wel gebruikt worden voor het onvangen van complexe instructies.
    char byte = recieve_Byte();
     374:	0e 94 19 01 	call	0x232	; 0x232 <recieve_Byte>
     378:	8b 83       	std	Y+3, r24	; 0x03
    if(byte == '$')
     37a:	8b 81       	ldd	r24, Y+3	; 0x03
     37c:	84 32       	cpi	r24, 0x24	; 36
     37e:	c9 f4       	brne	.+50     	; 0x3b2 <recieve_string+0x50>
    {
        int x = 1;
     380:	81 e0       	ldi	r24, 0x01	; 1
     382:	90 e0       	ldi	r25, 0x00	; 0
     384:	9a 83       	std	Y+2, r25	; 0x02
     386:	89 83       	std	Y+1, r24	; 0x01
     388:	11 c0       	rjmp	.+34     	; 0x3ac <recieve_string+0x4a>
        while(byte != '\n')
        {
            byte = recieve_Byte();
     38a:	0e 94 19 01 	call	0x232	; 0x232 <recieve_Byte>
     38e:	8b 83       	std	Y+3, r24	; 0x03
            code[x] = byte;
     390:	29 81       	ldd	r18, Y+1	; 0x01
     392:	3a 81       	ldd	r19, Y+2	; 0x02
     394:	8c 81       	ldd	r24, Y+4	; 0x04
     396:	9d 81       	ldd	r25, Y+5	; 0x05
     398:	fc 01       	movw	r30, r24
     39a:	e2 0f       	add	r30, r18
     39c:	f3 1f       	adc	r31, r19
     39e:	8b 81       	ldd	r24, Y+3	; 0x03
     3a0:	80 83       	st	Z, r24
            x++;
     3a2:	89 81       	ldd	r24, Y+1	; 0x01
     3a4:	9a 81       	ldd	r25, Y+2	; 0x02
     3a6:	01 96       	adiw	r24, 0x01	; 1
     3a8:	9a 83       	std	Y+2, r25	; 0x02
     3aa:	89 83       	std	Y+1, r24	; 0x01
    //code ontworpen voor een GPS module. dollar teken is begin van de string. kan wel gebruikt worden voor het onvangen van complexe instructies.
    char byte = recieve_Byte();
    if(byte == '$')
    {
        int x = 1;
        while(byte != '\n')
     3ac:	8b 81       	ldd	r24, Y+3	; 0x03
     3ae:	8a 30       	cpi	r24, 0x0A	; 10
     3b0:	61 f7       	brne	.-40     	; 0x38a <recieve_string+0x28>
            byte = recieve_Byte();
            code[x] = byte;
            x++;
        }
    }
}
     3b2:	0f 90       	pop	r0
     3b4:	0f 90       	pop	r0
     3b6:	0f 90       	pop	r0
     3b8:	0f 90       	pop	r0
     3ba:	0f 90       	pop	r0
     3bc:	cf 91       	pop	r28
     3be:	df 91       	pop	r29
     3c0:	08 95       	ret

000003c2 <construct_stepper>:
#include <avr/interrupt.h>

#include "stepper.h"

void construct_stepper(volatile struct stepper *stepper, uint8_t step_pin, uint8_t dir_pin)
{
     3c2:	df 93       	push	r29
     3c4:	cf 93       	push	r28
     3c6:	00 d0       	rcall	.+0      	; 0x3c8 <construct_stepper+0x6>
     3c8:	0f 92       	push	r0
     3ca:	cd b7       	in	r28, 0x3d	; 61
     3cc:	de b7       	in	r29, 0x3e	; 62
     3ce:	9a 83       	std	Y+2, r25	; 0x02
     3d0:	89 83       	std	Y+1, r24	; 0x01
     3d2:	6b 83       	std	Y+3, r22	; 0x03
     3d4:	4c 83       	std	Y+4, r20	; 0x04
    stepper->last_step = ms;
     3d6:	80 91 1c 03 	lds	r24, 0x031C
     3da:	90 91 1d 03 	lds	r25, 0x031D
     3de:	a0 91 1e 03 	lds	r26, 0x031E
     3e2:	b0 91 1f 03 	lds	r27, 0x031F
     3e6:	e9 81       	ldd	r30, Y+1	; 0x01
     3e8:	fa 81       	ldd	r31, Y+2	; 0x02
     3ea:	80 83       	st	Z, r24
     3ec:	91 83       	std	Z+1, r25	; 0x01
     3ee:	a2 83       	std	Z+2, r26	; 0x02
     3f0:	b3 83       	std	Z+3, r27	; 0x03
    stepper->time_profile = 1;
     3f2:	e9 81       	ldd	r30, Y+1	; 0x01
     3f4:	fa 81       	ldd	r31, Y+2	; 0x02
     3f6:	81 e0       	ldi	r24, 0x01	; 1
     3f8:	84 83       	std	Z+4, r24	; 0x04
    stepper->steps = 0;
     3fa:	e9 81       	ldd	r30, Y+1	; 0x01
     3fc:	fa 81       	ldd	r31, Y+2	; 0x02
     3fe:	11 86       	std	Z+9, r1	; 0x09
     400:	10 86       	std	Z+8, r1	; 0x08
    stepper->step_pin = step_pin;
     402:	e9 81       	ldd	r30, Y+1	; 0x01
     404:	fa 81       	ldd	r31, Y+2	; 0x02
     406:	8b 81       	ldd	r24, Y+3	; 0x03
     408:	86 83       	std	Z+6, r24	; 0x06
    stepper->dir_pin = dir_pin;
     40a:	e9 81       	ldd	r30, Y+1	; 0x01
     40c:	fa 81       	ldd	r31, Y+2	; 0x02
     40e:	8c 81       	ldd	r24, Y+4	; 0x04
     410:	87 83       	std	Z+7, r24	; 0x07
    stepper->direction = 0;
     412:	e9 81       	ldd	r30, Y+1	; 0x01
     414:	fa 81       	ldd	r31, Y+2	; 0x02
     416:	15 82       	std	Z+5, r1	; 0x05
}
     418:	0f 90       	pop	r0
     41a:	0f 90       	pop	r0
     41c:	0f 90       	pop	r0
     41e:	0f 90       	pop	r0
     420:	cf 91       	pop	r28
     422:	df 91       	pop	r29
     424:	08 95       	ret

00000426 <initialize_steppers>:

void initialize_steppers()
{
     426:	df 93       	push	r29
     428:	cf 93       	push	r28
     42a:	0f 92       	push	r0
     42c:	cd b7       	in	r28, 0x3d	; 61
     42e:	de b7       	in	r29, 0x3e	; 62
    stepper_DDR |= 0xFF;//init all pins in bank C
     430:	e7 e0       	ldi	r30, 0x07	; 7
     432:	f1 e0       	ldi	r31, 0x01	; 1
     434:	80 81       	ld	r24, Z
     436:	e7 e0       	ldi	r30, 0x07	; 7
     438:	f1 e0       	ldi	r31, 0x01	; 1
     43a:	8f ef       	ldi	r24, 0xFF	; 255
     43c:	80 83       	st	Z, r24
}
     43e:	0f 90       	pop	r0
     440:	cf 91       	pop	r28
     442:	df 91       	pop	r29
     444:	08 95       	ret

00000446 <set_dir>:

void set_dir(volatile struct stepper *stepper)
{
     446:	df 93       	push	r29
     448:	cf 93       	push	r28
     44a:	00 d0       	rcall	.+0      	; 0x44c <set_dir+0x6>
     44c:	0f 92       	push	r0
     44e:	cd b7       	in	r28, 0x3d	; 61
     450:	de b7       	in	r29, 0x3e	; 62
     452:	9a 83       	std	Y+2, r25	; 0x02
     454:	89 83       	std	Y+1, r24	; 0x01
    switch(stepper->direction)
     456:	e9 81       	ldd	r30, Y+1	; 0x01
     458:	fa 81       	ldd	r31, Y+2	; 0x02
     45a:	85 81       	ldd	r24, Z+5	; 0x05
     45c:	28 2f       	mov	r18, r24
     45e:	30 e0       	ldi	r19, 0x00	; 0
     460:	3c 83       	std	Y+4, r19	; 0x04
     462:	2b 83       	std	Y+3, r18	; 0x03
     464:	8b 81       	ldd	r24, Y+3	; 0x03
     466:	9c 81       	ldd	r25, Y+4	; 0x04
     468:	81 30       	cpi	r24, 0x01	; 1
     46a:	91 05       	cpc	r25, r1
     46c:	31 f0       	breq	.+12     	; 0x47a <set_dir+0x34>
     46e:	2b 81       	ldd	r18, Y+3	; 0x03
     470:	3c 81       	ldd	r19, Y+4	; 0x04
     472:	22 30       	cpi	r18, 0x02	; 2
     474:	31 05       	cpc	r19, r1
     476:	b9 f0       	breq	.+46     	; 0x4a6 <set_dir+0x60>
     478:	2c c0       	rjmp	.+88     	; 0x4d2 <set_dir+0x8c>
    {
    case forward:
        stepper_port |= (1<<stepper->dir_pin);
     47a:	a8 e0       	ldi	r26, 0x08	; 8
     47c:	b1 e0       	ldi	r27, 0x01	; 1
     47e:	e8 e0       	ldi	r30, 0x08	; 8
     480:	f1 e0       	ldi	r31, 0x01	; 1
     482:	80 81       	ld	r24, Z
     484:	48 2f       	mov	r20, r24
     486:	e9 81       	ldd	r30, Y+1	; 0x01
     488:	fa 81       	ldd	r31, Y+2	; 0x02
     48a:	87 81       	ldd	r24, Z+7	; 0x07
     48c:	28 2f       	mov	r18, r24
     48e:	30 e0       	ldi	r19, 0x00	; 0
     490:	81 e0       	ldi	r24, 0x01	; 1
     492:	90 e0       	ldi	r25, 0x00	; 0
     494:	02 2e       	mov	r0, r18
     496:	02 c0       	rjmp	.+4      	; 0x49c <set_dir+0x56>
     498:	88 0f       	add	r24, r24
     49a:	99 1f       	adc	r25, r25
     49c:	0a 94       	dec	r0
     49e:	e2 f7       	brpl	.-8      	; 0x498 <set_dir+0x52>
     4a0:	84 2b       	or	r24, r20
     4a2:	8c 93       	st	X, r24
     4a4:	16 c0       	rjmp	.+44     	; 0x4d2 <set_dir+0x8c>
        break;
    case backward:
        stepper_port &= ~(1<<stepper->dir_pin);
     4a6:	a8 e0       	ldi	r26, 0x08	; 8
     4a8:	b1 e0       	ldi	r27, 0x01	; 1
     4aa:	e8 e0       	ldi	r30, 0x08	; 8
     4ac:	f1 e0       	ldi	r31, 0x01	; 1
     4ae:	80 81       	ld	r24, Z
     4b0:	48 2f       	mov	r20, r24
     4b2:	e9 81       	ldd	r30, Y+1	; 0x01
     4b4:	fa 81       	ldd	r31, Y+2	; 0x02
     4b6:	87 81       	ldd	r24, Z+7	; 0x07
     4b8:	28 2f       	mov	r18, r24
     4ba:	30 e0       	ldi	r19, 0x00	; 0
     4bc:	81 e0       	ldi	r24, 0x01	; 1
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	02 2e       	mov	r0, r18
     4c2:	02 c0       	rjmp	.+4      	; 0x4c8 <set_dir+0x82>
     4c4:	88 0f       	add	r24, r24
     4c6:	99 1f       	adc	r25, r25
     4c8:	0a 94       	dec	r0
     4ca:	e2 f7       	brpl	.-8      	; 0x4c4 <set_dir+0x7e>
     4cc:	80 95       	com	r24
     4ce:	84 23       	and	r24, r20
     4d0:	8c 93       	st	X, r24
        break;
    default:
        break;
    }
}
     4d2:	0f 90       	pop	r0
     4d4:	0f 90       	pop	r0
     4d6:	0f 90       	pop	r0
     4d8:	0f 90       	pop	r0
     4da:	cf 91       	pop	r28
     4dc:	df 91       	pop	r29
     4de:	08 95       	ret

000004e0 <step>:

void static step(volatile struct stepper stepper)
{
     4e0:	0f 93       	push	r16
     4e2:	1f 93       	push	r17
     4e4:	df 93       	push	r29
     4e6:	cf 93       	push	r28
     4e8:	cd b7       	in	r28, 0x3d	; 61
     4ea:	de b7       	in	r29, 0x3e	; 62
     4ec:	ea 97       	sbiw	r28, 0x3a	; 58
     4ee:	0f b6       	in	r0, 0x3f	; 63
     4f0:	f8 94       	cli
     4f2:	de bf       	out	0x3e, r29	; 62
     4f4:	0f be       	out	0x3f, r0	; 63
     4f6:	cd bf       	out	0x3d, r28	; 61
     4f8:	09 ab       	std	Y+49, r16	; 0x31
     4fa:	1a ab       	std	Y+50, r17	; 0x32
     4fc:	2b ab       	std	Y+51, r18	; 0x33
     4fe:	3c ab       	std	Y+52, r19	; 0x34
     500:	4d ab       	std	Y+53, r20	; 0x35
     502:	5e ab       	std	Y+54, r21	; 0x36
     504:	6f ab       	std	Y+55, r22	; 0x37
     506:	78 af       	std	Y+56, r23	; 0x38
     508:	89 af       	std	Y+57, r24	; 0x39
     50a:	9a af       	std	Y+58, r25	; 0x3a

            stepper_port |= (1<<stepper.step_pin);
     50c:	a8 e0       	ldi	r26, 0x08	; 8
     50e:	b1 e0       	ldi	r27, 0x01	; 1
     510:	e8 e0       	ldi	r30, 0x08	; 8
     512:	f1 e0       	ldi	r31, 0x01	; 1
     514:	80 81       	ld	r24, Z
     516:	48 2f       	mov	r20, r24
     518:	8f a9       	ldd	r24, Y+55	; 0x37
     51a:	28 2f       	mov	r18, r24
     51c:	30 e0       	ldi	r19, 0x00	; 0
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	02 c0       	rjmp	.+4      	; 0x528 <step+0x48>
     524:	88 0f       	add	r24, r24
     526:	99 1f       	adc	r25, r25
     528:	2a 95       	dec	r18
     52a:	e2 f7       	brpl	.-8      	; 0x524 <step+0x44>
     52c:	84 2b       	or	r24, r20
     52e:	8c 93       	st	X, r24
     530:	80 e0       	ldi	r24, 0x00	; 0
     532:	90 e0       	ldi	r25, 0x00	; 0
     534:	a0 e0       	ldi	r26, 0x00	; 0
     536:	b0 e4       	ldi	r27, 0x40	; 64
     538:	8d a7       	std	Y+45, r24	; 0x2d
     53a:	9e a7       	std	Y+46, r25	; 0x2e
     53c:	af a7       	std	Y+47, r26	; 0x2f
     53e:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     540:	6d a5       	ldd	r22, Y+45	; 0x2d
     542:	7e a5       	ldd	r23, Y+46	; 0x2e
     544:	8f a5       	ldd	r24, Y+47	; 0x2f
     546:	98 a9       	ldd	r25, Y+48	; 0x30
     548:	2b ea       	ldi	r18, 0xAB	; 171
     54a:	3a ea       	ldi	r19, 0xAA	; 170
     54c:	4a ea       	ldi	r20, 0xAA	; 170
     54e:	50 e4       	ldi	r21, 0x40	; 64
     550:	0e 94 c9 07 	call	0xf92	; 0xf92 <__mulsf3>
     554:	dc 01       	movw	r26, r24
     556:	cb 01       	movw	r24, r22
     558:	89 a7       	std	Y+41, r24	; 0x29
     55a:	9a a7       	std	Y+42, r25	; 0x2a
     55c:	ab a7       	std	Y+43, r26	; 0x2b
     55e:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
     560:	69 a5       	ldd	r22, Y+41	; 0x29
     562:	7a a5       	ldd	r23, Y+42	; 0x2a
     564:	8b a5       	ldd	r24, Y+43	; 0x2b
     566:	9c a5       	ldd	r25, Y+44	; 0x2c
     568:	20 e0       	ldi	r18, 0x00	; 0
     56a:	30 e0       	ldi	r19, 0x00	; 0
     56c:	40 e8       	ldi	r20, 0x80	; 128
     56e:	5f e3       	ldi	r21, 0x3F	; 63
     570:	0e 94 cf 09 	call	0x139e	; 0x139e <__ltsf2>
     574:	88 23       	and	r24, r24
     576:	1c f4       	brge	.+6      	; 0x57e <step+0x9e>
		__ticks = 1;
     578:	81 e0       	ldi	r24, 0x01	; 1
     57a:	88 a7       	std	Y+40, r24	; 0x28
     57c:	91 c0       	rjmp	.+290    	; 0x6a0 <step+0x1c0>
	else if (__tmp > 255)
     57e:	69 a5       	ldd	r22, Y+41	; 0x29
     580:	7a a5       	ldd	r23, Y+42	; 0x2a
     582:	8b a5       	ldd	r24, Y+43	; 0x2b
     584:	9c a5       	ldd	r25, Y+44	; 0x2c
     586:	20 e0       	ldi	r18, 0x00	; 0
     588:	30 e0       	ldi	r19, 0x00	; 0
     58a:	4f e7       	ldi	r20, 0x7F	; 127
     58c:	53 e4       	ldi	r21, 0x43	; 67
     58e:	0e 94 6f 09 	call	0x12de	; 0x12de <__gtsf2>
     592:	18 16       	cp	r1, r24
     594:	0c f0       	brlt	.+2      	; 0x598 <step+0xb8>
     596:	7b c0       	rjmp	.+246    	; 0x68e <step+0x1ae>
	{
		_delay_ms(__us / 1000.0);
     598:	6d a5       	ldd	r22, Y+45	; 0x2d
     59a:	7e a5       	ldd	r23, Y+46	; 0x2e
     59c:	8f a5       	ldd	r24, Y+47	; 0x2f
     59e:	98 a9       	ldd	r25, Y+48	; 0x30
     5a0:	20 e0       	ldi	r18, 0x00	; 0
     5a2:	30 e0       	ldi	r19, 0x00	; 0
     5a4:	4a e7       	ldi	r20, 0x7A	; 122
     5a6:	54 e4       	ldi	r21, 0x44	; 68
     5a8:	0e 94 c3 08 	call	0x1186	; 0x1186 <__divsf3>
     5ac:	dc 01       	movw	r26, r24
     5ae:	cb 01       	movw	r24, r22
     5b0:	8c a3       	std	Y+36, r24	; 0x24
     5b2:	9d a3       	std	Y+37, r25	; 0x25
     5b4:	ae a3       	std	Y+38, r26	; 0x26
     5b6:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     5b8:	6c a1       	ldd	r22, Y+36	; 0x24
     5ba:	7d a1       	ldd	r23, Y+37	; 0x25
     5bc:	8e a1       	ldd	r24, Y+38	; 0x26
     5be:	9f a1       	ldd	r25, Y+39	; 0x27
     5c0:	20 e0       	ldi	r18, 0x00	; 0
     5c2:	30 e0       	ldi	r19, 0x00	; 0
     5c4:	4a e7       	ldi	r20, 0x7A	; 122
     5c6:	55 e4       	ldi	r21, 0x45	; 69
     5c8:	0e 94 c9 07 	call	0xf92	; 0xf92 <__mulsf3>
     5cc:	dc 01       	movw	r26, r24
     5ce:	cb 01       	movw	r24, r22
     5d0:	88 a3       	std	Y+32, r24	; 0x20
     5d2:	99 a3       	std	Y+33, r25	; 0x21
     5d4:	aa a3       	std	Y+34, r26	; 0x22
     5d6:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
     5d8:	68 a1       	ldd	r22, Y+32	; 0x20
     5da:	79 a1       	ldd	r23, Y+33	; 0x21
     5dc:	8a a1       	ldd	r24, Y+34	; 0x22
     5de:	9b a1       	ldd	r25, Y+35	; 0x23
     5e0:	20 e0       	ldi	r18, 0x00	; 0
     5e2:	30 e0       	ldi	r19, 0x00	; 0
     5e4:	40 e8       	ldi	r20, 0x80	; 128
     5e6:	5f e3       	ldi	r21, 0x3F	; 63
     5e8:	0e 94 cf 09 	call	0x139e	; 0x139e <__ltsf2>
     5ec:	88 23       	and	r24, r24
     5ee:	2c f4       	brge	.+10     	; 0x5fa <step+0x11a>
		__ticks = 1;
     5f0:	81 e0       	ldi	r24, 0x01	; 1
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	9f 8f       	std	Y+31, r25	; 0x1f
     5f6:	8e 8f       	std	Y+30, r24	; 0x1e
     5f8:	3f c0       	rjmp	.+126    	; 0x678 <step+0x198>
	else if (__tmp > 65535)
     5fa:	68 a1       	ldd	r22, Y+32	; 0x20
     5fc:	79 a1       	ldd	r23, Y+33	; 0x21
     5fe:	8a a1       	ldd	r24, Y+34	; 0x22
     600:	9b a1       	ldd	r25, Y+35	; 0x23
     602:	20 e0       	ldi	r18, 0x00	; 0
     604:	3f ef       	ldi	r19, 0xFF	; 255
     606:	4f e7       	ldi	r20, 0x7F	; 127
     608:	57 e4       	ldi	r21, 0x47	; 71
     60a:	0e 94 6f 09 	call	0x12de	; 0x12de <__gtsf2>
     60e:	18 16       	cp	r1, r24
     610:	4c f5       	brge	.+82     	; 0x664 <step+0x184>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     612:	6c a1       	ldd	r22, Y+36	; 0x24
     614:	7d a1       	ldd	r23, Y+37	; 0x25
     616:	8e a1       	ldd	r24, Y+38	; 0x26
     618:	9f a1       	ldd	r25, Y+39	; 0x27
     61a:	20 e0       	ldi	r18, 0x00	; 0
     61c:	30 e0       	ldi	r19, 0x00	; 0
     61e:	40 e2       	ldi	r20, 0x20	; 32
     620:	51 e4       	ldi	r21, 0x41	; 65
     622:	0e 94 c9 07 	call	0xf92	; 0xf92 <__mulsf3>
     626:	dc 01       	movw	r26, r24
     628:	cb 01       	movw	r24, r22
     62a:	bc 01       	movw	r22, r24
     62c:	cd 01       	movw	r24, r26
     62e:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <__fixunssfsi>
     632:	dc 01       	movw	r26, r24
     634:	cb 01       	movw	r24, r22
     636:	9f 8f       	std	Y+31, r25	; 0x1f
     638:	8e 8f       	std	Y+30, r24	; 0x1e
     63a:	0f c0       	rjmp	.+30     	; 0x65a <step+0x17a>
     63c:	80 e9       	ldi	r24, 0x90	; 144
     63e:	91 e0       	ldi	r25, 0x01	; 1
     640:	9d 8f       	std	Y+29, r25	; 0x1d
     642:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     644:	8c 8d       	ldd	r24, Y+28	; 0x1c
     646:	9d 8d       	ldd	r25, Y+29	; 0x1d
     648:	01 97       	sbiw	r24, 0x01	; 1
     64a:	f1 f7       	brne	.-4      	; 0x648 <step+0x168>
     64c:	9d 8f       	std	Y+29, r25	; 0x1d
     64e:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     650:	8e 8d       	ldd	r24, Y+30	; 0x1e
     652:	9f 8d       	ldd	r25, Y+31	; 0x1f
     654:	01 97       	sbiw	r24, 0x01	; 1
     656:	9f 8f       	std	Y+31, r25	; 0x1f
     658:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     65a:	8e 8d       	ldd	r24, Y+30	; 0x1e
     65c:	9f 8d       	ldd	r25, Y+31	; 0x1f
     65e:	00 97       	sbiw	r24, 0x00	; 0
     660:	69 f7       	brne	.-38     	; 0x63c <step+0x15c>
     662:	24 c0       	rjmp	.+72     	; 0x6ac <step+0x1cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     664:	68 a1       	ldd	r22, Y+32	; 0x20
     666:	79 a1       	ldd	r23, Y+33	; 0x21
     668:	8a a1       	ldd	r24, Y+34	; 0x22
     66a:	9b a1       	ldd	r25, Y+35	; 0x23
     66c:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <__fixunssfsi>
     670:	dc 01       	movw	r26, r24
     672:	cb 01       	movw	r24, r22
     674:	9f 8f       	std	Y+31, r25	; 0x1f
     676:	8e 8f       	std	Y+30, r24	; 0x1e
     678:	8e 8d       	ldd	r24, Y+30	; 0x1e
     67a:	9f 8d       	ldd	r25, Y+31	; 0x1f
     67c:	9b 8f       	std	Y+27, r25	; 0x1b
     67e:	8a 8f       	std	Y+26, r24	; 0x1a
     680:	8a 8d       	ldd	r24, Y+26	; 0x1a
     682:	9b 8d       	ldd	r25, Y+27	; 0x1b
     684:	01 97       	sbiw	r24, 0x01	; 1
     686:	f1 f7       	brne	.-4      	; 0x684 <step+0x1a4>
     688:	9b 8f       	std	Y+27, r25	; 0x1b
     68a:	8a 8f       	std	Y+26, r24	; 0x1a
     68c:	0f c0       	rjmp	.+30     	; 0x6ac <step+0x1cc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     68e:	69 a5       	ldd	r22, Y+41	; 0x29
     690:	7a a5       	ldd	r23, Y+42	; 0x2a
     692:	8b a5       	ldd	r24, Y+43	; 0x2b
     694:	9c a5       	ldd	r25, Y+44	; 0x2c
     696:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <__fixunssfsi>
     69a:	dc 01       	movw	r26, r24
     69c:	cb 01       	movw	r24, r22
     69e:	88 a7       	std	Y+40, r24	; 0x28
     6a0:	88 a5       	ldd	r24, Y+40	; 0x28
     6a2:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     6a4:	89 8d       	ldd	r24, Y+25	; 0x19
     6a6:	8a 95       	dec	r24
     6a8:	f1 f7       	brne	.-4      	; 0x6a6 <step+0x1c6>
     6aa:	89 8f       	std	Y+25, r24	; 0x19
            _delay_us(2);
            stepper_port &= ~(1<<stepper.step_pin);
     6ac:	a8 e0       	ldi	r26, 0x08	; 8
     6ae:	b1 e0       	ldi	r27, 0x01	; 1
     6b0:	e8 e0       	ldi	r30, 0x08	; 8
     6b2:	f1 e0       	ldi	r31, 0x01	; 1
     6b4:	80 81       	ld	r24, Z
     6b6:	48 2f       	mov	r20, r24
     6b8:	8f a9       	ldd	r24, Y+55	; 0x37
     6ba:	28 2f       	mov	r18, r24
     6bc:	30 e0       	ldi	r19, 0x00	; 0
     6be:	81 e0       	ldi	r24, 0x01	; 1
     6c0:	90 e0       	ldi	r25, 0x00	; 0
     6c2:	02 c0       	rjmp	.+4      	; 0x6c8 <step+0x1e8>
     6c4:	88 0f       	add	r24, r24
     6c6:	99 1f       	adc	r25, r25
     6c8:	2a 95       	dec	r18
     6ca:	e2 f7       	brpl	.-8      	; 0x6c4 <step+0x1e4>
     6cc:	80 95       	com	r24
     6ce:	84 23       	and	r24, r20
     6d0:	8c 93       	st	X, r24
     6d2:	80 e0       	ldi	r24, 0x00	; 0
     6d4:	90 e0       	ldi	r25, 0x00	; 0
     6d6:	a0 e0       	ldi	r26, 0x00	; 0
     6d8:	b0 e4       	ldi	r27, 0x40	; 64
     6da:	8d 8b       	std	Y+21, r24	; 0x15
     6dc:	9e 8b       	std	Y+22, r25	; 0x16
     6de:	af 8b       	std	Y+23, r26	; 0x17
     6e0:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     6e2:	6d 89       	ldd	r22, Y+21	; 0x15
     6e4:	7e 89       	ldd	r23, Y+22	; 0x16
     6e6:	8f 89       	ldd	r24, Y+23	; 0x17
     6e8:	98 8d       	ldd	r25, Y+24	; 0x18
     6ea:	2b ea       	ldi	r18, 0xAB	; 171
     6ec:	3a ea       	ldi	r19, 0xAA	; 170
     6ee:	4a ea       	ldi	r20, 0xAA	; 170
     6f0:	50 e4       	ldi	r21, 0x40	; 64
     6f2:	0e 94 c9 07 	call	0xf92	; 0xf92 <__mulsf3>
     6f6:	dc 01       	movw	r26, r24
     6f8:	cb 01       	movw	r24, r22
     6fa:	89 8b       	std	Y+17, r24	; 0x11
     6fc:	9a 8b       	std	Y+18, r25	; 0x12
     6fe:	ab 8b       	std	Y+19, r26	; 0x13
     700:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     702:	69 89       	ldd	r22, Y+17	; 0x11
     704:	7a 89       	ldd	r23, Y+18	; 0x12
     706:	8b 89       	ldd	r24, Y+19	; 0x13
     708:	9c 89       	ldd	r25, Y+20	; 0x14
     70a:	20 e0       	ldi	r18, 0x00	; 0
     70c:	30 e0       	ldi	r19, 0x00	; 0
     70e:	40 e8       	ldi	r20, 0x80	; 128
     710:	5f e3       	ldi	r21, 0x3F	; 63
     712:	0e 94 cf 09 	call	0x139e	; 0x139e <__ltsf2>
     716:	88 23       	and	r24, r24
     718:	1c f4       	brge	.+6      	; 0x720 <step+0x240>
		__ticks = 1;
     71a:	81 e0       	ldi	r24, 0x01	; 1
     71c:	88 8b       	std	Y+16, r24	; 0x10
     71e:	91 c0       	rjmp	.+290    	; 0x842 <step+0x362>
	else if (__tmp > 255)
     720:	69 89       	ldd	r22, Y+17	; 0x11
     722:	7a 89       	ldd	r23, Y+18	; 0x12
     724:	8b 89       	ldd	r24, Y+19	; 0x13
     726:	9c 89       	ldd	r25, Y+20	; 0x14
     728:	20 e0       	ldi	r18, 0x00	; 0
     72a:	30 e0       	ldi	r19, 0x00	; 0
     72c:	4f e7       	ldi	r20, 0x7F	; 127
     72e:	53 e4       	ldi	r21, 0x43	; 67
     730:	0e 94 6f 09 	call	0x12de	; 0x12de <__gtsf2>
     734:	18 16       	cp	r1, r24
     736:	0c f0       	brlt	.+2      	; 0x73a <step+0x25a>
     738:	7b c0       	rjmp	.+246    	; 0x830 <step+0x350>
	{
		_delay_ms(__us / 1000.0);
     73a:	6d 89       	ldd	r22, Y+21	; 0x15
     73c:	7e 89       	ldd	r23, Y+22	; 0x16
     73e:	8f 89       	ldd	r24, Y+23	; 0x17
     740:	98 8d       	ldd	r25, Y+24	; 0x18
     742:	20 e0       	ldi	r18, 0x00	; 0
     744:	30 e0       	ldi	r19, 0x00	; 0
     746:	4a e7       	ldi	r20, 0x7A	; 122
     748:	54 e4       	ldi	r21, 0x44	; 68
     74a:	0e 94 c3 08 	call	0x1186	; 0x1186 <__divsf3>
     74e:	dc 01       	movw	r26, r24
     750:	cb 01       	movw	r24, r22
     752:	8c 87       	std	Y+12, r24	; 0x0c
     754:	9d 87       	std	Y+13, r25	; 0x0d
     756:	ae 87       	std	Y+14, r26	; 0x0e
     758:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     75a:	6c 85       	ldd	r22, Y+12	; 0x0c
     75c:	7d 85       	ldd	r23, Y+13	; 0x0d
     75e:	8e 85       	ldd	r24, Y+14	; 0x0e
     760:	9f 85       	ldd	r25, Y+15	; 0x0f
     762:	20 e0       	ldi	r18, 0x00	; 0
     764:	30 e0       	ldi	r19, 0x00	; 0
     766:	4a e7       	ldi	r20, 0x7A	; 122
     768:	55 e4       	ldi	r21, 0x45	; 69
     76a:	0e 94 c9 07 	call	0xf92	; 0xf92 <__mulsf3>
     76e:	dc 01       	movw	r26, r24
     770:	cb 01       	movw	r24, r22
     772:	88 87       	std	Y+8, r24	; 0x08
     774:	99 87       	std	Y+9, r25	; 0x09
     776:	aa 87       	std	Y+10, r26	; 0x0a
     778:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
     77a:	68 85       	ldd	r22, Y+8	; 0x08
     77c:	79 85       	ldd	r23, Y+9	; 0x09
     77e:	8a 85       	ldd	r24, Y+10	; 0x0a
     780:	9b 85       	ldd	r25, Y+11	; 0x0b
     782:	20 e0       	ldi	r18, 0x00	; 0
     784:	30 e0       	ldi	r19, 0x00	; 0
     786:	40 e8       	ldi	r20, 0x80	; 128
     788:	5f e3       	ldi	r21, 0x3F	; 63
     78a:	0e 94 cf 09 	call	0x139e	; 0x139e <__ltsf2>
     78e:	88 23       	and	r24, r24
     790:	2c f4       	brge	.+10     	; 0x79c <step+0x2bc>
		__ticks = 1;
     792:	81 e0       	ldi	r24, 0x01	; 1
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	9f 83       	std	Y+7, r25	; 0x07
     798:	8e 83       	std	Y+6, r24	; 0x06
     79a:	3f c0       	rjmp	.+126    	; 0x81a <step+0x33a>
	else if (__tmp > 65535)
     79c:	68 85       	ldd	r22, Y+8	; 0x08
     79e:	79 85       	ldd	r23, Y+9	; 0x09
     7a0:	8a 85       	ldd	r24, Y+10	; 0x0a
     7a2:	9b 85       	ldd	r25, Y+11	; 0x0b
     7a4:	20 e0       	ldi	r18, 0x00	; 0
     7a6:	3f ef       	ldi	r19, 0xFF	; 255
     7a8:	4f e7       	ldi	r20, 0x7F	; 127
     7aa:	57 e4       	ldi	r21, 0x47	; 71
     7ac:	0e 94 6f 09 	call	0x12de	; 0x12de <__gtsf2>
     7b0:	18 16       	cp	r1, r24
     7b2:	4c f5       	brge	.+82     	; 0x806 <step+0x326>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     7b4:	6c 85       	ldd	r22, Y+12	; 0x0c
     7b6:	7d 85       	ldd	r23, Y+13	; 0x0d
     7b8:	8e 85       	ldd	r24, Y+14	; 0x0e
     7ba:	9f 85       	ldd	r25, Y+15	; 0x0f
     7bc:	20 e0       	ldi	r18, 0x00	; 0
     7be:	30 e0       	ldi	r19, 0x00	; 0
     7c0:	40 e2       	ldi	r20, 0x20	; 32
     7c2:	51 e4       	ldi	r21, 0x41	; 65
     7c4:	0e 94 c9 07 	call	0xf92	; 0xf92 <__mulsf3>
     7c8:	dc 01       	movw	r26, r24
     7ca:	cb 01       	movw	r24, r22
     7cc:	bc 01       	movw	r22, r24
     7ce:	cd 01       	movw	r24, r26
     7d0:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <__fixunssfsi>
     7d4:	dc 01       	movw	r26, r24
     7d6:	cb 01       	movw	r24, r22
     7d8:	9f 83       	std	Y+7, r25	; 0x07
     7da:	8e 83       	std	Y+6, r24	; 0x06
     7dc:	0f c0       	rjmp	.+30     	; 0x7fc <step+0x31c>
     7de:	80 e9       	ldi	r24, 0x90	; 144
     7e0:	91 e0       	ldi	r25, 0x01	; 1
     7e2:	9d 83       	std	Y+5, r25	; 0x05
     7e4:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     7e6:	8c 81       	ldd	r24, Y+4	; 0x04
     7e8:	9d 81       	ldd	r25, Y+5	; 0x05
     7ea:	01 97       	sbiw	r24, 0x01	; 1
     7ec:	f1 f7       	brne	.-4      	; 0x7ea <step+0x30a>
     7ee:	9d 83       	std	Y+5, r25	; 0x05
     7f0:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7f2:	8e 81       	ldd	r24, Y+6	; 0x06
     7f4:	9f 81       	ldd	r25, Y+7	; 0x07
     7f6:	01 97       	sbiw	r24, 0x01	; 1
     7f8:	9f 83       	std	Y+7, r25	; 0x07
     7fa:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7fc:	8e 81       	ldd	r24, Y+6	; 0x06
     7fe:	9f 81       	ldd	r25, Y+7	; 0x07
     800:	00 97       	sbiw	r24, 0x00	; 0
     802:	69 f7       	brne	.-38     	; 0x7de <step+0x2fe>
     804:	24 c0       	rjmp	.+72     	; 0x84e <step+0x36e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     806:	68 85       	ldd	r22, Y+8	; 0x08
     808:	79 85       	ldd	r23, Y+9	; 0x09
     80a:	8a 85       	ldd	r24, Y+10	; 0x0a
     80c:	9b 85       	ldd	r25, Y+11	; 0x0b
     80e:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <__fixunssfsi>
     812:	dc 01       	movw	r26, r24
     814:	cb 01       	movw	r24, r22
     816:	9f 83       	std	Y+7, r25	; 0x07
     818:	8e 83       	std	Y+6, r24	; 0x06
     81a:	8e 81       	ldd	r24, Y+6	; 0x06
     81c:	9f 81       	ldd	r25, Y+7	; 0x07
     81e:	9b 83       	std	Y+3, r25	; 0x03
     820:	8a 83       	std	Y+2, r24	; 0x02
     822:	8a 81       	ldd	r24, Y+2	; 0x02
     824:	9b 81       	ldd	r25, Y+3	; 0x03
     826:	01 97       	sbiw	r24, 0x01	; 1
     828:	f1 f7       	brne	.-4      	; 0x826 <step+0x346>
     82a:	9b 83       	std	Y+3, r25	; 0x03
     82c:	8a 83       	std	Y+2, r24	; 0x02
     82e:	0f c0       	rjmp	.+30     	; 0x84e <step+0x36e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     830:	69 89       	ldd	r22, Y+17	; 0x11
     832:	7a 89       	ldd	r23, Y+18	; 0x12
     834:	8b 89       	ldd	r24, Y+19	; 0x13
     836:	9c 89       	ldd	r25, Y+20	; 0x14
     838:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <__fixunssfsi>
     83c:	dc 01       	movw	r26, r24
     83e:	cb 01       	movw	r24, r22
     840:	88 8b       	std	Y+16, r24	; 0x10
     842:	88 89       	ldd	r24, Y+16	; 0x10
     844:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     846:	89 81       	ldd	r24, Y+1	; 0x01
     848:	8a 95       	dec	r24
     84a:	f1 f7       	brne	.-4      	; 0x848 <step+0x368>
     84c:	89 83       	std	Y+1, r24	; 0x01
            _delay_us(2);
}
     84e:	ea 96       	adiw	r28, 0x3a	; 58
     850:	0f b6       	in	r0, 0x3f	; 63
     852:	f8 94       	cli
     854:	de bf       	out	0x3e, r29	; 62
     856:	0f be       	out	0x3f, r0	; 63
     858:	cd bf       	out	0x3d, r28	; 61
     85a:	cf 91       	pop	r28
     85c:	df 91       	pop	r29
     85e:	1f 91       	pop	r17
     860:	0f 91       	pop	r16
     862:	08 95       	ret

00000864 <count_steps>:

void static count_steps(volatile struct stepper *stepperino)
{
     864:	df 93       	push	r29
     866:	cf 93       	push	r28
     868:	00 d0       	rcall	.+0      	; 0x86a <count_steps+0x6>
     86a:	0f 92       	push	r0
     86c:	cd b7       	in	r28, 0x3d	; 61
     86e:	de b7       	in	r29, 0x3e	; 62
     870:	9a 83       	std	Y+2, r25	; 0x02
     872:	89 83       	std	Y+1, r24	; 0x01
    switch(stepperino->direction)
     874:	e9 81       	ldd	r30, Y+1	; 0x01
     876:	fa 81       	ldd	r31, Y+2	; 0x02
     878:	85 81       	ldd	r24, Z+5	; 0x05
     87a:	28 2f       	mov	r18, r24
     87c:	30 e0       	ldi	r19, 0x00	; 0
     87e:	3c 83       	std	Y+4, r19	; 0x04
     880:	2b 83       	std	Y+3, r18	; 0x03
     882:	8b 81       	ldd	r24, Y+3	; 0x03
     884:	9c 81       	ldd	r25, Y+4	; 0x04
     886:	81 30       	cpi	r24, 0x01	; 1
     888:	91 05       	cpc	r25, r1
     88a:	31 f0       	breq	.+12     	; 0x898 <count_steps+0x34>
     88c:	2b 81       	ldd	r18, Y+3	; 0x03
     88e:	3c 81       	ldd	r19, Y+4	; 0x04
     890:	22 30       	cpi	r18, 0x02	; 2
     892:	31 05       	cpc	r19, r1
     894:	59 f0       	breq	.+22     	; 0x8ac <count_steps+0x48>
     896:	13 c0       	rjmp	.+38     	; 0x8be <count_steps+0x5a>
        {
        case forward:
        stepperino->steps++;
     898:	e9 81       	ldd	r30, Y+1	; 0x01
     89a:	fa 81       	ldd	r31, Y+2	; 0x02
     89c:	80 85       	ldd	r24, Z+8	; 0x08
     89e:	91 85       	ldd	r25, Z+9	; 0x09
     8a0:	01 96       	adiw	r24, 0x01	; 1
     8a2:	e9 81       	ldd	r30, Y+1	; 0x01
     8a4:	fa 81       	ldd	r31, Y+2	; 0x02
     8a6:	91 87       	std	Z+9, r25	; 0x09
     8a8:	80 87       	std	Z+8, r24	; 0x08
     8aa:	09 c0       	rjmp	.+18     	; 0x8be <count_steps+0x5a>
        break;
        case backward:
        stepperino->steps--;
     8ac:	e9 81       	ldd	r30, Y+1	; 0x01
     8ae:	fa 81       	ldd	r31, Y+2	; 0x02
     8b0:	80 85       	ldd	r24, Z+8	; 0x08
     8b2:	91 85       	ldd	r25, Z+9	; 0x09
     8b4:	01 97       	sbiw	r24, 0x01	; 1
     8b6:	e9 81       	ldd	r30, Y+1	; 0x01
     8b8:	fa 81       	ldd	r31, Y+2	; 0x02
     8ba:	91 87       	std	Z+9, r25	; 0x09
     8bc:	80 87       	std	Z+8, r24	; 0x08
        break;
        default:
        break;
        }
}
     8be:	0f 90       	pop	r0
     8c0:	0f 90       	pop	r0
     8c2:	0f 90       	pop	r0
     8c4:	0f 90       	pop	r0
     8c6:	cf 91       	pop	r28
     8c8:	df 91       	pop	r29
     8ca:	08 95       	ret

000008cc <Handle_steps>:

void Handle_steps(volatile struct stepper *stepperino)
{
     8cc:	0f 93       	push	r16
     8ce:	1f 93       	push	r17
     8d0:	df 93       	push	r29
     8d2:	cf 93       	push	r28
     8d4:	0f 92       	push	r0
     8d6:	0f 92       	push	r0
     8d8:	cd b7       	in	r28, 0x3d	; 61
     8da:	de b7       	in	r29, 0x3e	; 62
     8dc:	9a 83       	std	Y+2, r25	; 0x02
     8de:	89 83       	std	Y+1, r24	; 0x01
    if(stepperino->time_profile == 0)
     8e0:	e9 81       	ldd	r30, Y+1	; 0x01
     8e2:	fa 81       	ldd	r31, Y+2	; 0x02
     8e4:	84 81       	ldd	r24, Z+4	; 0x04
     8e6:	88 23       	and	r24, r24
     8e8:	09 f4       	brne	.+2      	; 0x8ec <Handle_steps+0x20>
     8ea:	3e c0       	rjmp	.+124    	; 0x968 <Handle_steps+0x9c>
    {

    }
    else if(ms >= (stepperino->last_step + stepperino->time_profile))
     8ec:	e9 81       	ldd	r30, Y+1	; 0x01
     8ee:	fa 81       	ldd	r31, Y+2	; 0x02
     8f0:	20 81       	ld	r18, Z
     8f2:	31 81       	ldd	r19, Z+1	; 0x01
     8f4:	42 81       	ldd	r20, Z+2	; 0x02
     8f6:	53 81       	ldd	r21, Z+3	; 0x03
     8f8:	e9 81       	ldd	r30, Y+1	; 0x01
     8fa:	fa 81       	ldd	r31, Y+2	; 0x02
     8fc:	84 81       	ldd	r24, Z+4	; 0x04
     8fe:	88 2f       	mov	r24, r24
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	a0 e0       	ldi	r26, 0x00	; 0
     904:	b0 e0       	ldi	r27, 0x00	; 0
     906:	28 0f       	add	r18, r24
     908:	39 1f       	adc	r19, r25
     90a:	4a 1f       	adc	r20, r26
     90c:	5b 1f       	adc	r21, r27
     90e:	80 91 1c 03 	lds	r24, 0x031C
     912:	90 91 1d 03 	lds	r25, 0x031D
     916:	a0 91 1e 03 	lds	r26, 0x031E
     91a:	b0 91 1f 03 	lds	r27, 0x031F
     91e:	82 17       	cp	r24, r18
     920:	93 07       	cpc	r25, r19
     922:	a4 07       	cpc	r26, r20
     924:	b5 07       	cpc	r27, r21
     926:	04 f1       	brlt	.+64     	; 0x968 <Handle_steps+0x9c>
    {
        step(*stepperino);
     928:	e9 81       	ldd	r30, Y+1	; 0x01
     92a:	fa 81       	ldd	r31, Y+2	; 0x02
     92c:	00 81       	ld	r16, Z
     92e:	11 81       	ldd	r17, Z+1	; 0x01
     930:	22 81       	ldd	r18, Z+2	; 0x02
     932:	33 81       	ldd	r19, Z+3	; 0x03
     934:	44 81       	ldd	r20, Z+4	; 0x04
     936:	55 81       	ldd	r21, Z+5	; 0x05
     938:	66 81       	ldd	r22, Z+6	; 0x06
     93a:	77 81       	ldd	r23, Z+7	; 0x07
     93c:	80 85       	ldd	r24, Z+8	; 0x08
     93e:	91 85       	ldd	r25, Z+9	; 0x09
     940:	0e 94 70 02 	call	0x4e0	; 0x4e0 <step>
        stepperino->last_step = ms;
     944:	80 91 1c 03 	lds	r24, 0x031C
     948:	90 91 1d 03 	lds	r25, 0x031D
     94c:	a0 91 1e 03 	lds	r26, 0x031E
     950:	b0 91 1f 03 	lds	r27, 0x031F
     954:	e9 81       	ldd	r30, Y+1	; 0x01
     956:	fa 81       	ldd	r31, Y+2	; 0x02
     958:	80 83       	st	Z, r24
     95a:	91 83       	std	Z+1, r25	; 0x01
     95c:	a2 83       	std	Z+2, r26	; 0x02
     95e:	b3 83       	std	Z+3, r27	; 0x03
        count_steps(stepperino);
     960:	89 81       	ldd	r24, Y+1	; 0x01
     962:	9a 81       	ldd	r25, Y+2	; 0x02
     964:	0e 94 32 04 	call	0x864	; 0x864 <count_steps>

    }
}
     968:	0f 90       	pop	r0
     96a:	0f 90       	pop	r0
     96c:	cf 91       	pop	r28
     96e:	df 91       	pop	r29
     970:	1f 91       	pop	r17
     972:	0f 91       	pop	r16
     974:	08 95       	ret

00000976 <turn>:

void turn(int16_t degrees, volatile struct stepper *stepperino1, volatile struct stepper *stepperino2)
{
     976:	df 93       	push	r29
     978:	cf 93       	push	r28
     97a:	cd b7       	in	r28, 0x3d	; 61
     97c:	de b7       	in	r29, 0x3e	; 62
     97e:	e0 97       	sbiw	r28, 0x30	; 48
     980:	0f b6       	in	r0, 0x3f	; 63
     982:	f8 94       	cli
     984:	de bf       	out	0x3e, r29	; 62
     986:	0f be       	out	0x3f, r0	; 63
     988:	cd bf       	out	0x3d, r28	; 61
     98a:	98 8f       	std	Y+24, r25	; 0x18
     98c:	8f 8b       	std	Y+23, r24	; 0x17
     98e:	7a 8f       	std	Y+26, r23	; 0x1a
     990:	69 8f       	std	Y+25, r22	; 0x19
     992:	5c 8f       	std	Y+28, r21	; 0x1c
     994:	4b 8f       	std	Y+27, r20	; 0x1b
    int16_t turn_steps = (float)(0.55)*degrees;
     996:	8f 89       	ldd	r24, Y+23	; 0x17
     998:	98 8d       	ldd	r25, Y+24	; 0x18
     99a:	aa 27       	eor	r26, r26
     99c:	97 fd       	sbrc	r25, 7
     99e:	a0 95       	com	r26
     9a0:	ba 2f       	mov	r27, r26
     9a2:	bc 01       	movw	r22, r24
     9a4:	cd 01       	movw	r24, r26
     9a6:	0e 94 ff 09 	call	0x13fe	; 0x13fe <__floatsisf>
     9aa:	dc 01       	movw	r26, r24
     9ac:	cb 01       	movw	r24, r22
     9ae:	bc 01       	movw	r22, r24
     9b0:	cd 01       	movw	r24, r26
     9b2:	2d ec       	ldi	r18, 0xCD	; 205
     9b4:	3c ec       	ldi	r19, 0xCC	; 204
     9b6:	4c e0       	ldi	r20, 0x0C	; 12
     9b8:	5f e3       	ldi	r21, 0x3F	; 63
     9ba:	0e 94 c9 07 	call	0xf92	; 0xf92 <__mulsf3>
     9be:	dc 01       	movw	r26, r24
     9c0:	cb 01       	movw	r24, r22
     9c2:	bc 01       	movw	r22, r24
     9c4:	cd 01       	movw	r24, r26
     9c6:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <__fixsfsi>
     9ca:	dc 01       	movw	r26, r24
     9cc:	cb 01       	movw	r24, r22
     9ce:	9a 83       	std	Y+2, r25	; 0x02
     9d0:	89 83       	std	Y+1, r24	; 0x01
    struct stepper copy1 = *stepperino1;
     9d2:	89 8d       	ldd	r24, Y+25	; 0x19
     9d4:	9a 8d       	ldd	r25, Y+26	; 0x1a
     9d6:	9e 01       	movw	r18, r28
     9d8:	2d 5f       	subi	r18, 0xFD	; 253
     9da:	3f 4f       	sbci	r19, 0xFF	; 255
     9dc:	3e 8f       	std	Y+30, r19	; 0x1e
     9de:	2d 8f       	std	Y+29, r18	; 0x1d
     9e0:	98 a3       	std	Y+32, r25	; 0x20
     9e2:	8f 8f       	std	Y+31, r24	; 0x1f
     9e4:	3a e0       	ldi	r19, 0x0A	; 10
     9e6:	39 a3       	std	Y+33, r19	; 0x21
     9e8:	ef 8d       	ldd	r30, Y+31	; 0x1f
     9ea:	f8 a1       	ldd	r31, Y+32	; 0x20
     9ec:	00 80       	ld	r0, Z
     9ee:	2f 8d       	ldd	r18, Y+31	; 0x1f
     9f0:	38 a1       	ldd	r19, Y+32	; 0x20
     9f2:	2f 5f       	subi	r18, 0xFF	; 255
     9f4:	3f 4f       	sbci	r19, 0xFF	; 255
     9f6:	38 a3       	std	Y+32, r19	; 0x20
     9f8:	2f 8f       	std	Y+31, r18	; 0x1f
     9fa:	ed 8d       	ldd	r30, Y+29	; 0x1d
     9fc:	fe 8d       	ldd	r31, Y+30	; 0x1e
     9fe:	00 82       	st	Z, r0
     a00:	2d 8d       	ldd	r18, Y+29	; 0x1d
     a02:	3e 8d       	ldd	r19, Y+30	; 0x1e
     a04:	2f 5f       	subi	r18, 0xFF	; 255
     a06:	3f 4f       	sbci	r19, 0xFF	; 255
     a08:	3e 8f       	std	Y+30, r19	; 0x1e
     a0a:	2d 8f       	std	Y+29, r18	; 0x1d
     a0c:	39 a1       	ldd	r19, Y+33	; 0x21
     a0e:	31 50       	subi	r19, 0x01	; 1
     a10:	39 a3       	std	Y+33, r19	; 0x21
     a12:	89 a1       	ldd	r24, Y+33	; 0x21
     a14:	88 23       	and	r24, r24
     a16:	41 f7       	brne	.-48     	; 0x9e8 <turn+0x72>
    struct stepper copy2 = *stepperino2;
     a18:	8b 8d       	ldd	r24, Y+27	; 0x1b
     a1a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     a1c:	fe 01       	movw	r30, r28
     a1e:	3d 96       	adiw	r30, 0x0d	; 13
     a20:	fb a3       	std	Y+35, r31	; 0x23
     a22:	ea a3       	std	Y+34, r30	; 0x22
     a24:	9d a3       	std	Y+37, r25	; 0x25
     a26:	8c a3       	std	Y+36, r24	; 0x24
     a28:	fa e0       	ldi	r31, 0x0A	; 10
     a2a:	fe a3       	std	Y+38, r31	; 0x26
     a2c:	ec a1       	ldd	r30, Y+36	; 0x24
     a2e:	fd a1       	ldd	r31, Y+37	; 0x25
     a30:	00 80       	ld	r0, Z
     a32:	2c a1       	ldd	r18, Y+36	; 0x24
     a34:	3d a1       	ldd	r19, Y+37	; 0x25
     a36:	2f 5f       	subi	r18, 0xFF	; 255
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	3d a3       	std	Y+37, r19	; 0x25
     a3c:	2c a3       	std	Y+36, r18	; 0x24
     a3e:	ea a1       	ldd	r30, Y+34	; 0x22
     a40:	fb a1       	ldd	r31, Y+35	; 0x23
     a42:	00 82       	st	Z, r0
     a44:	2a a1       	ldd	r18, Y+34	; 0x22
     a46:	3b a1       	ldd	r19, Y+35	; 0x23
     a48:	2f 5f       	subi	r18, 0xFF	; 255
     a4a:	3f 4f       	sbci	r19, 0xFF	; 255
     a4c:	3b a3       	std	Y+35, r19	; 0x23
     a4e:	2a a3       	std	Y+34, r18	; 0x22
     a50:	3e a1       	ldd	r19, Y+38	; 0x26
     a52:	31 50       	subi	r19, 0x01	; 1
     a54:	3e a3       	std	Y+38, r19	; 0x26
     a56:	8e a1       	ldd	r24, Y+38	; 0x26
     a58:	88 23       	and	r24, r24
     a5a:	41 f7       	brne	.-48     	; 0xa2c <turn+0xb6>

        stepperino1->time_profile = 10;
     a5c:	e9 8d       	ldd	r30, Y+25	; 0x19
     a5e:	fa 8d       	ldd	r31, Y+26	; 0x1a
     a60:	8a e0       	ldi	r24, 0x0A	; 10
     a62:	84 83       	std	Z+4, r24	; 0x04
        stepperino1->steps = 0;
     a64:	e9 8d       	ldd	r30, Y+25	; 0x19
     a66:	fa 8d       	ldd	r31, Y+26	; 0x1a
     a68:	11 86       	std	Z+9, r1	; 0x09
     a6a:	10 86       	std	Z+8, r1	; 0x08
        stepperino2->time_profile = 10;
     a6c:	eb 8d       	ldd	r30, Y+27	; 0x1b
     a6e:	fc 8d       	ldd	r31, Y+28	; 0x1c
     a70:	8a e0       	ldi	r24, 0x0A	; 10
     a72:	84 83       	std	Z+4, r24	; 0x04
        stepperino2->steps = 0;
     a74:	eb 8d       	ldd	r30, Y+27	; 0x1b
     a76:	fc 8d       	ldd	r31, Y+28	; 0x1c
     a78:	11 86       	std	Z+9, r1	; 0x09
     a7a:	10 86       	std	Z+8, r1	; 0x08

    if(turn_steps > 0)
     a7c:	89 81       	ldd	r24, Y+1	; 0x01
     a7e:	9a 81       	ldd	r25, Y+2	; 0x02
     a80:	18 16       	cp	r1, r24
     a82:	19 06       	cpc	r1, r25
     a84:	14 f5       	brge	.+68     	; 0xaca <turn+0x154>
    {
        stepperino1->direction = forward;
     a86:	e9 8d       	ldd	r30, Y+25	; 0x19
     a88:	fa 8d       	ldd	r31, Y+26	; 0x1a
     a8a:	81 e0       	ldi	r24, 0x01	; 1
     a8c:	85 83       	std	Z+5, r24	; 0x05
        stepperino2->direction = forward;
     a8e:	eb 8d       	ldd	r30, Y+27	; 0x1b
     a90:	fc 8d       	ldd	r31, Y+28	; 0x1c
     a92:	81 e0       	ldi	r24, 0x01	; 1
     a94:	85 83       	std	Z+5, r24	; 0x05
        set_dir(stepperino1);
     a96:	89 8d       	ldd	r24, Y+25	; 0x19
     a98:	9a 8d       	ldd	r25, Y+26	; 0x1a
     a9a:	0e 94 23 02 	call	0x446	; 0x446 <set_dir>
        set_dir(stepperino2);
     a9e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     aa0:	9c 8d       	ldd	r25, Y+28	; 0x1c
     aa2:	0e 94 23 02 	call	0x446	; 0x446 <set_dir>
     aa6:	08 c0       	rjmp	.+16     	; 0xab8 <turn+0x142>

        while(stepperino1->steps < (int)turn_steps)
        {
        Handle_steps(stepperino1);
     aa8:	89 8d       	ldd	r24, Y+25	; 0x19
     aaa:	9a 8d       	ldd	r25, Y+26	; 0x1a
     aac:	0e 94 66 04 	call	0x8cc	; 0x8cc <Handle_steps>
        Handle_steps(stepperino2);
     ab0:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ab2:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ab4:	0e 94 66 04 	call	0x8cc	; 0x8cc <Handle_steps>
        stepperino1->direction = forward;
        stepperino2->direction = forward;
        set_dir(stepperino1);
        set_dir(stepperino2);

        while(stepperino1->steps < (int)turn_steps)
     ab8:	e9 8d       	ldd	r30, Y+25	; 0x19
     aba:	fa 8d       	ldd	r31, Y+26	; 0x1a
     abc:	20 85       	ldd	r18, Z+8	; 0x08
     abe:	31 85       	ldd	r19, Z+9	; 0x09
     ac0:	89 81       	ldd	r24, Y+1	; 0x01
     ac2:	9a 81       	ldd	r25, Y+2	; 0x02
     ac4:	28 17       	cp	r18, r24
     ac6:	39 07       	cpc	r19, r25
     ac8:	7c f3       	brlt	.-34     	; 0xaa8 <turn+0x132>
        Handle_steps(stepperino1);
        Handle_steps(stepperino2);
        }
    }

    if(turn_steps < 0)
     aca:	89 81       	ldd	r24, Y+1	; 0x01
     acc:	9a 81       	ldd	r25, Y+2	; 0x02
     ace:	99 23       	and	r25, r25
     ad0:	14 f5       	brge	.+68     	; 0xb16 <turn+0x1a0>
    {
        //turn_steps = abs(turn_steps);
        stepperino1->direction = backward;
     ad2:	e9 8d       	ldd	r30, Y+25	; 0x19
     ad4:	fa 8d       	ldd	r31, Y+26	; 0x1a
     ad6:	82 e0       	ldi	r24, 0x02	; 2
     ad8:	85 83       	std	Z+5, r24	; 0x05
        stepperino2->direction = backward;
     ada:	eb 8d       	ldd	r30, Y+27	; 0x1b
     adc:	fc 8d       	ldd	r31, Y+28	; 0x1c
     ade:	82 e0       	ldi	r24, 0x02	; 2
     ae0:	85 83       	std	Z+5, r24	; 0x05
        set_dir(stepperino1);
     ae2:	89 8d       	ldd	r24, Y+25	; 0x19
     ae4:	9a 8d       	ldd	r25, Y+26	; 0x1a
     ae6:	0e 94 23 02 	call	0x446	; 0x446 <set_dir>
        set_dir(stepperino2);
     aea:	8b 8d       	ldd	r24, Y+27	; 0x1b
     aec:	9c 8d       	ldd	r25, Y+28	; 0x1c
     aee:	0e 94 23 02 	call	0x446	; 0x446 <set_dir>
     af2:	08 c0       	rjmp	.+16     	; 0xb04 <turn+0x18e>

        while(stepperino2->steps > turn_steps)
        {
        //transmit_byte(turn_steps);
        Handle_steps(stepperino1);
     af4:	89 8d       	ldd	r24, Y+25	; 0x19
     af6:	9a 8d       	ldd	r25, Y+26	; 0x1a
     af8:	0e 94 66 04 	call	0x8cc	; 0x8cc <Handle_steps>
        Handle_steps(stepperino2);
     afc:	8b 8d       	ldd	r24, Y+27	; 0x1b
     afe:	9c 8d       	ldd	r25, Y+28	; 0x1c
     b00:	0e 94 66 04 	call	0x8cc	; 0x8cc <Handle_steps>
        stepperino1->direction = backward;
        stepperino2->direction = backward;
        set_dir(stepperino1);
        set_dir(stepperino2);

        while(stepperino2->steps > turn_steps)
     b04:	eb 8d       	ldd	r30, Y+27	; 0x1b
     b06:	fc 8d       	ldd	r31, Y+28	; 0x1c
     b08:	20 85       	ldd	r18, Z+8	; 0x08
     b0a:	31 85       	ldd	r19, Z+9	; 0x09
     b0c:	89 81       	ldd	r24, Y+1	; 0x01
     b0e:	9a 81       	ldd	r25, Y+2	; 0x02
     b10:	82 17       	cp	r24, r18
     b12:	93 07       	cpc	r25, r19
     b14:	7c f3       	brlt	.-34     	; 0xaf4 <turn+0x17e>
        //transmit_byte(turn_steps);
        Handle_steps(stepperino1);
        Handle_steps(stepperino2);
        }
    }
        *stepperino1 = copy1;
     b16:	89 8d       	ldd	r24, Y+25	; 0x19
     b18:	9a 8d       	ldd	r25, Y+26	; 0x1a
     b1a:	98 a7       	std	Y+40, r25	; 0x28
     b1c:	8f a3       	std	Y+39, r24	; 0x27
     b1e:	fe 01       	movw	r30, r28
     b20:	33 96       	adiw	r30, 0x03	; 3
     b22:	fa a7       	std	Y+42, r31	; 0x2a
     b24:	e9 a7       	std	Y+41, r30	; 0x29
     b26:	fa e0       	ldi	r31, 0x0A	; 10
     b28:	fb a7       	std	Y+43, r31	; 0x2b
     b2a:	e9 a5       	ldd	r30, Y+41	; 0x29
     b2c:	fa a5       	ldd	r31, Y+42	; 0x2a
     b2e:	00 80       	ld	r0, Z
     b30:	29 a5       	ldd	r18, Y+41	; 0x29
     b32:	3a a5       	ldd	r19, Y+42	; 0x2a
     b34:	2f 5f       	subi	r18, 0xFF	; 255
     b36:	3f 4f       	sbci	r19, 0xFF	; 255
     b38:	3a a7       	std	Y+42, r19	; 0x2a
     b3a:	29 a7       	std	Y+41, r18	; 0x29
     b3c:	ef a1       	ldd	r30, Y+39	; 0x27
     b3e:	f8 a5       	ldd	r31, Y+40	; 0x28
     b40:	00 82       	st	Z, r0
     b42:	2f a1       	ldd	r18, Y+39	; 0x27
     b44:	38 a5       	ldd	r19, Y+40	; 0x28
     b46:	2f 5f       	subi	r18, 0xFF	; 255
     b48:	3f 4f       	sbci	r19, 0xFF	; 255
     b4a:	38 a7       	std	Y+40, r19	; 0x28
     b4c:	2f a3       	std	Y+39, r18	; 0x27
     b4e:	3b a5       	ldd	r19, Y+43	; 0x2b
     b50:	31 50       	subi	r19, 0x01	; 1
     b52:	3b a7       	std	Y+43, r19	; 0x2b
     b54:	8b a5       	ldd	r24, Y+43	; 0x2b
     b56:	88 23       	and	r24, r24
     b58:	41 f7       	brne	.-48     	; 0xb2a <turn+0x1b4>
        *stepperino2 = copy2;
     b5a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     b5c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     b5e:	9d a7       	std	Y+45, r25	; 0x2d
     b60:	8c a7       	std	Y+44, r24	; 0x2c
     b62:	fe 01       	movw	r30, r28
     b64:	3d 96       	adiw	r30, 0x0d	; 13
     b66:	ff a7       	std	Y+47, r31	; 0x2f
     b68:	ee a7       	std	Y+46, r30	; 0x2e
     b6a:	fa e0       	ldi	r31, 0x0A	; 10
     b6c:	f8 ab       	std	Y+48, r31	; 0x30
     b6e:	ee a5       	ldd	r30, Y+46	; 0x2e
     b70:	ff a5       	ldd	r31, Y+47	; 0x2f
     b72:	00 80       	ld	r0, Z
     b74:	2e a5       	ldd	r18, Y+46	; 0x2e
     b76:	3f a5       	ldd	r19, Y+47	; 0x2f
     b78:	2f 5f       	subi	r18, 0xFF	; 255
     b7a:	3f 4f       	sbci	r19, 0xFF	; 255
     b7c:	3f a7       	std	Y+47, r19	; 0x2f
     b7e:	2e a7       	std	Y+46, r18	; 0x2e
     b80:	ec a5       	ldd	r30, Y+44	; 0x2c
     b82:	fd a5       	ldd	r31, Y+45	; 0x2d
     b84:	00 82       	st	Z, r0
     b86:	2c a5       	ldd	r18, Y+44	; 0x2c
     b88:	3d a5       	ldd	r19, Y+45	; 0x2d
     b8a:	2f 5f       	subi	r18, 0xFF	; 255
     b8c:	3f 4f       	sbci	r19, 0xFF	; 255
     b8e:	3d a7       	std	Y+45, r19	; 0x2d
     b90:	2c a7       	std	Y+44, r18	; 0x2c
     b92:	38 a9       	ldd	r19, Y+48	; 0x30
     b94:	31 50       	subi	r19, 0x01	; 1
     b96:	38 ab       	std	Y+48, r19	; 0x30
     b98:	88 a9       	ldd	r24, Y+48	; 0x30
     b9a:	88 23       	and	r24, r24
     b9c:	41 f7       	brne	.-48     	; 0xb6e <turn+0x1f8>
}
     b9e:	e0 96       	adiw	r28, 0x30	; 48
     ba0:	0f b6       	in	r0, 0x3f	; 63
     ba2:	f8 94       	cli
     ba4:	de bf       	out	0x3e, r29	; 62
     ba6:	0f be       	out	0x3f, r0	; 63
     ba8:	cd bf       	out	0x3d, r28	; 61
     baa:	cf 91       	pop	r28
     bac:	df 91       	pop	r29
     bae:	08 95       	ret

00000bb0 <init_stepper_timer0>:

void init_stepper_timer0()
{
     bb0:	df 93       	push	r29
     bb2:	cf 93       	push	r28
     bb4:	cd b7       	in	r28, 0x3d	; 61
     bb6:	de b7       	in	r29, 0x3e	; 62
    TCCR0A |= (0<<WGM01) | (0<<WGM00);
     bb8:	a4 e4       	ldi	r26, 0x44	; 68
     bba:	b0 e0       	ldi	r27, 0x00	; 0
     bbc:	e4 e4       	ldi	r30, 0x44	; 68
     bbe:	f0 e0       	ldi	r31, 0x00	; 0
     bc0:	80 81       	ld	r24, Z
     bc2:	8c 93       	st	X, r24
    TCCR0B |= (0<<WGM02) | (1<<CS02) | (0<<CS01) | (0<<CS00);
     bc4:	a5 e4       	ldi	r26, 0x45	; 69
     bc6:	b0 e0       	ldi	r27, 0x00	; 0
     bc8:	e5 e4       	ldi	r30, 0x45	; 69
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	80 81       	ld	r24, Z
     bce:	84 60       	ori	r24, 0x04	; 4
     bd0:	8c 93       	st	X, r24
    TIMSK0 |= (1<<TOIE0);
     bd2:	ae e6       	ldi	r26, 0x6E	; 110
     bd4:	b0 e0       	ldi	r27, 0x00	; 0
     bd6:	ee e6       	ldi	r30, 0x6E	; 110
     bd8:	f0 e0       	ldi	r31, 0x00	; 0
     bda:	80 81       	ld	r24, Z
     bdc:	81 60       	ori	r24, 0x01	; 1
     bde:	8c 93       	st	X, r24
}
     be0:	cf 91       	pop	r28
     be2:	df 91       	pop	r29
     be4:	08 95       	ret

00000be6 <__fixunssfsi>:
     be6:	ef 92       	push	r14
     be8:	ff 92       	push	r15
     bea:	0f 93       	push	r16
     bec:	1f 93       	push	r17
     bee:	7b 01       	movw	r14, r22
     bf0:	8c 01       	movw	r16, r24
     bf2:	20 e0       	ldi	r18, 0x00	; 0
     bf4:	30 e0       	ldi	r19, 0x00	; 0
     bf6:	40 e0       	ldi	r20, 0x00	; 0
     bf8:	5f e4       	ldi	r21, 0x4F	; 79
     bfa:	0e 94 9f 09 	call	0x133e	; 0x133e <__gesf2>
     bfe:	88 23       	and	r24, r24
     c00:	8c f0       	brlt	.+34     	; 0xc24 <__fixunssfsi+0x3e>
     c02:	c8 01       	movw	r24, r16
     c04:	b7 01       	movw	r22, r14
     c06:	20 e0       	ldi	r18, 0x00	; 0
     c08:	30 e0       	ldi	r19, 0x00	; 0
     c0a:	40 e0       	ldi	r20, 0x00	; 0
     c0c:	5f e4       	ldi	r21, 0x4F	; 79
     c0e:	0e 94 6b 07 	call	0xed6	; 0xed6 <__subsf3>
     c12:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <__fixsfsi>
     c16:	9b 01       	movw	r18, r22
     c18:	ac 01       	movw	r20, r24
     c1a:	20 50       	subi	r18, 0x00	; 0
     c1c:	30 40       	sbci	r19, 0x00	; 0
     c1e:	40 40       	sbci	r20, 0x00	; 0
     c20:	50 48       	sbci	r21, 0x80	; 128
     c22:	06 c0       	rjmp	.+12     	; 0xc30 <__fixunssfsi+0x4a>
     c24:	c8 01       	movw	r24, r16
     c26:	b7 01       	movw	r22, r14
     c28:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <__fixsfsi>
     c2c:	9b 01       	movw	r18, r22
     c2e:	ac 01       	movw	r20, r24
     c30:	b9 01       	movw	r22, r18
     c32:	ca 01       	movw	r24, r20
     c34:	1f 91       	pop	r17
     c36:	0f 91       	pop	r16
     c38:	ff 90       	pop	r15
     c3a:	ef 90       	pop	r14
     c3c:	08 95       	ret

00000c3e <_fpadd_parts>:
     c3e:	a0 e0       	ldi	r26, 0x00	; 0
     c40:	b0 e0       	ldi	r27, 0x00	; 0
     c42:	e5 e2       	ldi	r30, 0x25	; 37
     c44:	f6 e0       	ldi	r31, 0x06	; 6
     c46:	0c 94 c8 0c 	jmp	0x1990	; 0x1990 <__prologue_saves__>
     c4a:	dc 01       	movw	r26, r24
     c4c:	2b 01       	movw	r4, r22
     c4e:	fa 01       	movw	r30, r20
     c50:	9c 91       	ld	r25, X
     c52:	92 30       	cpi	r25, 0x02	; 2
     c54:	08 f4       	brcc	.+2      	; 0xc58 <_fpadd_parts+0x1a>
     c56:	39 c1       	rjmp	.+626    	; 0xeca <_fpadd_parts+0x28c>
     c58:	eb 01       	movw	r28, r22
     c5a:	88 81       	ld	r24, Y
     c5c:	82 30       	cpi	r24, 0x02	; 2
     c5e:	08 f4       	brcc	.+2      	; 0xc62 <_fpadd_parts+0x24>
     c60:	33 c1       	rjmp	.+614    	; 0xec8 <_fpadd_parts+0x28a>
     c62:	94 30       	cpi	r25, 0x04	; 4
     c64:	69 f4       	brne	.+26     	; 0xc80 <_fpadd_parts+0x42>
     c66:	84 30       	cpi	r24, 0x04	; 4
     c68:	09 f0       	breq	.+2      	; 0xc6c <_fpadd_parts+0x2e>
     c6a:	2f c1       	rjmp	.+606    	; 0xeca <_fpadd_parts+0x28c>
     c6c:	11 96       	adiw	r26, 0x01	; 1
     c6e:	9c 91       	ld	r25, X
     c70:	11 97       	sbiw	r26, 0x01	; 1
     c72:	89 81       	ldd	r24, Y+1	; 0x01
     c74:	98 17       	cp	r25, r24
     c76:	09 f4       	brne	.+2      	; 0xc7a <_fpadd_parts+0x3c>
     c78:	28 c1       	rjmp	.+592    	; 0xeca <_fpadd_parts+0x28c>
     c7a:	a0 e0       	ldi	r26, 0x00	; 0
     c7c:	b2 e0       	ldi	r27, 0x02	; 2
     c7e:	25 c1       	rjmp	.+586    	; 0xeca <_fpadd_parts+0x28c>
     c80:	84 30       	cpi	r24, 0x04	; 4
     c82:	09 f4       	brne	.+2      	; 0xc86 <_fpadd_parts+0x48>
     c84:	21 c1       	rjmp	.+578    	; 0xec8 <_fpadd_parts+0x28a>
     c86:	82 30       	cpi	r24, 0x02	; 2
     c88:	a9 f4       	brne	.+42     	; 0xcb4 <_fpadd_parts+0x76>
     c8a:	92 30       	cpi	r25, 0x02	; 2
     c8c:	09 f0       	breq	.+2      	; 0xc90 <_fpadd_parts+0x52>
     c8e:	1d c1       	rjmp	.+570    	; 0xeca <_fpadd_parts+0x28c>
     c90:	9a 01       	movw	r18, r20
     c92:	ad 01       	movw	r20, r26
     c94:	88 e0       	ldi	r24, 0x08	; 8
     c96:	ea 01       	movw	r28, r20
     c98:	09 90       	ld	r0, Y+
     c9a:	ae 01       	movw	r20, r28
     c9c:	e9 01       	movw	r28, r18
     c9e:	09 92       	st	Y+, r0
     ca0:	9e 01       	movw	r18, r28
     ca2:	81 50       	subi	r24, 0x01	; 1
     ca4:	c1 f7       	brne	.-16     	; 0xc96 <_fpadd_parts+0x58>
     ca6:	e2 01       	movw	r28, r4
     ca8:	89 81       	ldd	r24, Y+1	; 0x01
     caa:	11 96       	adiw	r26, 0x01	; 1
     cac:	9c 91       	ld	r25, X
     cae:	89 23       	and	r24, r25
     cb0:	81 83       	std	Z+1, r24	; 0x01
     cb2:	08 c1       	rjmp	.+528    	; 0xec4 <_fpadd_parts+0x286>
     cb4:	92 30       	cpi	r25, 0x02	; 2
     cb6:	09 f4       	brne	.+2      	; 0xcba <_fpadd_parts+0x7c>
     cb8:	07 c1       	rjmp	.+526    	; 0xec8 <_fpadd_parts+0x28a>
     cba:	12 96       	adiw	r26, 0x02	; 2
     cbc:	2d 90       	ld	r2, X+
     cbe:	3c 90       	ld	r3, X
     cc0:	13 97       	sbiw	r26, 0x03	; 3
     cc2:	eb 01       	movw	r28, r22
     cc4:	8a 81       	ldd	r24, Y+2	; 0x02
     cc6:	9b 81       	ldd	r25, Y+3	; 0x03
     cc8:	14 96       	adiw	r26, 0x04	; 4
     cca:	ad 90       	ld	r10, X+
     ccc:	bd 90       	ld	r11, X+
     cce:	cd 90       	ld	r12, X+
     cd0:	dc 90       	ld	r13, X
     cd2:	17 97       	sbiw	r26, 0x07	; 7
     cd4:	ec 80       	ldd	r14, Y+4	; 0x04
     cd6:	fd 80       	ldd	r15, Y+5	; 0x05
     cd8:	0e 81       	ldd	r16, Y+6	; 0x06
     cda:	1f 81       	ldd	r17, Y+7	; 0x07
     cdc:	91 01       	movw	r18, r2
     cde:	28 1b       	sub	r18, r24
     ce0:	39 0b       	sbc	r19, r25
     ce2:	b9 01       	movw	r22, r18
     ce4:	37 ff       	sbrs	r19, 7
     ce6:	04 c0       	rjmp	.+8      	; 0xcf0 <_fpadd_parts+0xb2>
     ce8:	66 27       	eor	r22, r22
     cea:	77 27       	eor	r23, r23
     cec:	62 1b       	sub	r22, r18
     cee:	73 0b       	sbc	r23, r19
     cf0:	60 32       	cpi	r22, 0x20	; 32
     cf2:	71 05       	cpc	r23, r1
     cf4:	0c f0       	brlt	.+2      	; 0xcf8 <_fpadd_parts+0xba>
     cf6:	61 c0       	rjmp	.+194    	; 0xdba <_fpadd_parts+0x17c>
     cf8:	12 16       	cp	r1, r18
     cfa:	13 06       	cpc	r1, r19
     cfc:	6c f5       	brge	.+90     	; 0xd58 <_fpadd_parts+0x11a>
     cfe:	37 01       	movw	r6, r14
     d00:	48 01       	movw	r8, r16
     d02:	06 2e       	mov	r0, r22
     d04:	04 c0       	rjmp	.+8      	; 0xd0e <_fpadd_parts+0xd0>
     d06:	96 94       	lsr	r9
     d08:	87 94       	ror	r8
     d0a:	77 94       	ror	r7
     d0c:	67 94       	ror	r6
     d0e:	0a 94       	dec	r0
     d10:	d2 f7       	brpl	.-12     	; 0xd06 <_fpadd_parts+0xc8>
     d12:	21 e0       	ldi	r18, 0x01	; 1
     d14:	30 e0       	ldi	r19, 0x00	; 0
     d16:	40 e0       	ldi	r20, 0x00	; 0
     d18:	50 e0       	ldi	r21, 0x00	; 0
     d1a:	04 c0       	rjmp	.+8      	; 0xd24 <_fpadd_parts+0xe6>
     d1c:	22 0f       	add	r18, r18
     d1e:	33 1f       	adc	r19, r19
     d20:	44 1f       	adc	r20, r20
     d22:	55 1f       	adc	r21, r21
     d24:	6a 95       	dec	r22
     d26:	d2 f7       	brpl	.-12     	; 0xd1c <_fpadd_parts+0xde>
     d28:	21 50       	subi	r18, 0x01	; 1
     d2a:	30 40       	sbci	r19, 0x00	; 0
     d2c:	40 40       	sbci	r20, 0x00	; 0
     d2e:	50 40       	sbci	r21, 0x00	; 0
     d30:	2e 21       	and	r18, r14
     d32:	3f 21       	and	r19, r15
     d34:	40 23       	and	r20, r16
     d36:	51 23       	and	r21, r17
     d38:	21 15       	cp	r18, r1
     d3a:	31 05       	cpc	r19, r1
     d3c:	41 05       	cpc	r20, r1
     d3e:	51 05       	cpc	r21, r1
     d40:	21 f0       	breq	.+8      	; 0xd4a <_fpadd_parts+0x10c>
     d42:	21 e0       	ldi	r18, 0x01	; 1
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	40 e0       	ldi	r20, 0x00	; 0
     d48:	50 e0       	ldi	r21, 0x00	; 0
     d4a:	79 01       	movw	r14, r18
     d4c:	8a 01       	movw	r16, r20
     d4e:	e6 28       	or	r14, r6
     d50:	f7 28       	or	r15, r7
     d52:	08 29       	or	r16, r8
     d54:	19 29       	or	r17, r9
     d56:	3c c0       	rjmp	.+120    	; 0xdd0 <_fpadd_parts+0x192>
     d58:	23 2b       	or	r18, r19
     d5a:	d1 f1       	breq	.+116    	; 0xdd0 <_fpadd_parts+0x192>
     d5c:	26 0e       	add	r2, r22
     d5e:	37 1e       	adc	r3, r23
     d60:	35 01       	movw	r6, r10
     d62:	46 01       	movw	r8, r12
     d64:	06 2e       	mov	r0, r22
     d66:	04 c0       	rjmp	.+8      	; 0xd70 <_fpadd_parts+0x132>
     d68:	96 94       	lsr	r9
     d6a:	87 94       	ror	r8
     d6c:	77 94       	ror	r7
     d6e:	67 94       	ror	r6
     d70:	0a 94       	dec	r0
     d72:	d2 f7       	brpl	.-12     	; 0xd68 <_fpadd_parts+0x12a>
     d74:	21 e0       	ldi	r18, 0x01	; 1
     d76:	30 e0       	ldi	r19, 0x00	; 0
     d78:	40 e0       	ldi	r20, 0x00	; 0
     d7a:	50 e0       	ldi	r21, 0x00	; 0
     d7c:	04 c0       	rjmp	.+8      	; 0xd86 <_fpadd_parts+0x148>
     d7e:	22 0f       	add	r18, r18
     d80:	33 1f       	adc	r19, r19
     d82:	44 1f       	adc	r20, r20
     d84:	55 1f       	adc	r21, r21
     d86:	6a 95       	dec	r22
     d88:	d2 f7       	brpl	.-12     	; 0xd7e <_fpadd_parts+0x140>
     d8a:	21 50       	subi	r18, 0x01	; 1
     d8c:	30 40       	sbci	r19, 0x00	; 0
     d8e:	40 40       	sbci	r20, 0x00	; 0
     d90:	50 40       	sbci	r21, 0x00	; 0
     d92:	2a 21       	and	r18, r10
     d94:	3b 21       	and	r19, r11
     d96:	4c 21       	and	r20, r12
     d98:	5d 21       	and	r21, r13
     d9a:	21 15       	cp	r18, r1
     d9c:	31 05       	cpc	r19, r1
     d9e:	41 05       	cpc	r20, r1
     da0:	51 05       	cpc	r21, r1
     da2:	21 f0       	breq	.+8      	; 0xdac <_fpadd_parts+0x16e>
     da4:	21 e0       	ldi	r18, 0x01	; 1
     da6:	30 e0       	ldi	r19, 0x00	; 0
     da8:	40 e0       	ldi	r20, 0x00	; 0
     daa:	50 e0       	ldi	r21, 0x00	; 0
     dac:	59 01       	movw	r10, r18
     dae:	6a 01       	movw	r12, r20
     db0:	a6 28       	or	r10, r6
     db2:	b7 28       	or	r11, r7
     db4:	c8 28       	or	r12, r8
     db6:	d9 28       	or	r13, r9
     db8:	0b c0       	rjmp	.+22     	; 0xdd0 <_fpadd_parts+0x192>
     dba:	82 15       	cp	r24, r2
     dbc:	93 05       	cpc	r25, r3
     dbe:	2c f0       	brlt	.+10     	; 0xdca <_fpadd_parts+0x18c>
     dc0:	1c 01       	movw	r2, r24
     dc2:	aa 24       	eor	r10, r10
     dc4:	bb 24       	eor	r11, r11
     dc6:	65 01       	movw	r12, r10
     dc8:	03 c0       	rjmp	.+6      	; 0xdd0 <_fpadd_parts+0x192>
     dca:	ee 24       	eor	r14, r14
     dcc:	ff 24       	eor	r15, r15
     dce:	87 01       	movw	r16, r14
     dd0:	11 96       	adiw	r26, 0x01	; 1
     dd2:	9c 91       	ld	r25, X
     dd4:	d2 01       	movw	r26, r4
     dd6:	11 96       	adiw	r26, 0x01	; 1
     dd8:	8c 91       	ld	r24, X
     dda:	98 17       	cp	r25, r24
     ddc:	09 f4       	brne	.+2      	; 0xde0 <_fpadd_parts+0x1a2>
     dde:	45 c0       	rjmp	.+138    	; 0xe6a <_fpadd_parts+0x22c>
     de0:	99 23       	and	r25, r25
     de2:	39 f0       	breq	.+14     	; 0xdf2 <_fpadd_parts+0x1b4>
     de4:	a8 01       	movw	r20, r16
     de6:	97 01       	movw	r18, r14
     de8:	2a 19       	sub	r18, r10
     dea:	3b 09       	sbc	r19, r11
     dec:	4c 09       	sbc	r20, r12
     dee:	5d 09       	sbc	r21, r13
     df0:	06 c0       	rjmp	.+12     	; 0xdfe <_fpadd_parts+0x1c0>
     df2:	a6 01       	movw	r20, r12
     df4:	95 01       	movw	r18, r10
     df6:	2e 19       	sub	r18, r14
     df8:	3f 09       	sbc	r19, r15
     dfa:	40 0b       	sbc	r20, r16
     dfc:	51 0b       	sbc	r21, r17
     dfe:	57 fd       	sbrc	r21, 7
     e00:	08 c0       	rjmp	.+16     	; 0xe12 <_fpadd_parts+0x1d4>
     e02:	11 82       	std	Z+1, r1	; 0x01
     e04:	33 82       	std	Z+3, r3	; 0x03
     e06:	22 82       	std	Z+2, r2	; 0x02
     e08:	24 83       	std	Z+4, r18	; 0x04
     e0a:	35 83       	std	Z+5, r19	; 0x05
     e0c:	46 83       	std	Z+6, r20	; 0x06
     e0e:	57 83       	std	Z+7, r21	; 0x07
     e10:	1d c0       	rjmp	.+58     	; 0xe4c <_fpadd_parts+0x20e>
     e12:	81 e0       	ldi	r24, 0x01	; 1
     e14:	81 83       	std	Z+1, r24	; 0x01
     e16:	33 82       	std	Z+3, r3	; 0x03
     e18:	22 82       	std	Z+2, r2	; 0x02
     e1a:	88 27       	eor	r24, r24
     e1c:	99 27       	eor	r25, r25
     e1e:	dc 01       	movw	r26, r24
     e20:	82 1b       	sub	r24, r18
     e22:	93 0b       	sbc	r25, r19
     e24:	a4 0b       	sbc	r26, r20
     e26:	b5 0b       	sbc	r27, r21
     e28:	84 83       	std	Z+4, r24	; 0x04
     e2a:	95 83       	std	Z+5, r25	; 0x05
     e2c:	a6 83       	std	Z+6, r26	; 0x06
     e2e:	b7 83       	std	Z+7, r27	; 0x07
     e30:	0d c0       	rjmp	.+26     	; 0xe4c <_fpadd_parts+0x20e>
     e32:	22 0f       	add	r18, r18
     e34:	33 1f       	adc	r19, r19
     e36:	44 1f       	adc	r20, r20
     e38:	55 1f       	adc	r21, r21
     e3a:	24 83       	std	Z+4, r18	; 0x04
     e3c:	35 83       	std	Z+5, r19	; 0x05
     e3e:	46 83       	std	Z+6, r20	; 0x06
     e40:	57 83       	std	Z+7, r21	; 0x07
     e42:	82 81       	ldd	r24, Z+2	; 0x02
     e44:	93 81       	ldd	r25, Z+3	; 0x03
     e46:	01 97       	sbiw	r24, 0x01	; 1
     e48:	93 83       	std	Z+3, r25	; 0x03
     e4a:	82 83       	std	Z+2, r24	; 0x02
     e4c:	24 81       	ldd	r18, Z+4	; 0x04
     e4e:	35 81       	ldd	r19, Z+5	; 0x05
     e50:	46 81       	ldd	r20, Z+6	; 0x06
     e52:	57 81       	ldd	r21, Z+7	; 0x07
     e54:	da 01       	movw	r26, r20
     e56:	c9 01       	movw	r24, r18
     e58:	01 97       	sbiw	r24, 0x01	; 1
     e5a:	a1 09       	sbc	r26, r1
     e5c:	b1 09       	sbc	r27, r1
     e5e:	8f 5f       	subi	r24, 0xFF	; 255
     e60:	9f 4f       	sbci	r25, 0xFF	; 255
     e62:	af 4f       	sbci	r26, 0xFF	; 255
     e64:	bf 43       	sbci	r27, 0x3F	; 63
     e66:	28 f3       	brcs	.-54     	; 0xe32 <_fpadd_parts+0x1f4>
     e68:	0b c0       	rjmp	.+22     	; 0xe80 <_fpadd_parts+0x242>
     e6a:	91 83       	std	Z+1, r25	; 0x01
     e6c:	33 82       	std	Z+3, r3	; 0x03
     e6e:	22 82       	std	Z+2, r2	; 0x02
     e70:	ea 0c       	add	r14, r10
     e72:	fb 1c       	adc	r15, r11
     e74:	0c 1d       	adc	r16, r12
     e76:	1d 1d       	adc	r17, r13
     e78:	e4 82       	std	Z+4, r14	; 0x04
     e7a:	f5 82       	std	Z+5, r15	; 0x05
     e7c:	06 83       	std	Z+6, r16	; 0x06
     e7e:	17 83       	std	Z+7, r17	; 0x07
     e80:	83 e0       	ldi	r24, 0x03	; 3
     e82:	80 83       	st	Z, r24
     e84:	24 81       	ldd	r18, Z+4	; 0x04
     e86:	35 81       	ldd	r19, Z+5	; 0x05
     e88:	46 81       	ldd	r20, Z+6	; 0x06
     e8a:	57 81       	ldd	r21, Z+7	; 0x07
     e8c:	57 ff       	sbrs	r21, 7
     e8e:	1a c0       	rjmp	.+52     	; 0xec4 <_fpadd_parts+0x286>
     e90:	c9 01       	movw	r24, r18
     e92:	aa 27       	eor	r26, r26
     e94:	97 fd       	sbrc	r25, 7
     e96:	a0 95       	com	r26
     e98:	ba 2f       	mov	r27, r26
     e9a:	81 70       	andi	r24, 0x01	; 1
     e9c:	90 70       	andi	r25, 0x00	; 0
     e9e:	a0 70       	andi	r26, 0x00	; 0
     ea0:	b0 70       	andi	r27, 0x00	; 0
     ea2:	56 95       	lsr	r21
     ea4:	47 95       	ror	r20
     ea6:	37 95       	ror	r19
     ea8:	27 95       	ror	r18
     eaa:	82 2b       	or	r24, r18
     eac:	93 2b       	or	r25, r19
     eae:	a4 2b       	or	r26, r20
     eb0:	b5 2b       	or	r27, r21
     eb2:	84 83       	std	Z+4, r24	; 0x04
     eb4:	95 83       	std	Z+5, r25	; 0x05
     eb6:	a6 83       	std	Z+6, r26	; 0x06
     eb8:	b7 83       	std	Z+7, r27	; 0x07
     eba:	82 81       	ldd	r24, Z+2	; 0x02
     ebc:	93 81       	ldd	r25, Z+3	; 0x03
     ebe:	01 96       	adiw	r24, 0x01	; 1
     ec0:	93 83       	std	Z+3, r25	; 0x03
     ec2:	82 83       	std	Z+2, r24	; 0x02
     ec4:	df 01       	movw	r26, r30
     ec6:	01 c0       	rjmp	.+2      	; 0xeca <_fpadd_parts+0x28c>
     ec8:	d2 01       	movw	r26, r4
     eca:	cd 01       	movw	r24, r26
     ecc:	cd b7       	in	r28, 0x3d	; 61
     ece:	de b7       	in	r29, 0x3e	; 62
     ed0:	e2 e1       	ldi	r30, 0x12	; 18
     ed2:	0c 94 e4 0c 	jmp	0x19c8	; 0x19c8 <__epilogue_restores__>

00000ed6 <__subsf3>:
     ed6:	a0 e2       	ldi	r26, 0x20	; 32
     ed8:	b0 e0       	ldi	r27, 0x00	; 0
     eda:	e1 e7       	ldi	r30, 0x71	; 113
     edc:	f7 e0       	ldi	r31, 0x07	; 7
     ede:	0c 94 d4 0c 	jmp	0x19a8	; 0x19a8 <__prologue_saves__+0x18>
     ee2:	69 83       	std	Y+1, r22	; 0x01
     ee4:	7a 83       	std	Y+2, r23	; 0x02
     ee6:	8b 83       	std	Y+3, r24	; 0x03
     ee8:	9c 83       	std	Y+4, r25	; 0x04
     eea:	2d 83       	std	Y+5, r18	; 0x05
     eec:	3e 83       	std	Y+6, r19	; 0x06
     eee:	4f 83       	std	Y+7, r20	; 0x07
     ef0:	58 87       	std	Y+8, r21	; 0x08
     ef2:	e9 e0       	ldi	r30, 0x09	; 9
     ef4:	ee 2e       	mov	r14, r30
     ef6:	f1 2c       	mov	r15, r1
     ef8:	ec 0e       	add	r14, r28
     efa:	fd 1e       	adc	r15, r29
     efc:	ce 01       	movw	r24, r28
     efe:	01 96       	adiw	r24, 0x01	; 1
     f00:	b7 01       	movw	r22, r14
     f02:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <__unpack_f>
     f06:	8e 01       	movw	r16, r28
     f08:	0f 5e       	subi	r16, 0xEF	; 239
     f0a:	1f 4f       	sbci	r17, 0xFF	; 255
     f0c:	ce 01       	movw	r24, r28
     f0e:	05 96       	adiw	r24, 0x05	; 5
     f10:	b8 01       	movw	r22, r16
     f12:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <__unpack_f>
     f16:	8a 89       	ldd	r24, Y+18	; 0x12
     f18:	91 e0       	ldi	r25, 0x01	; 1
     f1a:	89 27       	eor	r24, r25
     f1c:	8a 8b       	std	Y+18, r24	; 0x12
     f1e:	c7 01       	movw	r24, r14
     f20:	b8 01       	movw	r22, r16
     f22:	ae 01       	movw	r20, r28
     f24:	47 5e       	subi	r20, 0xE7	; 231
     f26:	5f 4f       	sbci	r21, 0xFF	; 255
     f28:	0e 94 1f 06 	call	0xc3e	; 0xc3e <_fpadd_parts>
     f2c:	0e 94 00 0b 	call	0x1600	; 0x1600 <__pack_f>
     f30:	a0 96       	adiw	r28, 0x20	; 32
     f32:	e6 e0       	ldi	r30, 0x06	; 6
     f34:	0c 94 f0 0c 	jmp	0x19e0	; 0x19e0 <__epilogue_restores__+0x18>

00000f38 <__addsf3>:
     f38:	a0 e2       	ldi	r26, 0x20	; 32
     f3a:	b0 e0       	ldi	r27, 0x00	; 0
     f3c:	e2 ea       	ldi	r30, 0xA2	; 162
     f3e:	f7 e0       	ldi	r31, 0x07	; 7
     f40:	0c 94 d4 0c 	jmp	0x19a8	; 0x19a8 <__prologue_saves__+0x18>
     f44:	69 83       	std	Y+1, r22	; 0x01
     f46:	7a 83       	std	Y+2, r23	; 0x02
     f48:	8b 83       	std	Y+3, r24	; 0x03
     f4a:	9c 83       	std	Y+4, r25	; 0x04
     f4c:	2d 83       	std	Y+5, r18	; 0x05
     f4e:	3e 83       	std	Y+6, r19	; 0x06
     f50:	4f 83       	std	Y+7, r20	; 0x07
     f52:	58 87       	std	Y+8, r21	; 0x08
     f54:	f9 e0       	ldi	r31, 0x09	; 9
     f56:	ef 2e       	mov	r14, r31
     f58:	f1 2c       	mov	r15, r1
     f5a:	ec 0e       	add	r14, r28
     f5c:	fd 1e       	adc	r15, r29
     f5e:	ce 01       	movw	r24, r28
     f60:	01 96       	adiw	r24, 0x01	; 1
     f62:	b7 01       	movw	r22, r14
     f64:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <__unpack_f>
     f68:	8e 01       	movw	r16, r28
     f6a:	0f 5e       	subi	r16, 0xEF	; 239
     f6c:	1f 4f       	sbci	r17, 0xFF	; 255
     f6e:	ce 01       	movw	r24, r28
     f70:	05 96       	adiw	r24, 0x05	; 5
     f72:	b8 01       	movw	r22, r16
     f74:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <__unpack_f>
     f78:	c7 01       	movw	r24, r14
     f7a:	b8 01       	movw	r22, r16
     f7c:	ae 01       	movw	r20, r28
     f7e:	47 5e       	subi	r20, 0xE7	; 231
     f80:	5f 4f       	sbci	r21, 0xFF	; 255
     f82:	0e 94 1f 06 	call	0xc3e	; 0xc3e <_fpadd_parts>
     f86:	0e 94 00 0b 	call	0x1600	; 0x1600 <__pack_f>
     f8a:	a0 96       	adiw	r28, 0x20	; 32
     f8c:	e6 e0       	ldi	r30, 0x06	; 6
     f8e:	0c 94 f0 0c 	jmp	0x19e0	; 0x19e0 <__epilogue_restores__+0x18>

00000f92 <__mulsf3>:
     f92:	a0 e2       	ldi	r26, 0x20	; 32
     f94:	b0 e0       	ldi	r27, 0x00	; 0
     f96:	ef ec       	ldi	r30, 0xCF	; 207
     f98:	f7 e0       	ldi	r31, 0x07	; 7
     f9a:	0c 94 c8 0c 	jmp	0x1990	; 0x1990 <__prologue_saves__>
     f9e:	69 83       	std	Y+1, r22	; 0x01
     fa0:	7a 83       	std	Y+2, r23	; 0x02
     fa2:	8b 83       	std	Y+3, r24	; 0x03
     fa4:	9c 83       	std	Y+4, r25	; 0x04
     fa6:	2d 83       	std	Y+5, r18	; 0x05
     fa8:	3e 83       	std	Y+6, r19	; 0x06
     faa:	4f 83       	std	Y+7, r20	; 0x07
     fac:	58 87       	std	Y+8, r21	; 0x08
     fae:	ce 01       	movw	r24, r28
     fb0:	01 96       	adiw	r24, 0x01	; 1
     fb2:	be 01       	movw	r22, r28
     fb4:	67 5f       	subi	r22, 0xF7	; 247
     fb6:	7f 4f       	sbci	r23, 0xFF	; 255
     fb8:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <__unpack_f>
     fbc:	ce 01       	movw	r24, r28
     fbe:	05 96       	adiw	r24, 0x05	; 5
     fc0:	be 01       	movw	r22, r28
     fc2:	6f 5e       	subi	r22, 0xEF	; 239
     fc4:	7f 4f       	sbci	r23, 0xFF	; 255
     fc6:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <__unpack_f>
     fca:	99 85       	ldd	r25, Y+9	; 0x09
     fcc:	92 30       	cpi	r25, 0x02	; 2
     fce:	88 f0       	brcs	.+34     	; 0xff2 <__mulsf3+0x60>
     fd0:	89 89       	ldd	r24, Y+17	; 0x11
     fd2:	82 30       	cpi	r24, 0x02	; 2
     fd4:	c8 f0       	brcs	.+50     	; 0x1008 <__mulsf3+0x76>
     fd6:	94 30       	cpi	r25, 0x04	; 4
     fd8:	19 f4       	brne	.+6      	; 0xfe0 <__mulsf3+0x4e>
     fda:	82 30       	cpi	r24, 0x02	; 2
     fdc:	51 f4       	brne	.+20     	; 0xff2 <__mulsf3+0x60>
     fde:	04 c0       	rjmp	.+8      	; 0xfe8 <__mulsf3+0x56>
     fe0:	84 30       	cpi	r24, 0x04	; 4
     fe2:	29 f4       	brne	.+10     	; 0xfee <__mulsf3+0x5c>
     fe4:	92 30       	cpi	r25, 0x02	; 2
     fe6:	81 f4       	brne	.+32     	; 0x1008 <__mulsf3+0x76>
     fe8:	80 e0       	ldi	r24, 0x00	; 0
     fea:	92 e0       	ldi	r25, 0x02	; 2
     fec:	c6 c0       	rjmp	.+396    	; 0x117a <__mulsf3+0x1e8>
     fee:	92 30       	cpi	r25, 0x02	; 2
     ff0:	49 f4       	brne	.+18     	; 0x1004 <__mulsf3+0x72>
     ff2:	20 e0       	ldi	r18, 0x00	; 0
     ff4:	9a 85       	ldd	r25, Y+10	; 0x0a
     ff6:	8a 89       	ldd	r24, Y+18	; 0x12
     ff8:	98 13       	cpse	r25, r24
     ffa:	21 e0       	ldi	r18, 0x01	; 1
     ffc:	2a 87       	std	Y+10, r18	; 0x0a
     ffe:	ce 01       	movw	r24, r28
    1000:	09 96       	adiw	r24, 0x09	; 9
    1002:	bb c0       	rjmp	.+374    	; 0x117a <__mulsf3+0x1e8>
    1004:	82 30       	cpi	r24, 0x02	; 2
    1006:	49 f4       	brne	.+18     	; 0x101a <__mulsf3+0x88>
    1008:	20 e0       	ldi	r18, 0x00	; 0
    100a:	9a 85       	ldd	r25, Y+10	; 0x0a
    100c:	8a 89       	ldd	r24, Y+18	; 0x12
    100e:	98 13       	cpse	r25, r24
    1010:	21 e0       	ldi	r18, 0x01	; 1
    1012:	2a 8b       	std	Y+18, r18	; 0x12
    1014:	ce 01       	movw	r24, r28
    1016:	41 96       	adiw	r24, 0x11	; 17
    1018:	b0 c0       	rjmp	.+352    	; 0x117a <__mulsf3+0x1e8>
    101a:	2d 84       	ldd	r2, Y+13	; 0x0d
    101c:	3e 84       	ldd	r3, Y+14	; 0x0e
    101e:	4f 84       	ldd	r4, Y+15	; 0x0f
    1020:	58 88       	ldd	r5, Y+16	; 0x10
    1022:	6d 88       	ldd	r6, Y+21	; 0x15
    1024:	7e 88       	ldd	r7, Y+22	; 0x16
    1026:	8f 88       	ldd	r8, Y+23	; 0x17
    1028:	98 8c       	ldd	r9, Y+24	; 0x18
    102a:	ee 24       	eor	r14, r14
    102c:	ff 24       	eor	r15, r15
    102e:	87 01       	movw	r16, r14
    1030:	aa 24       	eor	r10, r10
    1032:	bb 24       	eor	r11, r11
    1034:	65 01       	movw	r12, r10
    1036:	40 e0       	ldi	r20, 0x00	; 0
    1038:	50 e0       	ldi	r21, 0x00	; 0
    103a:	60 e0       	ldi	r22, 0x00	; 0
    103c:	70 e0       	ldi	r23, 0x00	; 0
    103e:	e0 e0       	ldi	r30, 0x00	; 0
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	c1 01       	movw	r24, r2
    1044:	81 70       	andi	r24, 0x01	; 1
    1046:	90 70       	andi	r25, 0x00	; 0
    1048:	89 2b       	or	r24, r25
    104a:	e9 f0       	breq	.+58     	; 0x1086 <__mulsf3+0xf4>
    104c:	e6 0c       	add	r14, r6
    104e:	f7 1c       	adc	r15, r7
    1050:	08 1d       	adc	r16, r8
    1052:	19 1d       	adc	r17, r9
    1054:	9a 01       	movw	r18, r20
    1056:	ab 01       	movw	r20, r22
    1058:	2a 0d       	add	r18, r10
    105a:	3b 1d       	adc	r19, r11
    105c:	4c 1d       	adc	r20, r12
    105e:	5d 1d       	adc	r21, r13
    1060:	80 e0       	ldi	r24, 0x00	; 0
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	a0 e0       	ldi	r26, 0x00	; 0
    1066:	b0 e0       	ldi	r27, 0x00	; 0
    1068:	e6 14       	cp	r14, r6
    106a:	f7 04       	cpc	r15, r7
    106c:	08 05       	cpc	r16, r8
    106e:	19 05       	cpc	r17, r9
    1070:	20 f4       	brcc	.+8      	; 0x107a <__mulsf3+0xe8>
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	a0 e0       	ldi	r26, 0x00	; 0
    1078:	b0 e0       	ldi	r27, 0x00	; 0
    107a:	ba 01       	movw	r22, r20
    107c:	a9 01       	movw	r20, r18
    107e:	48 0f       	add	r20, r24
    1080:	59 1f       	adc	r21, r25
    1082:	6a 1f       	adc	r22, r26
    1084:	7b 1f       	adc	r23, r27
    1086:	aa 0c       	add	r10, r10
    1088:	bb 1c       	adc	r11, r11
    108a:	cc 1c       	adc	r12, r12
    108c:	dd 1c       	adc	r13, r13
    108e:	97 fe       	sbrs	r9, 7
    1090:	08 c0       	rjmp	.+16     	; 0x10a2 <__mulsf3+0x110>
    1092:	81 e0       	ldi	r24, 0x01	; 1
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	a0 e0       	ldi	r26, 0x00	; 0
    1098:	b0 e0       	ldi	r27, 0x00	; 0
    109a:	a8 2a       	or	r10, r24
    109c:	b9 2a       	or	r11, r25
    109e:	ca 2a       	or	r12, r26
    10a0:	db 2a       	or	r13, r27
    10a2:	31 96       	adiw	r30, 0x01	; 1
    10a4:	e0 32       	cpi	r30, 0x20	; 32
    10a6:	f1 05       	cpc	r31, r1
    10a8:	49 f0       	breq	.+18     	; 0x10bc <__mulsf3+0x12a>
    10aa:	66 0c       	add	r6, r6
    10ac:	77 1c       	adc	r7, r7
    10ae:	88 1c       	adc	r8, r8
    10b0:	99 1c       	adc	r9, r9
    10b2:	56 94       	lsr	r5
    10b4:	47 94       	ror	r4
    10b6:	37 94       	ror	r3
    10b8:	27 94       	ror	r2
    10ba:	c3 cf       	rjmp	.-122    	; 0x1042 <__mulsf3+0xb0>
    10bc:	fa 85       	ldd	r31, Y+10	; 0x0a
    10be:	ea 89       	ldd	r30, Y+18	; 0x12
    10c0:	2b 89       	ldd	r18, Y+19	; 0x13
    10c2:	3c 89       	ldd	r19, Y+20	; 0x14
    10c4:	8b 85       	ldd	r24, Y+11	; 0x0b
    10c6:	9c 85       	ldd	r25, Y+12	; 0x0c
    10c8:	28 0f       	add	r18, r24
    10ca:	39 1f       	adc	r19, r25
    10cc:	2e 5f       	subi	r18, 0xFE	; 254
    10ce:	3f 4f       	sbci	r19, 0xFF	; 255
    10d0:	17 c0       	rjmp	.+46     	; 0x1100 <__mulsf3+0x16e>
    10d2:	ca 01       	movw	r24, r20
    10d4:	81 70       	andi	r24, 0x01	; 1
    10d6:	90 70       	andi	r25, 0x00	; 0
    10d8:	89 2b       	or	r24, r25
    10da:	61 f0       	breq	.+24     	; 0x10f4 <__mulsf3+0x162>
    10dc:	16 95       	lsr	r17
    10de:	07 95       	ror	r16
    10e0:	f7 94       	ror	r15
    10e2:	e7 94       	ror	r14
    10e4:	80 e0       	ldi	r24, 0x00	; 0
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	a0 e0       	ldi	r26, 0x00	; 0
    10ea:	b0 e8       	ldi	r27, 0x80	; 128
    10ec:	e8 2a       	or	r14, r24
    10ee:	f9 2a       	or	r15, r25
    10f0:	0a 2b       	or	r16, r26
    10f2:	1b 2b       	or	r17, r27
    10f4:	76 95       	lsr	r23
    10f6:	67 95       	ror	r22
    10f8:	57 95       	ror	r21
    10fa:	47 95       	ror	r20
    10fc:	2f 5f       	subi	r18, 0xFF	; 255
    10fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1100:	77 fd       	sbrc	r23, 7
    1102:	e7 cf       	rjmp	.-50     	; 0x10d2 <__mulsf3+0x140>
    1104:	0c c0       	rjmp	.+24     	; 0x111e <__mulsf3+0x18c>
    1106:	44 0f       	add	r20, r20
    1108:	55 1f       	adc	r21, r21
    110a:	66 1f       	adc	r22, r22
    110c:	77 1f       	adc	r23, r23
    110e:	17 fd       	sbrc	r17, 7
    1110:	41 60       	ori	r20, 0x01	; 1
    1112:	ee 0c       	add	r14, r14
    1114:	ff 1c       	adc	r15, r15
    1116:	00 1f       	adc	r16, r16
    1118:	11 1f       	adc	r17, r17
    111a:	21 50       	subi	r18, 0x01	; 1
    111c:	30 40       	sbci	r19, 0x00	; 0
    111e:	40 30       	cpi	r20, 0x00	; 0
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	59 07       	cpc	r21, r25
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	69 07       	cpc	r22, r25
    1128:	90 e4       	ldi	r25, 0x40	; 64
    112a:	79 07       	cpc	r23, r25
    112c:	60 f3       	brcs	.-40     	; 0x1106 <__mulsf3+0x174>
    112e:	2b 8f       	std	Y+27, r18	; 0x1b
    1130:	3c 8f       	std	Y+28, r19	; 0x1c
    1132:	db 01       	movw	r26, r22
    1134:	ca 01       	movw	r24, r20
    1136:	8f 77       	andi	r24, 0x7F	; 127
    1138:	90 70       	andi	r25, 0x00	; 0
    113a:	a0 70       	andi	r26, 0x00	; 0
    113c:	b0 70       	andi	r27, 0x00	; 0
    113e:	80 34       	cpi	r24, 0x40	; 64
    1140:	91 05       	cpc	r25, r1
    1142:	a1 05       	cpc	r26, r1
    1144:	b1 05       	cpc	r27, r1
    1146:	61 f4       	brne	.+24     	; 0x1160 <__mulsf3+0x1ce>
    1148:	47 fd       	sbrc	r20, 7
    114a:	0a c0       	rjmp	.+20     	; 0x1160 <__mulsf3+0x1ce>
    114c:	e1 14       	cp	r14, r1
    114e:	f1 04       	cpc	r15, r1
    1150:	01 05       	cpc	r16, r1
    1152:	11 05       	cpc	r17, r1
    1154:	29 f0       	breq	.+10     	; 0x1160 <__mulsf3+0x1ce>
    1156:	40 5c       	subi	r20, 0xC0	; 192
    1158:	5f 4f       	sbci	r21, 0xFF	; 255
    115a:	6f 4f       	sbci	r22, 0xFF	; 255
    115c:	7f 4f       	sbci	r23, 0xFF	; 255
    115e:	40 78       	andi	r20, 0x80	; 128
    1160:	1a 8e       	std	Y+26, r1	; 0x1a
    1162:	fe 17       	cp	r31, r30
    1164:	11 f0       	breq	.+4      	; 0x116a <__mulsf3+0x1d8>
    1166:	81 e0       	ldi	r24, 0x01	; 1
    1168:	8a 8f       	std	Y+26, r24	; 0x1a
    116a:	4d 8f       	std	Y+29, r20	; 0x1d
    116c:	5e 8f       	std	Y+30, r21	; 0x1e
    116e:	6f 8f       	std	Y+31, r22	; 0x1f
    1170:	78 a3       	std	Y+32, r23	; 0x20
    1172:	83 e0       	ldi	r24, 0x03	; 3
    1174:	89 8f       	std	Y+25, r24	; 0x19
    1176:	ce 01       	movw	r24, r28
    1178:	49 96       	adiw	r24, 0x19	; 25
    117a:	0e 94 00 0b 	call	0x1600	; 0x1600 <__pack_f>
    117e:	a0 96       	adiw	r28, 0x20	; 32
    1180:	e2 e1       	ldi	r30, 0x12	; 18
    1182:	0c 94 e4 0c 	jmp	0x19c8	; 0x19c8 <__epilogue_restores__>

00001186 <__divsf3>:
    1186:	a8 e1       	ldi	r26, 0x18	; 24
    1188:	b0 e0       	ldi	r27, 0x00	; 0
    118a:	e9 ec       	ldi	r30, 0xC9	; 201
    118c:	f8 e0       	ldi	r31, 0x08	; 8
    118e:	0c 94 d0 0c 	jmp	0x19a0	; 0x19a0 <__prologue_saves__+0x10>
    1192:	69 83       	std	Y+1, r22	; 0x01
    1194:	7a 83       	std	Y+2, r23	; 0x02
    1196:	8b 83       	std	Y+3, r24	; 0x03
    1198:	9c 83       	std	Y+4, r25	; 0x04
    119a:	2d 83       	std	Y+5, r18	; 0x05
    119c:	3e 83       	std	Y+6, r19	; 0x06
    119e:	4f 83       	std	Y+7, r20	; 0x07
    11a0:	58 87       	std	Y+8, r21	; 0x08
    11a2:	b9 e0       	ldi	r27, 0x09	; 9
    11a4:	eb 2e       	mov	r14, r27
    11a6:	f1 2c       	mov	r15, r1
    11a8:	ec 0e       	add	r14, r28
    11aa:	fd 1e       	adc	r15, r29
    11ac:	ce 01       	movw	r24, r28
    11ae:	01 96       	adiw	r24, 0x01	; 1
    11b0:	b7 01       	movw	r22, r14
    11b2:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <__unpack_f>
    11b6:	8e 01       	movw	r16, r28
    11b8:	0f 5e       	subi	r16, 0xEF	; 239
    11ba:	1f 4f       	sbci	r17, 0xFF	; 255
    11bc:	ce 01       	movw	r24, r28
    11be:	05 96       	adiw	r24, 0x05	; 5
    11c0:	b8 01       	movw	r22, r16
    11c2:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <__unpack_f>
    11c6:	29 85       	ldd	r18, Y+9	; 0x09
    11c8:	22 30       	cpi	r18, 0x02	; 2
    11ca:	08 f4       	brcc	.+2      	; 0x11ce <__divsf3+0x48>
    11cc:	7e c0       	rjmp	.+252    	; 0x12ca <__divsf3+0x144>
    11ce:	39 89       	ldd	r19, Y+17	; 0x11
    11d0:	32 30       	cpi	r19, 0x02	; 2
    11d2:	10 f4       	brcc	.+4      	; 0x11d8 <__divsf3+0x52>
    11d4:	b8 01       	movw	r22, r16
    11d6:	7c c0       	rjmp	.+248    	; 0x12d0 <__divsf3+0x14a>
    11d8:	8a 85       	ldd	r24, Y+10	; 0x0a
    11da:	9a 89       	ldd	r25, Y+18	; 0x12
    11dc:	89 27       	eor	r24, r25
    11de:	8a 87       	std	Y+10, r24	; 0x0a
    11e0:	24 30       	cpi	r18, 0x04	; 4
    11e2:	11 f0       	breq	.+4      	; 0x11e8 <__divsf3+0x62>
    11e4:	22 30       	cpi	r18, 0x02	; 2
    11e6:	31 f4       	brne	.+12     	; 0x11f4 <__divsf3+0x6e>
    11e8:	23 17       	cp	r18, r19
    11ea:	09 f0       	breq	.+2      	; 0x11ee <__divsf3+0x68>
    11ec:	6e c0       	rjmp	.+220    	; 0x12ca <__divsf3+0x144>
    11ee:	60 e0       	ldi	r22, 0x00	; 0
    11f0:	72 e0       	ldi	r23, 0x02	; 2
    11f2:	6e c0       	rjmp	.+220    	; 0x12d0 <__divsf3+0x14a>
    11f4:	34 30       	cpi	r19, 0x04	; 4
    11f6:	39 f4       	brne	.+14     	; 0x1206 <__divsf3+0x80>
    11f8:	1d 86       	std	Y+13, r1	; 0x0d
    11fa:	1e 86       	std	Y+14, r1	; 0x0e
    11fc:	1f 86       	std	Y+15, r1	; 0x0f
    11fe:	18 8a       	std	Y+16, r1	; 0x10
    1200:	1c 86       	std	Y+12, r1	; 0x0c
    1202:	1b 86       	std	Y+11, r1	; 0x0b
    1204:	04 c0       	rjmp	.+8      	; 0x120e <__divsf3+0x88>
    1206:	32 30       	cpi	r19, 0x02	; 2
    1208:	21 f4       	brne	.+8      	; 0x1212 <__divsf3+0x8c>
    120a:	84 e0       	ldi	r24, 0x04	; 4
    120c:	89 87       	std	Y+9, r24	; 0x09
    120e:	b7 01       	movw	r22, r14
    1210:	5f c0       	rjmp	.+190    	; 0x12d0 <__divsf3+0x14a>
    1212:	2b 85       	ldd	r18, Y+11	; 0x0b
    1214:	3c 85       	ldd	r19, Y+12	; 0x0c
    1216:	8b 89       	ldd	r24, Y+19	; 0x13
    1218:	9c 89       	ldd	r25, Y+20	; 0x14
    121a:	28 1b       	sub	r18, r24
    121c:	39 0b       	sbc	r19, r25
    121e:	3c 87       	std	Y+12, r19	; 0x0c
    1220:	2b 87       	std	Y+11, r18	; 0x0b
    1222:	ed 84       	ldd	r14, Y+13	; 0x0d
    1224:	fe 84       	ldd	r15, Y+14	; 0x0e
    1226:	0f 85       	ldd	r16, Y+15	; 0x0f
    1228:	18 89       	ldd	r17, Y+16	; 0x10
    122a:	ad 88       	ldd	r10, Y+21	; 0x15
    122c:	be 88       	ldd	r11, Y+22	; 0x16
    122e:	cf 88       	ldd	r12, Y+23	; 0x17
    1230:	d8 8c       	ldd	r13, Y+24	; 0x18
    1232:	ea 14       	cp	r14, r10
    1234:	fb 04       	cpc	r15, r11
    1236:	0c 05       	cpc	r16, r12
    1238:	1d 05       	cpc	r17, r13
    123a:	40 f4       	brcc	.+16     	; 0x124c <__divsf3+0xc6>
    123c:	ee 0c       	add	r14, r14
    123e:	ff 1c       	adc	r15, r15
    1240:	00 1f       	adc	r16, r16
    1242:	11 1f       	adc	r17, r17
    1244:	21 50       	subi	r18, 0x01	; 1
    1246:	30 40       	sbci	r19, 0x00	; 0
    1248:	3c 87       	std	Y+12, r19	; 0x0c
    124a:	2b 87       	std	Y+11, r18	; 0x0b
    124c:	20 e0       	ldi	r18, 0x00	; 0
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	40 e0       	ldi	r20, 0x00	; 0
    1252:	50 e0       	ldi	r21, 0x00	; 0
    1254:	80 e0       	ldi	r24, 0x00	; 0
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	a0 e0       	ldi	r26, 0x00	; 0
    125a:	b0 e4       	ldi	r27, 0x40	; 64
    125c:	60 e0       	ldi	r22, 0x00	; 0
    125e:	70 e0       	ldi	r23, 0x00	; 0
    1260:	ea 14       	cp	r14, r10
    1262:	fb 04       	cpc	r15, r11
    1264:	0c 05       	cpc	r16, r12
    1266:	1d 05       	cpc	r17, r13
    1268:	40 f0       	brcs	.+16     	; 0x127a <__divsf3+0xf4>
    126a:	28 2b       	or	r18, r24
    126c:	39 2b       	or	r19, r25
    126e:	4a 2b       	or	r20, r26
    1270:	5b 2b       	or	r21, r27
    1272:	ea 18       	sub	r14, r10
    1274:	fb 08       	sbc	r15, r11
    1276:	0c 09       	sbc	r16, r12
    1278:	1d 09       	sbc	r17, r13
    127a:	b6 95       	lsr	r27
    127c:	a7 95       	ror	r26
    127e:	97 95       	ror	r25
    1280:	87 95       	ror	r24
    1282:	ee 0c       	add	r14, r14
    1284:	ff 1c       	adc	r15, r15
    1286:	00 1f       	adc	r16, r16
    1288:	11 1f       	adc	r17, r17
    128a:	6f 5f       	subi	r22, 0xFF	; 255
    128c:	7f 4f       	sbci	r23, 0xFF	; 255
    128e:	6f 31       	cpi	r22, 0x1F	; 31
    1290:	71 05       	cpc	r23, r1
    1292:	31 f7       	brne	.-52     	; 0x1260 <__divsf3+0xda>
    1294:	da 01       	movw	r26, r20
    1296:	c9 01       	movw	r24, r18
    1298:	8f 77       	andi	r24, 0x7F	; 127
    129a:	90 70       	andi	r25, 0x00	; 0
    129c:	a0 70       	andi	r26, 0x00	; 0
    129e:	b0 70       	andi	r27, 0x00	; 0
    12a0:	80 34       	cpi	r24, 0x40	; 64
    12a2:	91 05       	cpc	r25, r1
    12a4:	a1 05       	cpc	r26, r1
    12a6:	b1 05       	cpc	r27, r1
    12a8:	61 f4       	brne	.+24     	; 0x12c2 <__divsf3+0x13c>
    12aa:	27 fd       	sbrc	r18, 7
    12ac:	0a c0       	rjmp	.+20     	; 0x12c2 <__divsf3+0x13c>
    12ae:	e1 14       	cp	r14, r1
    12b0:	f1 04       	cpc	r15, r1
    12b2:	01 05       	cpc	r16, r1
    12b4:	11 05       	cpc	r17, r1
    12b6:	29 f0       	breq	.+10     	; 0x12c2 <__divsf3+0x13c>
    12b8:	20 5c       	subi	r18, 0xC0	; 192
    12ba:	3f 4f       	sbci	r19, 0xFF	; 255
    12bc:	4f 4f       	sbci	r20, 0xFF	; 255
    12be:	5f 4f       	sbci	r21, 0xFF	; 255
    12c0:	20 78       	andi	r18, 0x80	; 128
    12c2:	2d 87       	std	Y+13, r18	; 0x0d
    12c4:	3e 87       	std	Y+14, r19	; 0x0e
    12c6:	4f 87       	std	Y+15, r20	; 0x0f
    12c8:	58 8b       	std	Y+16, r21	; 0x10
    12ca:	be 01       	movw	r22, r28
    12cc:	67 5f       	subi	r22, 0xF7	; 247
    12ce:	7f 4f       	sbci	r23, 0xFF	; 255
    12d0:	cb 01       	movw	r24, r22
    12d2:	0e 94 00 0b 	call	0x1600	; 0x1600 <__pack_f>
    12d6:	68 96       	adiw	r28, 0x18	; 24
    12d8:	ea e0       	ldi	r30, 0x0A	; 10
    12da:	0c 94 ec 0c 	jmp	0x19d8	; 0x19d8 <__epilogue_restores__+0x10>

000012de <__gtsf2>:
    12de:	a8 e1       	ldi	r26, 0x18	; 24
    12e0:	b0 e0       	ldi	r27, 0x00	; 0
    12e2:	e5 e7       	ldi	r30, 0x75	; 117
    12e4:	f9 e0       	ldi	r31, 0x09	; 9
    12e6:	0c 94 d4 0c 	jmp	0x19a8	; 0x19a8 <__prologue_saves__+0x18>
    12ea:	69 83       	std	Y+1, r22	; 0x01
    12ec:	7a 83       	std	Y+2, r23	; 0x02
    12ee:	8b 83       	std	Y+3, r24	; 0x03
    12f0:	9c 83       	std	Y+4, r25	; 0x04
    12f2:	2d 83       	std	Y+5, r18	; 0x05
    12f4:	3e 83       	std	Y+6, r19	; 0x06
    12f6:	4f 83       	std	Y+7, r20	; 0x07
    12f8:	58 87       	std	Y+8, r21	; 0x08
    12fa:	89 e0       	ldi	r24, 0x09	; 9
    12fc:	e8 2e       	mov	r14, r24
    12fe:	f1 2c       	mov	r15, r1
    1300:	ec 0e       	add	r14, r28
    1302:	fd 1e       	adc	r15, r29
    1304:	ce 01       	movw	r24, r28
    1306:	01 96       	adiw	r24, 0x01	; 1
    1308:	b7 01       	movw	r22, r14
    130a:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <__unpack_f>
    130e:	8e 01       	movw	r16, r28
    1310:	0f 5e       	subi	r16, 0xEF	; 239
    1312:	1f 4f       	sbci	r17, 0xFF	; 255
    1314:	ce 01       	movw	r24, r28
    1316:	05 96       	adiw	r24, 0x05	; 5
    1318:	b8 01       	movw	r22, r16
    131a:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <__unpack_f>
    131e:	89 85       	ldd	r24, Y+9	; 0x09
    1320:	82 30       	cpi	r24, 0x02	; 2
    1322:	40 f0       	brcs	.+16     	; 0x1334 <__gtsf2+0x56>
    1324:	89 89       	ldd	r24, Y+17	; 0x11
    1326:	82 30       	cpi	r24, 0x02	; 2
    1328:	28 f0       	brcs	.+10     	; 0x1334 <__gtsf2+0x56>
    132a:	c7 01       	movw	r24, r14
    132c:	b8 01       	movw	r22, r16
    132e:	0e 94 4d 0c 	call	0x189a	; 0x189a <__fpcmp_parts_f>
    1332:	01 c0       	rjmp	.+2      	; 0x1336 <__gtsf2+0x58>
    1334:	8f ef       	ldi	r24, 0xFF	; 255
    1336:	68 96       	adiw	r28, 0x18	; 24
    1338:	e6 e0       	ldi	r30, 0x06	; 6
    133a:	0c 94 f0 0c 	jmp	0x19e0	; 0x19e0 <__epilogue_restores__+0x18>

0000133e <__gesf2>:
    133e:	a8 e1       	ldi	r26, 0x18	; 24
    1340:	b0 e0       	ldi	r27, 0x00	; 0
    1342:	e5 ea       	ldi	r30, 0xA5	; 165
    1344:	f9 e0       	ldi	r31, 0x09	; 9
    1346:	0c 94 d4 0c 	jmp	0x19a8	; 0x19a8 <__prologue_saves__+0x18>
    134a:	69 83       	std	Y+1, r22	; 0x01
    134c:	7a 83       	std	Y+2, r23	; 0x02
    134e:	8b 83       	std	Y+3, r24	; 0x03
    1350:	9c 83       	std	Y+4, r25	; 0x04
    1352:	2d 83       	std	Y+5, r18	; 0x05
    1354:	3e 83       	std	Y+6, r19	; 0x06
    1356:	4f 83       	std	Y+7, r20	; 0x07
    1358:	58 87       	std	Y+8, r21	; 0x08
    135a:	89 e0       	ldi	r24, 0x09	; 9
    135c:	e8 2e       	mov	r14, r24
    135e:	f1 2c       	mov	r15, r1
    1360:	ec 0e       	add	r14, r28
    1362:	fd 1e       	adc	r15, r29
    1364:	ce 01       	movw	r24, r28
    1366:	01 96       	adiw	r24, 0x01	; 1
    1368:	b7 01       	movw	r22, r14
    136a:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <__unpack_f>
    136e:	8e 01       	movw	r16, r28
    1370:	0f 5e       	subi	r16, 0xEF	; 239
    1372:	1f 4f       	sbci	r17, 0xFF	; 255
    1374:	ce 01       	movw	r24, r28
    1376:	05 96       	adiw	r24, 0x05	; 5
    1378:	b8 01       	movw	r22, r16
    137a:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <__unpack_f>
    137e:	89 85       	ldd	r24, Y+9	; 0x09
    1380:	82 30       	cpi	r24, 0x02	; 2
    1382:	40 f0       	brcs	.+16     	; 0x1394 <__gesf2+0x56>
    1384:	89 89       	ldd	r24, Y+17	; 0x11
    1386:	82 30       	cpi	r24, 0x02	; 2
    1388:	28 f0       	brcs	.+10     	; 0x1394 <__gesf2+0x56>
    138a:	c7 01       	movw	r24, r14
    138c:	b8 01       	movw	r22, r16
    138e:	0e 94 4d 0c 	call	0x189a	; 0x189a <__fpcmp_parts_f>
    1392:	01 c0       	rjmp	.+2      	; 0x1396 <__gesf2+0x58>
    1394:	8f ef       	ldi	r24, 0xFF	; 255
    1396:	68 96       	adiw	r28, 0x18	; 24
    1398:	e6 e0       	ldi	r30, 0x06	; 6
    139a:	0c 94 f0 0c 	jmp	0x19e0	; 0x19e0 <__epilogue_restores__+0x18>

0000139e <__ltsf2>:
    139e:	a8 e1       	ldi	r26, 0x18	; 24
    13a0:	b0 e0       	ldi	r27, 0x00	; 0
    13a2:	e5 ed       	ldi	r30, 0xD5	; 213
    13a4:	f9 e0       	ldi	r31, 0x09	; 9
    13a6:	0c 94 d4 0c 	jmp	0x19a8	; 0x19a8 <__prologue_saves__+0x18>
    13aa:	69 83       	std	Y+1, r22	; 0x01
    13ac:	7a 83       	std	Y+2, r23	; 0x02
    13ae:	8b 83       	std	Y+3, r24	; 0x03
    13b0:	9c 83       	std	Y+4, r25	; 0x04
    13b2:	2d 83       	std	Y+5, r18	; 0x05
    13b4:	3e 83       	std	Y+6, r19	; 0x06
    13b6:	4f 83       	std	Y+7, r20	; 0x07
    13b8:	58 87       	std	Y+8, r21	; 0x08
    13ba:	89 e0       	ldi	r24, 0x09	; 9
    13bc:	e8 2e       	mov	r14, r24
    13be:	f1 2c       	mov	r15, r1
    13c0:	ec 0e       	add	r14, r28
    13c2:	fd 1e       	adc	r15, r29
    13c4:	ce 01       	movw	r24, r28
    13c6:	01 96       	adiw	r24, 0x01	; 1
    13c8:	b7 01       	movw	r22, r14
    13ca:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <__unpack_f>
    13ce:	8e 01       	movw	r16, r28
    13d0:	0f 5e       	subi	r16, 0xEF	; 239
    13d2:	1f 4f       	sbci	r17, 0xFF	; 255
    13d4:	ce 01       	movw	r24, r28
    13d6:	05 96       	adiw	r24, 0x05	; 5
    13d8:	b8 01       	movw	r22, r16
    13da:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <__unpack_f>
    13de:	89 85       	ldd	r24, Y+9	; 0x09
    13e0:	82 30       	cpi	r24, 0x02	; 2
    13e2:	40 f0       	brcs	.+16     	; 0x13f4 <__ltsf2+0x56>
    13e4:	89 89       	ldd	r24, Y+17	; 0x11
    13e6:	82 30       	cpi	r24, 0x02	; 2
    13e8:	28 f0       	brcs	.+10     	; 0x13f4 <__ltsf2+0x56>
    13ea:	c7 01       	movw	r24, r14
    13ec:	b8 01       	movw	r22, r16
    13ee:	0e 94 4d 0c 	call	0x189a	; 0x189a <__fpcmp_parts_f>
    13f2:	01 c0       	rjmp	.+2      	; 0x13f6 <__ltsf2+0x58>
    13f4:	81 e0       	ldi	r24, 0x01	; 1
    13f6:	68 96       	adiw	r28, 0x18	; 24
    13f8:	e6 e0       	ldi	r30, 0x06	; 6
    13fa:	0c 94 f0 0c 	jmp	0x19e0	; 0x19e0 <__epilogue_restores__+0x18>

000013fe <__floatsisf>:
    13fe:	a8 e0       	ldi	r26, 0x08	; 8
    1400:	b0 e0       	ldi	r27, 0x00	; 0
    1402:	e5 e0       	ldi	r30, 0x05	; 5
    1404:	fa e0       	ldi	r31, 0x0A	; 10
    1406:	0c 94 d1 0c 	jmp	0x19a2	; 0x19a2 <__prologue_saves__+0x12>
    140a:	9b 01       	movw	r18, r22
    140c:	ac 01       	movw	r20, r24
    140e:	83 e0       	ldi	r24, 0x03	; 3
    1410:	89 83       	std	Y+1, r24	; 0x01
    1412:	da 01       	movw	r26, r20
    1414:	c9 01       	movw	r24, r18
    1416:	88 27       	eor	r24, r24
    1418:	b7 fd       	sbrc	r27, 7
    141a:	83 95       	inc	r24
    141c:	99 27       	eor	r25, r25
    141e:	aa 27       	eor	r26, r26
    1420:	bb 27       	eor	r27, r27
    1422:	b8 2e       	mov	r11, r24
    1424:	21 15       	cp	r18, r1
    1426:	31 05       	cpc	r19, r1
    1428:	41 05       	cpc	r20, r1
    142a:	51 05       	cpc	r21, r1
    142c:	19 f4       	brne	.+6      	; 0x1434 <__floatsisf+0x36>
    142e:	82 e0       	ldi	r24, 0x02	; 2
    1430:	89 83       	std	Y+1, r24	; 0x01
    1432:	3a c0       	rjmp	.+116    	; 0x14a8 <__floatsisf+0xaa>
    1434:	88 23       	and	r24, r24
    1436:	a9 f0       	breq	.+42     	; 0x1462 <__floatsisf+0x64>
    1438:	20 30       	cpi	r18, 0x00	; 0
    143a:	80 e0       	ldi	r24, 0x00	; 0
    143c:	38 07       	cpc	r19, r24
    143e:	80 e0       	ldi	r24, 0x00	; 0
    1440:	48 07       	cpc	r20, r24
    1442:	80 e8       	ldi	r24, 0x80	; 128
    1444:	58 07       	cpc	r21, r24
    1446:	29 f4       	brne	.+10     	; 0x1452 <__floatsisf+0x54>
    1448:	60 e0       	ldi	r22, 0x00	; 0
    144a:	70 e0       	ldi	r23, 0x00	; 0
    144c:	80 e0       	ldi	r24, 0x00	; 0
    144e:	9f ec       	ldi	r25, 0xCF	; 207
    1450:	30 c0       	rjmp	.+96     	; 0x14b2 <__floatsisf+0xb4>
    1452:	ee 24       	eor	r14, r14
    1454:	ff 24       	eor	r15, r15
    1456:	87 01       	movw	r16, r14
    1458:	e2 1a       	sub	r14, r18
    145a:	f3 0a       	sbc	r15, r19
    145c:	04 0b       	sbc	r16, r20
    145e:	15 0b       	sbc	r17, r21
    1460:	02 c0       	rjmp	.+4      	; 0x1466 <__floatsisf+0x68>
    1462:	79 01       	movw	r14, r18
    1464:	8a 01       	movw	r16, r20
    1466:	8e e1       	ldi	r24, 0x1E	; 30
    1468:	c8 2e       	mov	r12, r24
    146a:	d1 2c       	mov	r13, r1
    146c:	dc 82       	std	Y+4, r13	; 0x04
    146e:	cb 82       	std	Y+3, r12	; 0x03
    1470:	ed 82       	std	Y+5, r14	; 0x05
    1472:	fe 82       	std	Y+6, r15	; 0x06
    1474:	0f 83       	std	Y+7, r16	; 0x07
    1476:	18 87       	std	Y+8, r17	; 0x08
    1478:	c8 01       	movw	r24, r16
    147a:	b7 01       	movw	r22, r14
    147c:	0e 94 b1 0a 	call	0x1562	; 0x1562 <__clzsi2>
    1480:	01 97       	sbiw	r24, 0x01	; 1
    1482:	18 16       	cp	r1, r24
    1484:	19 06       	cpc	r1, r25
    1486:	84 f4       	brge	.+32     	; 0x14a8 <__floatsisf+0xaa>
    1488:	08 2e       	mov	r0, r24
    148a:	04 c0       	rjmp	.+8      	; 0x1494 <__floatsisf+0x96>
    148c:	ee 0c       	add	r14, r14
    148e:	ff 1c       	adc	r15, r15
    1490:	00 1f       	adc	r16, r16
    1492:	11 1f       	adc	r17, r17
    1494:	0a 94       	dec	r0
    1496:	d2 f7       	brpl	.-12     	; 0x148c <__floatsisf+0x8e>
    1498:	ed 82       	std	Y+5, r14	; 0x05
    149a:	fe 82       	std	Y+6, r15	; 0x06
    149c:	0f 83       	std	Y+7, r16	; 0x07
    149e:	18 87       	std	Y+8, r17	; 0x08
    14a0:	c8 1a       	sub	r12, r24
    14a2:	d9 0a       	sbc	r13, r25
    14a4:	dc 82       	std	Y+4, r13	; 0x04
    14a6:	cb 82       	std	Y+3, r12	; 0x03
    14a8:	ba 82       	std	Y+2, r11	; 0x02
    14aa:	ce 01       	movw	r24, r28
    14ac:	01 96       	adiw	r24, 0x01	; 1
    14ae:	0e 94 00 0b 	call	0x1600	; 0x1600 <__pack_f>
    14b2:	28 96       	adiw	r28, 0x08	; 8
    14b4:	e9 e0       	ldi	r30, 0x09	; 9
    14b6:	0c 94 ed 0c 	jmp	0x19da	; 0x19da <__epilogue_restores__+0x12>

000014ba <__fixsfsi>:
    14ba:	ac e0       	ldi	r26, 0x0C	; 12
    14bc:	b0 e0       	ldi	r27, 0x00	; 0
    14be:	e3 e6       	ldi	r30, 0x63	; 99
    14c0:	fa e0       	ldi	r31, 0x0A	; 10
    14c2:	0c 94 d8 0c 	jmp	0x19b0	; 0x19b0 <__prologue_saves__+0x20>
    14c6:	69 83       	std	Y+1, r22	; 0x01
    14c8:	7a 83       	std	Y+2, r23	; 0x02
    14ca:	8b 83       	std	Y+3, r24	; 0x03
    14cc:	9c 83       	std	Y+4, r25	; 0x04
    14ce:	ce 01       	movw	r24, r28
    14d0:	01 96       	adiw	r24, 0x01	; 1
    14d2:	be 01       	movw	r22, r28
    14d4:	6b 5f       	subi	r22, 0xFB	; 251
    14d6:	7f 4f       	sbci	r23, 0xFF	; 255
    14d8:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <__unpack_f>
    14dc:	8d 81       	ldd	r24, Y+5	; 0x05
    14de:	82 30       	cpi	r24, 0x02	; 2
    14e0:	61 f1       	breq	.+88     	; 0x153a <__fixsfsi+0x80>
    14e2:	82 30       	cpi	r24, 0x02	; 2
    14e4:	50 f1       	brcs	.+84     	; 0x153a <__fixsfsi+0x80>
    14e6:	84 30       	cpi	r24, 0x04	; 4
    14e8:	21 f4       	brne	.+8      	; 0x14f2 <__fixsfsi+0x38>
    14ea:	8e 81       	ldd	r24, Y+6	; 0x06
    14ec:	88 23       	and	r24, r24
    14ee:	51 f1       	breq	.+84     	; 0x1544 <__fixsfsi+0x8a>
    14f0:	2e c0       	rjmp	.+92     	; 0x154e <__fixsfsi+0x94>
    14f2:	2f 81       	ldd	r18, Y+7	; 0x07
    14f4:	38 85       	ldd	r19, Y+8	; 0x08
    14f6:	37 fd       	sbrc	r19, 7
    14f8:	20 c0       	rjmp	.+64     	; 0x153a <__fixsfsi+0x80>
    14fa:	6e 81       	ldd	r22, Y+6	; 0x06
    14fc:	2f 31       	cpi	r18, 0x1F	; 31
    14fe:	31 05       	cpc	r19, r1
    1500:	1c f0       	brlt	.+6      	; 0x1508 <__fixsfsi+0x4e>
    1502:	66 23       	and	r22, r22
    1504:	f9 f0       	breq	.+62     	; 0x1544 <__fixsfsi+0x8a>
    1506:	23 c0       	rjmp	.+70     	; 0x154e <__fixsfsi+0x94>
    1508:	8e e1       	ldi	r24, 0x1E	; 30
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	82 1b       	sub	r24, r18
    150e:	93 0b       	sbc	r25, r19
    1510:	29 85       	ldd	r18, Y+9	; 0x09
    1512:	3a 85       	ldd	r19, Y+10	; 0x0a
    1514:	4b 85       	ldd	r20, Y+11	; 0x0b
    1516:	5c 85       	ldd	r21, Y+12	; 0x0c
    1518:	04 c0       	rjmp	.+8      	; 0x1522 <__fixsfsi+0x68>
    151a:	56 95       	lsr	r21
    151c:	47 95       	ror	r20
    151e:	37 95       	ror	r19
    1520:	27 95       	ror	r18
    1522:	8a 95       	dec	r24
    1524:	d2 f7       	brpl	.-12     	; 0x151a <__fixsfsi+0x60>
    1526:	66 23       	and	r22, r22
    1528:	b1 f0       	breq	.+44     	; 0x1556 <__fixsfsi+0x9c>
    152a:	50 95       	com	r21
    152c:	40 95       	com	r20
    152e:	30 95       	com	r19
    1530:	21 95       	neg	r18
    1532:	3f 4f       	sbci	r19, 0xFF	; 255
    1534:	4f 4f       	sbci	r20, 0xFF	; 255
    1536:	5f 4f       	sbci	r21, 0xFF	; 255
    1538:	0e c0       	rjmp	.+28     	; 0x1556 <__fixsfsi+0x9c>
    153a:	20 e0       	ldi	r18, 0x00	; 0
    153c:	30 e0       	ldi	r19, 0x00	; 0
    153e:	40 e0       	ldi	r20, 0x00	; 0
    1540:	50 e0       	ldi	r21, 0x00	; 0
    1542:	09 c0       	rjmp	.+18     	; 0x1556 <__fixsfsi+0x9c>
    1544:	2f ef       	ldi	r18, 0xFF	; 255
    1546:	3f ef       	ldi	r19, 0xFF	; 255
    1548:	4f ef       	ldi	r20, 0xFF	; 255
    154a:	5f e7       	ldi	r21, 0x7F	; 127
    154c:	04 c0       	rjmp	.+8      	; 0x1556 <__fixsfsi+0x9c>
    154e:	20 e0       	ldi	r18, 0x00	; 0
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	40 e0       	ldi	r20, 0x00	; 0
    1554:	50 e8       	ldi	r21, 0x80	; 128
    1556:	b9 01       	movw	r22, r18
    1558:	ca 01       	movw	r24, r20
    155a:	2c 96       	adiw	r28, 0x0c	; 12
    155c:	e2 e0       	ldi	r30, 0x02	; 2
    155e:	0c 94 f4 0c 	jmp	0x19e8	; 0x19e8 <__epilogue_restores__+0x20>

00001562 <__clzsi2>:
    1562:	ef 92       	push	r14
    1564:	ff 92       	push	r15
    1566:	0f 93       	push	r16
    1568:	1f 93       	push	r17
    156a:	7b 01       	movw	r14, r22
    156c:	8c 01       	movw	r16, r24
    156e:	80 e0       	ldi	r24, 0x00	; 0
    1570:	e8 16       	cp	r14, r24
    1572:	80 e0       	ldi	r24, 0x00	; 0
    1574:	f8 06       	cpc	r15, r24
    1576:	81 e0       	ldi	r24, 0x01	; 1
    1578:	08 07       	cpc	r16, r24
    157a:	80 e0       	ldi	r24, 0x00	; 0
    157c:	18 07       	cpc	r17, r24
    157e:	88 f4       	brcc	.+34     	; 0x15a2 <__clzsi2+0x40>
    1580:	8f ef       	ldi	r24, 0xFF	; 255
    1582:	e8 16       	cp	r14, r24
    1584:	f1 04       	cpc	r15, r1
    1586:	01 05       	cpc	r16, r1
    1588:	11 05       	cpc	r17, r1
    158a:	31 f0       	breq	.+12     	; 0x1598 <__clzsi2+0x36>
    158c:	28 f0       	brcs	.+10     	; 0x1598 <__clzsi2+0x36>
    158e:	88 e0       	ldi	r24, 0x08	; 8
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	a0 e0       	ldi	r26, 0x00	; 0
    1594:	b0 e0       	ldi	r27, 0x00	; 0
    1596:	17 c0       	rjmp	.+46     	; 0x15c6 <__clzsi2+0x64>
    1598:	80 e0       	ldi	r24, 0x00	; 0
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	a0 e0       	ldi	r26, 0x00	; 0
    159e:	b0 e0       	ldi	r27, 0x00	; 0
    15a0:	12 c0       	rjmp	.+36     	; 0x15c6 <__clzsi2+0x64>
    15a2:	80 e0       	ldi	r24, 0x00	; 0
    15a4:	e8 16       	cp	r14, r24
    15a6:	80 e0       	ldi	r24, 0x00	; 0
    15a8:	f8 06       	cpc	r15, r24
    15aa:	80 e0       	ldi	r24, 0x00	; 0
    15ac:	08 07       	cpc	r16, r24
    15ae:	81 e0       	ldi	r24, 0x01	; 1
    15b0:	18 07       	cpc	r17, r24
    15b2:	28 f0       	brcs	.+10     	; 0x15be <__clzsi2+0x5c>
    15b4:	88 e1       	ldi	r24, 0x18	; 24
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	a0 e0       	ldi	r26, 0x00	; 0
    15ba:	b0 e0       	ldi	r27, 0x00	; 0
    15bc:	04 c0       	rjmp	.+8      	; 0x15c6 <__clzsi2+0x64>
    15be:	80 e1       	ldi	r24, 0x10	; 16
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	a0 e0       	ldi	r26, 0x00	; 0
    15c4:	b0 e0       	ldi	r27, 0x00	; 0
    15c6:	20 e2       	ldi	r18, 0x20	; 32
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	40 e0       	ldi	r20, 0x00	; 0
    15cc:	50 e0       	ldi	r21, 0x00	; 0
    15ce:	28 1b       	sub	r18, r24
    15d0:	39 0b       	sbc	r19, r25
    15d2:	4a 0b       	sbc	r20, r26
    15d4:	5b 0b       	sbc	r21, r27
    15d6:	04 c0       	rjmp	.+8      	; 0x15e0 <__clzsi2+0x7e>
    15d8:	16 95       	lsr	r17
    15da:	07 95       	ror	r16
    15dc:	f7 94       	ror	r15
    15de:	e7 94       	ror	r14
    15e0:	8a 95       	dec	r24
    15e2:	d2 f7       	brpl	.-12     	; 0x15d8 <__clzsi2+0x76>
    15e4:	f7 01       	movw	r30, r14
    15e6:	e8 5f       	subi	r30, 0xF8	; 248
    15e8:	fd 4f       	sbci	r31, 0xFD	; 253
    15ea:	80 81       	ld	r24, Z
    15ec:	28 1b       	sub	r18, r24
    15ee:	31 09       	sbc	r19, r1
    15f0:	41 09       	sbc	r20, r1
    15f2:	51 09       	sbc	r21, r1
    15f4:	c9 01       	movw	r24, r18
    15f6:	1f 91       	pop	r17
    15f8:	0f 91       	pop	r16
    15fa:	ff 90       	pop	r15
    15fc:	ef 90       	pop	r14
    15fe:	08 95       	ret

00001600 <__pack_f>:
    1600:	df 92       	push	r13
    1602:	ef 92       	push	r14
    1604:	ff 92       	push	r15
    1606:	0f 93       	push	r16
    1608:	1f 93       	push	r17
    160a:	fc 01       	movw	r30, r24
    160c:	e4 80       	ldd	r14, Z+4	; 0x04
    160e:	f5 80       	ldd	r15, Z+5	; 0x05
    1610:	06 81       	ldd	r16, Z+6	; 0x06
    1612:	17 81       	ldd	r17, Z+7	; 0x07
    1614:	d1 80       	ldd	r13, Z+1	; 0x01
    1616:	80 81       	ld	r24, Z
    1618:	82 30       	cpi	r24, 0x02	; 2
    161a:	48 f4       	brcc	.+18     	; 0x162e <__pack_f+0x2e>
    161c:	80 e0       	ldi	r24, 0x00	; 0
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	a0 e1       	ldi	r26, 0x10	; 16
    1622:	b0 e0       	ldi	r27, 0x00	; 0
    1624:	e8 2a       	or	r14, r24
    1626:	f9 2a       	or	r15, r25
    1628:	0a 2b       	or	r16, r26
    162a:	1b 2b       	or	r17, r27
    162c:	a5 c0       	rjmp	.+330    	; 0x1778 <__pack_f+0x178>
    162e:	84 30       	cpi	r24, 0x04	; 4
    1630:	09 f4       	brne	.+2      	; 0x1634 <__pack_f+0x34>
    1632:	9f c0       	rjmp	.+318    	; 0x1772 <__pack_f+0x172>
    1634:	82 30       	cpi	r24, 0x02	; 2
    1636:	21 f4       	brne	.+8      	; 0x1640 <__pack_f+0x40>
    1638:	ee 24       	eor	r14, r14
    163a:	ff 24       	eor	r15, r15
    163c:	87 01       	movw	r16, r14
    163e:	05 c0       	rjmp	.+10     	; 0x164a <__pack_f+0x4a>
    1640:	e1 14       	cp	r14, r1
    1642:	f1 04       	cpc	r15, r1
    1644:	01 05       	cpc	r16, r1
    1646:	11 05       	cpc	r17, r1
    1648:	19 f4       	brne	.+6      	; 0x1650 <__pack_f+0x50>
    164a:	e0 e0       	ldi	r30, 0x00	; 0
    164c:	f0 e0       	ldi	r31, 0x00	; 0
    164e:	96 c0       	rjmp	.+300    	; 0x177c <__pack_f+0x17c>
    1650:	62 81       	ldd	r22, Z+2	; 0x02
    1652:	73 81       	ldd	r23, Z+3	; 0x03
    1654:	9f ef       	ldi	r25, 0xFF	; 255
    1656:	62 38       	cpi	r22, 0x82	; 130
    1658:	79 07       	cpc	r23, r25
    165a:	0c f0       	brlt	.+2      	; 0x165e <__pack_f+0x5e>
    165c:	5b c0       	rjmp	.+182    	; 0x1714 <__pack_f+0x114>
    165e:	22 e8       	ldi	r18, 0x82	; 130
    1660:	3f ef       	ldi	r19, 0xFF	; 255
    1662:	26 1b       	sub	r18, r22
    1664:	37 0b       	sbc	r19, r23
    1666:	2a 31       	cpi	r18, 0x1A	; 26
    1668:	31 05       	cpc	r19, r1
    166a:	2c f0       	brlt	.+10     	; 0x1676 <__pack_f+0x76>
    166c:	20 e0       	ldi	r18, 0x00	; 0
    166e:	30 e0       	ldi	r19, 0x00	; 0
    1670:	40 e0       	ldi	r20, 0x00	; 0
    1672:	50 e0       	ldi	r21, 0x00	; 0
    1674:	2a c0       	rjmp	.+84     	; 0x16ca <__pack_f+0xca>
    1676:	b8 01       	movw	r22, r16
    1678:	a7 01       	movw	r20, r14
    167a:	02 2e       	mov	r0, r18
    167c:	04 c0       	rjmp	.+8      	; 0x1686 <__pack_f+0x86>
    167e:	76 95       	lsr	r23
    1680:	67 95       	ror	r22
    1682:	57 95       	ror	r21
    1684:	47 95       	ror	r20
    1686:	0a 94       	dec	r0
    1688:	d2 f7       	brpl	.-12     	; 0x167e <__pack_f+0x7e>
    168a:	81 e0       	ldi	r24, 0x01	; 1
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	a0 e0       	ldi	r26, 0x00	; 0
    1690:	b0 e0       	ldi	r27, 0x00	; 0
    1692:	04 c0       	rjmp	.+8      	; 0x169c <__pack_f+0x9c>
    1694:	88 0f       	add	r24, r24
    1696:	99 1f       	adc	r25, r25
    1698:	aa 1f       	adc	r26, r26
    169a:	bb 1f       	adc	r27, r27
    169c:	2a 95       	dec	r18
    169e:	d2 f7       	brpl	.-12     	; 0x1694 <__pack_f+0x94>
    16a0:	01 97       	sbiw	r24, 0x01	; 1
    16a2:	a1 09       	sbc	r26, r1
    16a4:	b1 09       	sbc	r27, r1
    16a6:	8e 21       	and	r24, r14
    16a8:	9f 21       	and	r25, r15
    16aa:	a0 23       	and	r26, r16
    16ac:	b1 23       	and	r27, r17
    16ae:	00 97       	sbiw	r24, 0x00	; 0
    16b0:	a1 05       	cpc	r26, r1
    16b2:	b1 05       	cpc	r27, r1
    16b4:	21 f0       	breq	.+8      	; 0x16be <__pack_f+0xbe>
    16b6:	81 e0       	ldi	r24, 0x01	; 1
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	a0 e0       	ldi	r26, 0x00	; 0
    16bc:	b0 e0       	ldi	r27, 0x00	; 0
    16be:	9a 01       	movw	r18, r20
    16c0:	ab 01       	movw	r20, r22
    16c2:	28 2b       	or	r18, r24
    16c4:	39 2b       	or	r19, r25
    16c6:	4a 2b       	or	r20, r26
    16c8:	5b 2b       	or	r21, r27
    16ca:	da 01       	movw	r26, r20
    16cc:	c9 01       	movw	r24, r18
    16ce:	8f 77       	andi	r24, 0x7F	; 127
    16d0:	90 70       	andi	r25, 0x00	; 0
    16d2:	a0 70       	andi	r26, 0x00	; 0
    16d4:	b0 70       	andi	r27, 0x00	; 0
    16d6:	80 34       	cpi	r24, 0x40	; 64
    16d8:	91 05       	cpc	r25, r1
    16da:	a1 05       	cpc	r26, r1
    16dc:	b1 05       	cpc	r27, r1
    16de:	39 f4       	brne	.+14     	; 0x16ee <__pack_f+0xee>
    16e0:	27 ff       	sbrs	r18, 7
    16e2:	09 c0       	rjmp	.+18     	; 0x16f6 <__pack_f+0xf6>
    16e4:	20 5c       	subi	r18, 0xC0	; 192
    16e6:	3f 4f       	sbci	r19, 0xFF	; 255
    16e8:	4f 4f       	sbci	r20, 0xFF	; 255
    16ea:	5f 4f       	sbci	r21, 0xFF	; 255
    16ec:	04 c0       	rjmp	.+8      	; 0x16f6 <__pack_f+0xf6>
    16ee:	21 5c       	subi	r18, 0xC1	; 193
    16f0:	3f 4f       	sbci	r19, 0xFF	; 255
    16f2:	4f 4f       	sbci	r20, 0xFF	; 255
    16f4:	5f 4f       	sbci	r21, 0xFF	; 255
    16f6:	e0 e0       	ldi	r30, 0x00	; 0
    16f8:	f0 e0       	ldi	r31, 0x00	; 0
    16fa:	20 30       	cpi	r18, 0x00	; 0
    16fc:	a0 e0       	ldi	r26, 0x00	; 0
    16fe:	3a 07       	cpc	r19, r26
    1700:	a0 e0       	ldi	r26, 0x00	; 0
    1702:	4a 07       	cpc	r20, r26
    1704:	a0 e4       	ldi	r26, 0x40	; 64
    1706:	5a 07       	cpc	r21, r26
    1708:	10 f0       	brcs	.+4      	; 0x170e <__pack_f+0x10e>
    170a:	e1 e0       	ldi	r30, 0x01	; 1
    170c:	f0 e0       	ldi	r31, 0x00	; 0
    170e:	79 01       	movw	r14, r18
    1710:	8a 01       	movw	r16, r20
    1712:	27 c0       	rjmp	.+78     	; 0x1762 <__pack_f+0x162>
    1714:	60 38       	cpi	r22, 0x80	; 128
    1716:	71 05       	cpc	r23, r1
    1718:	64 f5       	brge	.+88     	; 0x1772 <__pack_f+0x172>
    171a:	fb 01       	movw	r30, r22
    171c:	e1 58       	subi	r30, 0x81	; 129
    171e:	ff 4f       	sbci	r31, 0xFF	; 255
    1720:	d8 01       	movw	r26, r16
    1722:	c7 01       	movw	r24, r14
    1724:	8f 77       	andi	r24, 0x7F	; 127
    1726:	90 70       	andi	r25, 0x00	; 0
    1728:	a0 70       	andi	r26, 0x00	; 0
    172a:	b0 70       	andi	r27, 0x00	; 0
    172c:	80 34       	cpi	r24, 0x40	; 64
    172e:	91 05       	cpc	r25, r1
    1730:	a1 05       	cpc	r26, r1
    1732:	b1 05       	cpc	r27, r1
    1734:	39 f4       	brne	.+14     	; 0x1744 <__pack_f+0x144>
    1736:	e7 fe       	sbrs	r14, 7
    1738:	0d c0       	rjmp	.+26     	; 0x1754 <__pack_f+0x154>
    173a:	80 e4       	ldi	r24, 0x40	; 64
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	a0 e0       	ldi	r26, 0x00	; 0
    1740:	b0 e0       	ldi	r27, 0x00	; 0
    1742:	04 c0       	rjmp	.+8      	; 0x174c <__pack_f+0x14c>
    1744:	8f e3       	ldi	r24, 0x3F	; 63
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	a0 e0       	ldi	r26, 0x00	; 0
    174a:	b0 e0       	ldi	r27, 0x00	; 0
    174c:	e8 0e       	add	r14, r24
    174e:	f9 1e       	adc	r15, r25
    1750:	0a 1f       	adc	r16, r26
    1752:	1b 1f       	adc	r17, r27
    1754:	17 ff       	sbrs	r17, 7
    1756:	05 c0       	rjmp	.+10     	; 0x1762 <__pack_f+0x162>
    1758:	16 95       	lsr	r17
    175a:	07 95       	ror	r16
    175c:	f7 94       	ror	r15
    175e:	e7 94       	ror	r14
    1760:	31 96       	adiw	r30, 0x01	; 1
    1762:	87 e0       	ldi	r24, 0x07	; 7
    1764:	16 95       	lsr	r17
    1766:	07 95       	ror	r16
    1768:	f7 94       	ror	r15
    176a:	e7 94       	ror	r14
    176c:	8a 95       	dec	r24
    176e:	d1 f7       	brne	.-12     	; 0x1764 <__pack_f+0x164>
    1770:	05 c0       	rjmp	.+10     	; 0x177c <__pack_f+0x17c>
    1772:	ee 24       	eor	r14, r14
    1774:	ff 24       	eor	r15, r15
    1776:	87 01       	movw	r16, r14
    1778:	ef ef       	ldi	r30, 0xFF	; 255
    177a:	f0 e0       	ldi	r31, 0x00	; 0
    177c:	6e 2f       	mov	r22, r30
    177e:	67 95       	ror	r22
    1780:	66 27       	eor	r22, r22
    1782:	67 95       	ror	r22
    1784:	90 2f       	mov	r25, r16
    1786:	9f 77       	andi	r25, 0x7F	; 127
    1788:	d7 94       	ror	r13
    178a:	dd 24       	eor	r13, r13
    178c:	d7 94       	ror	r13
    178e:	8e 2f       	mov	r24, r30
    1790:	86 95       	lsr	r24
    1792:	49 2f       	mov	r20, r25
    1794:	46 2b       	or	r20, r22
    1796:	58 2f       	mov	r21, r24
    1798:	5d 29       	or	r21, r13
    179a:	b7 01       	movw	r22, r14
    179c:	ca 01       	movw	r24, r20
    179e:	1f 91       	pop	r17
    17a0:	0f 91       	pop	r16
    17a2:	ff 90       	pop	r15
    17a4:	ef 90       	pop	r14
    17a6:	df 90       	pop	r13
    17a8:	08 95       	ret

000017aa <__unpack_f>:
    17aa:	fc 01       	movw	r30, r24
    17ac:	db 01       	movw	r26, r22
    17ae:	40 81       	ld	r20, Z
    17b0:	51 81       	ldd	r21, Z+1	; 0x01
    17b2:	22 81       	ldd	r18, Z+2	; 0x02
    17b4:	62 2f       	mov	r22, r18
    17b6:	6f 77       	andi	r22, 0x7F	; 127
    17b8:	70 e0       	ldi	r23, 0x00	; 0
    17ba:	22 1f       	adc	r18, r18
    17bc:	22 27       	eor	r18, r18
    17be:	22 1f       	adc	r18, r18
    17c0:	93 81       	ldd	r25, Z+3	; 0x03
    17c2:	89 2f       	mov	r24, r25
    17c4:	88 0f       	add	r24, r24
    17c6:	82 2b       	or	r24, r18
    17c8:	28 2f       	mov	r18, r24
    17ca:	30 e0       	ldi	r19, 0x00	; 0
    17cc:	99 1f       	adc	r25, r25
    17ce:	99 27       	eor	r25, r25
    17d0:	99 1f       	adc	r25, r25
    17d2:	11 96       	adiw	r26, 0x01	; 1
    17d4:	9c 93       	st	X, r25
    17d6:	11 97       	sbiw	r26, 0x01	; 1
    17d8:	21 15       	cp	r18, r1
    17da:	31 05       	cpc	r19, r1
    17dc:	a9 f5       	brne	.+106    	; 0x1848 <__unpack_f+0x9e>
    17de:	41 15       	cp	r20, r1
    17e0:	51 05       	cpc	r21, r1
    17e2:	61 05       	cpc	r22, r1
    17e4:	71 05       	cpc	r23, r1
    17e6:	11 f4       	brne	.+4      	; 0x17ec <__unpack_f+0x42>
    17e8:	82 e0       	ldi	r24, 0x02	; 2
    17ea:	37 c0       	rjmp	.+110    	; 0x185a <__unpack_f+0xb0>
    17ec:	82 e8       	ldi	r24, 0x82	; 130
    17ee:	9f ef       	ldi	r25, 0xFF	; 255
    17f0:	13 96       	adiw	r26, 0x03	; 3
    17f2:	9c 93       	st	X, r25
    17f4:	8e 93       	st	-X, r24
    17f6:	12 97       	sbiw	r26, 0x02	; 2
    17f8:	9a 01       	movw	r18, r20
    17fa:	ab 01       	movw	r20, r22
    17fc:	67 e0       	ldi	r22, 0x07	; 7
    17fe:	22 0f       	add	r18, r18
    1800:	33 1f       	adc	r19, r19
    1802:	44 1f       	adc	r20, r20
    1804:	55 1f       	adc	r21, r21
    1806:	6a 95       	dec	r22
    1808:	d1 f7       	brne	.-12     	; 0x17fe <__unpack_f+0x54>
    180a:	83 e0       	ldi	r24, 0x03	; 3
    180c:	8c 93       	st	X, r24
    180e:	0d c0       	rjmp	.+26     	; 0x182a <__unpack_f+0x80>
    1810:	22 0f       	add	r18, r18
    1812:	33 1f       	adc	r19, r19
    1814:	44 1f       	adc	r20, r20
    1816:	55 1f       	adc	r21, r21
    1818:	12 96       	adiw	r26, 0x02	; 2
    181a:	8d 91       	ld	r24, X+
    181c:	9c 91       	ld	r25, X
    181e:	13 97       	sbiw	r26, 0x03	; 3
    1820:	01 97       	sbiw	r24, 0x01	; 1
    1822:	13 96       	adiw	r26, 0x03	; 3
    1824:	9c 93       	st	X, r25
    1826:	8e 93       	st	-X, r24
    1828:	12 97       	sbiw	r26, 0x02	; 2
    182a:	20 30       	cpi	r18, 0x00	; 0
    182c:	80 e0       	ldi	r24, 0x00	; 0
    182e:	38 07       	cpc	r19, r24
    1830:	80 e0       	ldi	r24, 0x00	; 0
    1832:	48 07       	cpc	r20, r24
    1834:	80 e4       	ldi	r24, 0x40	; 64
    1836:	58 07       	cpc	r21, r24
    1838:	58 f3       	brcs	.-42     	; 0x1810 <__unpack_f+0x66>
    183a:	14 96       	adiw	r26, 0x04	; 4
    183c:	2d 93       	st	X+, r18
    183e:	3d 93       	st	X+, r19
    1840:	4d 93       	st	X+, r20
    1842:	5c 93       	st	X, r21
    1844:	17 97       	sbiw	r26, 0x07	; 7
    1846:	08 95       	ret
    1848:	2f 3f       	cpi	r18, 0xFF	; 255
    184a:	31 05       	cpc	r19, r1
    184c:	79 f4       	brne	.+30     	; 0x186c <__unpack_f+0xc2>
    184e:	41 15       	cp	r20, r1
    1850:	51 05       	cpc	r21, r1
    1852:	61 05       	cpc	r22, r1
    1854:	71 05       	cpc	r23, r1
    1856:	19 f4       	brne	.+6      	; 0x185e <__unpack_f+0xb4>
    1858:	84 e0       	ldi	r24, 0x04	; 4
    185a:	8c 93       	st	X, r24
    185c:	08 95       	ret
    185e:	64 ff       	sbrs	r22, 4
    1860:	03 c0       	rjmp	.+6      	; 0x1868 <__unpack_f+0xbe>
    1862:	81 e0       	ldi	r24, 0x01	; 1
    1864:	8c 93       	st	X, r24
    1866:	12 c0       	rjmp	.+36     	; 0x188c <__unpack_f+0xe2>
    1868:	1c 92       	st	X, r1
    186a:	10 c0       	rjmp	.+32     	; 0x188c <__unpack_f+0xe2>
    186c:	2f 57       	subi	r18, 0x7F	; 127
    186e:	30 40       	sbci	r19, 0x00	; 0
    1870:	13 96       	adiw	r26, 0x03	; 3
    1872:	3c 93       	st	X, r19
    1874:	2e 93       	st	-X, r18
    1876:	12 97       	sbiw	r26, 0x02	; 2
    1878:	83 e0       	ldi	r24, 0x03	; 3
    187a:	8c 93       	st	X, r24
    187c:	87 e0       	ldi	r24, 0x07	; 7
    187e:	44 0f       	add	r20, r20
    1880:	55 1f       	adc	r21, r21
    1882:	66 1f       	adc	r22, r22
    1884:	77 1f       	adc	r23, r23
    1886:	8a 95       	dec	r24
    1888:	d1 f7       	brne	.-12     	; 0x187e <__unpack_f+0xd4>
    188a:	70 64       	ori	r23, 0x40	; 64
    188c:	14 96       	adiw	r26, 0x04	; 4
    188e:	4d 93       	st	X+, r20
    1890:	5d 93       	st	X+, r21
    1892:	6d 93       	st	X+, r22
    1894:	7c 93       	st	X, r23
    1896:	17 97       	sbiw	r26, 0x07	; 7
    1898:	08 95       	ret

0000189a <__fpcmp_parts_f>:
    189a:	1f 93       	push	r17
    189c:	dc 01       	movw	r26, r24
    189e:	fb 01       	movw	r30, r22
    18a0:	9c 91       	ld	r25, X
    18a2:	92 30       	cpi	r25, 0x02	; 2
    18a4:	08 f4       	brcc	.+2      	; 0x18a8 <__fpcmp_parts_f+0xe>
    18a6:	47 c0       	rjmp	.+142    	; 0x1936 <__fpcmp_parts_f+0x9c>
    18a8:	80 81       	ld	r24, Z
    18aa:	82 30       	cpi	r24, 0x02	; 2
    18ac:	08 f4       	brcc	.+2      	; 0x18b0 <__fpcmp_parts_f+0x16>
    18ae:	43 c0       	rjmp	.+134    	; 0x1936 <__fpcmp_parts_f+0x9c>
    18b0:	94 30       	cpi	r25, 0x04	; 4
    18b2:	51 f4       	brne	.+20     	; 0x18c8 <__fpcmp_parts_f+0x2e>
    18b4:	11 96       	adiw	r26, 0x01	; 1
    18b6:	1c 91       	ld	r17, X
    18b8:	84 30       	cpi	r24, 0x04	; 4
    18ba:	99 f5       	brne	.+102    	; 0x1922 <__fpcmp_parts_f+0x88>
    18bc:	81 81       	ldd	r24, Z+1	; 0x01
    18be:	68 2f       	mov	r22, r24
    18c0:	70 e0       	ldi	r23, 0x00	; 0
    18c2:	61 1b       	sub	r22, r17
    18c4:	71 09       	sbc	r23, r1
    18c6:	3f c0       	rjmp	.+126    	; 0x1946 <__fpcmp_parts_f+0xac>
    18c8:	84 30       	cpi	r24, 0x04	; 4
    18ca:	21 f0       	breq	.+8      	; 0x18d4 <__fpcmp_parts_f+0x3a>
    18cc:	92 30       	cpi	r25, 0x02	; 2
    18ce:	31 f4       	brne	.+12     	; 0x18dc <__fpcmp_parts_f+0x42>
    18d0:	82 30       	cpi	r24, 0x02	; 2
    18d2:	b9 f1       	breq	.+110    	; 0x1942 <__fpcmp_parts_f+0xa8>
    18d4:	81 81       	ldd	r24, Z+1	; 0x01
    18d6:	88 23       	and	r24, r24
    18d8:	89 f1       	breq	.+98     	; 0x193c <__fpcmp_parts_f+0xa2>
    18da:	2d c0       	rjmp	.+90     	; 0x1936 <__fpcmp_parts_f+0x9c>
    18dc:	11 96       	adiw	r26, 0x01	; 1
    18de:	1c 91       	ld	r17, X
    18e0:	11 97       	sbiw	r26, 0x01	; 1
    18e2:	82 30       	cpi	r24, 0x02	; 2
    18e4:	f1 f0       	breq	.+60     	; 0x1922 <__fpcmp_parts_f+0x88>
    18e6:	81 81       	ldd	r24, Z+1	; 0x01
    18e8:	18 17       	cp	r17, r24
    18ea:	d9 f4       	brne	.+54     	; 0x1922 <__fpcmp_parts_f+0x88>
    18ec:	12 96       	adiw	r26, 0x02	; 2
    18ee:	2d 91       	ld	r18, X+
    18f0:	3c 91       	ld	r19, X
    18f2:	13 97       	sbiw	r26, 0x03	; 3
    18f4:	82 81       	ldd	r24, Z+2	; 0x02
    18f6:	93 81       	ldd	r25, Z+3	; 0x03
    18f8:	82 17       	cp	r24, r18
    18fa:	93 07       	cpc	r25, r19
    18fc:	94 f0       	brlt	.+36     	; 0x1922 <__fpcmp_parts_f+0x88>
    18fe:	28 17       	cp	r18, r24
    1900:	39 07       	cpc	r19, r25
    1902:	bc f0       	brlt	.+46     	; 0x1932 <__fpcmp_parts_f+0x98>
    1904:	14 96       	adiw	r26, 0x04	; 4
    1906:	8d 91       	ld	r24, X+
    1908:	9d 91       	ld	r25, X+
    190a:	0d 90       	ld	r0, X+
    190c:	bc 91       	ld	r27, X
    190e:	a0 2d       	mov	r26, r0
    1910:	24 81       	ldd	r18, Z+4	; 0x04
    1912:	35 81       	ldd	r19, Z+5	; 0x05
    1914:	46 81       	ldd	r20, Z+6	; 0x06
    1916:	57 81       	ldd	r21, Z+7	; 0x07
    1918:	28 17       	cp	r18, r24
    191a:	39 07       	cpc	r19, r25
    191c:	4a 07       	cpc	r20, r26
    191e:	5b 07       	cpc	r21, r27
    1920:	18 f4       	brcc	.+6      	; 0x1928 <__fpcmp_parts_f+0x8e>
    1922:	11 23       	and	r17, r17
    1924:	41 f0       	breq	.+16     	; 0x1936 <__fpcmp_parts_f+0x9c>
    1926:	0a c0       	rjmp	.+20     	; 0x193c <__fpcmp_parts_f+0xa2>
    1928:	82 17       	cp	r24, r18
    192a:	93 07       	cpc	r25, r19
    192c:	a4 07       	cpc	r26, r20
    192e:	b5 07       	cpc	r27, r21
    1930:	40 f4       	brcc	.+16     	; 0x1942 <__fpcmp_parts_f+0xa8>
    1932:	11 23       	and	r17, r17
    1934:	19 f0       	breq	.+6      	; 0x193c <__fpcmp_parts_f+0xa2>
    1936:	61 e0       	ldi	r22, 0x01	; 1
    1938:	70 e0       	ldi	r23, 0x00	; 0
    193a:	05 c0       	rjmp	.+10     	; 0x1946 <__fpcmp_parts_f+0xac>
    193c:	6f ef       	ldi	r22, 0xFF	; 255
    193e:	7f ef       	ldi	r23, 0xFF	; 255
    1940:	02 c0       	rjmp	.+4      	; 0x1946 <__fpcmp_parts_f+0xac>
    1942:	60 e0       	ldi	r22, 0x00	; 0
    1944:	70 e0       	ldi	r23, 0x00	; 0
    1946:	cb 01       	movw	r24, r22
    1948:	1f 91       	pop	r17
    194a:	08 95       	ret

0000194c <__udivmodsi4>:
    194c:	a1 e2       	ldi	r26, 0x21	; 33
    194e:	1a 2e       	mov	r1, r26
    1950:	aa 1b       	sub	r26, r26
    1952:	bb 1b       	sub	r27, r27
    1954:	fd 01       	movw	r30, r26
    1956:	0d c0       	rjmp	.+26     	; 0x1972 <__udivmodsi4_ep>

00001958 <__udivmodsi4_loop>:
    1958:	aa 1f       	adc	r26, r26
    195a:	bb 1f       	adc	r27, r27
    195c:	ee 1f       	adc	r30, r30
    195e:	ff 1f       	adc	r31, r31
    1960:	a2 17       	cp	r26, r18
    1962:	b3 07       	cpc	r27, r19
    1964:	e4 07       	cpc	r30, r20
    1966:	f5 07       	cpc	r31, r21
    1968:	20 f0       	brcs	.+8      	; 0x1972 <__udivmodsi4_ep>
    196a:	a2 1b       	sub	r26, r18
    196c:	b3 0b       	sbc	r27, r19
    196e:	e4 0b       	sbc	r30, r20
    1970:	f5 0b       	sbc	r31, r21

00001972 <__udivmodsi4_ep>:
    1972:	66 1f       	adc	r22, r22
    1974:	77 1f       	adc	r23, r23
    1976:	88 1f       	adc	r24, r24
    1978:	99 1f       	adc	r25, r25
    197a:	1a 94       	dec	r1
    197c:	69 f7       	brne	.-38     	; 0x1958 <__udivmodsi4_loop>
    197e:	60 95       	com	r22
    1980:	70 95       	com	r23
    1982:	80 95       	com	r24
    1984:	90 95       	com	r25
    1986:	9b 01       	movw	r18, r22
    1988:	ac 01       	movw	r20, r24
    198a:	bd 01       	movw	r22, r26
    198c:	cf 01       	movw	r24, r30
    198e:	08 95       	ret

00001990 <__prologue_saves__>:
    1990:	2f 92       	push	r2
    1992:	3f 92       	push	r3
    1994:	4f 92       	push	r4
    1996:	5f 92       	push	r5
    1998:	6f 92       	push	r6
    199a:	7f 92       	push	r7
    199c:	8f 92       	push	r8
    199e:	9f 92       	push	r9
    19a0:	af 92       	push	r10
    19a2:	bf 92       	push	r11
    19a4:	cf 92       	push	r12
    19a6:	df 92       	push	r13
    19a8:	ef 92       	push	r14
    19aa:	ff 92       	push	r15
    19ac:	0f 93       	push	r16
    19ae:	1f 93       	push	r17
    19b0:	cf 93       	push	r28
    19b2:	df 93       	push	r29
    19b4:	cd b7       	in	r28, 0x3d	; 61
    19b6:	de b7       	in	r29, 0x3e	; 62
    19b8:	ca 1b       	sub	r28, r26
    19ba:	db 0b       	sbc	r29, r27
    19bc:	0f b6       	in	r0, 0x3f	; 63
    19be:	f8 94       	cli
    19c0:	de bf       	out	0x3e, r29	; 62
    19c2:	0f be       	out	0x3f, r0	; 63
    19c4:	cd bf       	out	0x3d, r28	; 61
    19c6:	19 94       	eijmp

000019c8 <__epilogue_restores__>:
    19c8:	2a 88       	ldd	r2, Y+18	; 0x12
    19ca:	39 88       	ldd	r3, Y+17	; 0x11
    19cc:	48 88       	ldd	r4, Y+16	; 0x10
    19ce:	5f 84       	ldd	r5, Y+15	; 0x0f
    19d0:	6e 84       	ldd	r6, Y+14	; 0x0e
    19d2:	7d 84       	ldd	r7, Y+13	; 0x0d
    19d4:	8c 84       	ldd	r8, Y+12	; 0x0c
    19d6:	9b 84       	ldd	r9, Y+11	; 0x0b
    19d8:	aa 84       	ldd	r10, Y+10	; 0x0a
    19da:	b9 84       	ldd	r11, Y+9	; 0x09
    19dc:	c8 84       	ldd	r12, Y+8	; 0x08
    19de:	df 80       	ldd	r13, Y+7	; 0x07
    19e0:	ee 80       	ldd	r14, Y+6	; 0x06
    19e2:	fd 80       	ldd	r15, Y+5	; 0x05
    19e4:	0c 81       	ldd	r16, Y+4	; 0x04
    19e6:	1b 81       	ldd	r17, Y+3	; 0x03
    19e8:	aa 81       	ldd	r26, Y+2	; 0x02
    19ea:	b9 81       	ldd	r27, Y+1	; 0x01
    19ec:	ce 0f       	add	r28, r30
    19ee:	d1 1d       	adc	r29, r1
    19f0:	0f b6       	in	r0, 0x3f	; 63
    19f2:	f8 94       	cli
    19f4:	de bf       	out	0x3e, r29	; 62
    19f6:	0f be       	out	0x3f, r0	; 63
    19f8:	cd bf       	out	0x3d, r28	; 61
    19fa:	ed 01       	movw	r28, r26
    19fc:	08 95       	ret

000019fe <_exit>:
    19fe:	f8 94       	cli

00001a00 <__stop_program>:
    1a00:	ff cf       	rjmp	.-2      	; 0x1a00 <__stop_program>
