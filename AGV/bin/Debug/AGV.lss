
bin\Debug\AGV.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000108  00800200  00001af8  00001bac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001af8  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001a  00800308  00800308  00001cb4  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  00001cb4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 00000200  00000000  00000000  00001cb7  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000036f  00000000  00000000  00001eb7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002be6  00000000  00000000  00002226  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000169a  00000000  00000000  00004e0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001977  00000000  00000000  000064a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002f0  00000000  00000000  00007e20  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000574  00000000  00000000  00008110  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009ce  00000000  00000000  00008684  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00009052  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__vector_23>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	13 e0       	ldi	r17, 0x03	; 3
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e8 ef       	ldi	r30, 0xF8	; 248
      fc:	fa e1       	ldi	r31, 0x1A	; 26
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a8 30       	cpi	r26, 0x08	; 8
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	13 e0       	ldi	r17, 0x03	; 3
     110:	a8 e0       	ldi	r26, 0x08	; 8
     112:	b3 e0       	ldi	r27, 0x03	; 3
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a2 32       	cpi	r26, 0x22	; 34
     11a:	b1 07       	cpc	r27, r17
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 95 00 	call	0x12a	; 0x12a <main>
     122:	0c 94 7a 0d 	jmp	0x1af4	; 0x1af4 <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <main>:

#include "stepper.h"
#include "serial.h"

int main(void)
{
     12a:	df 93       	push	r29
     12c:	cf 93       	push	r28
     12e:	cd b7       	in	r28, 0x3d	; 61
     130:	de b7       	in	r29, 0x3e	; 62
    ///initializing stepper motors///
    construct_stepper(&stepper1, PK0, PK1);
     132:	83 e1       	ldi	r24, 0x13	; 19
     134:	93 e0       	ldi	r25, 0x03	; 3
     136:	60 e0       	ldi	r22, 0x00	; 0
     138:	41 e0       	ldi	r20, 0x01	; 1
     13a:	0e 94 1d 02 	call	0x43a	; 0x43a <construct_stepper>
    construct_stepper(&stepper2, PK2, PK3);
     13e:	88 e0       	ldi	r24, 0x08	; 8
     140:	93 e0       	ldi	r25, 0x03	; 3
     142:	62 e0       	ldi	r22, 0x02	; 2
     144:	43 e0       	ldi	r20, 0x03	; 3
     146:	0e 94 1d 02 	call	0x43a	; 0x43a <construct_stepper>
    initialize_steppers();
     14a:	0e 94 53 02 	call	0x4a6	; 0x4a6 <initialize_steppers>
    init_stepper_timer0();
     14e:	0e 94 38 06 	call	0xc70	; 0xc70 <init_stepper_timer0>
    sei();
     152:	78 94       	sei

    ///initializing serial coms
    USART_Init(MYUBRR);
     154:	87 e6       	ldi	r24, 0x67	; 103
     156:	90 e0       	ldi	r25, 0x00	; 0
     158:	0e 94 ff 00 	call	0x1fe	; 0x1fe <USART_Init>

    stepper2.direction = forward;
     15c:	82 e0       	ldi	r24, 0x02	; 2
     15e:	80 93 10 03 	sts	0x0310, r24
    stepper1.direction = backward;
     162:	81 e0       	ldi	r24, 0x01	; 1
     164:	80 93 1b 03 	sts	0x031B, r24
    stepper1.target_speed = 1;
     168:	81 e0       	ldi	r24, 0x01	; 1
     16a:	80 93 19 03 	sts	0x0319, r24
    stepper2.target_speed = 1;
     16e:	81 e0       	ldi	r24, 0x01	; 1
     170:	80 93 0e 03 	sts	0x030E, r24


    turn(360, &stepper1, &stepper2);
     174:	23 e1       	ldi	r18, 0x13	; 19
     176:	33 e0       	ldi	r19, 0x03	; 3
     178:	48 e0       	ldi	r20, 0x08	; 8
     17a:	53 e0       	ldi	r21, 0x03	; 3
     17c:	88 e6       	ldi	r24, 0x68	; 104
     17e:	91 e0       	ldi	r25, 0x01	; 1
     180:	b9 01       	movw	r22, r18
     182:	0e 94 07 05 	call	0xa0e	; 0xa0e <turn>
    while(1)
    {
        //
        Handle_steps(&stepper1);
     186:	83 e1       	ldi	r24, 0x13	; 19
     188:	93 e0       	ldi	r25, 0x03	; 3
     18a:	0e 94 a9 04 	call	0x952	; 0x952 <Handle_steps>
        Handle_steps(&stepper2);
     18e:	88 e0       	ldi	r24, 0x08	; 8
     190:	93 e0       	ldi	r25, 0x03	; 3
     192:	0e 94 a9 04 	call	0x952	; 0x952 <Handle_steps>
        set_dir(&stepper1);
     196:	83 e1       	ldi	r24, 0x13	; 19
     198:	93 e0       	ldi	r25, 0x03	; 3
     19a:	0e 94 63 02 	call	0x4c6	; 0x4c6 <set_dir>
        set_dir(&stepper2);
     19e:	88 e0       	ldi	r24, 0x08	; 8
     1a0:	93 e0       	ldi	r25, 0x03	; 3
     1a2:	0e 94 63 02 	call	0x4c6	; 0x4c6 <set_dir>
     1a6:	ef cf       	rjmp	.-34     	; 0x186 <main+0x5c>

000001a8 <__vector_23>:

    return 0;
}

ISR(TIMER0_OVF_vect)
{
     1a8:	1f 92       	push	r1
     1aa:	0f 92       	push	r0
     1ac:	0f b6       	in	r0, 0x3f	; 63
     1ae:	0f 92       	push	r0
     1b0:	11 24       	eor	r1, r1
     1b2:	8f 93       	push	r24
     1b4:	9f 93       	push	r25
     1b6:	af 93       	push	r26
     1b8:	bf 93       	push	r27
     1ba:	df 93       	push	r29
     1bc:	cf 93       	push	r28
     1be:	cd b7       	in	r28, 0x3d	; 61
     1c0:	de b7       	in	r29, 0x3e	; 62
    ms++;
     1c2:	80 91 1e 03 	lds	r24, 0x031E
     1c6:	90 91 1f 03 	lds	r25, 0x031F
     1ca:	a0 91 20 03 	lds	r26, 0x0320
     1ce:	b0 91 21 03 	lds	r27, 0x0321
     1d2:	01 96       	adiw	r24, 0x01	; 1
     1d4:	a1 1d       	adc	r26, r1
     1d6:	b1 1d       	adc	r27, r1
     1d8:	80 93 1e 03 	sts	0x031E, r24
     1dc:	90 93 1f 03 	sts	0x031F, r25
     1e0:	a0 93 20 03 	sts	0x0320, r26
     1e4:	b0 93 21 03 	sts	0x0321, r27
}
     1e8:	cf 91       	pop	r28
     1ea:	df 91       	pop	r29
     1ec:	bf 91       	pop	r27
     1ee:	af 91       	pop	r26
     1f0:	9f 91       	pop	r25
     1f2:	8f 91       	pop	r24
     1f4:	0f 90       	pop	r0
     1f6:	0f be       	out	0x3f, r0	; 63
     1f8:	0f 90       	pop	r0
     1fa:	1f 90       	pop	r1
     1fc:	18 95       	reti

000001fe <USART_Init>:

#include "serial.h"

void USART_Init( unsigned int ubrr)
{
     1fe:	df 93       	push	r29
     200:	cf 93       	push	r28
     202:	0f 92       	push	r0
     204:	0f 92       	push	r0
     206:	cd b7       	in	r28, 0x3d	; 61
     208:	de b7       	in	r29, 0x3e	; 62
     20a:	9a 83       	std	Y+2, r25	; 0x02
     20c:	89 83       	std	Y+1, r24	; 0x01
    /*Set baud rate */
    UBRR0H = (unsigned char)(ubrr>>8);
     20e:	e5 ec       	ldi	r30, 0xC5	; 197
     210:	f0 e0       	ldi	r31, 0x00	; 0
     212:	89 81       	ldd	r24, Y+1	; 0x01
     214:	9a 81       	ldd	r25, Y+2	; 0x02
     216:	89 2f       	mov	r24, r25
     218:	99 27       	eor	r25, r25
     21a:	80 83       	st	Z, r24
    UBRR0L = (unsigned char)ubrr;
     21c:	e4 ec       	ldi	r30, 0xC4	; 196
     21e:	f0 e0       	ldi	r31, 0x00	; 0
     220:	89 81       	ldd	r24, Y+1	; 0x01
     222:	80 83       	st	Z, r24
    /*Enable receiver and transmitter */
    UCSR0B |= (1<<RXEN0);
     224:	a1 ec       	ldi	r26, 0xC1	; 193
     226:	b0 e0       	ldi	r27, 0x00	; 0
     228:	e1 ec       	ldi	r30, 0xC1	; 193
     22a:	f0 e0       	ldi	r31, 0x00	; 0
     22c:	80 81       	ld	r24, Z
     22e:	80 61       	ori	r24, 0x10	; 16
     230:	8c 93       	st	X, r24
    UCSR0B |= (1<<TXEN0);
     232:	a1 ec       	ldi	r26, 0xC1	; 193
     234:	b0 e0       	ldi	r27, 0x00	; 0
     236:	e1 ec       	ldi	r30, 0xC1	; 193
     238:	f0 e0       	ldi	r31, 0x00	; 0
     23a:	80 81       	ld	r24, Z
     23c:	88 60       	ori	r24, 0x08	; 8
     23e:	8c 93       	st	X, r24
    /* Set frame format: 8data, 2stop bit */
    UCSR0C = (1<<UCSZ01)|(3<<UCSZ00);
     240:	e2 ec       	ldi	r30, 0xC2	; 194
     242:	f0 e0       	ldi	r31, 0x00	; 0
     244:	86 e0       	ldi	r24, 0x06	; 6
     246:	80 83       	st	Z, r24
}
     248:	0f 90       	pop	r0
     24a:	0f 90       	pop	r0
     24c:	cf 91       	pop	r28
     24e:	df 91       	pop	r29
     250:	08 95       	ret

00000252 <recieve_Byte>:


uint8_t recieve_Byte(void)
{
     252:	df 93       	push	r29
     254:	cf 93       	push	r28
     256:	cd b7       	in	r28, 0x3d	; 61
     258:	de b7       	in	r29, 0x3e	; 62
    loop_until_bit_is_set(UCSR0A, RXC0);
     25a:	e0 ec       	ldi	r30, 0xC0	; 192
     25c:	f0 e0       	ldi	r31, 0x00	; 0
     25e:	80 81       	ld	r24, Z
     260:	88 23       	and	r24, r24
     262:	dc f7       	brge	.-10     	; 0x25a <recieve_Byte+0x8>
    {
     return UDR0;
     264:	e6 ec       	ldi	r30, 0xC6	; 198
     266:	f0 e0       	ldi	r31, 0x00	; 0
     268:	80 81       	ld	r24, Z
    }
    /*else
    {
        return -1;
    }*/
}
     26a:	cf 91       	pop	r28
     26c:	df 91       	pop	r29
     26e:	08 95       	ret

00000270 <transmit_byte>:

void transmit_byte(uint8_t byte)
{
     270:	df 93       	push	r29
     272:	cf 93       	push	r28
     274:	0f 92       	push	r0
     276:	cd b7       	in	r28, 0x3d	; 61
     278:	de b7       	in	r29, 0x3e	; 62
     27a:	89 83       	std	Y+1, r24	; 0x01
    loop_until_bit_is_set(UCSR0A, UDRE0);
     27c:	e0 ec       	ldi	r30, 0xC0	; 192
     27e:	f0 e0       	ldi	r31, 0x00	; 0
     280:	80 81       	ld	r24, Z
     282:	88 2f       	mov	r24, r24
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	80 72       	andi	r24, 0x20	; 32
     288:	90 70       	andi	r25, 0x00	; 0
     28a:	00 97       	sbiw	r24, 0x00	; 0
     28c:	b9 f3       	breq	.-18     	; 0x27c <transmit_byte+0xc>
    UDR0 = byte;
     28e:	e6 ec       	ldi	r30, 0xC6	; 198
     290:	f0 e0       	ldi	r31, 0x00	; 0
     292:	89 81       	ldd	r24, Y+1	; 0x01
     294:	80 83       	st	Z, r24
}
     296:	0f 90       	pop	r0
     298:	cf 91       	pop	r28
     29a:	df 91       	pop	r29
     29c:	08 95       	ret

0000029e <print_int32>:

void print_int32(int32_t byte)
{
     29e:	df 93       	push	r29
     2a0:	cf 93       	push	r28
     2a2:	00 d0       	rcall	.+0      	; 0x2a4 <print_int32+0x6>
     2a4:	0f 92       	push	r0
     2a6:	cd b7       	in	r28, 0x3d	; 61
     2a8:	de b7       	in	r29, 0x3e	; 62
     2aa:	69 83       	std	Y+1, r22	; 0x01
     2ac:	7a 83       	std	Y+2, r23	; 0x02
     2ae:	8b 83       	std	Y+3, r24	; 0x03
     2b0:	9c 83       	std	Y+4, r25	; 0x04
    transmit_byte((byte/1000)%10);
     2b2:	89 81       	ldd	r24, Y+1	; 0x01
     2b4:	9a 81       	ldd	r25, Y+2	; 0x02
     2b6:	ab 81       	ldd	r26, Y+3	; 0x03
     2b8:	bc 81       	ldd	r27, Y+4	; 0x04
     2ba:	28 ee       	ldi	r18, 0xE8	; 232
     2bc:	33 e0       	ldi	r19, 0x03	; 3
     2be:	40 e0       	ldi	r20, 0x00	; 0
     2c0:	50 e0       	ldi	r21, 0x00	; 0
     2c2:	bc 01       	movw	r22, r24
     2c4:	cd 01       	movw	r24, r26
     2c6:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <__divmodsi4>
     2ca:	da 01       	movw	r26, r20
     2cc:	c9 01       	movw	r24, r18
     2ce:	2a e0       	ldi	r18, 0x0A	; 10
     2d0:	30 e0       	ldi	r19, 0x00	; 0
     2d2:	40 e0       	ldi	r20, 0x00	; 0
     2d4:	50 e0       	ldi	r21, 0x00	; 0
     2d6:	bc 01       	movw	r22, r24
     2d8:	cd 01       	movw	r24, r26
     2da:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <__divmodsi4>
     2de:	dc 01       	movw	r26, r24
     2e0:	cb 01       	movw	r24, r22
     2e2:	0e 94 38 01 	call	0x270	; 0x270 <transmit_byte>
    transmit_byte((byte/100)%10);
     2e6:	89 81       	ldd	r24, Y+1	; 0x01
     2e8:	9a 81       	ldd	r25, Y+2	; 0x02
     2ea:	ab 81       	ldd	r26, Y+3	; 0x03
     2ec:	bc 81       	ldd	r27, Y+4	; 0x04
     2ee:	24 e6       	ldi	r18, 0x64	; 100
     2f0:	30 e0       	ldi	r19, 0x00	; 0
     2f2:	40 e0       	ldi	r20, 0x00	; 0
     2f4:	50 e0       	ldi	r21, 0x00	; 0
     2f6:	bc 01       	movw	r22, r24
     2f8:	cd 01       	movw	r24, r26
     2fa:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <__divmodsi4>
     2fe:	da 01       	movw	r26, r20
     300:	c9 01       	movw	r24, r18
     302:	2a e0       	ldi	r18, 0x0A	; 10
     304:	30 e0       	ldi	r19, 0x00	; 0
     306:	40 e0       	ldi	r20, 0x00	; 0
     308:	50 e0       	ldi	r21, 0x00	; 0
     30a:	bc 01       	movw	r22, r24
     30c:	cd 01       	movw	r24, r26
     30e:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <__divmodsi4>
     312:	dc 01       	movw	r26, r24
     314:	cb 01       	movw	r24, r22
     316:	0e 94 38 01 	call	0x270	; 0x270 <transmit_byte>
    transmit_byte((byte/10)%10);
     31a:	89 81       	ldd	r24, Y+1	; 0x01
     31c:	9a 81       	ldd	r25, Y+2	; 0x02
     31e:	ab 81       	ldd	r26, Y+3	; 0x03
     320:	bc 81       	ldd	r27, Y+4	; 0x04
     322:	2a e0       	ldi	r18, 0x0A	; 10
     324:	30 e0       	ldi	r19, 0x00	; 0
     326:	40 e0       	ldi	r20, 0x00	; 0
     328:	50 e0       	ldi	r21, 0x00	; 0
     32a:	bc 01       	movw	r22, r24
     32c:	cd 01       	movw	r24, r26
     32e:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <__divmodsi4>
     332:	da 01       	movw	r26, r20
     334:	c9 01       	movw	r24, r18
     336:	2a e0       	ldi	r18, 0x0A	; 10
     338:	30 e0       	ldi	r19, 0x00	; 0
     33a:	40 e0       	ldi	r20, 0x00	; 0
     33c:	50 e0       	ldi	r21, 0x00	; 0
     33e:	bc 01       	movw	r22, r24
     340:	cd 01       	movw	r24, r26
     342:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <__divmodsi4>
     346:	dc 01       	movw	r26, r24
     348:	cb 01       	movw	r24, r22
     34a:	0e 94 38 01 	call	0x270	; 0x270 <transmit_byte>
    transmit_byte((byte%10));
     34e:	89 81       	ldd	r24, Y+1	; 0x01
     350:	9a 81       	ldd	r25, Y+2	; 0x02
     352:	ab 81       	ldd	r26, Y+3	; 0x03
     354:	bc 81       	ldd	r27, Y+4	; 0x04
     356:	2a e0       	ldi	r18, 0x0A	; 10
     358:	30 e0       	ldi	r19, 0x00	; 0
     35a:	40 e0       	ldi	r20, 0x00	; 0
     35c:	50 e0       	ldi	r21, 0x00	; 0
     35e:	bc 01       	movw	r22, r24
     360:	cd 01       	movw	r24, r26
     362:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <__divmodsi4>
     366:	dc 01       	movw	r26, r24
     368:	cb 01       	movw	r24, r22
     36a:	0e 94 38 01 	call	0x270	; 0x270 <transmit_byte>
    transmit_byte(0xA5);
     36e:	85 ea       	ldi	r24, 0xA5	; 165
     370:	0e 94 38 01 	call	0x270	; 0x270 <transmit_byte>
}
     374:	0f 90       	pop	r0
     376:	0f 90       	pop	r0
     378:	0f 90       	pop	r0
     37a:	0f 90       	pop	r0
     37c:	cf 91       	pop	r28
     37e:	df 91       	pop	r29
     380:	08 95       	ret

00000382 <recieve_string>:



void recieve_string(char code[])
{
     382:	df 93       	push	r29
     384:	cf 93       	push	r28
     386:	00 d0       	rcall	.+0      	; 0x388 <recieve_string+0x6>
     388:	0f 92       	push	r0
     38a:	0f 92       	push	r0
     38c:	cd b7       	in	r28, 0x3d	; 61
     38e:	de b7       	in	r29, 0x3e	; 62
     390:	9d 83       	std	Y+5, r25	; 0x05
     392:	8c 83       	std	Y+4, r24	; 0x04
    //code ontworpen voor een GPS module. dollar teken is begin van de string. kan wel gebruikt worden voor het onvangen van complexe instructies.
    char byte = recieve_Byte();
     394:	0e 94 29 01 	call	0x252	; 0x252 <recieve_Byte>
     398:	8b 83       	std	Y+3, r24	; 0x03
    if(byte == '$')
     39a:	8b 81       	ldd	r24, Y+3	; 0x03
     39c:	84 32       	cpi	r24, 0x24	; 36
     39e:	c9 f4       	brne	.+50     	; 0x3d2 <recieve_string+0x50>
    {
        int x = 1;
     3a0:	81 e0       	ldi	r24, 0x01	; 1
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	9a 83       	std	Y+2, r25	; 0x02
     3a6:	89 83       	std	Y+1, r24	; 0x01
     3a8:	11 c0       	rjmp	.+34     	; 0x3cc <recieve_string+0x4a>
        while(byte != '\n')
        {
            byte = recieve_Byte();
     3aa:	0e 94 29 01 	call	0x252	; 0x252 <recieve_Byte>
     3ae:	8b 83       	std	Y+3, r24	; 0x03
            code[x] = byte;
     3b0:	29 81       	ldd	r18, Y+1	; 0x01
     3b2:	3a 81       	ldd	r19, Y+2	; 0x02
     3b4:	8c 81       	ldd	r24, Y+4	; 0x04
     3b6:	9d 81       	ldd	r25, Y+5	; 0x05
     3b8:	fc 01       	movw	r30, r24
     3ba:	e2 0f       	add	r30, r18
     3bc:	f3 1f       	adc	r31, r19
     3be:	8b 81       	ldd	r24, Y+3	; 0x03
     3c0:	80 83       	st	Z, r24
            x++;
     3c2:	89 81       	ldd	r24, Y+1	; 0x01
     3c4:	9a 81       	ldd	r25, Y+2	; 0x02
     3c6:	01 96       	adiw	r24, 0x01	; 1
     3c8:	9a 83       	std	Y+2, r25	; 0x02
     3ca:	89 83       	std	Y+1, r24	; 0x01
    //code ontworpen voor een GPS module. dollar teken is begin van de string. kan wel gebruikt worden voor het onvangen van complexe instructies.
    char byte = recieve_Byte();
    if(byte == '$')
    {
        int x = 1;
        while(byte != '\n')
     3cc:	8b 81       	ldd	r24, Y+3	; 0x03
     3ce:	8a 30       	cpi	r24, 0x0A	; 10
     3d0:	61 f7       	brne	.-40     	; 0x3aa <recieve_string+0x28>
            byte = recieve_Byte();
            code[x] = byte;
            x++;
        }
    }
}
     3d2:	0f 90       	pop	r0
     3d4:	0f 90       	pop	r0
     3d6:	0f 90       	pop	r0
     3d8:	0f 90       	pop	r0
     3da:	0f 90       	pop	r0
     3dc:	cf 91       	pop	r28
     3de:	df 91       	pop	r29
     3e0:	08 95       	ret

000003e2 <accel_speed>:
#include <avr/interrupt.h>

#include "stepper.h"

void accel_speed(volatile struct stepper *stepper)
{
     3e2:	df 93       	push	r29
     3e4:	cf 93       	push	r28
     3e6:	0f 92       	push	r0
     3e8:	0f 92       	push	r0
     3ea:	cd b7       	in	r28, 0x3d	; 61
     3ec:	de b7       	in	r29, 0x3e	; 62
     3ee:	9a 83       	std	Y+2, r25	; 0x02
     3f0:	89 83       	std	Y+1, r24	; 0x01
    //take target_speed as target
    //take current_speed as current
    //compare current_speed with target_speed
    //if current speed < target_speed -> accelarate ++
    if(stepper->current_speed < stepper->target_speed)
     3f2:	e9 81       	ldd	r30, Y+1	; 0x01
     3f4:	fa 81       	ldd	r31, Y+2	; 0x02
     3f6:	97 81       	ldd	r25, Z+7	; 0x07
     3f8:	e9 81       	ldd	r30, Y+1	; 0x01
     3fa:	fa 81       	ldd	r31, Y+2	; 0x02
     3fc:	86 81       	ldd	r24, Z+6	; 0x06
     3fe:	98 17       	cp	r25, r24
     400:	40 f4       	brcc	.+16     	; 0x412 <accel_speed+0x30>
    {
        stepper->current_speed++;
     402:	e9 81       	ldd	r30, Y+1	; 0x01
     404:	fa 81       	ldd	r31, Y+2	; 0x02
     406:	87 81       	ldd	r24, Z+7	; 0x07
     408:	8f 5f       	subi	r24, 0xFF	; 255
     40a:	e9 81       	ldd	r30, Y+1	; 0x01
     40c:	fa 81       	ldd	r31, Y+2	; 0x02
     40e:	87 83       	std	Z+7, r24	; 0x07
     410:	0f c0       	rjmp	.+30     	; 0x430 <accel_speed+0x4e>
    }
    //if current speed > targetspeed > deccelerate
    else if(stepper->current_speed > stepper->target_speed)
     412:	e9 81       	ldd	r30, Y+1	; 0x01
     414:	fa 81       	ldd	r31, Y+2	; 0x02
     416:	97 81       	ldd	r25, Z+7	; 0x07
     418:	e9 81       	ldd	r30, Y+1	; 0x01
     41a:	fa 81       	ldd	r31, Y+2	; 0x02
     41c:	86 81       	ldd	r24, Z+6	; 0x06
     41e:	89 17       	cp	r24, r25
     420:	38 f4       	brcc	.+14     	; 0x430 <accel_speed+0x4e>
    {
        stepper->current_speed--;
     422:	e9 81       	ldd	r30, Y+1	; 0x01
     424:	fa 81       	ldd	r31, Y+2	; 0x02
     426:	87 81       	ldd	r24, Z+7	; 0x07
     428:	81 50       	subi	r24, 0x01	; 1
     42a:	e9 81       	ldd	r30, Y+1	; 0x01
     42c:	fa 81       	ldd	r31, Y+2	; 0x02
     42e:	87 83       	std	Z+7, r24	; 0x07
    }
    //else we're on speed
}
     430:	0f 90       	pop	r0
     432:	0f 90       	pop	r0
     434:	cf 91       	pop	r28
     436:	df 91       	pop	r29
     438:	08 95       	ret

0000043a <construct_stepper>:

void construct_stepper(volatile struct stepper *stepper, uint8_t step_pin, uint8_t dir_pin)
{
     43a:	df 93       	push	r29
     43c:	cf 93       	push	r28
     43e:	00 d0       	rcall	.+0      	; 0x440 <construct_stepper+0x6>
     440:	0f 92       	push	r0
     442:	cd b7       	in	r28, 0x3d	; 61
     444:	de b7       	in	r29, 0x3e	; 62
     446:	9a 83       	std	Y+2, r25	; 0x02
     448:	89 83       	std	Y+1, r24	; 0x01
     44a:	6b 83       	std	Y+3, r22	; 0x03
     44c:	4c 83       	std	Y+4, r20	; 0x04
    stepper->last_step = ms;
     44e:	80 91 1e 03 	lds	r24, 0x031E
     452:	90 91 1f 03 	lds	r25, 0x031F
     456:	a0 91 20 03 	lds	r26, 0x0320
     45a:	b0 91 21 03 	lds	r27, 0x0321
     45e:	e9 81       	ldd	r30, Y+1	; 0x01
     460:	fa 81       	ldd	r31, Y+2	; 0x02
     462:	82 83       	std	Z+2, r24	; 0x02
     464:	93 83       	std	Z+3, r25	; 0x03
     466:	a4 83       	std	Z+4, r26	; 0x04
     468:	b5 83       	std	Z+5, r27	; 0x05
    stepper->target_speed = 1;
     46a:	e9 81       	ldd	r30, Y+1	; 0x01
     46c:	fa 81       	ldd	r31, Y+2	; 0x02
     46e:	81 e0       	ldi	r24, 0x01	; 1
     470:	86 83       	std	Z+6, r24	; 0x06
    stepper->current_speed = 1;
     472:	e9 81       	ldd	r30, Y+1	; 0x01
     474:	fa 81       	ldd	r31, Y+2	; 0x02
     476:	81 e0       	ldi	r24, 0x01	; 1
     478:	87 83       	std	Z+7, r24	; 0x07
    stepper->steps = 0;
     47a:	e9 81       	ldd	r30, Y+1	; 0x01
     47c:	fa 81       	ldd	r31, Y+2	; 0x02
     47e:	12 86       	std	Z+10, r1	; 0x0a
     480:	11 86       	std	Z+9, r1	; 0x09
    stepper->step_pin = step_pin;
     482:	e9 81       	ldd	r30, Y+1	; 0x01
     484:	fa 81       	ldd	r31, Y+2	; 0x02
     486:	8b 81       	ldd	r24, Y+3	; 0x03
     488:	80 83       	st	Z, r24
    stepper->dir_pin = dir_pin;
     48a:	e9 81       	ldd	r30, Y+1	; 0x01
     48c:	fa 81       	ldd	r31, Y+2	; 0x02
     48e:	8c 81       	ldd	r24, Y+4	; 0x04
     490:	81 83       	std	Z+1, r24	; 0x01
    stepper->direction = 0;
     492:	e9 81       	ldd	r30, Y+1	; 0x01
     494:	fa 81       	ldd	r31, Y+2	; 0x02
     496:	10 86       	std	Z+8, r1	; 0x08
}
     498:	0f 90       	pop	r0
     49a:	0f 90       	pop	r0
     49c:	0f 90       	pop	r0
     49e:	0f 90       	pop	r0
     4a0:	cf 91       	pop	r28
     4a2:	df 91       	pop	r29
     4a4:	08 95       	ret

000004a6 <initialize_steppers>:

void initialize_steppers()
{
     4a6:	df 93       	push	r29
     4a8:	cf 93       	push	r28
     4aa:	0f 92       	push	r0
     4ac:	cd b7       	in	r28, 0x3d	; 61
     4ae:	de b7       	in	r29, 0x3e	; 62
    stepper_DDR |= 0xFF;//init all pins in bank C
     4b0:	e7 e0       	ldi	r30, 0x07	; 7
     4b2:	f1 e0       	ldi	r31, 0x01	; 1
     4b4:	80 81       	ld	r24, Z
     4b6:	e7 e0       	ldi	r30, 0x07	; 7
     4b8:	f1 e0       	ldi	r31, 0x01	; 1
     4ba:	8f ef       	ldi	r24, 0xFF	; 255
     4bc:	80 83       	st	Z, r24
}
     4be:	0f 90       	pop	r0
     4c0:	cf 91       	pop	r28
     4c2:	df 91       	pop	r29
     4c4:	08 95       	ret

000004c6 <set_dir>:

void set_dir(volatile struct stepper *stepper)
{
     4c6:	df 93       	push	r29
     4c8:	cf 93       	push	r28
     4ca:	00 d0       	rcall	.+0      	; 0x4cc <set_dir+0x6>
     4cc:	0f 92       	push	r0
     4ce:	cd b7       	in	r28, 0x3d	; 61
     4d0:	de b7       	in	r29, 0x3e	; 62
     4d2:	9a 83       	std	Y+2, r25	; 0x02
     4d4:	89 83       	std	Y+1, r24	; 0x01
    switch(stepper->direction)
     4d6:	e9 81       	ldd	r30, Y+1	; 0x01
     4d8:	fa 81       	ldd	r31, Y+2	; 0x02
     4da:	80 85       	ldd	r24, Z+8	; 0x08
     4dc:	28 2f       	mov	r18, r24
     4de:	30 e0       	ldi	r19, 0x00	; 0
     4e0:	3c 83       	std	Y+4, r19	; 0x04
     4e2:	2b 83       	std	Y+3, r18	; 0x03
     4e4:	8b 81       	ldd	r24, Y+3	; 0x03
     4e6:	9c 81       	ldd	r25, Y+4	; 0x04
     4e8:	81 30       	cpi	r24, 0x01	; 1
     4ea:	91 05       	cpc	r25, r1
     4ec:	d9 f0       	breq	.+54     	; 0x524 <set_dir+0x5e>
     4ee:	2b 81       	ldd	r18, Y+3	; 0x03
     4f0:	3c 81       	ldd	r19, Y+4	; 0x04
     4f2:	22 30       	cpi	r18, 0x02	; 2
     4f4:	31 05       	cpc	r19, r1
     4f6:	61 f5       	brne	.+88     	; 0x550 <set_dir+0x8a>
    {
    case forward:
        stepper_port |= (1<<stepper->dir_pin);
     4f8:	a8 e0       	ldi	r26, 0x08	; 8
     4fa:	b1 e0       	ldi	r27, 0x01	; 1
     4fc:	e8 e0       	ldi	r30, 0x08	; 8
     4fe:	f1 e0       	ldi	r31, 0x01	; 1
     500:	80 81       	ld	r24, Z
     502:	48 2f       	mov	r20, r24
     504:	e9 81       	ldd	r30, Y+1	; 0x01
     506:	fa 81       	ldd	r31, Y+2	; 0x02
     508:	81 81       	ldd	r24, Z+1	; 0x01
     50a:	28 2f       	mov	r18, r24
     50c:	30 e0       	ldi	r19, 0x00	; 0
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	02 2e       	mov	r0, r18
     514:	02 c0       	rjmp	.+4      	; 0x51a <set_dir+0x54>
     516:	88 0f       	add	r24, r24
     518:	99 1f       	adc	r25, r25
     51a:	0a 94       	dec	r0
     51c:	e2 f7       	brpl	.-8      	; 0x516 <set_dir+0x50>
     51e:	84 2b       	or	r24, r20
     520:	8c 93       	st	X, r24
     522:	16 c0       	rjmp	.+44     	; 0x550 <set_dir+0x8a>
        break;
    case backward:
        stepper_port &= ~(1<<stepper->dir_pin);
     524:	a8 e0       	ldi	r26, 0x08	; 8
     526:	b1 e0       	ldi	r27, 0x01	; 1
     528:	e8 e0       	ldi	r30, 0x08	; 8
     52a:	f1 e0       	ldi	r31, 0x01	; 1
     52c:	80 81       	ld	r24, Z
     52e:	48 2f       	mov	r20, r24
     530:	e9 81       	ldd	r30, Y+1	; 0x01
     532:	fa 81       	ldd	r31, Y+2	; 0x02
     534:	81 81       	ldd	r24, Z+1	; 0x01
     536:	28 2f       	mov	r18, r24
     538:	30 e0       	ldi	r19, 0x00	; 0
     53a:	81 e0       	ldi	r24, 0x01	; 1
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	02 2e       	mov	r0, r18
     540:	02 c0       	rjmp	.+4      	; 0x546 <set_dir+0x80>
     542:	88 0f       	add	r24, r24
     544:	99 1f       	adc	r25, r25
     546:	0a 94       	dec	r0
     548:	e2 f7       	brpl	.-8      	; 0x542 <set_dir+0x7c>
     54a:	80 95       	com	r24
     54c:	84 23       	and	r24, r20
     54e:	8c 93       	st	X, r24
        break;
    default:
        break;
    }
}
     550:	0f 90       	pop	r0
     552:	0f 90       	pop	r0
     554:	0f 90       	pop	r0
     556:	0f 90       	pop	r0
     558:	cf 91       	pop	r28
     55a:	df 91       	pop	r29
     55c:	08 95       	ret

0000055e <step>:

void static step(volatile struct stepper stepper)
{
     55e:	ef 92       	push	r14
     560:	ff 92       	push	r15
     562:	0f 93       	push	r16
     564:	1f 93       	push	r17
     566:	df 93       	push	r29
     568:	cf 93       	push	r28
     56a:	cd b7       	in	r28, 0x3d	; 61
     56c:	de b7       	in	r29, 0x3e	; 62
     56e:	eb 97       	sbiw	r28, 0x3b	; 59
     570:	0f b6       	in	r0, 0x3f	; 63
     572:	f8 94       	cli
     574:	de bf       	out	0x3e, r29	; 62
     576:	0f be       	out	0x3f, r0	; 63
     578:	cd bf       	out	0x3d, r28	; 61
     57a:	e9 aa       	std	Y+49, r14	; 0x31
     57c:	fa aa       	std	Y+50, r15	; 0x32
     57e:	0b ab       	std	Y+51, r16	; 0x33
     580:	1c ab       	std	Y+52, r17	; 0x34
     582:	2d ab       	std	Y+53, r18	; 0x35
     584:	3e ab       	std	Y+54, r19	; 0x36
     586:	4f ab       	std	Y+55, r20	; 0x37
     588:	58 af       	std	Y+56, r21	; 0x38
     58a:	69 af       	std	Y+57, r22	; 0x39
     58c:	7a af       	std	Y+58, r23	; 0x3a
     58e:	8b af       	std	Y+59, r24	; 0x3b

            stepper_port |= (1<<stepper.step_pin);
     590:	a8 e0       	ldi	r26, 0x08	; 8
     592:	b1 e0       	ldi	r27, 0x01	; 1
     594:	e8 e0       	ldi	r30, 0x08	; 8
     596:	f1 e0       	ldi	r31, 0x01	; 1
     598:	80 81       	ld	r24, Z
     59a:	48 2f       	mov	r20, r24
     59c:	89 a9       	ldd	r24, Y+49	; 0x31
     59e:	28 2f       	mov	r18, r24
     5a0:	30 e0       	ldi	r19, 0x00	; 0
     5a2:	81 e0       	ldi	r24, 0x01	; 1
     5a4:	90 e0       	ldi	r25, 0x00	; 0
     5a6:	02 c0       	rjmp	.+4      	; 0x5ac <step+0x4e>
     5a8:	88 0f       	add	r24, r24
     5aa:	99 1f       	adc	r25, r25
     5ac:	2a 95       	dec	r18
     5ae:	e2 f7       	brpl	.-8      	; 0x5a8 <step+0x4a>
     5b0:	84 2b       	or	r24, r20
     5b2:	8c 93       	st	X, r24
     5b4:	80 e0       	ldi	r24, 0x00	; 0
     5b6:	90 e0       	ldi	r25, 0x00	; 0
     5b8:	a0 e0       	ldi	r26, 0x00	; 0
     5ba:	b0 e4       	ldi	r27, 0x40	; 64
     5bc:	8d a7       	std	Y+45, r24	; 0x2d
     5be:	9e a7       	std	Y+46, r25	; 0x2e
     5c0:	af a7       	std	Y+47, r26	; 0x2f
     5c2:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     5c4:	6d a5       	ldd	r22, Y+45	; 0x2d
     5c6:	7e a5       	ldd	r23, Y+46	; 0x2e
     5c8:	8f a5       	ldd	r24, Y+47	; 0x2f
     5ca:	98 a9       	ldd	r25, Y+48	; 0x30
     5cc:	2b ea       	ldi	r18, 0xAB	; 171
     5ce:	3a ea       	ldi	r19, 0xAA	; 170
     5d0:	4a ea       	ldi	r20, 0xAA	; 170
     5d2:	50 e4       	ldi	r21, 0x40	; 64
     5d4:	0e 94 29 08 	call	0x1052	; 0x1052 <__mulsf3>
     5d8:	dc 01       	movw	r26, r24
     5da:	cb 01       	movw	r24, r22
     5dc:	89 a7       	std	Y+41, r24	; 0x29
     5de:	9a a7       	std	Y+42, r25	; 0x2a
     5e0:	ab a7       	std	Y+43, r26	; 0x2b
     5e2:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
     5e4:	69 a5       	ldd	r22, Y+41	; 0x29
     5e6:	7a a5       	ldd	r23, Y+42	; 0x2a
     5e8:	8b a5       	ldd	r24, Y+43	; 0x2b
     5ea:	9c a5       	ldd	r25, Y+44	; 0x2c
     5ec:	20 e0       	ldi	r18, 0x00	; 0
     5ee:	30 e0       	ldi	r19, 0x00	; 0
     5f0:	40 e8       	ldi	r20, 0x80	; 128
     5f2:	5f e3       	ldi	r21, 0x3F	; 63
     5f4:	0e 94 2f 0a 	call	0x145e	; 0x145e <__ltsf2>
     5f8:	88 23       	and	r24, r24
     5fa:	1c f4       	brge	.+6      	; 0x602 <step+0xa4>
		__ticks = 1;
     5fc:	81 e0       	ldi	r24, 0x01	; 1
     5fe:	88 a7       	std	Y+40, r24	; 0x28
     600:	91 c0       	rjmp	.+290    	; 0x724 <step+0x1c6>
	else if (__tmp > 255)
     602:	69 a5       	ldd	r22, Y+41	; 0x29
     604:	7a a5       	ldd	r23, Y+42	; 0x2a
     606:	8b a5       	ldd	r24, Y+43	; 0x2b
     608:	9c a5       	ldd	r25, Y+44	; 0x2c
     60a:	20 e0       	ldi	r18, 0x00	; 0
     60c:	30 e0       	ldi	r19, 0x00	; 0
     60e:	4f e7       	ldi	r20, 0x7F	; 127
     610:	53 e4       	ldi	r21, 0x43	; 67
     612:	0e 94 cf 09 	call	0x139e	; 0x139e <__gtsf2>
     616:	18 16       	cp	r1, r24
     618:	0c f0       	brlt	.+2      	; 0x61c <step+0xbe>
     61a:	7b c0       	rjmp	.+246    	; 0x712 <step+0x1b4>
	{
		_delay_ms(__us / 1000.0);
     61c:	6d a5       	ldd	r22, Y+45	; 0x2d
     61e:	7e a5       	ldd	r23, Y+46	; 0x2e
     620:	8f a5       	ldd	r24, Y+47	; 0x2f
     622:	98 a9       	ldd	r25, Y+48	; 0x30
     624:	20 e0       	ldi	r18, 0x00	; 0
     626:	30 e0       	ldi	r19, 0x00	; 0
     628:	4a e7       	ldi	r20, 0x7A	; 122
     62a:	54 e4       	ldi	r21, 0x44	; 68
     62c:	0e 94 23 09 	call	0x1246	; 0x1246 <__divsf3>
     630:	dc 01       	movw	r26, r24
     632:	cb 01       	movw	r24, r22
     634:	8c a3       	std	Y+36, r24	; 0x24
     636:	9d a3       	std	Y+37, r25	; 0x25
     638:	ae a3       	std	Y+38, r26	; 0x26
     63a:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     63c:	6c a1       	ldd	r22, Y+36	; 0x24
     63e:	7d a1       	ldd	r23, Y+37	; 0x25
     640:	8e a1       	ldd	r24, Y+38	; 0x26
     642:	9f a1       	ldd	r25, Y+39	; 0x27
     644:	20 e0       	ldi	r18, 0x00	; 0
     646:	30 e0       	ldi	r19, 0x00	; 0
     648:	4a e7       	ldi	r20, 0x7A	; 122
     64a:	55 e4       	ldi	r21, 0x45	; 69
     64c:	0e 94 29 08 	call	0x1052	; 0x1052 <__mulsf3>
     650:	dc 01       	movw	r26, r24
     652:	cb 01       	movw	r24, r22
     654:	88 a3       	std	Y+32, r24	; 0x20
     656:	99 a3       	std	Y+33, r25	; 0x21
     658:	aa a3       	std	Y+34, r26	; 0x22
     65a:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
     65c:	68 a1       	ldd	r22, Y+32	; 0x20
     65e:	79 a1       	ldd	r23, Y+33	; 0x21
     660:	8a a1       	ldd	r24, Y+34	; 0x22
     662:	9b a1       	ldd	r25, Y+35	; 0x23
     664:	20 e0       	ldi	r18, 0x00	; 0
     666:	30 e0       	ldi	r19, 0x00	; 0
     668:	40 e8       	ldi	r20, 0x80	; 128
     66a:	5f e3       	ldi	r21, 0x3F	; 63
     66c:	0e 94 2f 0a 	call	0x145e	; 0x145e <__ltsf2>
     670:	88 23       	and	r24, r24
     672:	2c f4       	brge	.+10     	; 0x67e <step+0x120>
		__ticks = 1;
     674:	81 e0       	ldi	r24, 0x01	; 1
     676:	90 e0       	ldi	r25, 0x00	; 0
     678:	9f 8f       	std	Y+31, r25	; 0x1f
     67a:	8e 8f       	std	Y+30, r24	; 0x1e
     67c:	3f c0       	rjmp	.+126    	; 0x6fc <step+0x19e>
	else if (__tmp > 65535)
     67e:	68 a1       	ldd	r22, Y+32	; 0x20
     680:	79 a1       	ldd	r23, Y+33	; 0x21
     682:	8a a1       	ldd	r24, Y+34	; 0x22
     684:	9b a1       	ldd	r25, Y+35	; 0x23
     686:	20 e0       	ldi	r18, 0x00	; 0
     688:	3f ef       	ldi	r19, 0xFF	; 255
     68a:	4f e7       	ldi	r20, 0x7F	; 127
     68c:	57 e4       	ldi	r21, 0x47	; 71
     68e:	0e 94 cf 09 	call	0x139e	; 0x139e <__gtsf2>
     692:	18 16       	cp	r1, r24
     694:	4c f5       	brge	.+82     	; 0x6e8 <step+0x18a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     696:	6c a1       	ldd	r22, Y+36	; 0x24
     698:	7d a1       	ldd	r23, Y+37	; 0x25
     69a:	8e a1       	ldd	r24, Y+38	; 0x26
     69c:	9f a1       	ldd	r25, Y+39	; 0x27
     69e:	20 e0       	ldi	r18, 0x00	; 0
     6a0:	30 e0       	ldi	r19, 0x00	; 0
     6a2:	40 e2       	ldi	r20, 0x20	; 32
     6a4:	51 e4       	ldi	r21, 0x41	; 65
     6a6:	0e 94 29 08 	call	0x1052	; 0x1052 <__mulsf3>
     6aa:	dc 01       	movw	r26, r24
     6ac:	cb 01       	movw	r24, r22
     6ae:	bc 01       	movw	r22, r24
     6b0:	cd 01       	movw	r24, r26
     6b2:	0e 94 53 06 	call	0xca6	; 0xca6 <__fixunssfsi>
     6b6:	dc 01       	movw	r26, r24
     6b8:	cb 01       	movw	r24, r22
     6ba:	9f 8f       	std	Y+31, r25	; 0x1f
     6bc:	8e 8f       	std	Y+30, r24	; 0x1e
     6be:	0f c0       	rjmp	.+30     	; 0x6de <step+0x180>
     6c0:	80 e9       	ldi	r24, 0x90	; 144
     6c2:	91 e0       	ldi	r25, 0x01	; 1
     6c4:	9d 8f       	std	Y+29, r25	; 0x1d
     6c6:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     6c8:	8c 8d       	ldd	r24, Y+28	; 0x1c
     6ca:	9d 8d       	ldd	r25, Y+29	; 0x1d
     6cc:	01 97       	sbiw	r24, 0x01	; 1
     6ce:	f1 f7       	brne	.-4      	; 0x6cc <step+0x16e>
     6d0:	9d 8f       	std	Y+29, r25	; 0x1d
     6d2:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6d4:	8e 8d       	ldd	r24, Y+30	; 0x1e
     6d6:	9f 8d       	ldd	r25, Y+31	; 0x1f
     6d8:	01 97       	sbiw	r24, 0x01	; 1
     6da:	9f 8f       	std	Y+31, r25	; 0x1f
     6dc:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6de:	8e 8d       	ldd	r24, Y+30	; 0x1e
     6e0:	9f 8d       	ldd	r25, Y+31	; 0x1f
     6e2:	00 97       	sbiw	r24, 0x00	; 0
     6e4:	69 f7       	brne	.-38     	; 0x6c0 <step+0x162>
     6e6:	24 c0       	rjmp	.+72     	; 0x730 <step+0x1d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     6e8:	68 a1       	ldd	r22, Y+32	; 0x20
     6ea:	79 a1       	ldd	r23, Y+33	; 0x21
     6ec:	8a a1       	ldd	r24, Y+34	; 0x22
     6ee:	9b a1       	ldd	r25, Y+35	; 0x23
     6f0:	0e 94 53 06 	call	0xca6	; 0xca6 <__fixunssfsi>
     6f4:	dc 01       	movw	r26, r24
     6f6:	cb 01       	movw	r24, r22
     6f8:	9f 8f       	std	Y+31, r25	; 0x1f
     6fa:	8e 8f       	std	Y+30, r24	; 0x1e
     6fc:	8e 8d       	ldd	r24, Y+30	; 0x1e
     6fe:	9f 8d       	ldd	r25, Y+31	; 0x1f
     700:	9b 8f       	std	Y+27, r25	; 0x1b
     702:	8a 8f       	std	Y+26, r24	; 0x1a
     704:	8a 8d       	ldd	r24, Y+26	; 0x1a
     706:	9b 8d       	ldd	r25, Y+27	; 0x1b
     708:	01 97       	sbiw	r24, 0x01	; 1
     70a:	f1 f7       	brne	.-4      	; 0x708 <step+0x1aa>
     70c:	9b 8f       	std	Y+27, r25	; 0x1b
     70e:	8a 8f       	std	Y+26, r24	; 0x1a
     710:	0f c0       	rjmp	.+30     	; 0x730 <step+0x1d2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     712:	69 a5       	ldd	r22, Y+41	; 0x29
     714:	7a a5       	ldd	r23, Y+42	; 0x2a
     716:	8b a5       	ldd	r24, Y+43	; 0x2b
     718:	9c a5       	ldd	r25, Y+44	; 0x2c
     71a:	0e 94 53 06 	call	0xca6	; 0xca6 <__fixunssfsi>
     71e:	dc 01       	movw	r26, r24
     720:	cb 01       	movw	r24, r22
     722:	88 a7       	std	Y+40, r24	; 0x28
     724:	88 a5       	ldd	r24, Y+40	; 0x28
     726:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     728:	89 8d       	ldd	r24, Y+25	; 0x19
     72a:	8a 95       	dec	r24
     72c:	f1 f7       	brne	.-4      	; 0x72a <step+0x1cc>
     72e:	89 8f       	std	Y+25, r24	; 0x19
            _delay_us(2);
            stepper_port &= ~(1<<stepper.step_pin);
     730:	a8 e0       	ldi	r26, 0x08	; 8
     732:	b1 e0       	ldi	r27, 0x01	; 1
     734:	e8 e0       	ldi	r30, 0x08	; 8
     736:	f1 e0       	ldi	r31, 0x01	; 1
     738:	80 81       	ld	r24, Z
     73a:	48 2f       	mov	r20, r24
     73c:	89 a9       	ldd	r24, Y+49	; 0x31
     73e:	28 2f       	mov	r18, r24
     740:	30 e0       	ldi	r19, 0x00	; 0
     742:	81 e0       	ldi	r24, 0x01	; 1
     744:	90 e0       	ldi	r25, 0x00	; 0
     746:	02 c0       	rjmp	.+4      	; 0x74c <step+0x1ee>
     748:	88 0f       	add	r24, r24
     74a:	99 1f       	adc	r25, r25
     74c:	2a 95       	dec	r18
     74e:	e2 f7       	brpl	.-8      	; 0x748 <step+0x1ea>
     750:	80 95       	com	r24
     752:	84 23       	and	r24, r20
     754:	8c 93       	st	X, r24
     756:	80 e0       	ldi	r24, 0x00	; 0
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	a0 e0       	ldi	r26, 0x00	; 0
     75c:	b0 e4       	ldi	r27, 0x40	; 64
     75e:	8d 8b       	std	Y+21, r24	; 0x15
     760:	9e 8b       	std	Y+22, r25	; 0x16
     762:	af 8b       	std	Y+23, r26	; 0x17
     764:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     766:	6d 89       	ldd	r22, Y+21	; 0x15
     768:	7e 89       	ldd	r23, Y+22	; 0x16
     76a:	8f 89       	ldd	r24, Y+23	; 0x17
     76c:	98 8d       	ldd	r25, Y+24	; 0x18
     76e:	2b ea       	ldi	r18, 0xAB	; 171
     770:	3a ea       	ldi	r19, 0xAA	; 170
     772:	4a ea       	ldi	r20, 0xAA	; 170
     774:	50 e4       	ldi	r21, 0x40	; 64
     776:	0e 94 29 08 	call	0x1052	; 0x1052 <__mulsf3>
     77a:	dc 01       	movw	r26, r24
     77c:	cb 01       	movw	r24, r22
     77e:	89 8b       	std	Y+17, r24	; 0x11
     780:	9a 8b       	std	Y+18, r25	; 0x12
     782:	ab 8b       	std	Y+19, r26	; 0x13
     784:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     786:	69 89       	ldd	r22, Y+17	; 0x11
     788:	7a 89       	ldd	r23, Y+18	; 0x12
     78a:	8b 89       	ldd	r24, Y+19	; 0x13
     78c:	9c 89       	ldd	r25, Y+20	; 0x14
     78e:	20 e0       	ldi	r18, 0x00	; 0
     790:	30 e0       	ldi	r19, 0x00	; 0
     792:	40 e8       	ldi	r20, 0x80	; 128
     794:	5f e3       	ldi	r21, 0x3F	; 63
     796:	0e 94 2f 0a 	call	0x145e	; 0x145e <__ltsf2>
     79a:	88 23       	and	r24, r24
     79c:	1c f4       	brge	.+6      	; 0x7a4 <step+0x246>
		__ticks = 1;
     79e:	81 e0       	ldi	r24, 0x01	; 1
     7a0:	88 8b       	std	Y+16, r24	; 0x10
     7a2:	91 c0       	rjmp	.+290    	; 0x8c6 <step+0x368>
	else if (__tmp > 255)
     7a4:	69 89       	ldd	r22, Y+17	; 0x11
     7a6:	7a 89       	ldd	r23, Y+18	; 0x12
     7a8:	8b 89       	ldd	r24, Y+19	; 0x13
     7aa:	9c 89       	ldd	r25, Y+20	; 0x14
     7ac:	20 e0       	ldi	r18, 0x00	; 0
     7ae:	30 e0       	ldi	r19, 0x00	; 0
     7b0:	4f e7       	ldi	r20, 0x7F	; 127
     7b2:	53 e4       	ldi	r21, 0x43	; 67
     7b4:	0e 94 cf 09 	call	0x139e	; 0x139e <__gtsf2>
     7b8:	18 16       	cp	r1, r24
     7ba:	0c f0       	brlt	.+2      	; 0x7be <step+0x260>
     7bc:	7b c0       	rjmp	.+246    	; 0x8b4 <step+0x356>
	{
		_delay_ms(__us / 1000.0);
     7be:	6d 89       	ldd	r22, Y+21	; 0x15
     7c0:	7e 89       	ldd	r23, Y+22	; 0x16
     7c2:	8f 89       	ldd	r24, Y+23	; 0x17
     7c4:	98 8d       	ldd	r25, Y+24	; 0x18
     7c6:	20 e0       	ldi	r18, 0x00	; 0
     7c8:	30 e0       	ldi	r19, 0x00	; 0
     7ca:	4a e7       	ldi	r20, 0x7A	; 122
     7cc:	54 e4       	ldi	r21, 0x44	; 68
     7ce:	0e 94 23 09 	call	0x1246	; 0x1246 <__divsf3>
     7d2:	dc 01       	movw	r26, r24
     7d4:	cb 01       	movw	r24, r22
     7d6:	8c 87       	std	Y+12, r24	; 0x0c
     7d8:	9d 87       	std	Y+13, r25	; 0x0d
     7da:	ae 87       	std	Y+14, r26	; 0x0e
     7dc:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     7de:	6c 85       	ldd	r22, Y+12	; 0x0c
     7e0:	7d 85       	ldd	r23, Y+13	; 0x0d
     7e2:	8e 85       	ldd	r24, Y+14	; 0x0e
     7e4:	9f 85       	ldd	r25, Y+15	; 0x0f
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	4a e7       	ldi	r20, 0x7A	; 122
     7ec:	55 e4       	ldi	r21, 0x45	; 69
     7ee:	0e 94 29 08 	call	0x1052	; 0x1052 <__mulsf3>
     7f2:	dc 01       	movw	r26, r24
     7f4:	cb 01       	movw	r24, r22
     7f6:	88 87       	std	Y+8, r24	; 0x08
     7f8:	99 87       	std	Y+9, r25	; 0x09
     7fa:	aa 87       	std	Y+10, r26	; 0x0a
     7fc:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
     7fe:	68 85       	ldd	r22, Y+8	; 0x08
     800:	79 85       	ldd	r23, Y+9	; 0x09
     802:	8a 85       	ldd	r24, Y+10	; 0x0a
     804:	9b 85       	ldd	r25, Y+11	; 0x0b
     806:	20 e0       	ldi	r18, 0x00	; 0
     808:	30 e0       	ldi	r19, 0x00	; 0
     80a:	40 e8       	ldi	r20, 0x80	; 128
     80c:	5f e3       	ldi	r21, 0x3F	; 63
     80e:	0e 94 2f 0a 	call	0x145e	; 0x145e <__ltsf2>
     812:	88 23       	and	r24, r24
     814:	2c f4       	brge	.+10     	; 0x820 <step+0x2c2>
		__ticks = 1;
     816:	81 e0       	ldi	r24, 0x01	; 1
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	9f 83       	std	Y+7, r25	; 0x07
     81c:	8e 83       	std	Y+6, r24	; 0x06
     81e:	3f c0       	rjmp	.+126    	; 0x89e <step+0x340>
	else if (__tmp > 65535)
     820:	68 85       	ldd	r22, Y+8	; 0x08
     822:	79 85       	ldd	r23, Y+9	; 0x09
     824:	8a 85       	ldd	r24, Y+10	; 0x0a
     826:	9b 85       	ldd	r25, Y+11	; 0x0b
     828:	20 e0       	ldi	r18, 0x00	; 0
     82a:	3f ef       	ldi	r19, 0xFF	; 255
     82c:	4f e7       	ldi	r20, 0x7F	; 127
     82e:	57 e4       	ldi	r21, 0x47	; 71
     830:	0e 94 cf 09 	call	0x139e	; 0x139e <__gtsf2>
     834:	18 16       	cp	r1, r24
     836:	4c f5       	brge	.+82     	; 0x88a <step+0x32c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     838:	6c 85       	ldd	r22, Y+12	; 0x0c
     83a:	7d 85       	ldd	r23, Y+13	; 0x0d
     83c:	8e 85       	ldd	r24, Y+14	; 0x0e
     83e:	9f 85       	ldd	r25, Y+15	; 0x0f
     840:	20 e0       	ldi	r18, 0x00	; 0
     842:	30 e0       	ldi	r19, 0x00	; 0
     844:	40 e2       	ldi	r20, 0x20	; 32
     846:	51 e4       	ldi	r21, 0x41	; 65
     848:	0e 94 29 08 	call	0x1052	; 0x1052 <__mulsf3>
     84c:	dc 01       	movw	r26, r24
     84e:	cb 01       	movw	r24, r22
     850:	bc 01       	movw	r22, r24
     852:	cd 01       	movw	r24, r26
     854:	0e 94 53 06 	call	0xca6	; 0xca6 <__fixunssfsi>
     858:	dc 01       	movw	r26, r24
     85a:	cb 01       	movw	r24, r22
     85c:	9f 83       	std	Y+7, r25	; 0x07
     85e:	8e 83       	std	Y+6, r24	; 0x06
     860:	0f c0       	rjmp	.+30     	; 0x880 <step+0x322>
     862:	80 e9       	ldi	r24, 0x90	; 144
     864:	91 e0       	ldi	r25, 0x01	; 1
     866:	9d 83       	std	Y+5, r25	; 0x05
     868:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     86a:	8c 81       	ldd	r24, Y+4	; 0x04
     86c:	9d 81       	ldd	r25, Y+5	; 0x05
     86e:	01 97       	sbiw	r24, 0x01	; 1
     870:	f1 f7       	brne	.-4      	; 0x86e <step+0x310>
     872:	9d 83       	std	Y+5, r25	; 0x05
     874:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     876:	8e 81       	ldd	r24, Y+6	; 0x06
     878:	9f 81       	ldd	r25, Y+7	; 0x07
     87a:	01 97       	sbiw	r24, 0x01	; 1
     87c:	9f 83       	std	Y+7, r25	; 0x07
     87e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     880:	8e 81       	ldd	r24, Y+6	; 0x06
     882:	9f 81       	ldd	r25, Y+7	; 0x07
     884:	00 97       	sbiw	r24, 0x00	; 0
     886:	69 f7       	brne	.-38     	; 0x862 <step+0x304>
     888:	24 c0       	rjmp	.+72     	; 0x8d2 <step+0x374>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     88a:	68 85       	ldd	r22, Y+8	; 0x08
     88c:	79 85       	ldd	r23, Y+9	; 0x09
     88e:	8a 85       	ldd	r24, Y+10	; 0x0a
     890:	9b 85       	ldd	r25, Y+11	; 0x0b
     892:	0e 94 53 06 	call	0xca6	; 0xca6 <__fixunssfsi>
     896:	dc 01       	movw	r26, r24
     898:	cb 01       	movw	r24, r22
     89a:	9f 83       	std	Y+7, r25	; 0x07
     89c:	8e 83       	std	Y+6, r24	; 0x06
     89e:	8e 81       	ldd	r24, Y+6	; 0x06
     8a0:	9f 81       	ldd	r25, Y+7	; 0x07
     8a2:	9b 83       	std	Y+3, r25	; 0x03
     8a4:	8a 83       	std	Y+2, r24	; 0x02
     8a6:	8a 81       	ldd	r24, Y+2	; 0x02
     8a8:	9b 81       	ldd	r25, Y+3	; 0x03
     8aa:	01 97       	sbiw	r24, 0x01	; 1
     8ac:	f1 f7       	brne	.-4      	; 0x8aa <step+0x34c>
     8ae:	9b 83       	std	Y+3, r25	; 0x03
     8b0:	8a 83       	std	Y+2, r24	; 0x02
     8b2:	0f c0       	rjmp	.+30     	; 0x8d2 <step+0x374>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     8b4:	69 89       	ldd	r22, Y+17	; 0x11
     8b6:	7a 89       	ldd	r23, Y+18	; 0x12
     8b8:	8b 89       	ldd	r24, Y+19	; 0x13
     8ba:	9c 89       	ldd	r25, Y+20	; 0x14
     8bc:	0e 94 53 06 	call	0xca6	; 0xca6 <__fixunssfsi>
     8c0:	dc 01       	movw	r26, r24
     8c2:	cb 01       	movw	r24, r22
     8c4:	88 8b       	std	Y+16, r24	; 0x10
     8c6:	88 89       	ldd	r24, Y+16	; 0x10
     8c8:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     8ca:	89 81       	ldd	r24, Y+1	; 0x01
     8cc:	8a 95       	dec	r24
     8ce:	f1 f7       	brne	.-4      	; 0x8cc <step+0x36e>
     8d0:	89 83       	std	Y+1, r24	; 0x01
            _delay_us(2);
}
     8d2:	eb 96       	adiw	r28, 0x3b	; 59
     8d4:	0f b6       	in	r0, 0x3f	; 63
     8d6:	f8 94       	cli
     8d8:	de bf       	out	0x3e, r29	; 62
     8da:	0f be       	out	0x3f, r0	; 63
     8dc:	cd bf       	out	0x3d, r28	; 61
     8de:	cf 91       	pop	r28
     8e0:	df 91       	pop	r29
     8e2:	1f 91       	pop	r17
     8e4:	0f 91       	pop	r16
     8e6:	ff 90       	pop	r15
     8e8:	ef 90       	pop	r14
     8ea:	08 95       	ret

000008ec <count_steps>:

void static count_steps(volatile struct stepper *stepperino)
{
     8ec:	df 93       	push	r29
     8ee:	cf 93       	push	r28
     8f0:	00 d0       	rcall	.+0      	; 0x8f2 <count_steps+0x6>
     8f2:	0f 92       	push	r0
     8f4:	cd b7       	in	r28, 0x3d	; 61
     8f6:	de b7       	in	r29, 0x3e	; 62
     8f8:	9a 83       	std	Y+2, r25	; 0x02
     8fa:	89 83       	std	Y+1, r24	; 0x01
    switch(stepperino->direction)
     8fc:	e9 81       	ldd	r30, Y+1	; 0x01
     8fe:	fa 81       	ldd	r31, Y+2	; 0x02
     900:	80 85       	ldd	r24, Z+8	; 0x08
     902:	28 2f       	mov	r18, r24
     904:	30 e0       	ldi	r19, 0x00	; 0
     906:	3c 83       	std	Y+4, r19	; 0x04
     908:	2b 83       	std	Y+3, r18	; 0x03
     90a:	8b 81       	ldd	r24, Y+3	; 0x03
     90c:	9c 81       	ldd	r25, Y+4	; 0x04
     90e:	81 30       	cpi	r24, 0x01	; 1
     910:	91 05       	cpc	r25, r1
     912:	79 f0       	breq	.+30     	; 0x932 <count_steps+0x46>
     914:	2b 81       	ldd	r18, Y+3	; 0x03
     916:	3c 81       	ldd	r19, Y+4	; 0x04
     918:	22 30       	cpi	r18, 0x02	; 2
     91a:	31 05       	cpc	r19, r1
     91c:	99 f4       	brne	.+38     	; 0x944 <count_steps+0x58>
        {
        case forward:
        stepperino->steps++;
     91e:	e9 81       	ldd	r30, Y+1	; 0x01
     920:	fa 81       	ldd	r31, Y+2	; 0x02
     922:	81 85       	ldd	r24, Z+9	; 0x09
     924:	92 85       	ldd	r25, Z+10	; 0x0a
     926:	01 96       	adiw	r24, 0x01	; 1
     928:	e9 81       	ldd	r30, Y+1	; 0x01
     92a:	fa 81       	ldd	r31, Y+2	; 0x02
     92c:	92 87       	std	Z+10, r25	; 0x0a
     92e:	81 87       	std	Z+9, r24	; 0x09
     930:	09 c0       	rjmp	.+18     	; 0x944 <count_steps+0x58>
        break;
        case backward:
        stepperino->steps--;
     932:	e9 81       	ldd	r30, Y+1	; 0x01
     934:	fa 81       	ldd	r31, Y+2	; 0x02
     936:	81 85       	ldd	r24, Z+9	; 0x09
     938:	92 85       	ldd	r25, Z+10	; 0x0a
     93a:	01 97       	sbiw	r24, 0x01	; 1
     93c:	e9 81       	ldd	r30, Y+1	; 0x01
     93e:	fa 81       	ldd	r31, Y+2	; 0x02
     940:	92 87       	std	Z+10, r25	; 0x0a
     942:	81 87       	std	Z+9, r24	; 0x09
        break;
        default:
        break;
        }
}
     944:	0f 90       	pop	r0
     946:	0f 90       	pop	r0
     948:	0f 90       	pop	r0
     94a:	0f 90       	pop	r0
     94c:	cf 91       	pop	r28
     94e:	df 91       	pop	r29
     950:	08 95       	ret

00000952 <Handle_steps>:

void Handle_steps(volatile struct stepper *stepper)
{
     952:	ef 92       	push	r14
     954:	ff 92       	push	r15
     956:	0f 93       	push	r16
     958:	1f 93       	push	r17
     95a:	df 93       	push	r29
     95c:	cf 93       	push	r28
     95e:	0f 92       	push	r0
     960:	0f 92       	push	r0
     962:	cd b7       	in	r28, 0x3d	; 61
     964:	de b7       	in	r29, 0x3e	; 62
     966:	9a 83       	std	Y+2, r25	; 0x02
     968:	89 83       	std	Y+1, r24	; 0x01
    if(stepper->current_speed == 0)
     96a:	e9 81       	ldd	r30, Y+1	; 0x01
     96c:	fa 81       	ldd	r31, Y+2	; 0x02
     96e:	87 81       	ldd	r24, Z+7	; 0x07
     970:	88 23       	and	r24, r24
     972:	09 f4       	brne	.+2      	; 0x976 <Handle_steps+0x24>
     974:	43 c0       	rjmp	.+134    	; 0x9fc <Handle_steps+0xaa>
    {

    }
    else if(ms >= (stepper->last_step + stepper->current_speed))
     976:	e9 81       	ldd	r30, Y+1	; 0x01
     978:	fa 81       	ldd	r31, Y+2	; 0x02
     97a:	22 81       	ldd	r18, Z+2	; 0x02
     97c:	33 81       	ldd	r19, Z+3	; 0x03
     97e:	44 81       	ldd	r20, Z+4	; 0x04
     980:	55 81       	ldd	r21, Z+5	; 0x05
     982:	e9 81       	ldd	r30, Y+1	; 0x01
     984:	fa 81       	ldd	r31, Y+2	; 0x02
     986:	87 81       	ldd	r24, Z+7	; 0x07
     988:	88 2f       	mov	r24, r24
     98a:	90 e0       	ldi	r25, 0x00	; 0
     98c:	a0 e0       	ldi	r26, 0x00	; 0
     98e:	b0 e0       	ldi	r27, 0x00	; 0
     990:	28 0f       	add	r18, r24
     992:	39 1f       	adc	r19, r25
     994:	4a 1f       	adc	r20, r26
     996:	5b 1f       	adc	r21, r27
     998:	80 91 1e 03 	lds	r24, 0x031E
     99c:	90 91 1f 03 	lds	r25, 0x031F
     9a0:	a0 91 20 03 	lds	r26, 0x0320
     9a4:	b0 91 21 03 	lds	r27, 0x0321
     9a8:	82 17       	cp	r24, r18
     9aa:	93 07       	cpc	r25, r19
     9ac:	a4 07       	cpc	r26, r20
     9ae:	b5 07       	cpc	r27, r21
     9b0:	2c f1       	brlt	.+74     	; 0x9fc <Handle_steps+0xaa>
    {
        step(*stepper);
     9b2:	e9 81       	ldd	r30, Y+1	; 0x01
     9b4:	fa 81       	ldd	r31, Y+2	; 0x02
     9b6:	e0 80       	ld	r14, Z
     9b8:	f1 80       	ldd	r15, Z+1	; 0x01
     9ba:	02 81       	ldd	r16, Z+2	; 0x02
     9bc:	13 81       	ldd	r17, Z+3	; 0x03
     9be:	24 81       	ldd	r18, Z+4	; 0x04
     9c0:	35 81       	ldd	r19, Z+5	; 0x05
     9c2:	46 81       	ldd	r20, Z+6	; 0x06
     9c4:	57 81       	ldd	r21, Z+7	; 0x07
     9c6:	60 85       	ldd	r22, Z+8	; 0x08
     9c8:	71 85       	ldd	r23, Z+9	; 0x09
     9ca:	82 85       	ldd	r24, Z+10	; 0x0a
     9cc:	0e 94 af 02 	call	0x55e	; 0x55e <step>
        accel_speed(stepper);
     9d0:	89 81       	ldd	r24, Y+1	; 0x01
     9d2:	9a 81       	ldd	r25, Y+2	; 0x02
     9d4:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <accel_speed>
        stepper->last_step = ms;
     9d8:	80 91 1e 03 	lds	r24, 0x031E
     9dc:	90 91 1f 03 	lds	r25, 0x031F
     9e0:	a0 91 20 03 	lds	r26, 0x0320
     9e4:	b0 91 21 03 	lds	r27, 0x0321
     9e8:	e9 81       	ldd	r30, Y+1	; 0x01
     9ea:	fa 81       	ldd	r31, Y+2	; 0x02
     9ec:	82 83       	std	Z+2, r24	; 0x02
     9ee:	93 83       	std	Z+3, r25	; 0x03
     9f0:	a4 83       	std	Z+4, r26	; 0x04
     9f2:	b5 83       	std	Z+5, r27	; 0x05
        count_steps(stepper);
     9f4:	89 81       	ldd	r24, Y+1	; 0x01
     9f6:	9a 81       	ldd	r25, Y+2	; 0x02
     9f8:	0e 94 76 04 	call	0x8ec	; 0x8ec <count_steps>

    }
}
     9fc:	0f 90       	pop	r0
     9fe:	0f 90       	pop	r0
     a00:	cf 91       	pop	r28
     a02:	df 91       	pop	r29
     a04:	1f 91       	pop	r17
     a06:	0f 91       	pop	r16
     a08:	ff 90       	pop	r15
     a0a:	ef 90       	pop	r14
     a0c:	08 95       	ret

00000a0e <turn>:

void turn(int16_t degrees, volatile struct stepper *stepperino1, volatile struct stepper *stepperino2)
{
     a0e:	df 93       	push	r29
     a10:	cf 93       	push	r28
     a12:	cd b7       	in	r28, 0x3d	; 61
     a14:	de b7       	in	r29, 0x3e	; 62
     a16:	e2 97       	sbiw	r28, 0x32	; 50
     a18:	0f b6       	in	r0, 0x3f	; 63
     a1a:	f8 94       	cli
     a1c:	de bf       	out	0x3e, r29	; 62
     a1e:	0f be       	out	0x3f, r0	; 63
     a20:	cd bf       	out	0x3d, r28	; 61
     a22:	9a 8f       	std	Y+26, r25	; 0x1a
     a24:	89 8f       	std	Y+25, r24	; 0x19
     a26:	7c 8f       	std	Y+28, r23	; 0x1c
     a28:	6b 8f       	std	Y+27, r22	; 0x1b
     a2a:	5e 8f       	std	Y+30, r21	; 0x1e
     a2c:	4d 8f       	std	Y+29, r20	; 0x1d
    int16_t turn_steps = (float)(0.55)*degrees * magic;
     a2e:	89 8d       	ldd	r24, Y+25	; 0x19
     a30:	9a 8d       	ldd	r25, Y+26	; 0x1a
     a32:	aa 27       	eor	r26, r26
     a34:	97 fd       	sbrc	r25, 7
     a36:	a0 95       	com	r26
     a38:	ba 2f       	mov	r27, r26
     a3a:	bc 01       	movw	r22, r24
     a3c:	cd 01       	movw	r24, r26
     a3e:	0e 94 5f 0a 	call	0x14be	; 0x14be <__floatsisf>
     a42:	dc 01       	movw	r26, r24
     a44:	cb 01       	movw	r24, r22
     a46:	bc 01       	movw	r22, r24
     a48:	cd 01       	movw	r24, r26
     a4a:	2d ec       	ldi	r18, 0xCD	; 205
     a4c:	3c ec       	ldi	r19, 0xCC	; 204
     a4e:	4c e0       	ldi	r20, 0x0C	; 12
     a50:	5f e3       	ldi	r21, 0x3F	; 63
     a52:	0e 94 29 08 	call	0x1052	; 0x1052 <__mulsf3>
     a56:	dc 01       	movw	r26, r24
     a58:	cb 01       	movw	r24, r22
     a5a:	bc 01       	movw	r22, r24
     a5c:	cd 01       	movw	r24, r26
     a5e:	20 e0       	ldi	r18, 0x00	; 0
     a60:	30 e0       	ldi	r19, 0x00	; 0
     a62:	40 e8       	ldi	r20, 0x80	; 128
     a64:	50 e4       	ldi	r21, 0x40	; 64
     a66:	0e 94 29 08 	call	0x1052	; 0x1052 <__mulsf3>
     a6a:	dc 01       	movw	r26, r24
     a6c:	cb 01       	movw	r24, r22
     a6e:	bc 01       	movw	r22, r24
     a70:	cd 01       	movw	r24, r26
     a72:	0e 94 bd 0a 	call	0x157a	; 0x157a <__fixsfsi>
     a76:	dc 01       	movw	r26, r24
     a78:	cb 01       	movw	r24, r22
     a7a:	9a 83       	std	Y+2, r25	; 0x02
     a7c:	89 83       	std	Y+1, r24	; 0x01
    struct stepper copy1 = *stepperino1;
     a7e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     a80:	9c 8d       	ldd	r25, Y+28	; 0x1c
     a82:	9e 01       	movw	r18, r28
     a84:	2d 5f       	subi	r18, 0xFD	; 253
     a86:	3f 4f       	sbci	r19, 0xFF	; 255
     a88:	38 a3       	std	Y+32, r19	; 0x20
     a8a:	2f 8f       	std	Y+31, r18	; 0x1f
     a8c:	9a a3       	std	Y+34, r25	; 0x22
     a8e:	89 a3       	std	Y+33, r24	; 0x21
     a90:	3b e0       	ldi	r19, 0x0B	; 11
     a92:	3b a3       	std	Y+35, r19	; 0x23
     a94:	e9 a1       	ldd	r30, Y+33	; 0x21
     a96:	fa a1       	ldd	r31, Y+34	; 0x22
     a98:	00 80       	ld	r0, Z
     a9a:	29 a1       	ldd	r18, Y+33	; 0x21
     a9c:	3a a1       	ldd	r19, Y+34	; 0x22
     a9e:	2f 5f       	subi	r18, 0xFF	; 255
     aa0:	3f 4f       	sbci	r19, 0xFF	; 255
     aa2:	3a a3       	std	Y+34, r19	; 0x22
     aa4:	29 a3       	std	Y+33, r18	; 0x21
     aa6:	ef 8d       	ldd	r30, Y+31	; 0x1f
     aa8:	f8 a1       	ldd	r31, Y+32	; 0x20
     aaa:	00 82       	st	Z, r0
     aac:	2f 8d       	ldd	r18, Y+31	; 0x1f
     aae:	38 a1       	ldd	r19, Y+32	; 0x20
     ab0:	2f 5f       	subi	r18, 0xFF	; 255
     ab2:	3f 4f       	sbci	r19, 0xFF	; 255
     ab4:	38 a3       	std	Y+32, r19	; 0x20
     ab6:	2f 8f       	std	Y+31, r18	; 0x1f
     ab8:	3b a1       	ldd	r19, Y+35	; 0x23
     aba:	31 50       	subi	r19, 0x01	; 1
     abc:	3b a3       	std	Y+35, r19	; 0x23
     abe:	8b a1       	ldd	r24, Y+35	; 0x23
     ac0:	88 23       	and	r24, r24
     ac2:	41 f7       	brne	.-48     	; 0xa94 <turn+0x86>
    struct stepper copy2 = *stepperino2;
     ac4:	8d 8d       	ldd	r24, Y+29	; 0x1d
     ac6:	9e 8d       	ldd	r25, Y+30	; 0x1e
     ac8:	fe 01       	movw	r30, r28
     aca:	3e 96       	adiw	r30, 0x0e	; 14
     acc:	fd a3       	std	Y+37, r31	; 0x25
     ace:	ec a3       	std	Y+36, r30	; 0x24
     ad0:	9f a3       	std	Y+39, r25	; 0x27
     ad2:	8e a3       	std	Y+38, r24	; 0x26
     ad4:	fb e0       	ldi	r31, 0x0B	; 11
     ad6:	f8 a7       	std	Y+40, r31	; 0x28
     ad8:	ee a1       	ldd	r30, Y+38	; 0x26
     ada:	ff a1       	ldd	r31, Y+39	; 0x27
     adc:	00 80       	ld	r0, Z
     ade:	2e a1       	ldd	r18, Y+38	; 0x26
     ae0:	3f a1       	ldd	r19, Y+39	; 0x27
     ae2:	2f 5f       	subi	r18, 0xFF	; 255
     ae4:	3f 4f       	sbci	r19, 0xFF	; 255
     ae6:	3f a3       	std	Y+39, r19	; 0x27
     ae8:	2e a3       	std	Y+38, r18	; 0x26
     aea:	ec a1       	ldd	r30, Y+36	; 0x24
     aec:	fd a1       	ldd	r31, Y+37	; 0x25
     aee:	00 82       	st	Z, r0
     af0:	2c a1       	ldd	r18, Y+36	; 0x24
     af2:	3d a1       	ldd	r19, Y+37	; 0x25
     af4:	2f 5f       	subi	r18, 0xFF	; 255
     af6:	3f 4f       	sbci	r19, 0xFF	; 255
     af8:	3d a3       	std	Y+37, r19	; 0x25
     afa:	2c a3       	std	Y+36, r18	; 0x24
     afc:	38 a5       	ldd	r19, Y+40	; 0x28
     afe:	31 50       	subi	r19, 0x01	; 1
     b00:	38 a7       	std	Y+40, r19	; 0x28
     b02:	88 a5       	ldd	r24, Y+40	; 0x28
     b04:	88 23       	and	r24, r24
     b06:	41 f7       	brne	.-48     	; 0xad8 <turn+0xca>

        stepperino1->target_speed = 10;
     b08:	eb 8d       	ldd	r30, Y+27	; 0x1b
     b0a:	fc 8d       	ldd	r31, Y+28	; 0x1c
     b0c:	8a e0       	ldi	r24, 0x0A	; 10
     b0e:	86 83       	std	Z+6, r24	; 0x06
        stepperino1->steps = 0;
     b10:	eb 8d       	ldd	r30, Y+27	; 0x1b
     b12:	fc 8d       	ldd	r31, Y+28	; 0x1c
     b14:	12 86       	std	Z+10, r1	; 0x0a
     b16:	11 86       	std	Z+9, r1	; 0x09
        stepperino2->target_speed = 10;
     b18:	ed 8d       	ldd	r30, Y+29	; 0x1d
     b1a:	fe 8d       	ldd	r31, Y+30	; 0x1e
     b1c:	8a e0       	ldi	r24, 0x0A	; 10
     b1e:	86 83       	std	Z+6, r24	; 0x06
        stepperino2->steps = 0;
     b20:	ed 8d       	ldd	r30, Y+29	; 0x1d
     b22:	fe 8d       	ldd	r31, Y+30	; 0x1e
     b24:	12 86       	std	Z+10, r1	; 0x0a
     b26:	11 86       	std	Z+9, r1	; 0x09

    if(turn_steps > 0)
     b28:	89 81       	ldd	r24, Y+1	; 0x01
     b2a:	9a 81       	ldd	r25, Y+2	; 0x02
     b2c:	18 16       	cp	r1, r24
     b2e:	19 06       	cpc	r1, r25
     b30:	3c f5       	brge	.+78     	; 0xb80 <turn+0x172>
    {
        turn_steps++;
     b32:	89 81       	ldd	r24, Y+1	; 0x01
     b34:	9a 81       	ldd	r25, Y+2	; 0x02
     b36:	01 96       	adiw	r24, 0x01	; 1
     b38:	9a 83       	std	Y+2, r25	; 0x02
     b3a:	89 83       	std	Y+1, r24	; 0x01
        stepperino1->direction = forward;
     b3c:	eb 8d       	ldd	r30, Y+27	; 0x1b
     b3e:	fc 8d       	ldd	r31, Y+28	; 0x1c
     b40:	82 e0       	ldi	r24, 0x02	; 2
     b42:	80 87       	std	Z+8, r24	; 0x08
        stepperino2->direction = forward;
     b44:	ed 8d       	ldd	r30, Y+29	; 0x1d
     b46:	fe 8d       	ldd	r31, Y+30	; 0x1e
     b48:	82 e0       	ldi	r24, 0x02	; 2
     b4a:	80 87       	std	Z+8, r24	; 0x08
        set_dir(stepperino1);
     b4c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     b4e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     b50:	0e 94 63 02 	call	0x4c6	; 0x4c6 <set_dir>
        set_dir(stepperino2);
     b54:	8d 8d       	ldd	r24, Y+29	; 0x1d
     b56:	9e 8d       	ldd	r25, Y+30	; 0x1e
     b58:	0e 94 63 02 	call	0x4c6	; 0x4c6 <set_dir>
     b5c:	08 c0       	rjmp	.+16     	; 0xb6e <turn+0x160>

        while(stepperino1->steps < (int)turn_steps)
        {
        Handle_steps(stepperino1);
     b5e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     b60:	9c 8d       	ldd	r25, Y+28	; 0x1c
     b62:	0e 94 a9 04 	call	0x952	; 0x952 <Handle_steps>
        Handle_steps(stepperino2);
     b66:	8d 8d       	ldd	r24, Y+29	; 0x1d
     b68:	9e 8d       	ldd	r25, Y+30	; 0x1e
     b6a:	0e 94 a9 04 	call	0x952	; 0x952 <Handle_steps>
        stepperino1->direction = forward;
        stepperino2->direction = forward;
        set_dir(stepperino1);
        set_dir(stepperino2);

        while(stepperino1->steps < (int)turn_steps)
     b6e:	eb 8d       	ldd	r30, Y+27	; 0x1b
     b70:	fc 8d       	ldd	r31, Y+28	; 0x1c
     b72:	21 85       	ldd	r18, Z+9	; 0x09
     b74:	32 85       	ldd	r19, Z+10	; 0x0a
     b76:	89 81       	ldd	r24, Y+1	; 0x01
     b78:	9a 81       	ldd	r25, Y+2	; 0x02
     b7a:	28 17       	cp	r18, r24
     b7c:	39 07       	cpc	r19, r25
     b7e:	7c f3       	brlt	.-34     	; 0xb5e <turn+0x150>
        Handle_steps(stepperino1);
        Handle_steps(stepperino2);
        }
    }

    if(turn_steps < 0)
     b80:	89 81       	ldd	r24, Y+1	; 0x01
     b82:	9a 81       	ldd	r25, Y+2	; 0x02
     b84:	99 23       	and	r25, r25
     b86:	3c f5       	brge	.+78     	; 0xbd6 <turn+0x1c8>
    {
        turn_steps--;
     b88:	89 81       	ldd	r24, Y+1	; 0x01
     b8a:	9a 81       	ldd	r25, Y+2	; 0x02
     b8c:	01 97       	sbiw	r24, 0x01	; 1
     b8e:	9a 83       	std	Y+2, r25	; 0x02
     b90:	89 83       	std	Y+1, r24	; 0x01
        stepperino1->direction = backward;
     b92:	eb 8d       	ldd	r30, Y+27	; 0x1b
     b94:	fc 8d       	ldd	r31, Y+28	; 0x1c
     b96:	81 e0       	ldi	r24, 0x01	; 1
     b98:	80 87       	std	Z+8, r24	; 0x08
        stepperino2->direction = backward;
     b9a:	ed 8d       	ldd	r30, Y+29	; 0x1d
     b9c:	fe 8d       	ldd	r31, Y+30	; 0x1e
     b9e:	81 e0       	ldi	r24, 0x01	; 1
     ba0:	80 87       	std	Z+8, r24	; 0x08
        set_dir(stepperino1);
     ba2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ba4:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ba6:	0e 94 63 02 	call	0x4c6	; 0x4c6 <set_dir>
        set_dir(stepperino2);
     baa:	8d 8d       	ldd	r24, Y+29	; 0x1d
     bac:	9e 8d       	ldd	r25, Y+30	; 0x1e
     bae:	0e 94 63 02 	call	0x4c6	; 0x4c6 <set_dir>
     bb2:	08 c0       	rjmp	.+16     	; 0xbc4 <turn+0x1b6>

        while(stepperino2->steps > turn_steps)
        {
        //transmit_byte(turn_steps);
        Handle_steps(stepperino1);
     bb4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     bb6:	9c 8d       	ldd	r25, Y+28	; 0x1c
     bb8:	0e 94 a9 04 	call	0x952	; 0x952 <Handle_steps>
        Handle_steps(stepperino2);
     bbc:	8d 8d       	ldd	r24, Y+29	; 0x1d
     bbe:	9e 8d       	ldd	r25, Y+30	; 0x1e
     bc0:	0e 94 a9 04 	call	0x952	; 0x952 <Handle_steps>
        stepperino1->direction = backward;
        stepperino2->direction = backward;
        set_dir(stepperino1);
        set_dir(stepperino2);

        while(stepperino2->steps > turn_steps)
     bc4:	ed 8d       	ldd	r30, Y+29	; 0x1d
     bc6:	fe 8d       	ldd	r31, Y+30	; 0x1e
     bc8:	21 85       	ldd	r18, Z+9	; 0x09
     bca:	32 85       	ldd	r19, Z+10	; 0x0a
     bcc:	89 81       	ldd	r24, Y+1	; 0x01
     bce:	9a 81       	ldd	r25, Y+2	; 0x02
     bd0:	82 17       	cp	r24, r18
     bd2:	93 07       	cpc	r25, r19
     bd4:	7c f3       	brlt	.-34     	; 0xbb4 <turn+0x1a6>
        //transmit_byte(turn_steps);
        Handle_steps(stepperino1);
        Handle_steps(stepperino2);
        }
    }
        *stepperino1 = copy1;
     bd6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     bd8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     bda:	9a a7       	std	Y+42, r25	; 0x2a
     bdc:	89 a7       	std	Y+41, r24	; 0x29
     bde:	fe 01       	movw	r30, r28
     be0:	33 96       	adiw	r30, 0x03	; 3
     be2:	fc a7       	std	Y+44, r31	; 0x2c
     be4:	eb a7       	std	Y+43, r30	; 0x2b
     be6:	fb e0       	ldi	r31, 0x0B	; 11
     be8:	fd a7       	std	Y+45, r31	; 0x2d
     bea:	eb a5       	ldd	r30, Y+43	; 0x2b
     bec:	fc a5       	ldd	r31, Y+44	; 0x2c
     bee:	00 80       	ld	r0, Z
     bf0:	2b a5       	ldd	r18, Y+43	; 0x2b
     bf2:	3c a5       	ldd	r19, Y+44	; 0x2c
     bf4:	2f 5f       	subi	r18, 0xFF	; 255
     bf6:	3f 4f       	sbci	r19, 0xFF	; 255
     bf8:	3c a7       	std	Y+44, r19	; 0x2c
     bfa:	2b a7       	std	Y+43, r18	; 0x2b
     bfc:	e9 a5       	ldd	r30, Y+41	; 0x29
     bfe:	fa a5       	ldd	r31, Y+42	; 0x2a
     c00:	00 82       	st	Z, r0
     c02:	29 a5       	ldd	r18, Y+41	; 0x29
     c04:	3a a5       	ldd	r19, Y+42	; 0x2a
     c06:	2f 5f       	subi	r18, 0xFF	; 255
     c08:	3f 4f       	sbci	r19, 0xFF	; 255
     c0a:	3a a7       	std	Y+42, r19	; 0x2a
     c0c:	29 a7       	std	Y+41, r18	; 0x29
     c0e:	3d a5       	ldd	r19, Y+45	; 0x2d
     c10:	31 50       	subi	r19, 0x01	; 1
     c12:	3d a7       	std	Y+45, r19	; 0x2d
     c14:	8d a5       	ldd	r24, Y+45	; 0x2d
     c16:	88 23       	and	r24, r24
     c18:	41 f7       	brne	.-48     	; 0xbea <turn+0x1dc>
        *stepperino2 = copy2;
     c1a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c1c:	9e 8d       	ldd	r25, Y+30	; 0x1e
     c1e:	9f a7       	std	Y+47, r25	; 0x2f
     c20:	8e a7       	std	Y+46, r24	; 0x2e
     c22:	fe 01       	movw	r30, r28
     c24:	3e 96       	adiw	r30, 0x0e	; 14
     c26:	f9 ab       	std	Y+49, r31	; 0x31
     c28:	e8 ab       	std	Y+48, r30	; 0x30
     c2a:	fb e0       	ldi	r31, 0x0B	; 11
     c2c:	fa ab       	std	Y+50, r31	; 0x32
     c2e:	e8 a9       	ldd	r30, Y+48	; 0x30
     c30:	f9 a9       	ldd	r31, Y+49	; 0x31
     c32:	00 80       	ld	r0, Z
     c34:	28 a9       	ldd	r18, Y+48	; 0x30
     c36:	39 a9       	ldd	r19, Y+49	; 0x31
     c38:	2f 5f       	subi	r18, 0xFF	; 255
     c3a:	3f 4f       	sbci	r19, 0xFF	; 255
     c3c:	39 ab       	std	Y+49, r19	; 0x31
     c3e:	28 ab       	std	Y+48, r18	; 0x30
     c40:	ee a5       	ldd	r30, Y+46	; 0x2e
     c42:	ff a5       	ldd	r31, Y+47	; 0x2f
     c44:	00 82       	st	Z, r0
     c46:	2e a5       	ldd	r18, Y+46	; 0x2e
     c48:	3f a5       	ldd	r19, Y+47	; 0x2f
     c4a:	2f 5f       	subi	r18, 0xFF	; 255
     c4c:	3f 4f       	sbci	r19, 0xFF	; 255
     c4e:	3f a7       	std	Y+47, r19	; 0x2f
     c50:	2e a7       	std	Y+46, r18	; 0x2e
     c52:	3a a9       	ldd	r19, Y+50	; 0x32
     c54:	31 50       	subi	r19, 0x01	; 1
     c56:	3a ab       	std	Y+50, r19	; 0x32
     c58:	8a a9       	ldd	r24, Y+50	; 0x32
     c5a:	88 23       	and	r24, r24
     c5c:	41 f7       	brne	.-48     	; 0xc2e <turn+0x220>
}
     c5e:	e2 96       	adiw	r28, 0x32	; 50
     c60:	0f b6       	in	r0, 0x3f	; 63
     c62:	f8 94       	cli
     c64:	de bf       	out	0x3e, r29	; 62
     c66:	0f be       	out	0x3f, r0	; 63
     c68:	cd bf       	out	0x3d, r28	; 61
     c6a:	cf 91       	pop	r28
     c6c:	df 91       	pop	r29
     c6e:	08 95       	ret

00000c70 <init_stepper_timer0>:

void init_stepper_timer0()
{
     c70:	df 93       	push	r29
     c72:	cf 93       	push	r28
     c74:	cd b7       	in	r28, 0x3d	; 61
     c76:	de b7       	in	r29, 0x3e	; 62
    TCCR0A |= (0<<WGM01) | (0<<WGM00);
     c78:	a4 e4       	ldi	r26, 0x44	; 68
     c7a:	b0 e0       	ldi	r27, 0x00	; 0
     c7c:	e4 e4       	ldi	r30, 0x44	; 68
     c7e:	f0 e0       	ldi	r31, 0x00	; 0
     c80:	80 81       	ld	r24, Z
     c82:	8c 93       	st	X, r24
    TCCR0B |= (0<<WGM02) | (1<<CS02) | (0<<CS01) | (0<<CS00);
     c84:	a5 e4       	ldi	r26, 0x45	; 69
     c86:	b0 e0       	ldi	r27, 0x00	; 0
     c88:	e5 e4       	ldi	r30, 0x45	; 69
     c8a:	f0 e0       	ldi	r31, 0x00	; 0
     c8c:	80 81       	ld	r24, Z
     c8e:	84 60       	ori	r24, 0x04	; 4
     c90:	8c 93       	st	X, r24
    TIMSK0 |= (1<<TOIE0);
     c92:	ae e6       	ldi	r26, 0x6E	; 110
     c94:	b0 e0       	ldi	r27, 0x00	; 0
     c96:	ee e6       	ldi	r30, 0x6E	; 110
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	80 81       	ld	r24, Z
     c9c:	81 60       	ori	r24, 0x01	; 1
     c9e:	8c 93       	st	X, r24
}
     ca0:	cf 91       	pop	r28
     ca2:	df 91       	pop	r29
     ca4:	08 95       	ret

00000ca6 <__fixunssfsi>:
     ca6:	ef 92       	push	r14
     ca8:	ff 92       	push	r15
     caa:	0f 93       	push	r16
     cac:	1f 93       	push	r17
     cae:	7b 01       	movw	r14, r22
     cb0:	8c 01       	movw	r16, r24
     cb2:	20 e0       	ldi	r18, 0x00	; 0
     cb4:	30 e0       	ldi	r19, 0x00	; 0
     cb6:	40 e0       	ldi	r20, 0x00	; 0
     cb8:	5f e4       	ldi	r21, 0x4F	; 79
     cba:	0e 94 ff 09 	call	0x13fe	; 0x13fe <__gesf2>
     cbe:	88 23       	and	r24, r24
     cc0:	8c f0       	brlt	.+34     	; 0xce4 <__fixunssfsi+0x3e>
     cc2:	c8 01       	movw	r24, r16
     cc4:	b7 01       	movw	r22, r14
     cc6:	20 e0       	ldi	r18, 0x00	; 0
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	40 e0       	ldi	r20, 0x00	; 0
     ccc:	5f e4       	ldi	r21, 0x4F	; 79
     cce:	0e 94 cb 07 	call	0xf96	; 0xf96 <__subsf3>
     cd2:	0e 94 bd 0a 	call	0x157a	; 0x157a <__fixsfsi>
     cd6:	9b 01       	movw	r18, r22
     cd8:	ac 01       	movw	r20, r24
     cda:	20 50       	subi	r18, 0x00	; 0
     cdc:	30 40       	sbci	r19, 0x00	; 0
     cde:	40 40       	sbci	r20, 0x00	; 0
     ce0:	50 48       	sbci	r21, 0x80	; 128
     ce2:	06 c0       	rjmp	.+12     	; 0xcf0 <__fixunssfsi+0x4a>
     ce4:	c8 01       	movw	r24, r16
     ce6:	b7 01       	movw	r22, r14
     ce8:	0e 94 bd 0a 	call	0x157a	; 0x157a <__fixsfsi>
     cec:	9b 01       	movw	r18, r22
     cee:	ac 01       	movw	r20, r24
     cf0:	b9 01       	movw	r22, r18
     cf2:	ca 01       	movw	r24, r20
     cf4:	1f 91       	pop	r17
     cf6:	0f 91       	pop	r16
     cf8:	ff 90       	pop	r15
     cfa:	ef 90       	pop	r14
     cfc:	08 95       	ret

00000cfe <_fpadd_parts>:
     cfe:	a0 e0       	ldi	r26, 0x00	; 0
     d00:	b0 e0       	ldi	r27, 0x00	; 0
     d02:	e5 e8       	ldi	r30, 0x85	; 133
     d04:	f6 e0       	ldi	r31, 0x06	; 6
     d06:	0c 94 43 0d 	jmp	0x1a86	; 0x1a86 <__prologue_saves__>
     d0a:	dc 01       	movw	r26, r24
     d0c:	2b 01       	movw	r4, r22
     d0e:	fa 01       	movw	r30, r20
     d10:	9c 91       	ld	r25, X
     d12:	92 30       	cpi	r25, 0x02	; 2
     d14:	08 f4       	brcc	.+2      	; 0xd18 <_fpadd_parts+0x1a>
     d16:	39 c1       	rjmp	.+626    	; 0xf8a <_fpadd_parts+0x28c>
     d18:	eb 01       	movw	r28, r22
     d1a:	88 81       	ld	r24, Y
     d1c:	82 30       	cpi	r24, 0x02	; 2
     d1e:	08 f4       	brcc	.+2      	; 0xd22 <_fpadd_parts+0x24>
     d20:	33 c1       	rjmp	.+614    	; 0xf88 <_fpadd_parts+0x28a>
     d22:	94 30       	cpi	r25, 0x04	; 4
     d24:	69 f4       	brne	.+26     	; 0xd40 <_fpadd_parts+0x42>
     d26:	84 30       	cpi	r24, 0x04	; 4
     d28:	09 f0       	breq	.+2      	; 0xd2c <_fpadd_parts+0x2e>
     d2a:	2f c1       	rjmp	.+606    	; 0xf8a <_fpadd_parts+0x28c>
     d2c:	11 96       	adiw	r26, 0x01	; 1
     d2e:	9c 91       	ld	r25, X
     d30:	11 97       	sbiw	r26, 0x01	; 1
     d32:	89 81       	ldd	r24, Y+1	; 0x01
     d34:	98 17       	cp	r25, r24
     d36:	09 f4       	brne	.+2      	; 0xd3a <_fpadd_parts+0x3c>
     d38:	28 c1       	rjmp	.+592    	; 0xf8a <_fpadd_parts+0x28c>
     d3a:	a0 e0       	ldi	r26, 0x00	; 0
     d3c:	b2 e0       	ldi	r27, 0x02	; 2
     d3e:	25 c1       	rjmp	.+586    	; 0xf8a <_fpadd_parts+0x28c>
     d40:	84 30       	cpi	r24, 0x04	; 4
     d42:	09 f4       	brne	.+2      	; 0xd46 <_fpadd_parts+0x48>
     d44:	21 c1       	rjmp	.+578    	; 0xf88 <_fpadd_parts+0x28a>
     d46:	82 30       	cpi	r24, 0x02	; 2
     d48:	a9 f4       	brne	.+42     	; 0xd74 <_fpadd_parts+0x76>
     d4a:	92 30       	cpi	r25, 0x02	; 2
     d4c:	09 f0       	breq	.+2      	; 0xd50 <_fpadd_parts+0x52>
     d4e:	1d c1       	rjmp	.+570    	; 0xf8a <_fpadd_parts+0x28c>
     d50:	9a 01       	movw	r18, r20
     d52:	ad 01       	movw	r20, r26
     d54:	88 e0       	ldi	r24, 0x08	; 8
     d56:	ea 01       	movw	r28, r20
     d58:	09 90       	ld	r0, Y+
     d5a:	ae 01       	movw	r20, r28
     d5c:	e9 01       	movw	r28, r18
     d5e:	09 92       	st	Y+, r0
     d60:	9e 01       	movw	r18, r28
     d62:	81 50       	subi	r24, 0x01	; 1
     d64:	c1 f7       	brne	.-16     	; 0xd56 <_fpadd_parts+0x58>
     d66:	e2 01       	movw	r28, r4
     d68:	89 81       	ldd	r24, Y+1	; 0x01
     d6a:	11 96       	adiw	r26, 0x01	; 1
     d6c:	9c 91       	ld	r25, X
     d6e:	89 23       	and	r24, r25
     d70:	81 83       	std	Z+1, r24	; 0x01
     d72:	08 c1       	rjmp	.+528    	; 0xf84 <_fpadd_parts+0x286>
     d74:	92 30       	cpi	r25, 0x02	; 2
     d76:	09 f4       	brne	.+2      	; 0xd7a <_fpadd_parts+0x7c>
     d78:	07 c1       	rjmp	.+526    	; 0xf88 <_fpadd_parts+0x28a>
     d7a:	12 96       	adiw	r26, 0x02	; 2
     d7c:	2d 90       	ld	r2, X+
     d7e:	3c 90       	ld	r3, X
     d80:	13 97       	sbiw	r26, 0x03	; 3
     d82:	eb 01       	movw	r28, r22
     d84:	8a 81       	ldd	r24, Y+2	; 0x02
     d86:	9b 81       	ldd	r25, Y+3	; 0x03
     d88:	14 96       	adiw	r26, 0x04	; 4
     d8a:	ad 90       	ld	r10, X+
     d8c:	bd 90       	ld	r11, X+
     d8e:	cd 90       	ld	r12, X+
     d90:	dc 90       	ld	r13, X
     d92:	17 97       	sbiw	r26, 0x07	; 7
     d94:	ec 80       	ldd	r14, Y+4	; 0x04
     d96:	fd 80       	ldd	r15, Y+5	; 0x05
     d98:	0e 81       	ldd	r16, Y+6	; 0x06
     d9a:	1f 81       	ldd	r17, Y+7	; 0x07
     d9c:	91 01       	movw	r18, r2
     d9e:	28 1b       	sub	r18, r24
     da0:	39 0b       	sbc	r19, r25
     da2:	b9 01       	movw	r22, r18
     da4:	37 ff       	sbrs	r19, 7
     da6:	04 c0       	rjmp	.+8      	; 0xdb0 <_fpadd_parts+0xb2>
     da8:	66 27       	eor	r22, r22
     daa:	77 27       	eor	r23, r23
     dac:	62 1b       	sub	r22, r18
     dae:	73 0b       	sbc	r23, r19
     db0:	60 32       	cpi	r22, 0x20	; 32
     db2:	71 05       	cpc	r23, r1
     db4:	0c f0       	brlt	.+2      	; 0xdb8 <_fpadd_parts+0xba>
     db6:	61 c0       	rjmp	.+194    	; 0xe7a <_fpadd_parts+0x17c>
     db8:	12 16       	cp	r1, r18
     dba:	13 06       	cpc	r1, r19
     dbc:	6c f5       	brge	.+90     	; 0xe18 <_fpadd_parts+0x11a>
     dbe:	37 01       	movw	r6, r14
     dc0:	48 01       	movw	r8, r16
     dc2:	06 2e       	mov	r0, r22
     dc4:	04 c0       	rjmp	.+8      	; 0xdce <_fpadd_parts+0xd0>
     dc6:	96 94       	lsr	r9
     dc8:	87 94       	ror	r8
     dca:	77 94       	ror	r7
     dcc:	67 94       	ror	r6
     dce:	0a 94       	dec	r0
     dd0:	d2 f7       	brpl	.-12     	; 0xdc6 <_fpadd_parts+0xc8>
     dd2:	21 e0       	ldi	r18, 0x01	; 1
     dd4:	30 e0       	ldi	r19, 0x00	; 0
     dd6:	40 e0       	ldi	r20, 0x00	; 0
     dd8:	50 e0       	ldi	r21, 0x00	; 0
     dda:	04 c0       	rjmp	.+8      	; 0xde4 <_fpadd_parts+0xe6>
     ddc:	22 0f       	add	r18, r18
     dde:	33 1f       	adc	r19, r19
     de0:	44 1f       	adc	r20, r20
     de2:	55 1f       	adc	r21, r21
     de4:	6a 95       	dec	r22
     de6:	d2 f7       	brpl	.-12     	; 0xddc <_fpadd_parts+0xde>
     de8:	21 50       	subi	r18, 0x01	; 1
     dea:	30 40       	sbci	r19, 0x00	; 0
     dec:	40 40       	sbci	r20, 0x00	; 0
     dee:	50 40       	sbci	r21, 0x00	; 0
     df0:	2e 21       	and	r18, r14
     df2:	3f 21       	and	r19, r15
     df4:	40 23       	and	r20, r16
     df6:	51 23       	and	r21, r17
     df8:	21 15       	cp	r18, r1
     dfa:	31 05       	cpc	r19, r1
     dfc:	41 05       	cpc	r20, r1
     dfe:	51 05       	cpc	r21, r1
     e00:	21 f0       	breq	.+8      	; 0xe0a <_fpadd_parts+0x10c>
     e02:	21 e0       	ldi	r18, 0x01	; 1
     e04:	30 e0       	ldi	r19, 0x00	; 0
     e06:	40 e0       	ldi	r20, 0x00	; 0
     e08:	50 e0       	ldi	r21, 0x00	; 0
     e0a:	79 01       	movw	r14, r18
     e0c:	8a 01       	movw	r16, r20
     e0e:	e6 28       	or	r14, r6
     e10:	f7 28       	or	r15, r7
     e12:	08 29       	or	r16, r8
     e14:	19 29       	or	r17, r9
     e16:	3c c0       	rjmp	.+120    	; 0xe90 <_fpadd_parts+0x192>
     e18:	23 2b       	or	r18, r19
     e1a:	d1 f1       	breq	.+116    	; 0xe90 <_fpadd_parts+0x192>
     e1c:	26 0e       	add	r2, r22
     e1e:	37 1e       	adc	r3, r23
     e20:	35 01       	movw	r6, r10
     e22:	46 01       	movw	r8, r12
     e24:	06 2e       	mov	r0, r22
     e26:	04 c0       	rjmp	.+8      	; 0xe30 <_fpadd_parts+0x132>
     e28:	96 94       	lsr	r9
     e2a:	87 94       	ror	r8
     e2c:	77 94       	ror	r7
     e2e:	67 94       	ror	r6
     e30:	0a 94       	dec	r0
     e32:	d2 f7       	brpl	.-12     	; 0xe28 <_fpadd_parts+0x12a>
     e34:	21 e0       	ldi	r18, 0x01	; 1
     e36:	30 e0       	ldi	r19, 0x00	; 0
     e38:	40 e0       	ldi	r20, 0x00	; 0
     e3a:	50 e0       	ldi	r21, 0x00	; 0
     e3c:	04 c0       	rjmp	.+8      	; 0xe46 <_fpadd_parts+0x148>
     e3e:	22 0f       	add	r18, r18
     e40:	33 1f       	adc	r19, r19
     e42:	44 1f       	adc	r20, r20
     e44:	55 1f       	adc	r21, r21
     e46:	6a 95       	dec	r22
     e48:	d2 f7       	brpl	.-12     	; 0xe3e <_fpadd_parts+0x140>
     e4a:	21 50       	subi	r18, 0x01	; 1
     e4c:	30 40       	sbci	r19, 0x00	; 0
     e4e:	40 40       	sbci	r20, 0x00	; 0
     e50:	50 40       	sbci	r21, 0x00	; 0
     e52:	2a 21       	and	r18, r10
     e54:	3b 21       	and	r19, r11
     e56:	4c 21       	and	r20, r12
     e58:	5d 21       	and	r21, r13
     e5a:	21 15       	cp	r18, r1
     e5c:	31 05       	cpc	r19, r1
     e5e:	41 05       	cpc	r20, r1
     e60:	51 05       	cpc	r21, r1
     e62:	21 f0       	breq	.+8      	; 0xe6c <_fpadd_parts+0x16e>
     e64:	21 e0       	ldi	r18, 0x01	; 1
     e66:	30 e0       	ldi	r19, 0x00	; 0
     e68:	40 e0       	ldi	r20, 0x00	; 0
     e6a:	50 e0       	ldi	r21, 0x00	; 0
     e6c:	59 01       	movw	r10, r18
     e6e:	6a 01       	movw	r12, r20
     e70:	a6 28       	or	r10, r6
     e72:	b7 28       	or	r11, r7
     e74:	c8 28       	or	r12, r8
     e76:	d9 28       	or	r13, r9
     e78:	0b c0       	rjmp	.+22     	; 0xe90 <_fpadd_parts+0x192>
     e7a:	82 15       	cp	r24, r2
     e7c:	93 05       	cpc	r25, r3
     e7e:	2c f0       	brlt	.+10     	; 0xe8a <_fpadd_parts+0x18c>
     e80:	1c 01       	movw	r2, r24
     e82:	aa 24       	eor	r10, r10
     e84:	bb 24       	eor	r11, r11
     e86:	65 01       	movw	r12, r10
     e88:	03 c0       	rjmp	.+6      	; 0xe90 <_fpadd_parts+0x192>
     e8a:	ee 24       	eor	r14, r14
     e8c:	ff 24       	eor	r15, r15
     e8e:	87 01       	movw	r16, r14
     e90:	11 96       	adiw	r26, 0x01	; 1
     e92:	9c 91       	ld	r25, X
     e94:	d2 01       	movw	r26, r4
     e96:	11 96       	adiw	r26, 0x01	; 1
     e98:	8c 91       	ld	r24, X
     e9a:	98 17       	cp	r25, r24
     e9c:	09 f4       	brne	.+2      	; 0xea0 <_fpadd_parts+0x1a2>
     e9e:	45 c0       	rjmp	.+138    	; 0xf2a <_fpadd_parts+0x22c>
     ea0:	99 23       	and	r25, r25
     ea2:	39 f0       	breq	.+14     	; 0xeb2 <_fpadd_parts+0x1b4>
     ea4:	a8 01       	movw	r20, r16
     ea6:	97 01       	movw	r18, r14
     ea8:	2a 19       	sub	r18, r10
     eaa:	3b 09       	sbc	r19, r11
     eac:	4c 09       	sbc	r20, r12
     eae:	5d 09       	sbc	r21, r13
     eb0:	06 c0       	rjmp	.+12     	; 0xebe <_fpadd_parts+0x1c0>
     eb2:	a6 01       	movw	r20, r12
     eb4:	95 01       	movw	r18, r10
     eb6:	2e 19       	sub	r18, r14
     eb8:	3f 09       	sbc	r19, r15
     eba:	40 0b       	sbc	r20, r16
     ebc:	51 0b       	sbc	r21, r17
     ebe:	57 fd       	sbrc	r21, 7
     ec0:	08 c0       	rjmp	.+16     	; 0xed2 <_fpadd_parts+0x1d4>
     ec2:	11 82       	std	Z+1, r1	; 0x01
     ec4:	33 82       	std	Z+3, r3	; 0x03
     ec6:	22 82       	std	Z+2, r2	; 0x02
     ec8:	24 83       	std	Z+4, r18	; 0x04
     eca:	35 83       	std	Z+5, r19	; 0x05
     ecc:	46 83       	std	Z+6, r20	; 0x06
     ece:	57 83       	std	Z+7, r21	; 0x07
     ed0:	1d c0       	rjmp	.+58     	; 0xf0c <_fpadd_parts+0x20e>
     ed2:	81 e0       	ldi	r24, 0x01	; 1
     ed4:	81 83       	std	Z+1, r24	; 0x01
     ed6:	33 82       	std	Z+3, r3	; 0x03
     ed8:	22 82       	std	Z+2, r2	; 0x02
     eda:	88 27       	eor	r24, r24
     edc:	99 27       	eor	r25, r25
     ede:	dc 01       	movw	r26, r24
     ee0:	82 1b       	sub	r24, r18
     ee2:	93 0b       	sbc	r25, r19
     ee4:	a4 0b       	sbc	r26, r20
     ee6:	b5 0b       	sbc	r27, r21
     ee8:	84 83       	std	Z+4, r24	; 0x04
     eea:	95 83       	std	Z+5, r25	; 0x05
     eec:	a6 83       	std	Z+6, r26	; 0x06
     eee:	b7 83       	std	Z+7, r27	; 0x07
     ef0:	0d c0       	rjmp	.+26     	; 0xf0c <_fpadd_parts+0x20e>
     ef2:	22 0f       	add	r18, r18
     ef4:	33 1f       	adc	r19, r19
     ef6:	44 1f       	adc	r20, r20
     ef8:	55 1f       	adc	r21, r21
     efa:	24 83       	std	Z+4, r18	; 0x04
     efc:	35 83       	std	Z+5, r19	; 0x05
     efe:	46 83       	std	Z+6, r20	; 0x06
     f00:	57 83       	std	Z+7, r21	; 0x07
     f02:	82 81       	ldd	r24, Z+2	; 0x02
     f04:	93 81       	ldd	r25, Z+3	; 0x03
     f06:	01 97       	sbiw	r24, 0x01	; 1
     f08:	93 83       	std	Z+3, r25	; 0x03
     f0a:	82 83       	std	Z+2, r24	; 0x02
     f0c:	24 81       	ldd	r18, Z+4	; 0x04
     f0e:	35 81       	ldd	r19, Z+5	; 0x05
     f10:	46 81       	ldd	r20, Z+6	; 0x06
     f12:	57 81       	ldd	r21, Z+7	; 0x07
     f14:	da 01       	movw	r26, r20
     f16:	c9 01       	movw	r24, r18
     f18:	01 97       	sbiw	r24, 0x01	; 1
     f1a:	a1 09       	sbc	r26, r1
     f1c:	b1 09       	sbc	r27, r1
     f1e:	8f 5f       	subi	r24, 0xFF	; 255
     f20:	9f 4f       	sbci	r25, 0xFF	; 255
     f22:	af 4f       	sbci	r26, 0xFF	; 255
     f24:	bf 43       	sbci	r27, 0x3F	; 63
     f26:	28 f3       	brcs	.-54     	; 0xef2 <_fpadd_parts+0x1f4>
     f28:	0b c0       	rjmp	.+22     	; 0xf40 <_fpadd_parts+0x242>
     f2a:	91 83       	std	Z+1, r25	; 0x01
     f2c:	33 82       	std	Z+3, r3	; 0x03
     f2e:	22 82       	std	Z+2, r2	; 0x02
     f30:	ea 0c       	add	r14, r10
     f32:	fb 1c       	adc	r15, r11
     f34:	0c 1d       	adc	r16, r12
     f36:	1d 1d       	adc	r17, r13
     f38:	e4 82       	std	Z+4, r14	; 0x04
     f3a:	f5 82       	std	Z+5, r15	; 0x05
     f3c:	06 83       	std	Z+6, r16	; 0x06
     f3e:	17 83       	std	Z+7, r17	; 0x07
     f40:	83 e0       	ldi	r24, 0x03	; 3
     f42:	80 83       	st	Z, r24
     f44:	24 81       	ldd	r18, Z+4	; 0x04
     f46:	35 81       	ldd	r19, Z+5	; 0x05
     f48:	46 81       	ldd	r20, Z+6	; 0x06
     f4a:	57 81       	ldd	r21, Z+7	; 0x07
     f4c:	57 ff       	sbrs	r21, 7
     f4e:	1a c0       	rjmp	.+52     	; 0xf84 <_fpadd_parts+0x286>
     f50:	c9 01       	movw	r24, r18
     f52:	aa 27       	eor	r26, r26
     f54:	97 fd       	sbrc	r25, 7
     f56:	a0 95       	com	r26
     f58:	ba 2f       	mov	r27, r26
     f5a:	81 70       	andi	r24, 0x01	; 1
     f5c:	90 70       	andi	r25, 0x00	; 0
     f5e:	a0 70       	andi	r26, 0x00	; 0
     f60:	b0 70       	andi	r27, 0x00	; 0
     f62:	56 95       	lsr	r21
     f64:	47 95       	ror	r20
     f66:	37 95       	ror	r19
     f68:	27 95       	ror	r18
     f6a:	82 2b       	or	r24, r18
     f6c:	93 2b       	or	r25, r19
     f6e:	a4 2b       	or	r26, r20
     f70:	b5 2b       	or	r27, r21
     f72:	84 83       	std	Z+4, r24	; 0x04
     f74:	95 83       	std	Z+5, r25	; 0x05
     f76:	a6 83       	std	Z+6, r26	; 0x06
     f78:	b7 83       	std	Z+7, r27	; 0x07
     f7a:	82 81       	ldd	r24, Z+2	; 0x02
     f7c:	93 81       	ldd	r25, Z+3	; 0x03
     f7e:	01 96       	adiw	r24, 0x01	; 1
     f80:	93 83       	std	Z+3, r25	; 0x03
     f82:	82 83       	std	Z+2, r24	; 0x02
     f84:	df 01       	movw	r26, r30
     f86:	01 c0       	rjmp	.+2      	; 0xf8a <_fpadd_parts+0x28c>
     f88:	d2 01       	movw	r26, r4
     f8a:	cd 01       	movw	r24, r26
     f8c:	cd b7       	in	r28, 0x3d	; 61
     f8e:	de b7       	in	r29, 0x3e	; 62
     f90:	e2 e1       	ldi	r30, 0x12	; 18
     f92:	0c 94 5f 0d 	jmp	0x1abe	; 0x1abe <__epilogue_restores__>

00000f96 <__subsf3>:
     f96:	a0 e2       	ldi	r26, 0x20	; 32
     f98:	b0 e0       	ldi	r27, 0x00	; 0
     f9a:	e1 ed       	ldi	r30, 0xD1	; 209
     f9c:	f7 e0       	ldi	r31, 0x07	; 7
     f9e:	0c 94 4f 0d 	jmp	0x1a9e	; 0x1a9e <__prologue_saves__+0x18>
     fa2:	69 83       	std	Y+1, r22	; 0x01
     fa4:	7a 83       	std	Y+2, r23	; 0x02
     fa6:	8b 83       	std	Y+3, r24	; 0x03
     fa8:	9c 83       	std	Y+4, r25	; 0x04
     faa:	2d 83       	std	Y+5, r18	; 0x05
     fac:	3e 83       	std	Y+6, r19	; 0x06
     fae:	4f 83       	std	Y+7, r20	; 0x07
     fb0:	58 87       	std	Y+8, r21	; 0x08
     fb2:	e9 e0       	ldi	r30, 0x09	; 9
     fb4:	ee 2e       	mov	r14, r30
     fb6:	f1 2c       	mov	r15, r1
     fb8:	ec 0e       	add	r14, r28
     fba:	fd 1e       	adc	r15, r29
     fbc:	ce 01       	movw	r24, r28
     fbe:	01 96       	adiw	r24, 0x01	; 1
     fc0:	b7 01       	movw	r22, r14
     fc2:	0e 94 35 0c 	call	0x186a	; 0x186a <__unpack_f>
     fc6:	8e 01       	movw	r16, r28
     fc8:	0f 5e       	subi	r16, 0xEF	; 239
     fca:	1f 4f       	sbci	r17, 0xFF	; 255
     fcc:	ce 01       	movw	r24, r28
     fce:	05 96       	adiw	r24, 0x05	; 5
     fd0:	b8 01       	movw	r22, r16
     fd2:	0e 94 35 0c 	call	0x186a	; 0x186a <__unpack_f>
     fd6:	8a 89       	ldd	r24, Y+18	; 0x12
     fd8:	91 e0       	ldi	r25, 0x01	; 1
     fda:	89 27       	eor	r24, r25
     fdc:	8a 8b       	std	Y+18, r24	; 0x12
     fde:	c7 01       	movw	r24, r14
     fe0:	b8 01       	movw	r22, r16
     fe2:	ae 01       	movw	r20, r28
     fe4:	47 5e       	subi	r20, 0xE7	; 231
     fe6:	5f 4f       	sbci	r21, 0xFF	; 255
     fe8:	0e 94 7f 06 	call	0xcfe	; 0xcfe <_fpadd_parts>
     fec:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <__pack_f>
     ff0:	a0 96       	adiw	r28, 0x20	; 32
     ff2:	e6 e0       	ldi	r30, 0x06	; 6
     ff4:	0c 94 6b 0d 	jmp	0x1ad6	; 0x1ad6 <__epilogue_restores__+0x18>

00000ff8 <__addsf3>:
     ff8:	a0 e2       	ldi	r26, 0x20	; 32
     ffa:	b0 e0       	ldi	r27, 0x00	; 0
     ffc:	e2 e0       	ldi	r30, 0x02	; 2
     ffe:	f8 e0       	ldi	r31, 0x08	; 8
    1000:	0c 94 4f 0d 	jmp	0x1a9e	; 0x1a9e <__prologue_saves__+0x18>
    1004:	69 83       	std	Y+1, r22	; 0x01
    1006:	7a 83       	std	Y+2, r23	; 0x02
    1008:	8b 83       	std	Y+3, r24	; 0x03
    100a:	9c 83       	std	Y+4, r25	; 0x04
    100c:	2d 83       	std	Y+5, r18	; 0x05
    100e:	3e 83       	std	Y+6, r19	; 0x06
    1010:	4f 83       	std	Y+7, r20	; 0x07
    1012:	58 87       	std	Y+8, r21	; 0x08
    1014:	f9 e0       	ldi	r31, 0x09	; 9
    1016:	ef 2e       	mov	r14, r31
    1018:	f1 2c       	mov	r15, r1
    101a:	ec 0e       	add	r14, r28
    101c:	fd 1e       	adc	r15, r29
    101e:	ce 01       	movw	r24, r28
    1020:	01 96       	adiw	r24, 0x01	; 1
    1022:	b7 01       	movw	r22, r14
    1024:	0e 94 35 0c 	call	0x186a	; 0x186a <__unpack_f>
    1028:	8e 01       	movw	r16, r28
    102a:	0f 5e       	subi	r16, 0xEF	; 239
    102c:	1f 4f       	sbci	r17, 0xFF	; 255
    102e:	ce 01       	movw	r24, r28
    1030:	05 96       	adiw	r24, 0x05	; 5
    1032:	b8 01       	movw	r22, r16
    1034:	0e 94 35 0c 	call	0x186a	; 0x186a <__unpack_f>
    1038:	c7 01       	movw	r24, r14
    103a:	b8 01       	movw	r22, r16
    103c:	ae 01       	movw	r20, r28
    103e:	47 5e       	subi	r20, 0xE7	; 231
    1040:	5f 4f       	sbci	r21, 0xFF	; 255
    1042:	0e 94 7f 06 	call	0xcfe	; 0xcfe <_fpadd_parts>
    1046:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <__pack_f>
    104a:	a0 96       	adiw	r28, 0x20	; 32
    104c:	e6 e0       	ldi	r30, 0x06	; 6
    104e:	0c 94 6b 0d 	jmp	0x1ad6	; 0x1ad6 <__epilogue_restores__+0x18>

00001052 <__mulsf3>:
    1052:	a0 e2       	ldi	r26, 0x20	; 32
    1054:	b0 e0       	ldi	r27, 0x00	; 0
    1056:	ef e2       	ldi	r30, 0x2F	; 47
    1058:	f8 e0       	ldi	r31, 0x08	; 8
    105a:	0c 94 43 0d 	jmp	0x1a86	; 0x1a86 <__prologue_saves__>
    105e:	69 83       	std	Y+1, r22	; 0x01
    1060:	7a 83       	std	Y+2, r23	; 0x02
    1062:	8b 83       	std	Y+3, r24	; 0x03
    1064:	9c 83       	std	Y+4, r25	; 0x04
    1066:	2d 83       	std	Y+5, r18	; 0x05
    1068:	3e 83       	std	Y+6, r19	; 0x06
    106a:	4f 83       	std	Y+7, r20	; 0x07
    106c:	58 87       	std	Y+8, r21	; 0x08
    106e:	ce 01       	movw	r24, r28
    1070:	01 96       	adiw	r24, 0x01	; 1
    1072:	be 01       	movw	r22, r28
    1074:	67 5f       	subi	r22, 0xF7	; 247
    1076:	7f 4f       	sbci	r23, 0xFF	; 255
    1078:	0e 94 35 0c 	call	0x186a	; 0x186a <__unpack_f>
    107c:	ce 01       	movw	r24, r28
    107e:	05 96       	adiw	r24, 0x05	; 5
    1080:	be 01       	movw	r22, r28
    1082:	6f 5e       	subi	r22, 0xEF	; 239
    1084:	7f 4f       	sbci	r23, 0xFF	; 255
    1086:	0e 94 35 0c 	call	0x186a	; 0x186a <__unpack_f>
    108a:	99 85       	ldd	r25, Y+9	; 0x09
    108c:	92 30       	cpi	r25, 0x02	; 2
    108e:	88 f0       	brcs	.+34     	; 0x10b2 <__mulsf3+0x60>
    1090:	89 89       	ldd	r24, Y+17	; 0x11
    1092:	82 30       	cpi	r24, 0x02	; 2
    1094:	c8 f0       	brcs	.+50     	; 0x10c8 <__mulsf3+0x76>
    1096:	94 30       	cpi	r25, 0x04	; 4
    1098:	19 f4       	brne	.+6      	; 0x10a0 <__mulsf3+0x4e>
    109a:	82 30       	cpi	r24, 0x02	; 2
    109c:	51 f4       	brne	.+20     	; 0x10b2 <__mulsf3+0x60>
    109e:	04 c0       	rjmp	.+8      	; 0x10a8 <__mulsf3+0x56>
    10a0:	84 30       	cpi	r24, 0x04	; 4
    10a2:	29 f4       	brne	.+10     	; 0x10ae <__mulsf3+0x5c>
    10a4:	92 30       	cpi	r25, 0x02	; 2
    10a6:	81 f4       	brne	.+32     	; 0x10c8 <__mulsf3+0x76>
    10a8:	80 e0       	ldi	r24, 0x00	; 0
    10aa:	92 e0       	ldi	r25, 0x02	; 2
    10ac:	c6 c0       	rjmp	.+396    	; 0x123a <__mulsf3+0x1e8>
    10ae:	92 30       	cpi	r25, 0x02	; 2
    10b0:	49 f4       	brne	.+18     	; 0x10c4 <__mulsf3+0x72>
    10b2:	20 e0       	ldi	r18, 0x00	; 0
    10b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    10b6:	8a 89       	ldd	r24, Y+18	; 0x12
    10b8:	98 13       	cpse	r25, r24
    10ba:	21 e0       	ldi	r18, 0x01	; 1
    10bc:	2a 87       	std	Y+10, r18	; 0x0a
    10be:	ce 01       	movw	r24, r28
    10c0:	09 96       	adiw	r24, 0x09	; 9
    10c2:	bb c0       	rjmp	.+374    	; 0x123a <__mulsf3+0x1e8>
    10c4:	82 30       	cpi	r24, 0x02	; 2
    10c6:	49 f4       	brne	.+18     	; 0x10da <__mulsf3+0x88>
    10c8:	20 e0       	ldi	r18, 0x00	; 0
    10ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    10cc:	8a 89       	ldd	r24, Y+18	; 0x12
    10ce:	98 13       	cpse	r25, r24
    10d0:	21 e0       	ldi	r18, 0x01	; 1
    10d2:	2a 8b       	std	Y+18, r18	; 0x12
    10d4:	ce 01       	movw	r24, r28
    10d6:	41 96       	adiw	r24, 0x11	; 17
    10d8:	b0 c0       	rjmp	.+352    	; 0x123a <__mulsf3+0x1e8>
    10da:	2d 84       	ldd	r2, Y+13	; 0x0d
    10dc:	3e 84       	ldd	r3, Y+14	; 0x0e
    10de:	4f 84       	ldd	r4, Y+15	; 0x0f
    10e0:	58 88       	ldd	r5, Y+16	; 0x10
    10e2:	6d 88       	ldd	r6, Y+21	; 0x15
    10e4:	7e 88       	ldd	r7, Y+22	; 0x16
    10e6:	8f 88       	ldd	r8, Y+23	; 0x17
    10e8:	98 8c       	ldd	r9, Y+24	; 0x18
    10ea:	ee 24       	eor	r14, r14
    10ec:	ff 24       	eor	r15, r15
    10ee:	87 01       	movw	r16, r14
    10f0:	aa 24       	eor	r10, r10
    10f2:	bb 24       	eor	r11, r11
    10f4:	65 01       	movw	r12, r10
    10f6:	40 e0       	ldi	r20, 0x00	; 0
    10f8:	50 e0       	ldi	r21, 0x00	; 0
    10fa:	60 e0       	ldi	r22, 0x00	; 0
    10fc:	70 e0       	ldi	r23, 0x00	; 0
    10fe:	e0 e0       	ldi	r30, 0x00	; 0
    1100:	f0 e0       	ldi	r31, 0x00	; 0
    1102:	c1 01       	movw	r24, r2
    1104:	81 70       	andi	r24, 0x01	; 1
    1106:	90 70       	andi	r25, 0x00	; 0
    1108:	89 2b       	or	r24, r25
    110a:	e9 f0       	breq	.+58     	; 0x1146 <__mulsf3+0xf4>
    110c:	e6 0c       	add	r14, r6
    110e:	f7 1c       	adc	r15, r7
    1110:	08 1d       	adc	r16, r8
    1112:	19 1d       	adc	r17, r9
    1114:	9a 01       	movw	r18, r20
    1116:	ab 01       	movw	r20, r22
    1118:	2a 0d       	add	r18, r10
    111a:	3b 1d       	adc	r19, r11
    111c:	4c 1d       	adc	r20, r12
    111e:	5d 1d       	adc	r21, r13
    1120:	80 e0       	ldi	r24, 0x00	; 0
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	a0 e0       	ldi	r26, 0x00	; 0
    1126:	b0 e0       	ldi	r27, 0x00	; 0
    1128:	e6 14       	cp	r14, r6
    112a:	f7 04       	cpc	r15, r7
    112c:	08 05       	cpc	r16, r8
    112e:	19 05       	cpc	r17, r9
    1130:	20 f4       	brcc	.+8      	; 0x113a <__mulsf3+0xe8>
    1132:	81 e0       	ldi	r24, 0x01	; 1
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	a0 e0       	ldi	r26, 0x00	; 0
    1138:	b0 e0       	ldi	r27, 0x00	; 0
    113a:	ba 01       	movw	r22, r20
    113c:	a9 01       	movw	r20, r18
    113e:	48 0f       	add	r20, r24
    1140:	59 1f       	adc	r21, r25
    1142:	6a 1f       	adc	r22, r26
    1144:	7b 1f       	adc	r23, r27
    1146:	aa 0c       	add	r10, r10
    1148:	bb 1c       	adc	r11, r11
    114a:	cc 1c       	adc	r12, r12
    114c:	dd 1c       	adc	r13, r13
    114e:	97 fe       	sbrs	r9, 7
    1150:	08 c0       	rjmp	.+16     	; 0x1162 <__mulsf3+0x110>
    1152:	81 e0       	ldi	r24, 0x01	; 1
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	a0 e0       	ldi	r26, 0x00	; 0
    1158:	b0 e0       	ldi	r27, 0x00	; 0
    115a:	a8 2a       	or	r10, r24
    115c:	b9 2a       	or	r11, r25
    115e:	ca 2a       	or	r12, r26
    1160:	db 2a       	or	r13, r27
    1162:	31 96       	adiw	r30, 0x01	; 1
    1164:	e0 32       	cpi	r30, 0x20	; 32
    1166:	f1 05       	cpc	r31, r1
    1168:	49 f0       	breq	.+18     	; 0x117c <__mulsf3+0x12a>
    116a:	66 0c       	add	r6, r6
    116c:	77 1c       	adc	r7, r7
    116e:	88 1c       	adc	r8, r8
    1170:	99 1c       	adc	r9, r9
    1172:	56 94       	lsr	r5
    1174:	47 94       	ror	r4
    1176:	37 94       	ror	r3
    1178:	27 94       	ror	r2
    117a:	c3 cf       	rjmp	.-122    	; 0x1102 <__mulsf3+0xb0>
    117c:	fa 85       	ldd	r31, Y+10	; 0x0a
    117e:	ea 89       	ldd	r30, Y+18	; 0x12
    1180:	2b 89       	ldd	r18, Y+19	; 0x13
    1182:	3c 89       	ldd	r19, Y+20	; 0x14
    1184:	8b 85       	ldd	r24, Y+11	; 0x0b
    1186:	9c 85       	ldd	r25, Y+12	; 0x0c
    1188:	28 0f       	add	r18, r24
    118a:	39 1f       	adc	r19, r25
    118c:	2e 5f       	subi	r18, 0xFE	; 254
    118e:	3f 4f       	sbci	r19, 0xFF	; 255
    1190:	17 c0       	rjmp	.+46     	; 0x11c0 <__mulsf3+0x16e>
    1192:	ca 01       	movw	r24, r20
    1194:	81 70       	andi	r24, 0x01	; 1
    1196:	90 70       	andi	r25, 0x00	; 0
    1198:	89 2b       	or	r24, r25
    119a:	61 f0       	breq	.+24     	; 0x11b4 <__mulsf3+0x162>
    119c:	16 95       	lsr	r17
    119e:	07 95       	ror	r16
    11a0:	f7 94       	ror	r15
    11a2:	e7 94       	ror	r14
    11a4:	80 e0       	ldi	r24, 0x00	; 0
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	a0 e0       	ldi	r26, 0x00	; 0
    11aa:	b0 e8       	ldi	r27, 0x80	; 128
    11ac:	e8 2a       	or	r14, r24
    11ae:	f9 2a       	or	r15, r25
    11b0:	0a 2b       	or	r16, r26
    11b2:	1b 2b       	or	r17, r27
    11b4:	76 95       	lsr	r23
    11b6:	67 95       	ror	r22
    11b8:	57 95       	ror	r21
    11ba:	47 95       	ror	r20
    11bc:	2f 5f       	subi	r18, 0xFF	; 255
    11be:	3f 4f       	sbci	r19, 0xFF	; 255
    11c0:	77 fd       	sbrc	r23, 7
    11c2:	e7 cf       	rjmp	.-50     	; 0x1192 <__mulsf3+0x140>
    11c4:	0c c0       	rjmp	.+24     	; 0x11de <__mulsf3+0x18c>
    11c6:	44 0f       	add	r20, r20
    11c8:	55 1f       	adc	r21, r21
    11ca:	66 1f       	adc	r22, r22
    11cc:	77 1f       	adc	r23, r23
    11ce:	17 fd       	sbrc	r17, 7
    11d0:	41 60       	ori	r20, 0x01	; 1
    11d2:	ee 0c       	add	r14, r14
    11d4:	ff 1c       	adc	r15, r15
    11d6:	00 1f       	adc	r16, r16
    11d8:	11 1f       	adc	r17, r17
    11da:	21 50       	subi	r18, 0x01	; 1
    11dc:	30 40       	sbci	r19, 0x00	; 0
    11de:	40 30       	cpi	r20, 0x00	; 0
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	59 07       	cpc	r21, r25
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	69 07       	cpc	r22, r25
    11e8:	90 e4       	ldi	r25, 0x40	; 64
    11ea:	79 07       	cpc	r23, r25
    11ec:	60 f3       	brcs	.-40     	; 0x11c6 <__mulsf3+0x174>
    11ee:	2b 8f       	std	Y+27, r18	; 0x1b
    11f0:	3c 8f       	std	Y+28, r19	; 0x1c
    11f2:	db 01       	movw	r26, r22
    11f4:	ca 01       	movw	r24, r20
    11f6:	8f 77       	andi	r24, 0x7F	; 127
    11f8:	90 70       	andi	r25, 0x00	; 0
    11fa:	a0 70       	andi	r26, 0x00	; 0
    11fc:	b0 70       	andi	r27, 0x00	; 0
    11fe:	80 34       	cpi	r24, 0x40	; 64
    1200:	91 05       	cpc	r25, r1
    1202:	a1 05       	cpc	r26, r1
    1204:	b1 05       	cpc	r27, r1
    1206:	61 f4       	brne	.+24     	; 0x1220 <__mulsf3+0x1ce>
    1208:	47 fd       	sbrc	r20, 7
    120a:	0a c0       	rjmp	.+20     	; 0x1220 <__mulsf3+0x1ce>
    120c:	e1 14       	cp	r14, r1
    120e:	f1 04       	cpc	r15, r1
    1210:	01 05       	cpc	r16, r1
    1212:	11 05       	cpc	r17, r1
    1214:	29 f0       	breq	.+10     	; 0x1220 <__mulsf3+0x1ce>
    1216:	40 5c       	subi	r20, 0xC0	; 192
    1218:	5f 4f       	sbci	r21, 0xFF	; 255
    121a:	6f 4f       	sbci	r22, 0xFF	; 255
    121c:	7f 4f       	sbci	r23, 0xFF	; 255
    121e:	40 78       	andi	r20, 0x80	; 128
    1220:	1a 8e       	std	Y+26, r1	; 0x1a
    1222:	fe 17       	cp	r31, r30
    1224:	11 f0       	breq	.+4      	; 0x122a <__mulsf3+0x1d8>
    1226:	81 e0       	ldi	r24, 0x01	; 1
    1228:	8a 8f       	std	Y+26, r24	; 0x1a
    122a:	4d 8f       	std	Y+29, r20	; 0x1d
    122c:	5e 8f       	std	Y+30, r21	; 0x1e
    122e:	6f 8f       	std	Y+31, r22	; 0x1f
    1230:	78 a3       	std	Y+32, r23	; 0x20
    1232:	83 e0       	ldi	r24, 0x03	; 3
    1234:	89 8f       	std	Y+25, r24	; 0x19
    1236:	ce 01       	movw	r24, r28
    1238:	49 96       	adiw	r24, 0x19	; 25
    123a:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <__pack_f>
    123e:	a0 96       	adiw	r28, 0x20	; 32
    1240:	e2 e1       	ldi	r30, 0x12	; 18
    1242:	0c 94 5f 0d 	jmp	0x1abe	; 0x1abe <__epilogue_restores__>

00001246 <__divsf3>:
    1246:	a8 e1       	ldi	r26, 0x18	; 24
    1248:	b0 e0       	ldi	r27, 0x00	; 0
    124a:	e9 e2       	ldi	r30, 0x29	; 41
    124c:	f9 e0       	ldi	r31, 0x09	; 9
    124e:	0c 94 4b 0d 	jmp	0x1a96	; 0x1a96 <__prologue_saves__+0x10>
    1252:	69 83       	std	Y+1, r22	; 0x01
    1254:	7a 83       	std	Y+2, r23	; 0x02
    1256:	8b 83       	std	Y+3, r24	; 0x03
    1258:	9c 83       	std	Y+4, r25	; 0x04
    125a:	2d 83       	std	Y+5, r18	; 0x05
    125c:	3e 83       	std	Y+6, r19	; 0x06
    125e:	4f 83       	std	Y+7, r20	; 0x07
    1260:	58 87       	std	Y+8, r21	; 0x08
    1262:	b9 e0       	ldi	r27, 0x09	; 9
    1264:	eb 2e       	mov	r14, r27
    1266:	f1 2c       	mov	r15, r1
    1268:	ec 0e       	add	r14, r28
    126a:	fd 1e       	adc	r15, r29
    126c:	ce 01       	movw	r24, r28
    126e:	01 96       	adiw	r24, 0x01	; 1
    1270:	b7 01       	movw	r22, r14
    1272:	0e 94 35 0c 	call	0x186a	; 0x186a <__unpack_f>
    1276:	8e 01       	movw	r16, r28
    1278:	0f 5e       	subi	r16, 0xEF	; 239
    127a:	1f 4f       	sbci	r17, 0xFF	; 255
    127c:	ce 01       	movw	r24, r28
    127e:	05 96       	adiw	r24, 0x05	; 5
    1280:	b8 01       	movw	r22, r16
    1282:	0e 94 35 0c 	call	0x186a	; 0x186a <__unpack_f>
    1286:	29 85       	ldd	r18, Y+9	; 0x09
    1288:	22 30       	cpi	r18, 0x02	; 2
    128a:	08 f4       	brcc	.+2      	; 0x128e <__divsf3+0x48>
    128c:	7e c0       	rjmp	.+252    	; 0x138a <__divsf3+0x144>
    128e:	39 89       	ldd	r19, Y+17	; 0x11
    1290:	32 30       	cpi	r19, 0x02	; 2
    1292:	10 f4       	brcc	.+4      	; 0x1298 <__divsf3+0x52>
    1294:	b8 01       	movw	r22, r16
    1296:	7c c0       	rjmp	.+248    	; 0x1390 <__divsf3+0x14a>
    1298:	8a 85       	ldd	r24, Y+10	; 0x0a
    129a:	9a 89       	ldd	r25, Y+18	; 0x12
    129c:	89 27       	eor	r24, r25
    129e:	8a 87       	std	Y+10, r24	; 0x0a
    12a0:	24 30       	cpi	r18, 0x04	; 4
    12a2:	11 f0       	breq	.+4      	; 0x12a8 <__divsf3+0x62>
    12a4:	22 30       	cpi	r18, 0x02	; 2
    12a6:	31 f4       	brne	.+12     	; 0x12b4 <__divsf3+0x6e>
    12a8:	23 17       	cp	r18, r19
    12aa:	09 f0       	breq	.+2      	; 0x12ae <__divsf3+0x68>
    12ac:	6e c0       	rjmp	.+220    	; 0x138a <__divsf3+0x144>
    12ae:	60 e0       	ldi	r22, 0x00	; 0
    12b0:	72 e0       	ldi	r23, 0x02	; 2
    12b2:	6e c0       	rjmp	.+220    	; 0x1390 <__divsf3+0x14a>
    12b4:	34 30       	cpi	r19, 0x04	; 4
    12b6:	39 f4       	brne	.+14     	; 0x12c6 <__divsf3+0x80>
    12b8:	1d 86       	std	Y+13, r1	; 0x0d
    12ba:	1e 86       	std	Y+14, r1	; 0x0e
    12bc:	1f 86       	std	Y+15, r1	; 0x0f
    12be:	18 8a       	std	Y+16, r1	; 0x10
    12c0:	1c 86       	std	Y+12, r1	; 0x0c
    12c2:	1b 86       	std	Y+11, r1	; 0x0b
    12c4:	04 c0       	rjmp	.+8      	; 0x12ce <__divsf3+0x88>
    12c6:	32 30       	cpi	r19, 0x02	; 2
    12c8:	21 f4       	brne	.+8      	; 0x12d2 <__divsf3+0x8c>
    12ca:	84 e0       	ldi	r24, 0x04	; 4
    12cc:	89 87       	std	Y+9, r24	; 0x09
    12ce:	b7 01       	movw	r22, r14
    12d0:	5f c0       	rjmp	.+190    	; 0x1390 <__divsf3+0x14a>
    12d2:	2b 85       	ldd	r18, Y+11	; 0x0b
    12d4:	3c 85       	ldd	r19, Y+12	; 0x0c
    12d6:	8b 89       	ldd	r24, Y+19	; 0x13
    12d8:	9c 89       	ldd	r25, Y+20	; 0x14
    12da:	28 1b       	sub	r18, r24
    12dc:	39 0b       	sbc	r19, r25
    12de:	3c 87       	std	Y+12, r19	; 0x0c
    12e0:	2b 87       	std	Y+11, r18	; 0x0b
    12e2:	ed 84       	ldd	r14, Y+13	; 0x0d
    12e4:	fe 84       	ldd	r15, Y+14	; 0x0e
    12e6:	0f 85       	ldd	r16, Y+15	; 0x0f
    12e8:	18 89       	ldd	r17, Y+16	; 0x10
    12ea:	ad 88       	ldd	r10, Y+21	; 0x15
    12ec:	be 88       	ldd	r11, Y+22	; 0x16
    12ee:	cf 88       	ldd	r12, Y+23	; 0x17
    12f0:	d8 8c       	ldd	r13, Y+24	; 0x18
    12f2:	ea 14       	cp	r14, r10
    12f4:	fb 04       	cpc	r15, r11
    12f6:	0c 05       	cpc	r16, r12
    12f8:	1d 05       	cpc	r17, r13
    12fa:	40 f4       	brcc	.+16     	; 0x130c <__divsf3+0xc6>
    12fc:	ee 0c       	add	r14, r14
    12fe:	ff 1c       	adc	r15, r15
    1300:	00 1f       	adc	r16, r16
    1302:	11 1f       	adc	r17, r17
    1304:	21 50       	subi	r18, 0x01	; 1
    1306:	30 40       	sbci	r19, 0x00	; 0
    1308:	3c 87       	std	Y+12, r19	; 0x0c
    130a:	2b 87       	std	Y+11, r18	; 0x0b
    130c:	20 e0       	ldi	r18, 0x00	; 0
    130e:	30 e0       	ldi	r19, 0x00	; 0
    1310:	40 e0       	ldi	r20, 0x00	; 0
    1312:	50 e0       	ldi	r21, 0x00	; 0
    1314:	80 e0       	ldi	r24, 0x00	; 0
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	a0 e0       	ldi	r26, 0x00	; 0
    131a:	b0 e4       	ldi	r27, 0x40	; 64
    131c:	60 e0       	ldi	r22, 0x00	; 0
    131e:	70 e0       	ldi	r23, 0x00	; 0
    1320:	ea 14       	cp	r14, r10
    1322:	fb 04       	cpc	r15, r11
    1324:	0c 05       	cpc	r16, r12
    1326:	1d 05       	cpc	r17, r13
    1328:	40 f0       	brcs	.+16     	; 0x133a <__divsf3+0xf4>
    132a:	28 2b       	or	r18, r24
    132c:	39 2b       	or	r19, r25
    132e:	4a 2b       	or	r20, r26
    1330:	5b 2b       	or	r21, r27
    1332:	ea 18       	sub	r14, r10
    1334:	fb 08       	sbc	r15, r11
    1336:	0c 09       	sbc	r16, r12
    1338:	1d 09       	sbc	r17, r13
    133a:	b6 95       	lsr	r27
    133c:	a7 95       	ror	r26
    133e:	97 95       	ror	r25
    1340:	87 95       	ror	r24
    1342:	ee 0c       	add	r14, r14
    1344:	ff 1c       	adc	r15, r15
    1346:	00 1f       	adc	r16, r16
    1348:	11 1f       	adc	r17, r17
    134a:	6f 5f       	subi	r22, 0xFF	; 255
    134c:	7f 4f       	sbci	r23, 0xFF	; 255
    134e:	6f 31       	cpi	r22, 0x1F	; 31
    1350:	71 05       	cpc	r23, r1
    1352:	31 f7       	brne	.-52     	; 0x1320 <__divsf3+0xda>
    1354:	da 01       	movw	r26, r20
    1356:	c9 01       	movw	r24, r18
    1358:	8f 77       	andi	r24, 0x7F	; 127
    135a:	90 70       	andi	r25, 0x00	; 0
    135c:	a0 70       	andi	r26, 0x00	; 0
    135e:	b0 70       	andi	r27, 0x00	; 0
    1360:	80 34       	cpi	r24, 0x40	; 64
    1362:	91 05       	cpc	r25, r1
    1364:	a1 05       	cpc	r26, r1
    1366:	b1 05       	cpc	r27, r1
    1368:	61 f4       	brne	.+24     	; 0x1382 <__divsf3+0x13c>
    136a:	27 fd       	sbrc	r18, 7
    136c:	0a c0       	rjmp	.+20     	; 0x1382 <__divsf3+0x13c>
    136e:	e1 14       	cp	r14, r1
    1370:	f1 04       	cpc	r15, r1
    1372:	01 05       	cpc	r16, r1
    1374:	11 05       	cpc	r17, r1
    1376:	29 f0       	breq	.+10     	; 0x1382 <__divsf3+0x13c>
    1378:	20 5c       	subi	r18, 0xC0	; 192
    137a:	3f 4f       	sbci	r19, 0xFF	; 255
    137c:	4f 4f       	sbci	r20, 0xFF	; 255
    137e:	5f 4f       	sbci	r21, 0xFF	; 255
    1380:	20 78       	andi	r18, 0x80	; 128
    1382:	2d 87       	std	Y+13, r18	; 0x0d
    1384:	3e 87       	std	Y+14, r19	; 0x0e
    1386:	4f 87       	std	Y+15, r20	; 0x0f
    1388:	58 8b       	std	Y+16, r21	; 0x10
    138a:	be 01       	movw	r22, r28
    138c:	67 5f       	subi	r22, 0xF7	; 247
    138e:	7f 4f       	sbci	r23, 0xFF	; 255
    1390:	cb 01       	movw	r24, r22
    1392:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <__pack_f>
    1396:	68 96       	adiw	r28, 0x18	; 24
    1398:	ea e0       	ldi	r30, 0x0A	; 10
    139a:	0c 94 67 0d 	jmp	0x1ace	; 0x1ace <__epilogue_restores__+0x10>

0000139e <__gtsf2>:
    139e:	a8 e1       	ldi	r26, 0x18	; 24
    13a0:	b0 e0       	ldi	r27, 0x00	; 0
    13a2:	e5 ed       	ldi	r30, 0xD5	; 213
    13a4:	f9 e0       	ldi	r31, 0x09	; 9
    13a6:	0c 94 4f 0d 	jmp	0x1a9e	; 0x1a9e <__prologue_saves__+0x18>
    13aa:	69 83       	std	Y+1, r22	; 0x01
    13ac:	7a 83       	std	Y+2, r23	; 0x02
    13ae:	8b 83       	std	Y+3, r24	; 0x03
    13b0:	9c 83       	std	Y+4, r25	; 0x04
    13b2:	2d 83       	std	Y+5, r18	; 0x05
    13b4:	3e 83       	std	Y+6, r19	; 0x06
    13b6:	4f 83       	std	Y+7, r20	; 0x07
    13b8:	58 87       	std	Y+8, r21	; 0x08
    13ba:	89 e0       	ldi	r24, 0x09	; 9
    13bc:	e8 2e       	mov	r14, r24
    13be:	f1 2c       	mov	r15, r1
    13c0:	ec 0e       	add	r14, r28
    13c2:	fd 1e       	adc	r15, r29
    13c4:	ce 01       	movw	r24, r28
    13c6:	01 96       	adiw	r24, 0x01	; 1
    13c8:	b7 01       	movw	r22, r14
    13ca:	0e 94 35 0c 	call	0x186a	; 0x186a <__unpack_f>
    13ce:	8e 01       	movw	r16, r28
    13d0:	0f 5e       	subi	r16, 0xEF	; 239
    13d2:	1f 4f       	sbci	r17, 0xFF	; 255
    13d4:	ce 01       	movw	r24, r28
    13d6:	05 96       	adiw	r24, 0x05	; 5
    13d8:	b8 01       	movw	r22, r16
    13da:	0e 94 35 0c 	call	0x186a	; 0x186a <__unpack_f>
    13de:	89 85       	ldd	r24, Y+9	; 0x09
    13e0:	82 30       	cpi	r24, 0x02	; 2
    13e2:	40 f0       	brcs	.+16     	; 0x13f4 <__gtsf2+0x56>
    13e4:	89 89       	ldd	r24, Y+17	; 0x11
    13e6:	82 30       	cpi	r24, 0x02	; 2
    13e8:	28 f0       	brcs	.+10     	; 0x13f4 <__gtsf2+0x56>
    13ea:	c7 01       	movw	r24, r14
    13ec:	b8 01       	movw	r22, r16
    13ee:	0e 94 ad 0c 	call	0x195a	; 0x195a <__fpcmp_parts_f>
    13f2:	01 c0       	rjmp	.+2      	; 0x13f6 <__gtsf2+0x58>
    13f4:	8f ef       	ldi	r24, 0xFF	; 255
    13f6:	68 96       	adiw	r28, 0x18	; 24
    13f8:	e6 e0       	ldi	r30, 0x06	; 6
    13fa:	0c 94 6b 0d 	jmp	0x1ad6	; 0x1ad6 <__epilogue_restores__+0x18>

000013fe <__gesf2>:
    13fe:	a8 e1       	ldi	r26, 0x18	; 24
    1400:	b0 e0       	ldi	r27, 0x00	; 0
    1402:	e5 e0       	ldi	r30, 0x05	; 5
    1404:	fa e0       	ldi	r31, 0x0A	; 10
    1406:	0c 94 4f 0d 	jmp	0x1a9e	; 0x1a9e <__prologue_saves__+0x18>
    140a:	69 83       	std	Y+1, r22	; 0x01
    140c:	7a 83       	std	Y+2, r23	; 0x02
    140e:	8b 83       	std	Y+3, r24	; 0x03
    1410:	9c 83       	std	Y+4, r25	; 0x04
    1412:	2d 83       	std	Y+5, r18	; 0x05
    1414:	3e 83       	std	Y+6, r19	; 0x06
    1416:	4f 83       	std	Y+7, r20	; 0x07
    1418:	58 87       	std	Y+8, r21	; 0x08
    141a:	89 e0       	ldi	r24, 0x09	; 9
    141c:	e8 2e       	mov	r14, r24
    141e:	f1 2c       	mov	r15, r1
    1420:	ec 0e       	add	r14, r28
    1422:	fd 1e       	adc	r15, r29
    1424:	ce 01       	movw	r24, r28
    1426:	01 96       	adiw	r24, 0x01	; 1
    1428:	b7 01       	movw	r22, r14
    142a:	0e 94 35 0c 	call	0x186a	; 0x186a <__unpack_f>
    142e:	8e 01       	movw	r16, r28
    1430:	0f 5e       	subi	r16, 0xEF	; 239
    1432:	1f 4f       	sbci	r17, 0xFF	; 255
    1434:	ce 01       	movw	r24, r28
    1436:	05 96       	adiw	r24, 0x05	; 5
    1438:	b8 01       	movw	r22, r16
    143a:	0e 94 35 0c 	call	0x186a	; 0x186a <__unpack_f>
    143e:	89 85       	ldd	r24, Y+9	; 0x09
    1440:	82 30       	cpi	r24, 0x02	; 2
    1442:	40 f0       	brcs	.+16     	; 0x1454 <__gesf2+0x56>
    1444:	89 89       	ldd	r24, Y+17	; 0x11
    1446:	82 30       	cpi	r24, 0x02	; 2
    1448:	28 f0       	brcs	.+10     	; 0x1454 <__gesf2+0x56>
    144a:	c7 01       	movw	r24, r14
    144c:	b8 01       	movw	r22, r16
    144e:	0e 94 ad 0c 	call	0x195a	; 0x195a <__fpcmp_parts_f>
    1452:	01 c0       	rjmp	.+2      	; 0x1456 <__gesf2+0x58>
    1454:	8f ef       	ldi	r24, 0xFF	; 255
    1456:	68 96       	adiw	r28, 0x18	; 24
    1458:	e6 e0       	ldi	r30, 0x06	; 6
    145a:	0c 94 6b 0d 	jmp	0x1ad6	; 0x1ad6 <__epilogue_restores__+0x18>

0000145e <__ltsf2>:
    145e:	a8 e1       	ldi	r26, 0x18	; 24
    1460:	b0 e0       	ldi	r27, 0x00	; 0
    1462:	e5 e3       	ldi	r30, 0x35	; 53
    1464:	fa e0       	ldi	r31, 0x0A	; 10
    1466:	0c 94 4f 0d 	jmp	0x1a9e	; 0x1a9e <__prologue_saves__+0x18>
    146a:	69 83       	std	Y+1, r22	; 0x01
    146c:	7a 83       	std	Y+2, r23	; 0x02
    146e:	8b 83       	std	Y+3, r24	; 0x03
    1470:	9c 83       	std	Y+4, r25	; 0x04
    1472:	2d 83       	std	Y+5, r18	; 0x05
    1474:	3e 83       	std	Y+6, r19	; 0x06
    1476:	4f 83       	std	Y+7, r20	; 0x07
    1478:	58 87       	std	Y+8, r21	; 0x08
    147a:	89 e0       	ldi	r24, 0x09	; 9
    147c:	e8 2e       	mov	r14, r24
    147e:	f1 2c       	mov	r15, r1
    1480:	ec 0e       	add	r14, r28
    1482:	fd 1e       	adc	r15, r29
    1484:	ce 01       	movw	r24, r28
    1486:	01 96       	adiw	r24, 0x01	; 1
    1488:	b7 01       	movw	r22, r14
    148a:	0e 94 35 0c 	call	0x186a	; 0x186a <__unpack_f>
    148e:	8e 01       	movw	r16, r28
    1490:	0f 5e       	subi	r16, 0xEF	; 239
    1492:	1f 4f       	sbci	r17, 0xFF	; 255
    1494:	ce 01       	movw	r24, r28
    1496:	05 96       	adiw	r24, 0x05	; 5
    1498:	b8 01       	movw	r22, r16
    149a:	0e 94 35 0c 	call	0x186a	; 0x186a <__unpack_f>
    149e:	89 85       	ldd	r24, Y+9	; 0x09
    14a0:	82 30       	cpi	r24, 0x02	; 2
    14a2:	40 f0       	brcs	.+16     	; 0x14b4 <__ltsf2+0x56>
    14a4:	89 89       	ldd	r24, Y+17	; 0x11
    14a6:	82 30       	cpi	r24, 0x02	; 2
    14a8:	28 f0       	brcs	.+10     	; 0x14b4 <__ltsf2+0x56>
    14aa:	c7 01       	movw	r24, r14
    14ac:	b8 01       	movw	r22, r16
    14ae:	0e 94 ad 0c 	call	0x195a	; 0x195a <__fpcmp_parts_f>
    14b2:	01 c0       	rjmp	.+2      	; 0x14b6 <__ltsf2+0x58>
    14b4:	81 e0       	ldi	r24, 0x01	; 1
    14b6:	68 96       	adiw	r28, 0x18	; 24
    14b8:	e6 e0       	ldi	r30, 0x06	; 6
    14ba:	0c 94 6b 0d 	jmp	0x1ad6	; 0x1ad6 <__epilogue_restores__+0x18>

000014be <__floatsisf>:
    14be:	a8 e0       	ldi	r26, 0x08	; 8
    14c0:	b0 e0       	ldi	r27, 0x00	; 0
    14c2:	e5 e6       	ldi	r30, 0x65	; 101
    14c4:	fa e0       	ldi	r31, 0x0A	; 10
    14c6:	0c 94 4c 0d 	jmp	0x1a98	; 0x1a98 <__prologue_saves__+0x12>
    14ca:	9b 01       	movw	r18, r22
    14cc:	ac 01       	movw	r20, r24
    14ce:	83 e0       	ldi	r24, 0x03	; 3
    14d0:	89 83       	std	Y+1, r24	; 0x01
    14d2:	da 01       	movw	r26, r20
    14d4:	c9 01       	movw	r24, r18
    14d6:	88 27       	eor	r24, r24
    14d8:	b7 fd       	sbrc	r27, 7
    14da:	83 95       	inc	r24
    14dc:	99 27       	eor	r25, r25
    14de:	aa 27       	eor	r26, r26
    14e0:	bb 27       	eor	r27, r27
    14e2:	b8 2e       	mov	r11, r24
    14e4:	21 15       	cp	r18, r1
    14e6:	31 05       	cpc	r19, r1
    14e8:	41 05       	cpc	r20, r1
    14ea:	51 05       	cpc	r21, r1
    14ec:	19 f4       	brne	.+6      	; 0x14f4 <__floatsisf+0x36>
    14ee:	82 e0       	ldi	r24, 0x02	; 2
    14f0:	89 83       	std	Y+1, r24	; 0x01
    14f2:	3a c0       	rjmp	.+116    	; 0x1568 <__floatsisf+0xaa>
    14f4:	88 23       	and	r24, r24
    14f6:	a9 f0       	breq	.+42     	; 0x1522 <__floatsisf+0x64>
    14f8:	20 30       	cpi	r18, 0x00	; 0
    14fa:	80 e0       	ldi	r24, 0x00	; 0
    14fc:	38 07       	cpc	r19, r24
    14fe:	80 e0       	ldi	r24, 0x00	; 0
    1500:	48 07       	cpc	r20, r24
    1502:	80 e8       	ldi	r24, 0x80	; 128
    1504:	58 07       	cpc	r21, r24
    1506:	29 f4       	brne	.+10     	; 0x1512 <__floatsisf+0x54>
    1508:	60 e0       	ldi	r22, 0x00	; 0
    150a:	70 e0       	ldi	r23, 0x00	; 0
    150c:	80 e0       	ldi	r24, 0x00	; 0
    150e:	9f ec       	ldi	r25, 0xCF	; 207
    1510:	30 c0       	rjmp	.+96     	; 0x1572 <__floatsisf+0xb4>
    1512:	ee 24       	eor	r14, r14
    1514:	ff 24       	eor	r15, r15
    1516:	87 01       	movw	r16, r14
    1518:	e2 1a       	sub	r14, r18
    151a:	f3 0a       	sbc	r15, r19
    151c:	04 0b       	sbc	r16, r20
    151e:	15 0b       	sbc	r17, r21
    1520:	02 c0       	rjmp	.+4      	; 0x1526 <__floatsisf+0x68>
    1522:	79 01       	movw	r14, r18
    1524:	8a 01       	movw	r16, r20
    1526:	8e e1       	ldi	r24, 0x1E	; 30
    1528:	c8 2e       	mov	r12, r24
    152a:	d1 2c       	mov	r13, r1
    152c:	dc 82       	std	Y+4, r13	; 0x04
    152e:	cb 82       	std	Y+3, r12	; 0x03
    1530:	ed 82       	std	Y+5, r14	; 0x05
    1532:	fe 82       	std	Y+6, r15	; 0x06
    1534:	0f 83       	std	Y+7, r16	; 0x07
    1536:	18 87       	std	Y+8, r17	; 0x08
    1538:	c8 01       	movw	r24, r16
    153a:	b7 01       	movw	r22, r14
    153c:	0e 94 11 0b 	call	0x1622	; 0x1622 <__clzsi2>
    1540:	01 97       	sbiw	r24, 0x01	; 1
    1542:	18 16       	cp	r1, r24
    1544:	19 06       	cpc	r1, r25
    1546:	84 f4       	brge	.+32     	; 0x1568 <__floatsisf+0xaa>
    1548:	08 2e       	mov	r0, r24
    154a:	04 c0       	rjmp	.+8      	; 0x1554 <__floatsisf+0x96>
    154c:	ee 0c       	add	r14, r14
    154e:	ff 1c       	adc	r15, r15
    1550:	00 1f       	adc	r16, r16
    1552:	11 1f       	adc	r17, r17
    1554:	0a 94       	dec	r0
    1556:	d2 f7       	brpl	.-12     	; 0x154c <__floatsisf+0x8e>
    1558:	ed 82       	std	Y+5, r14	; 0x05
    155a:	fe 82       	std	Y+6, r15	; 0x06
    155c:	0f 83       	std	Y+7, r16	; 0x07
    155e:	18 87       	std	Y+8, r17	; 0x08
    1560:	c8 1a       	sub	r12, r24
    1562:	d9 0a       	sbc	r13, r25
    1564:	dc 82       	std	Y+4, r13	; 0x04
    1566:	cb 82       	std	Y+3, r12	; 0x03
    1568:	ba 82       	std	Y+2, r11	; 0x02
    156a:	ce 01       	movw	r24, r28
    156c:	01 96       	adiw	r24, 0x01	; 1
    156e:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <__pack_f>
    1572:	28 96       	adiw	r28, 0x08	; 8
    1574:	e9 e0       	ldi	r30, 0x09	; 9
    1576:	0c 94 68 0d 	jmp	0x1ad0	; 0x1ad0 <__epilogue_restores__+0x12>

0000157a <__fixsfsi>:
    157a:	ac e0       	ldi	r26, 0x0C	; 12
    157c:	b0 e0       	ldi	r27, 0x00	; 0
    157e:	e3 ec       	ldi	r30, 0xC3	; 195
    1580:	fa e0       	ldi	r31, 0x0A	; 10
    1582:	0c 94 53 0d 	jmp	0x1aa6	; 0x1aa6 <__prologue_saves__+0x20>
    1586:	69 83       	std	Y+1, r22	; 0x01
    1588:	7a 83       	std	Y+2, r23	; 0x02
    158a:	8b 83       	std	Y+3, r24	; 0x03
    158c:	9c 83       	std	Y+4, r25	; 0x04
    158e:	ce 01       	movw	r24, r28
    1590:	01 96       	adiw	r24, 0x01	; 1
    1592:	be 01       	movw	r22, r28
    1594:	6b 5f       	subi	r22, 0xFB	; 251
    1596:	7f 4f       	sbci	r23, 0xFF	; 255
    1598:	0e 94 35 0c 	call	0x186a	; 0x186a <__unpack_f>
    159c:	8d 81       	ldd	r24, Y+5	; 0x05
    159e:	82 30       	cpi	r24, 0x02	; 2
    15a0:	61 f1       	breq	.+88     	; 0x15fa <__fixsfsi+0x80>
    15a2:	82 30       	cpi	r24, 0x02	; 2
    15a4:	50 f1       	brcs	.+84     	; 0x15fa <__fixsfsi+0x80>
    15a6:	84 30       	cpi	r24, 0x04	; 4
    15a8:	21 f4       	brne	.+8      	; 0x15b2 <__fixsfsi+0x38>
    15aa:	8e 81       	ldd	r24, Y+6	; 0x06
    15ac:	88 23       	and	r24, r24
    15ae:	51 f1       	breq	.+84     	; 0x1604 <__fixsfsi+0x8a>
    15b0:	2e c0       	rjmp	.+92     	; 0x160e <__fixsfsi+0x94>
    15b2:	2f 81       	ldd	r18, Y+7	; 0x07
    15b4:	38 85       	ldd	r19, Y+8	; 0x08
    15b6:	37 fd       	sbrc	r19, 7
    15b8:	20 c0       	rjmp	.+64     	; 0x15fa <__fixsfsi+0x80>
    15ba:	6e 81       	ldd	r22, Y+6	; 0x06
    15bc:	2f 31       	cpi	r18, 0x1F	; 31
    15be:	31 05       	cpc	r19, r1
    15c0:	1c f0       	brlt	.+6      	; 0x15c8 <__fixsfsi+0x4e>
    15c2:	66 23       	and	r22, r22
    15c4:	f9 f0       	breq	.+62     	; 0x1604 <__fixsfsi+0x8a>
    15c6:	23 c0       	rjmp	.+70     	; 0x160e <__fixsfsi+0x94>
    15c8:	8e e1       	ldi	r24, 0x1E	; 30
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	82 1b       	sub	r24, r18
    15ce:	93 0b       	sbc	r25, r19
    15d0:	29 85       	ldd	r18, Y+9	; 0x09
    15d2:	3a 85       	ldd	r19, Y+10	; 0x0a
    15d4:	4b 85       	ldd	r20, Y+11	; 0x0b
    15d6:	5c 85       	ldd	r21, Y+12	; 0x0c
    15d8:	04 c0       	rjmp	.+8      	; 0x15e2 <__fixsfsi+0x68>
    15da:	56 95       	lsr	r21
    15dc:	47 95       	ror	r20
    15de:	37 95       	ror	r19
    15e0:	27 95       	ror	r18
    15e2:	8a 95       	dec	r24
    15e4:	d2 f7       	brpl	.-12     	; 0x15da <__fixsfsi+0x60>
    15e6:	66 23       	and	r22, r22
    15e8:	b1 f0       	breq	.+44     	; 0x1616 <__fixsfsi+0x9c>
    15ea:	50 95       	com	r21
    15ec:	40 95       	com	r20
    15ee:	30 95       	com	r19
    15f0:	21 95       	neg	r18
    15f2:	3f 4f       	sbci	r19, 0xFF	; 255
    15f4:	4f 4f       	sbci	r20, 0xFF	; 255
    15f6:	5f 4f       	sbci	r21, 0xFF	; 255
    15f8:	0e c0       	rjmp	.+28     	; 0x1616 <__fixsfsi+0x9c>
    15fa:	20 e0       	ldi	r18, 0x00	; 0
    15fc:	30 e0       	ldi	r19, 0x00	; 0
    15fe:	40 e0       	ldi	r20, 0x00	; 0
    1600:	50 e0       	ldi	r21, 0x00	; 0
    1602:	09 c0       	rjmp	.+18     	; 0x1616 <__fixsfsi+0x9c>
    1604:	2f ef       	ldi	r18, 0xFF	; 255
    1606:	3f ef       	ldi	r19, 0xFF	; 255
    1608:	4f ef       	ldi	r20, 0xFF	; 255
    160a:	5f e7       	ldi	r21, 0x7F	; 127
    160c:	04 c0       	rjmp	.+8      	; 0x1616 <__fixsfsi+0x9c>
    160e:	20 e0       	ldi	r18, 0x00	; 0
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	40 e0       	ldi	r20, 0x00	; 0
    1614:	50 e8       	ldi	r21, 0x80	; 128
    1616:	b9 01       	movw	r22, r18
    1618:	ca 01       	movw	r24, r20
    161a:	2c 96       	adiw	r28, 0x0c	; 12
    161c:	e2 e0       	ldi	r30, 0x02	; 2
    161e:	0c 94 6f 0d 	jmp	0x1ade	; 0x1ade <__epilogue_restores__+0x20>

00001622 <__clzsi2>:
    1622:	ef 92       	push	r14
    1624:	ff 92       	push	r15
    1626:	0f 93       	push	r16
    1628:	1f 93       	push	r17
    162a:	7b 01       	movw	r14, r22
    162c:	8c 01       	movw	r16, r24
    162e:	80 e0       	ldi	r24, 0x00	; 0
    1630:	e8 16       	cp	r14, r24
    1632:	80 e0       	ldi	r24, 0x00	; 0
    1634:	f8 06       	cpc	r15, r24
    1636:	81 e0       	ldi	r24, 0x01	; 1
    1638:	08 07       	cpc	r16, r24
    163a:	80 e0       	ldi	r24, 0x00	; 0
    163c:	18 07       	cpc	r17, r24
    163e:	88 f4       	brcc	.+34     	; 0x1662 <__clzsi2+0x40>
    1640:	8f ef       	ldi	r24, 0xFF	; 255
    1642:	e8 16       	cp	r14, r24
    1644:	f1 04       	cpc	r15, r1
    1646:	01 05       	cpc	r16, r1
    1648:	11 05       	cpc	r17, r1
    164a:	31 f0       	breq	.+12     	; 0x1658 <__clzsi2+0x36>
    164c:	28 f0       	brcs	.+10     	; 0x1658 <__clzsi2+0x36>
    164e:	88 e0       	ldi	r24, 0x08	; 8
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	a0 e0       	ldi	r26, 0x00	; 0
    1654:	b0 e0       	ldi	r27, 0x00	; 0
    1656:	17 c0       	rjmp	.+46     	; 0x1686 <__clzsi2+0x64>
    1658:	80 e0       	ldi	r24, 0x00	; 0
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	a0 e0       	ldi	r26, 0x00	; 0
    165e:	b0 e0       	ldi	r27, 0x00	; 0
    1660:	12 c0       	rjmp	.+36     	; 0x1686 <__clzsi2+0x64>
    1662:	80 e0       	ldi	r24, 0x00	; 0
    1664:	e8 16       	cp	r14, r24
    1666:	80 e0       	ldi	r24, 0x00	; 0
    1668:	f8 06       	cpc	r15, r24
    166a:	80 e0       	ldi	r24, 0x00	; 0
    166c:	08 07       	cpc	r16, r24
    166e:	81 e0       	ldi	r24, 0x01	; 1
    1670:	18 07       	cpc	r17, r24
    1672:	28 f0       	brcs	.+10     	; 0x167e <__clzsi2+0x5c>
    1674:	88 e1       	ldi	r24, 0x18	; 24
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	a0 e0       	ldi	r26, 0x00	; 0
    167a:	b0 e0       	ldi	r27, 0x00	; 0
    167c:	04 c0       	rjmp	.+8      	; 0x1686 <__clzsi2+0x64>
    167e:	80 e1       	ldi	r24, 0x10	; 16
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	a0 e0       	ldi	r26, 0x00	; 0
    1684:	b0 e0       	ldi	r27, 0x00	; 0
    1686:	20 e2       	ldi	r18, 0x20	; 32
    1688:	30 e0       	ldi	r19, 0x00	; 0
    168a:	40 e0       	ldi	r20, 0x00	; 0
    168c:	50 e0       	ldi	r21, 0x00	; 0
    168e:	28 1b       	sub	r18, r24
    1690:	39 0b       	sbc	r19, r25
    1692:	4a 0b       	sbc	r20, r26
    1694:	5b 0b       	sbc	r21, r27
    1696:	04 c0       	rjmp	.+8      	; 0x16a0 <__clzsi2+0x7e>
    1698:	16 95       	lsr	r17
    169a:	07 95       	ror	r16
    169c:	f7 94       	ror	r15
    169e:	e7 94       	ror	r14
    16a0:	8a 95       	dec	r24
    16a2:	d2 f7       	brpl	.-12     	; 0x1698 <__clzsi2+0x76>
    16a4:	f7 01       	movw	r30, r14
    16a6:	e8 5f       	subi	r30, 0xF8	; 248
    16a8:	fd 4f       	sbci	r31, 0xFD	; 253
    16aa:	80 81       	ld	r24, Z
    16ac:	28 1b       	sub	r18, r24
    16ae:	31 09       	sbc	r19, r1
    16b0:	41 09       	sbc	r20, r1
    16b2:	51 09       	sbc	r21, r1
    16b4:	c9 01       	movw	r24, r18
    16b6:	1f 91       	pop	r17
    16b8:	0f 91       	pop	r16
    16ba:	ff 90       	pop	r15
    16bc:	ef 90       	pop	r14
    16be:	08 95       	ret

000016c0 <__pack_f>:
    16c0:	df 92       	push	r13
    16c2:	ef 92       	push	r14
    16c4:	ff 92       	push	r15
    16c6:	0f 93       	push	r16
    16c8:	1f 93       	push	r17
    16ca:	fc 01       	movw	r30, r24
    16cc:	e4 80       	ldd	r14, Z+4	; 0x04
    16ce:	f5 80       	ldd	r15, Z+5	; 0x05
    16d0:	06 81       	ldd	r16, Z+6	; 0x06
    16d2:	17 81       	ldd	r17, Z+7	; 0x07
    16d4:	d1 80       	ldd	r13, Z+1	; 0x01
    16d6:	80 81       	ld	r24, Z
    16d8:	82 30       	cpi	r24, 0x02	; 2
    16da:	48 f4       	brcc	.+18     	; 0x16ee <__pack_f+0x2e>
    16dc:	80 e0       	ldi	r24, 0x00	; 0
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	a0 e1       	ldi	r26, 0x10	; 16
    16e2:	b0 e0       	ldi	r27, 0x00	; 0
    16e4:	e8 2a       	or	r14, r24
    16e6:	f9 2a       	or	r15, r25
    16e8:	0a 2b       	or	r16, r26
    16ea:	1b 2b       	or	r17, r27
    16ec:	a5 c0       	rjmp	.+330    	; 0x1838 <__pack_f+0x178>
    16ee:	84 30       	cpi	r24, 0x04	; 4
    16f0:	09 f4       	brne	.+2      	; 0x16f4 <__pack_f+0x34>
    16f2:	9f c0       	rjmp	.+318    	; 0x1832 <__pack_f+0x172>
    16f4:	82 30       	cpi	r24, 0x02	; 2
    16f6:	21 f4       	brne	.+8      	; 0x1700 <__pack_f+0x40>
    16f8:	ee 24       	eor	r14, r14
    16fa:	ff 24       	eor	r15, r15
    16fc:	87 01       	movw	r16, r14
    16fe:	05 c0       	rjmp	.+10     	; 0x170a <__pack_f+0x4a>
    1700:	e1 14       	cp	r14, r1
    1702:	f1 04       	cpc	r15, r1
    1704:	01 05       	cpc	r16, r1
    1706:	11 05       	cpc	r17, r1
    1708:	19 f4       	brne	.+6      	; 0x1710 <__pack_f+0x50>
    170a:	e0 e0       	ldi	r30, 0x00	; 0
    170c:	f0 e0       	ldi	r31, 0x00	; 0
    170e:	96 c0       	rjmp	.+300    	; 0x183c <__pack_f+0x17c>
    1710:	62 81       	ldd	r22, Z+2	; 0x02
    1712:	73 81       	ldd	r23, Z+3	; 0x03
    1714:	9f ef       	ldi	r25, 0xFF	; 255
    1716:	62 38       	cpi	r22, 0x82	; 130
    1718:	79 07       	cpc	r23, r25
    171a:	0c f0       	brlt	.+2      	; 0x171e <__pack_f+0x5e>
    171c:	5b c0       	rjmp	.+182    	; 0x17d4 <__pack_f+0x114>
    171e:	22 e8       	ldi	r18, 0x82	; 130
    1720:	3f ef       	ldi	r19, 0xFF	; 255
    1722:	26 1b       	sub	r18, r22
    1724:	37 0b       	sbc	r19, r23
    1726:	2a 31       	cpi	r18, 0x1A	; 26
    1728:	31 05       	cpc	r19, r1
    172a:	2c f0       	brlt	.+10     	; 0x1736 <__pack_f+0x76>
    172c:	20 e0       	ldi	r18, 0x00	; 0
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	40 e0       	ldi	r20, 0x00	; 0
    1732:	50 e0       	ldi	r21, 0x00	; 0
    1734:	2a c0       	rjmp	.+84     	; 0x178a <__pack_f+0xca>
    1736:	b8 01       	movw	r22, r16
    1738:	a7 01       	movw	r20, r14
    173a:	02 2e       	mov	r0, r18
    173c:	04 c0       	rjmp	.+8      	; 0x1746 <__pack_f+0x86>
    173e:	76 95       	lsr	r23
    1740:	67 95       	ror	r22
    1742:	57 95       	ror	r21
    1744:	47 95       	ror	r20
    1746:	0a 94       	dec	r0
    1748:	d2 f7       	brpl	.-12     	; 0x173e <__pack_f+0x7e>
    174a:	81 e0       	ldi	r24, 0x01	; 1
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	a0 e0       	ldi	r26, 0x00	; 0
    1750:	b0 e0       	ldi	r27, 0x00	; 0
    1752:	04 c0       	rjmp	.+8      	; 0x175c <__pack_f+0x9c>
    1754:	88 0f       	add	r24, r24
    1756:	99 1f       	adc	r25, r25
    1758:	aa 1f       	adc	r26, r26
    175a:	bb 1f       	adc	r27, r27
    175c:	2a 95       	dec	r18
    175e:	d2 f7       	brpl	.-12     	; 0x1754 <__pack_f+0x94>
    1760:	01 97       	sbiw	r24, 0x01	; 1
    1762:	a1 09       	sbc	r26, r1
    1764:	b1 09       	sbc	r27, r1
    1766:	8e 21       	and	r24, r14
    1768:	9f 21       	and	r25, r15
    176a:	a0 23       	and	r26, r16
    176c:	b1 23       	and	r27, r17
    176e:	00 97       	sbiw	r24, 0x00	; 0
    1770:	a1 05       	cpc	r26, r1
    1772:	b1 05       	cpc	r27, r1
    1774:	21 f0       	breq	.+8      	; 0x177e <__pack_f+0xbe>
    1776:	81 e0       	ldi	r24, 0x01	; 1
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	a0 e0       	ldi	r26, 0x00	; 0
    177c:	b0 e0       	ldi	r27, 0x00	; 0
    177e:	9a 01       	movw	r18, r20
    1780:	ab 01       	movw	r20, r22
    1782:	28 2b       	or	r18, r24
    1784:	39 2b       	or	r19, r25
    1786:	4a 2b       	or	r20, r26
    1788:	5b 2b       	or	r21, r27
    178a:	da 01       	movw	r26, r20
    178c:	c9 01       	movw	r24, r18
    178e:	8f 77       	andi	r24, 0x7F	; 127
    1790:	90 70       	andi	r25, 0x00	; 0
    1792:	a0 70       	andi	r26, 0x00	; 0
    1794:	b0 70       	andi	r27, 0x00	; 0
    1796:	80 34       	cpi	r24, 0x40	; 64
    1798:	91 05       	cpc	r25, r1
    179a:	a1 05       	cpc	r26, r1
    179c:	b1 05       	cpc	r27, r1
    179e:	39 f4       	brne	.+14     	; 0x17ae <__pack_f+0xee>
    17a0:	27 ff       	sbrs	r18, 7
    17a2:	09 c0       	rjmp	.+18     	; 0x17b6 <__pack_f+0xf6>
    17a4:	20 5c       	subi	r18, 0xC0	; 192
    17a6:	3f 4f       	sbci	r19, 0xFF	; 255
    17a8:	4f 4f       	sbci	r20, 0xFF	; 255
    17aa:	5f 4f       	sbci	r21, 0xFF	; 255
    17ac:	04 c0       	rjmp	.+8      	; 0x17b6 <__pack_f+0xf6>
    17ae:	21 5c       	subi	r18, 0xC1	; 193
    17b0:	3f 4f       	sbci	r19, 0xFF	; 255
    17b2:	4f 4f       	sbci	r20, 0xFF	; 255
    17b4:	5f 4f       	sbci	r21, 0xFF	; 255
    17b6:	e0 e0       	ldi	r30, 0x00	; 0
    17b8:	f0 e0       	ldi	r31, 0x00	; 0
    17ba:	20 30       	cpi	r18, 0x00	; 0
    17bc:	a0 e0       	ldi	r26, 0x00	; 0
    17be:	3a 07       	cpc	r19, r26
    17c0:	a0 e0       	ldi	r26, 0x00	; 0
    17c2:	4a 07       	cpc	r20, r26
    17c4:	a0 e4       	ldi	r26, 0x40	; 64
    17c6:	5a 07       	cpc	r21, r26
    17c8:	10 f0       	brcs	.+4      	; 0x17ce <__pack_f+0x10e>
    17ca:	e1 e0       	ldi	r30, 0x01	; 1
    17cc:	f0 e0       	ldi	r31, 0x00	; 0
    17ce:	79 01       	movw	r14, r18
    17d0:	8a 01       	movw	r16, r20
    17d2:	27 c0       	rjmp	.+78     	; 0x1822 <__pack_f+0x162>
    17d4:	60 38       	cpi	r22, 0x80	; 128
    17d6:	71 05       	cpc	r23, r1
    17d8:	64 f5       	brge	.+88     	; 0x1832 <__pack_f+0x172>
    17da:	fb 01       	movw	r30, r22
    17dc:	e1 58       	subi	r30, 0x81	; 129
    17de:	ff 4f       	sbci	r31, 0xFF	; 255
    17e0:	d8 01       	movw	r26, r16
    17e2:	c7 01       	movw	r24, r14
    17e4:	8f 77       	andi	r24, 0x7F	; 127
    17e6:	90 70       	andi	r25, 0x00	; 0
    17e8:	a0 70       	andi	r26, 0x00	; 0
    17ea:	b0 70       	andi	r27, 0x00	; 0
    17ec:	80 34       	cpi	r24, 0x40	; 64
    17ee:	91 05       	cpc	r25, r1
    17f0:	a1 05       	cpc	r26, r1
    17f2:	b1 05       	cpc	r27, r1
    17f4:	39 f4       	brne	.+14     	; 0x1804 <__pack_f+0x144>
    17f6:	e7 fe       	sbrs	r14, 7
    17f8:	0d c0       	rjmp	.+26     	; 0x1814 <__pack_f+0x154>
    17fa:	80 e4       	ldi	r24, 0x40	; 64
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	a0 e0       	ldi	r26, 0x00	; 0
    1800:	b0 e0       	ldi	r27, 0x00	; 0
    1802:	04 c0       	rjmp	.+8      	; 0x180c <__pack_f+0x14c>
    1804:	8f e3       	ldi	r24, 0x3F	; 63
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	a0 e0       	ldi	r26, 0x00	; 0
    180a:	b0 e0       	ldi	r27, 0x00	; 0
    180c:	e8 0e       	add	r14, r24
    180e:	f9 1e       	adc	r15, r25
    1810:	0a 1f       	adc	r16, r26
    1812:	1b 1f       	adc	r17, r27
    1814:	17 ff       	sbrs	r17, 7
    1816:	05 c0       	rjmp	.+10     	; 0x1822 <__pack_f+0x162>
    1818:	16 95       	lsr	r17
    181a:	07 95       	ror	r16
    181c:	f7 94       	ror	r15
    181e:	e7 94       	ror	r14
    1820:	31 96       	adiw	r30, 0x01	; 1
    1822:	87 e0       	ldi	r24, 0x07	; 7
    1824:	16 95       	lsr	r17
    1826:	07 95       	ror	r16
    1828:	f7 94       	ror	r15
    182a:	e7 94       	ror	r14
    182c:	8a 95       	dec	r24
    182e:	d1 f7       	brne	.-12     	; 0x1824 <__pack_f+0x164>
    1830:	05 c0       	rjmp	.+10     	; 0x183c <__pack_f+0x17c>
    1832:	ee 24       	eor	r14, r14
    1834:	ff 24       	eor	r15, r15
    1836:	87 01       	movw	r16, r14
    1838:	ef ef       	ldi	r30, 0xFF	; 255
    183a:	f0 e0       	ldi	r31, 0x00	; 0
    183c:	6e 2f       	mov	r22, r30
    183e:	67 95       	ror	r22
    1840:	66 27       	eor	r22, r22
    1842:	67 95       	ror	r22
    1844:	90 2f       	mov	r25, r16
    1846:	9f 77       	andi	r25, 0x7F	; 127
    1848:	d7 94       	ror	r13
    184a:	dd 24       	eor	r13, r13
    184c:	d7 94       	ror	r13
    184e:	8e 2f       	mov	r24, r30
    1850:	86 95       	lsr	r24
    1852:	49 2f       	mov	r20, r25
    1854:	46 2b       	or	r20, r22
    1856:	58 2f       	mov	r21, r24
    1858:	5d 29       	or	r21, r13
    185a:	b7 01       	movw	r22, r14
    185c:	ca 01       	movw	r24, r20
    185e:	1f 91       	pop	r17
    1860:	0f 91       	pop	r16
    1862:	ff 90       	pop	r15
    1864:	ef 90       	pop	r14
    1866:	df 90       	pop	r13
    1868:	08 95       	ret

0000186a <__unpack_f>:
    186a:	fc 01       	movw	r30, r24
    186c:	db 01       	movw	r26, r22
    186e:	40 81       	ld	r20, Z
    1870:	51 81       	ldd	r21, Z+1	; 0x01
    1872:	22 81       	ldd	r18, Z+2	; 0x02
    1874:	62 2f       	mov	r22, r18
    1876:	6f 77       	andi	r22, 0x7F	; 127
    1878:	70 e0       	ldi	r23, 0x00	; 0
    187a:	22 1f       	adc	r18, r18
    187c:	22 27       	eor	r18, r18
    187e:	22 1f       	adc	r18, r18
    1880:	93 81       	ldd	r25, Z+3	; 0x03
    1882:	89 2f       	mov	r24, r25
    1884:	88 0f       	add	r24, r24
    1886:	82 2b       	or	r24, r18
    1888:	28 2f       	mov	r18, r24
    188a:	30 e0       	ldi	r19, 0x00	; 0
    188c:	99 1f       	adc	r25, r25
    188e:	99 27       	eor	r25, r25
    1890:	99 1f       	adc	r25, r25
    1892:	11 96       	adiw	r26, 0x01	; 1
    1894:	9c 93       	st	X, r25
    1896:	11 97       	sbiw	r26, 0x01	; 1
    1898:	21 15       	cp	r18, r1
    189a:	31 05       	cpc	r19, r1
    189c:	a9 f5       	brne	.+106    	; 0x1908 <__unpack_f+0x9e>
    189e:	41 15       	cp	r20, r1
    18a0:	51 05       	cpc	r21, r1
    18a2:	61 05       	cpc	r22, r1
    18a4:	71 05       	cpc	r23, r1
    18a6:	11 f4       	brne	.+4      	; 0x18ac <__unpack_f+0x42>
    18a8:	82 e0       	ldi	r24, 0x02	; 2
    18aa:	37 c0       	rjmp	.+110    	; 0x191a <__unpack_f+0xb0>
    18ac:	82 e8       	ldi	r24, 0x82	; 130
    18ae:	9f ef       	ldi	r25, 0xFF	; 255
    18b0:	13 96       	adiw	r26, 0x03	; 3
    18b2:	9c 93       	st	X, r25
    18b4:	8e 93       	st	-X, r24
    18b6:	12 97       	sbiw	r26, 0x02	; 2
    18b8:	9a 01       	movw	r18, r20
    18ba:	ab 01       	movw	r20, r22
    18bc:	67 e0       	ldi	r22, 0x07	; 7
    18be:	22 0f       	add	r18, r18
    18c0:	33 1f       	adc	r19, r19
    18c2:	44 1f       	adc	r20, r20
    18c4:	55 1f       	adc	r21, r21
    18c6:	6a 95       	dec	r22
    18c8:	d1 f7       	brne	.-12     	; 0x18be <__unpack_f+0x54>
    18ca:	83 e0       	ldi	r24, 0x03	; 3
    18cc:	8c 93       	st	X, r24
    18ce:	0d c0       	rjmp	.+26     	; 0x18ea <__unpack_f+0x80>
    18d0:	22 0f       	add	r18, r18
    18d2:	33 1f       	adc	r19, r19
    18d4:	44 1f       	adc	r20, r20
    18d6:	55 1f       	adc	r21, r21
    18d8:	12 96       	adiw	r26, 0x02	; 2
    18da:	8d 91       	ld	r24, X+
    18dc:	9c 91       	ld	r25, X
    18de:	13 97       	sbiw	r26, 0x03	; 3
    18e0:	01 97       	sbiw	r24, 0x01	; 1
    18e2:	13 96       	adiw	r26, 0x03	; 3
    18e4:	9c 93       	st	X, r25
    18e6:	8e 93       	st	-X, r24
    18e8:	12 97       	sbiw	r26, 0x02	; 2
    18ea:	20 30       	cpi	r18, 0x00	; 0
    18ec:	80 e0       	ldi	r24, 0x00	; 0
    18ee:	38 07       	cpc	r19, r24
    18f0:	80 e0       	ldi	r24, 0x00	; 0
    18f2:	48 07       	cpc	r20, r24
    18f4:	80 e4       	ldi	r24, 0x40	; 64
    18f6:	58 07       	cpc	r21, r24
    18f8:	58 f3       	brcs	.-42     	; 0x18d0 <__unpack_f+0x66>
    18fa:	14 96       	adiw	r26, 0x04	; 4
    18fc:	2d 93       	st	X+, r18
    18fe:	3d 93       	st	X+, r19
    1900:	4d 93       	st	X+, r20
    1902:	5c 93       	st	X, r21
    1904:	17 97       	sbiw	r26, 0x07	; 7
    1906:	08 95       	ret
    1908:	2f 3f       	cpi	r18, 0xFF	; 255
    190a:	31 05       	cpc	r19, r1
    190c:	79 f4       	brne	.+30     	; 0x192c <__unpack_f+0xc2>
    190e:	41 15       	cp	r20, r1
    1910:	51 05       	cpc	r21, r1
    1912:	61 05       	cpc	r22, r1
    1914:	71 05       	cpc	r23, r1
    1916:	19 f4       	brne	.+6      	; 0x191e <__unpack_f+0xb4>
    1918:	84 e0       	ldi	r24, 0x04	; 4
    191a:	8c 93       	st	X, r24
    191c:	08 95       	ret
    191e:	64 ff       	sbrs	r22, 4
    1920:	03 c0       	rjmp	.+6      	; 0x1928 <__unpack_f+0xbe>
    1922:	81 e0       	ldi	r24, 0x01	; 1
    1924:	8c 93       	st	X, r24
    1926:	12 c0       	rjmp	.+36     	; 0x194c <__unpack_f+0xe2>
    1928:	1c 92       	st	X, r1
    192a:	10 c0       	rjmp	.+32     	; 0x194c <__unpack_f+0xe2>
    192c:	2f 57       	subi	r18, 0x7F	; 127
    192e:	30 40       	sbci	r19, 0x00	; 0
    1930:	13 96       	adiw	r26, 0x03	; 3
    1932:	3c 93       	st	X, r19
    1934:	2e 93       	st	-X, r18
    1936:	12 97       	sbiw	r26, 0x02	; 2
    1938:	83 e0       	ldi	r24, 0x03	; 3
    193a:	8c 93       	st	X, r24
    193c:	87 e0       	ldi	r24, 0x07	; 7
    193e:	44 0f       	add	r20, r20
    1940:	55 1f       	adc	r21, r21
    1942:	66 1f       	adc	r22, r22
    1944:	77 1f       	adc	r23, r23
    1946:	8a 95       	dec	r24
    1948:	d1 f7       	brne	.-12     	; 0x193e <__unpack_f+0xd4>
    194a:	70 64       	ori	r23, 0x40	; 64
    194c:	14 96       	adiw	r26, 0x04	; 4
    194e:	4d 93       	st	X+, r20
    1950:	5d 93       	st	X+, r21
    1952:	6d 93       	st	X+, r22
    1954:	7c 93       	st	X, r23
    1956:	17 97       	sbiw	r26, 0x07	; 7
    1958:	08 95       	ret

0000195a <__fpcmp_parts_f>:
    195a:	1f 93       	push	r17
    195c:	dc 01       	movw	r26, r24
    195e:	fb 01       	movw	r30, r22
    1960:	9c 91       	ld	r25, X
    1962:	92 30       	cpi	r25, 0x02	; 2
    1964:	08 f4       	brcc	.+2      	; 0x1968 <__fpcmp_parts_f+0xe>
    1966:	47 c0       	rjmp	.+142    	; 0x19f6 <__fpcmp_parts_f+0x9c>
    1968:	80 81       	ld	r24, Z
    196a:	82 30       	cpi	r24, 0x02	; 2
    196c:	08 f4       	brcc	.+2      	; 0x1970 <__fpcmp_parts_f+0x16>
    196e:	43 c0       	rjmp	.+134    	; 0x19f6 <__fpcmp_parts_f+0x9c>
    1970:	94 30       	cpi	r25, 0x04	; 4
    1972:	51 f4       	brne	.+20     	; 0x1988 <__fpcmp_parts_f+0x2e>
    1974:	11 96       	adiw	r26, 0x01	; 1
    1976:	1c 91       	ld	r17, X
    1978:	84 30       	cpi	r24, 0x04	; 4
    197a:	99 f5       	brne	.+102    	; 0x19e2 <__fpcmp_parts_f+0x88>
    197c:	81 81       	ldd	r24, Z+1	; 0x01
    197e:	68 2f       	mov	r22, r24
    1980:	70 e0       	ldi	r23, 0x00	; 0
    1982:	61 1b       	sub	r22, r17
    1984:	71 09       	sbc	r23, r1
    1986:	3f c0       	rjmp	.+126    	; 0x1a06 <__fpcmp_parts_f+0xac>
    1988:	84 30       	cpi	r24, 0x04	; 4
    198a:	21 f0       	breq	.+8      	; 0x1994 <__fpcmp_parts_f+0x3a>
    198c:	92 30       	cpi	r25, 0x02	; 2
    198e:	31 f4       	brne	.+12     	; 0x199c <__fpcmp_parts_f+0x42>
    1990:	82 30       	cpi	r24, 0x02	; 2
    1992:	b9 f1       	breq	.+110    	; 0x1a02 <__fpcmp_parts_f+0xa8>
    1994:	81 81       	ldd	r24, Z+1	; 0x01
    1996:	88 23       	and	r24, r24
    1998:	89 f1       	breq	.+98     	; 0x19fc <__fpcmp_parts_f+0xa2>
    199a:	2d c0       	rjmp	.+90     	; 0x19f6 <__fpcmp_parts_f+0x9c>
    199c:	11 96       	adiw	r26, 0x01	; 1
    199e:	1c 91       	ld	r17, X
    19a0:	11 97       	sbiw	r26, 0x01	; 1
    19a2:	82 30       	cpi	r24, 0x02	; 2
    19a4:	f1 f0       	breq	.+60     	; 0x19e2 <__fpcmp_parts_f+0x88>
    19a6:	81 81       	ldd	r24, Z+1	; 0x01
    19a8:	18 17       	cp	r17, r24
    19aa:	d9 f4       	brne	.+54     	; 0x19e2 <__fpcmp_parts_f+0x88>
    19ac:	12 96       	adiw	r26, 0x02	; 2
    19ae:	2d 91       	ld	r18, X+
    19b0:	3c 91       	ld	r19, X
    19b2:	13 97       	sbiw	r26, 0x03	; 3
    19b4:	82 81       	ldd	r24, Z+2	; 0x02
    19b6:	93 81       	ldd	r25, Z+3	; 0x03
    19b8:	82 17       	cp	r24, r18
    19ba:	93 07       	cpc	r25, r19
    19bc:	94 f0       	brlt	.+36     	; 0x19e2 <__fpcmp_parts_f+0x88>
    19be:	28 17       	cp	r18, r24
    19c0:	39 07       	cpc	r19, r25
    19c2:	bc f0       	brlt	.+46     	; 0x19f2 <__fpcmp_parts_f+0x98>
    19c4:	14 96       	adiw	r26, 0x04	; 4
    19c6:	8d 91       	ld	r24, X+
    19c8:	9d 91       	ld	r25, X+
    19ca:	0d 90       	ld	r0, X+
    19cc:	bc 91       	ld	r27, X
    19ce:	a0 2d       	mov	r26, r0
    19d0:	24 81       	ldd	r18, Z+4	; 0x04
    19d2:	35 81       	ldd	r19, Z+5	; 0x05
    19d4:	46 81       	ldd	r20, Z+6	; 0x06
    19d6:	57 81       	ldd	r21, Z+7	; 0x07
    19d8:	28 17       	cp	r18, r24
    19da:	39 07       	cpc	r19, r25
    19dc:	4a 07       	cpc	r20, r26
    19de:	5b 07       	cpc	r21, r27
    19e0:	18 f4       	brcc	.+6      	; 0x19e8 <__fpcmp_parts_f+0x8e>
    19e2:	11 23       	and	r17, r17
    19e4:	41 f0       	breq	.+16     	; 0x19f6 <__fpcmp_parts_f+0x9c>
    19e6:	0a c0       	rjmp	.+20     	; 0x19fc <__fpcmp_parts_f+0xa2>
    19e8:	82 17       	cp	r24, r18
    19ea:	93 07       	cpc	r25, r19
    19ec:	a4 07       	cpc	r26, r20
    19ee:	b5 07       	cpc	r27, r21
    19f0:	40 f4       	brcc	.+16     	; 0x1a02 <__fpcmp_parts_f+0xa8>
    19f2:	11 23       	and	r17, r17
    19f4:	19 f0       	breq	.+6      	; 0x19fc <__fpcmp_parts_f+0xa2>
    19f6:	61 e0       	ldi	r22, 0x01	; 1
    19f8:	70 e0       	ldi	r23, 0x00	; 0
    19fa:	05 c0       	rjmp	.+10     	; 0x1a06 <__fpcmp_parts_f+0xac>
    19fc:	6f ef       	ldi	r22, 0xFF	; 255
    19fe:	7f ef       	ldi	r23, 0xFF	; 255
    1a00:	02 c0       	rjmp	.+4      	; 0x1a06 <__fpcmp_parts_f+0xac>
    1a02:	60 e0       	ldi	r22, 0x00	; 0
    1a04:	70 e0       	ldi	r23, 0x00	; 0
    1a06:	cb 01       	movw	r24, r22
    1a08:	1f 91       	pop	r17
    1a0a:	08 95       	ret

00001a0c <__divmodsi4>:
    1a0c:	97 fb       	bst	r25, 7
    1a0e:	09 2e       	mov	r0, r25
    1a10:	05 26       	eor	r0, r21
    1a12:	0e d0       	rcall	.+28     	; 0x1a30 <__divmodsi4_neg1>
    1a14:	57 fd       	sbrc	r21, 7
    1a16:	04 d0       	rcall	.+8      	; 0x1a20 <__divmodsi4_neg2>
    1a18:	14 d0       	rcall	.+40     	; 0x1a42 <__udivmodsi4>
    1a1a:	0a d0       	rcall	.+20     	; 0x1a30 <__divmodsi4_neg1>
    1a1c:	00 1c       	adc	r0, r0
    1a1e:	38 f4       	brcc	.+14     	; 0x1a2e <__divmodsi4_exit>

00001a20 <__divmodsi4_neg2>:
    1a20:	50 95       	com	r21
    1a22:	40 95       	com	r20
    1a24:	30 95       	com	r19
    1a26:	21 95       	neg	r18
    1a28:	3f 4f       	sbci	r19, 0xFF	; 255
    1a2a:	4f 4f       	sbci	r20, 0xFF	; 255
    1a2c:	5f 4f       	sbci	r21, 0xFF	; 255

00001a2e <__divmodsi4_exit>:
    1a2e:	08 95       	ret

00001a30 <__divmodsi4_neg1>:
    1a30:	f6 f7       	brtc	.-4      	; 0x1a2e <__divmodsi4_exit>
    1a32:	90 95       	com	r25
    1a34:	80 95       	com	r24
    1a36:	70 95       	com	r23
    1a38:	61 95       	neg	r22
    1a3a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a3c:	8f 4f       	sbci	r24, 0xFF	; 255
    1a3e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a40:	08 95       	ret

00001a42 <__udivmodsi4>:
    1a42:	a1 e2       	ldi	r26, 0x21	; 33
    1a44:	1a 2e       	mov	r1, r26
    1a46:	aa 1b       	sub	r26, r26
    1a48:	bb 1b       	sub	r27, r27
    1a4a:	fd 01       	movw	r30, r26
    1a4c:	0d c0       	rjmp	.+26     	; 0x1a68 <__udivmodsi4_ep>

00001a4e <__udivmodsi4_loop>:
    1a4e:	aa 1f       	adc	r26, r26
    1a50:	bb 1f       	adc	r27, r27
    1a52:	ee 1f       	adc	r30, r30
    1a54:	ff 1f       	adc	r31, r31
    1a56:	a2 17       	cp	r26, r18
    1a58:	b3 07       	cpc	r27, r19
    1a5a:	e4 07       	cpc	r30, r20
    1a5c:	f5 07       	cpc	r31, r21
    1a5e:	20 f0       	brcs	.+8      	; 0x1a68 <__udivmodsi4_ep>
    1a60:	a2 1b       	sub	r26, r18
    1a62:	b3 0b       	sbc	r27, r19
    1a64:	e4 0b       	sbc	r30, r20
    1a66:	f5 0b       	sbc	r31, r21

00001a68 <__udivmodsi4_ep>:
    1a68:	66 1f       	adc	r22, r22
    1a6a:	77 1f       	adc	r23, r23
    1a6c:	88 1f       	adc	r24, r24
    1a6e:	99 1f       	adc	r25, r25
    1a70:	1a 94       	dec	r1
    1a72:	69 f7       	brne	.-38     	; 0x1a4e <__udivmodsi4_loop>
    1a74:	60 95       	com	r22
    1a76:	70 95       	com	r23
    1a78:	80 95       	com	r24
    1a7a:	90 95       	com	r25
    1a7c:	9b 01       	movw	r18, r22
    1a7e:	ac 01       	movw	r20, r24
    1a80:	bd 01       	movw	r22, r26
    1a82:	cf 01       	movw	r24, r30
    1a84:	08 95       	ret

00001a86 <__prologue_saves__>:
    1a86:	2f 92       	push	r2
    1a88:	3f 92       	push	r3
    1a8a:	4f 92       	push	r4
    1a8c:	5f 92       	push	r5
    1a8e:	6f 92       	push	r6
    1a90:	7f 92       	push	r7
    1a92:	8f 92       	push	r8
    1a94:	9f 92       	push	r9
    1a96:	af 92       	push	r10
    1a98:	bf 92       	push	r11
    1a9a:	cf 92       	push	r12
    1a9c:	df 92       	push	r13
    1a9e:	ef 92       	push	r14
    1aa0:	ff 92       	push	r15
    1aa2:	0f 93       	push	r16
    1aa4:	1f 93       	push	r17
    1aa6:	cf 93       	push	r28
    1aa8:	df 93       	push	r29
    1aaa:	cd b7       	in	r28, 0x3d	; 61
    1aac:	de b7       	in	r29, 0x3e	; 62
    1aae:	ca 1b       	sub	r28, r26
    1ab0:	db 0b       	sbc	r29, r27
    1ab2:	0f b6       	in	r0, 0x3f	; 63
    1ab4:	f8 94       	cli
    1ab6:	de bf       	out	0x3e, r29	; 62
    1ab8:	0f be       	out	0x3f, r0	; 63
    1aba:	cd bf       	out	0x3d, r28	; 61
    1abc:	19 94       	eijmp

00001abe <__epilogue_restores__>:
    1abe:	2a 88       	ldd	r2, Y+18	; 0x12
    1ac0:	39 88       	ldd	r3, Y+17	; 0x11
    1ac2:	48 88       	ldd	r4, Y+16	; 0x10
    1ac4:	5f 84       	ldd	r5, Y+15	; 0x0f
    1ac6:	6e 84       	ldd	r6, Y+14	; 0x0e
    1ac8:	7d 84       	ldd	r7, Y+13	; 0x0d
    1aca:	8c 84       	ldd	r8, Y+12	; 0x0c
    1acc:	9b 84       	ldd	r9, Y+11	; 0x0b
    1ace:	aa 84       	ldd	r10, Y+10	; 0x0a
    1ad0:	b9 84       	ldd	r11, Y+9	; 0x09
    1ad2:	c8 84       	ldd	r12, Y+8	; 0x08
    1ad4:	df 80       	ldd	r13, Y+7	; 0x07
    1ad6:	ee 80       	ldd	r14, Y+6	; 0x06
    1ad8:	fd 80       	ldd	r15, Y+5	; 0x05
    1ada:	0c 81       	ldd	r16, Y+4	; 0x04
    1adc:	1b 81       	ldd	r17, Y+3	; 0x03
    1ade:	aa 81       	ldd	r26, Y+2	; 0x02
    1ae0:	b9 81       	ldd	r27, Y+1	; 0x01
    1ae2:	ce 0f       	add	r28, r30
    1ae4:	d1 1d       	adc	r29, r1
    1ae6:	0f b6       	in	r0, 0x3f	; 63
    1ae8:	f8 94       	cli
    1aea:	de bf       	out	0x3e, r29	; 62
    1aec:	0f be       	out	0x3f, r0	; 63
    1aee:	cd bf       	out	0x3d, r28	; 61
    1af0:	ed 01       	movw	r28, r26
    1af2:	08 95       	ret

00001af4 <_exit>:
    1af4:	f8 94       	cli

00001af6 <__stop_program>:
    1af6:	ff cf       	rjmp	.-2      	; 0x1af6 <__stop_program>
