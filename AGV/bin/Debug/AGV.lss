
bin\Debug\AGV.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800200  000018aa  0000195e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000018aa  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002c  00800208  00800208  00001966  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  00001966  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 000001c0  00000000  00000000  00001969  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000003c7  00000000  00000000  00001b29  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000025b7  00000000  00000000  00001ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000130f  00000000  00000000  000044a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000161d  00000000  00000000  000057b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002d0  00000000  00000000  00006dd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000525  00000000  00000000  000070a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  000075c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00007d97  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 87 03 	jmp	0x70e	; 0x70e <__vector_9>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 05 06 	jmp	0xc0a	; 0xc0a <__vector_17>
      48:	0c 94 43 06 	jmp	0xc86	; 0xc86 <__vector_18>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ea ea       	ldi	r30, 0xAA	; 170
      fc:	f8 e1       	ldi	r31, 0x18	; 24
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a8 30       	cpi	r26, 0x08	; 8
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	12 e0       	ldi	r17, 0x02	; 2
     110:	a8 e0       	ldi	r26, 0x08	; 8
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a4 33       	cpi	r26, 0x34	; 52
     11a:	b1 07       	cpc	r27, r17
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 95 00 	call	0x12a	; 0x12a <main>
     122:	0c 94 53 0c 	jmp	0x18a6	; 0x18a6 <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <main>:
#include "sonar.h"
#include "serial.h"


int main(void)
{
     12a:	df 93       	push	r29
     12c:	cf 93       	push	r28
     12e:	cd b7       	in	r28, 0x3d	; 61
     130:	de b7       	in	r29, 0x3e	; 62
    ///initializing stepper motors///
    construct_stepper(&stepper1, PK0, PK1);
     132:	8e e0       	ldi	r24, 0x0E	; 14
     134:	92 e0       	ldi	r25, 0x02	; 2
     136:	60 e0       	ldi	r22, 0x00	; 0
     138:	41 e0       	ldi	r20, 0x01	; 1
     13a:	0e 94 3d 04 	call	0x87a	; 0x87a <construct_stepper>
    construct_stepper(&stepper2, PK2, PK3);
     13e:	88 e0       	ldi	r24, 0x08	; 8
     140:	92 e0       	ldi	r25, 0x02	; 2
     142:	62 e0       	ldi	r22, 0x02	; 2
     144:	43 e0       	ldi	r20, 0x03	; 3
     146:	0e 94 3d 04 	call	0x87a	; 0x87a <construct_stepper>
    initialize_steppers();
     14a:	0e 94 61 04 	call	0x8c2	; 0x8c2 <initialize_steppers>
    init_stepper_timer();
     14e:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <init_stepper_timer>

    ///initializing sonars///
    construct_sonar(&front_sonar, PB0, PB4);
     152:	84 e1       	ldi	r24, 0x14	; 20
     154:	92 e0       	ldi	r25, 0x02	; 2
     156:	60 e0       	ldi	r22, 0x00	; 0
     158:	44 e0       	ldi	r20, 0x04	; 4
     15a:	0e 94 bf 01 	call	0x37e	; 0x37e <construct_sonar>
    init_sonar(&front_sonar);
     15e:	84 e1       	ldi	r24, 0x14	; 20
     160:	92 e0       	ldi	r25, 0x02	; 2
     162:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <init_sonar>

    init_timer3();
     166:	0e 94 1d 02 	call	0x43a	; 0x43a <init_timer3>
    ///initializing serial coms
    USART_Init(MYUBRR);
     16a:	87 e6       	ldi	r24, 0x67	; 103
     16c:	90 e0       	ldi	r25, 0x00	; 0
     16e:	0e 94 cd 00 	call	0x19a	; 0x19a <USART_Init>


    sei();
     172:	78 94       	sei

    while(1)
    {
        trigger_sonar(front_sonar);
     174:	20 91 14 02 	lds	r18, 0x0214
     178:	30 91 15 02 	lds	r19, 0x0215
     17c:	40 91 16 02 	lds	r20, 0x0216
     180:	50 91 17 02 	lds	r21, 0x0217
     184:	60 91 18 02 	lds	r22, 0x0218
     188:	70 91 19 02 	lds	r23, 0x0219
     18c:	80 91 1a 02 	lds	r24, 0x021A
     190:	90 91 1b 02 	lds	r25, 0x021B
     194:	0e 94 31 02 	call	0x462	; 0x462 <trigger_sonar>
     198:	ed cf       	rjmp	.-38     	; 0x174 <main+0x4a>

0000019a <USART_Init>:

#include "serial.h"

void USART_Init( unsigned int ubrr)
{
     19a:	df 93       	push	r29
     19c:	cf 93       	push	r28
     19e:	0f 92       	push	r0
     1a0:	0f 92       	push	r0
     1a2:	cd b7       	in	r28, 0x3d	; 61
     1a4:	de b7       	in	r29, 0x3e	; 62
     1a6:	9a 83       	std	Y+2, r25	; 0x02
     1a8:	89 83       	std	Y+1, r24	; 0x01
    /*Set baud rate */
    UBRR0H = (unsigned char)(ubrr>>8);
     1aa:	e5 ec       	ldi	r30, 0xC5	; 197
     1ac:	f0 e0       	ldi	r31, 0x00	; 0
     1ae:	89 81       	ldd	r24, Y+1	; 0x01
     1b0:	9a 81       	ldd	r25, Y+2	; 0x02
     1b2:	89 2f       	mov	r24, r25
     1b4:	99 27       	eor	r25, r25
     1b6:	80 83       	st	Z, r24
    UBRR0L = (unsigned char)ubrr;
     1b8:	e4 ec       	ldi	r30, 0xC4	; 196
     1ba:	f0 e0       	ldi	r31, 0x00	; 0
     1bc:	89 81       	ldd	r24, Y+1	; 0x01
     1be:	80 83       	st	Z, r24
    /*Enable receiver and transmitter */
    UCSR0B |= (1<<RXEN0);
     1c0:	a1 ec       	ldi	r26, 0xC1	; 193
     1c2:	b0 e0       	ldi	r27, 0x00	; 0
     1c4:	e1 ec       	ldi	r30, 0xC1	; 193
     1c6:	f0 e0       	ldi	r31, 0x00	; 0
     1c8:	80 81       	ld	r24, Z
     1ca:	80 61       	ori	r24, 0x10	; 16
     1cc:	8c 93       	st	X, r24
    UCSR0B |= (1<<TXEN0);
     1ce:	a1 ec       	ldi	r26, 0xC1	; 193
     1d0:	b0 e0       	ldi	r27, 0x00	; 0
     1d2:	e1 ec       	ldi	r30, 0xC1	; 193
     1d4:	f0 e0       	ldi	r31, 0x00	; 0
     1d6:	80 81       	ld	r24, Z
     1d8:	88 60       	ori	r24, 0x08	; 8
     1da:	8c 93       	st	X, r24
    /* Set frame format: 8data, 2stop bit */
    UCSR0C = (1<<UCSZ01)|(3<<UCSZ00);
     1dc:	e2 ec       	ldi	r30, 0xC2	; 194
     1de:	f0 e0       	ldi	r31, 0x00	; 0
     1e0:	86 e0       	ldi	r24, 0x06	; 6
     1e2:	80 83       	st	Z, r24
}
     1e4:	0f 90       	pop	r0
     1e6:	0f 90       	pop	r0
     1e8:	cf 91       	pop	r28
     1ea:	df 91       	pop	r29
     1ec:	08 95       	ret

000001ee <recieve_Byte>:


uint8_t recieve_Byte(void)
{
     1ee:	df 93       	push	r29
     1f0:	cf 93       	push	r28
     1f2:	cd b7       	in	r28, 0x3d	; 61
     1f4:	de b7       	in	r29, 0x3e	; 62
    //moet worden vervangen met if. anders blijft de code hier hangen. als het aankomt blijft het toch in UDR0 staan totdat het wordt uitgelezen.
    loop_until_bit_is_set(UCSR0A, RXC0);
     1f6:	e0 ec       	ldi	r30, 0xC0	; 192
     1f8:	f0 e0       	ldi	r31, 0x00	; 0
     1fa:	80 81       	ld	r24, Z
     1fc:	88 23       	and	r24, r24
     1fe:	dc f7       	brge	.-10     	; 0x1f6 <recieve_Byte+0x8>
    {
     return UDR0;
     200:	e6 ec       	ldi	r30, 0xC6	; 198
     202:	f0 e0       	ldi	r31, 0x00	; 0
     204:	80 81       	ld	r24, Z
    }
    /*else
    {
        return -1;
    }*/
}
     206:	cf 91       	pop	r28
     208:	df 91       	pop	r29
     20a:	08 95       	ret

0000020c <transmit_byte>:

void transmit_byte(uint8_t byte)
{
     20c:	df 93       	push	r29
     20e:	cf 93       	push	r28
     210:	0f 92       	push	r0
     212:	cd b7       	in	r28, 0x3d	; 61
     214:	de b7       	in	r29, 0x3e	; 62
     216:	89 83       	std	Y+1, r24	; 0x01
    //vervangen met if
    loop_until_bit_is_set(UCSR0A, UDRE0);
     218:	e0 ec       	ldi	r30, 0xC0	; 192
     21a:	f0 e0       	ldi	r31, 0x00	; 0
     21c:	80 81       	ld	r24, Z
     21e:	88 2f       	mov	r24, r24
     220:	90 e0       	ldi	r25, 0x00	; 0
     222:	80 72       	andi	r24, 0x20	; 32
     224:	90 70       	andi	r25, 0x00	; 0
     226:	00 97       	sbiw	r24, 0x00	; 0
     228:	b9 f3       	breq	.-18     	; 0x218 <transmit_byte+0xc>
    UDR0 = byte;
     22a:	e6 ec       	ldi	r30, 0xC6	; 198
     22c:	f0 e0       	ldi	r31, 0x00	; 0
     22e:	89 81       	ldd	r24, Y+1	; 0x01
     230:	80 83       	st	Z, r24

}
     232:	0f 90       	pop	r0
     234:	cf 91       	pop	r28
     236:	df 91       	pop	r29
     238:	08 95       	ret

0000023a <print_byte>:

void print_byte(uint32_t byte)
{
     23a:	df 93       	push	r29
     23c:	cf 93       	push	r28
     23e:	00 d0       	rcall	.+0      	; 0x240 <print_byte+0x6>
     240:	0f 92       	push	r0
     242:	cd b7       	in	r28, 0x3d	; 61
     244:	de b7       	in	r29, 0x3e	; 62
     246:	69 83       	std	Y+1, r22	; 0x01
     248:	7a 83       	std	Y+2, r23	; 0x02
     24a:	8b 83       	std	Y+3, r24	; 0x03
     24c:	9c 83       	std	Y+4, r25	; 0x04
    //werkt niet zoals het hoort. volgorde verkeert?
    transmit_byte((byte/1000)%10);
     24e:	89 81       	ldd	r24, Y+1	; 0x01
     250:	9a 81       	ldd	r25, Y+2	; 0x02
     252:	ab 81       	ldd	r26, Y+3	; 0x03
     254:	bc 81       	ldd	r27, Y+4	; 0x04
     256:	28 ee       	ldi	r18, 0xE8	; 232
     258:	33 e0       	ldi	r19, 0x03	; 3
     25a:	40 e0       	ldi	r20, 0x00	; 0
     25c:	50 e0       	ldi	r21, 0x00	; 0
     25e:	bc 01       	movw	r22, r24
     260:	cd 01       	movw	r24, r26
     262:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <__udivmodsi4>
     266:	da 01       	movw	r26, r20
     268:	c9 01       	movw	r24, r18
     26a:	2a e0       	ldi	r18, 0x0A	; 10
     26c:	30 e0       	ldi	r19, 0x00	; 0
     26e:	40 e0       	ldi	r20, 0x00	; 0
     270:	50 e0       	ldi	r21, 0x00	; 0
     272:	bc 01       	movw	r22, r24
     274:	cd 01       	movw	r24, r26
     276:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <__udivmodsi4>
     27a:	dc 01       	movw	r26, r24
     27c:	cb 01       	movw	r24, r22
     27e:	0e 94 06 01 	call	0x20c	; 0x20c <transmit_byte>
    transmit_byte((byte/100)%10);
     282:	89 81       	ldd	r24, Y+1	; 0x01
     284:	9a 81       	ldd	r25, Y+2	; 0x02
     286:	ab 81       	ldd	r26, Y+3	; 0x03
     288:	bc 81       	ldd	r27, Y+4	; 0x04
     28a:	24 e6       	ldi	r18, 0x64	; 100
     28c:	30 e0       	ldi	r19, 0x00	; 0
     28e:	40 e0       	ldi	r20, 0x00	; 0
     290:	50 e0       	ldi	r21, 0x00	; 0
     292:	bc 01       	movw	r22, r24
     294:	cd 01       	movw	r24, r26
     296:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <__udivmodsi4>
     29a:	da 01       	movw	r26, r20
     29c:	c9 01       	movw	r24, r18
     29e:	2a e0       	ldi	r18, 0x0A	; 10
     2a0:	30 e0       	ldi	r19, 0x00	; 0
     2a2:	40 e0       	ldi	r20, 0x00	; 0
     2a4:	50 e0       	ldi	r21, 0x00	; 0
     2a6:	bc 01       	movw	r22, r24
     2a8:	cd 01       	movw	r24, r26
     2aa:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <__udivmodsi4>
     2ae:	dc 01       	movw	r26, r24
     2b0:	cb 01       	movw	r24, r22
     2b2:	0e 94 06 01 	call	0x20c	; 0x20c <transmit_byte>
    transmit_byte((byte/10)%10);
     2b6:	89 81       	ldd	r24, Y+1	; 0x01
     2b8:	9a 81       	ldd	r25, Y+2	; 0x02
     2ba:	ab 81       	ldd	r26, Y+3	; 0x03
     2bc:	bc 81       	ldd	r27, Y+4	; 0x04
     2be:	2a e0       	ldi	r18, 0x0A	; 10
     2c0:	30 e0       	ldi	r19, 0x00	; 0
     2c2:	40 e0       	ldi	r20, 0x00	; 0
     2c4:	50 e0       	ldi	r21, 0x00	; 0
     2c6:	bc 01       	movw	r22, r24
     2c8:	cd 01       	movw	r24, r26
     2ca:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <__udivmodsi4>
     2ce:	da 01       	movw	r26, r20
     2d0:	c9 01       	movw	r24, r18
     2d2:	2a e0       	ldi	r18, 0x0A	; 10
     2d4:	30 e0       	ldi	r19, 0x00	; 0
     2d6:	40 e0       	ldi	r20, 0x00	; 0
     2d8:	50 e0       	ldi	r21, 0x00	; 0
     2da:	bc 01       	movw	r22, r24
     2dc:	cd 01       	movw	r24, r26
     2de:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <__udivmodsi4>
     2e2:	dc 01       	movw	r26, r24
     2e4:	cb 01       	movw	r24, r22
     2e6:	0e 94 06 01 	call	0x20c	; 0x20c <transmit_byte>
    transmit_byte((byte%10));
     2ea:	89 81       	ldd	r24, Y+1	; 0x01
     2ec:	9a 81       	ldd	r25, Y+2	; 0x02
     2ee:	ab 81       	ldd	r26, Y+3	; 0x03
     2f0:	bc 81       	ldd	r27, Y+4	; 0x04
     2f2:	2a e0       	ldi	r18, 0x0A	; 10
     2f4:	30 e0       	ldi	r19, 0x00	; 0
     2f6:	40 e0       	ldi	r20, 0x00	; 0
     2f8:	50 e0       	ldi	r21, 0x00	; 0
     2fa:	bc 01       	movw	r22, r24
     2fc:	cd 01       	movw	r24, r26
     2fe:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <__udivmodsi4>
     302:	dc 01       	movw	r26, r24
     304:	cb 01       	movw	r24, r22
     306:	0e 94 06 01 	call	0x20c	; 0x20c <transmit_byte>
    transmit_byte(0xA5);
     30a:	85 ea       	ldi	r24, 0xA5	; 165
     30c:	0e 94 06 01 	call	0x20c	; 0x20c <transmit_byte>
}
     310:	0f 90       	pop	r0
     312:	0f 90       	pop	r0
     314:	0f 90       	pop	r0
     316:	0f 90       	pop	r0
     318:	cf 91       	pop	r28
     31a:	df 91       	pop	r29
     31c:	08 95       	ret

0000031e <recieve_string>:



void recieve_string(char code[])
{
     31e:	df 93       	push	r29
     320:	cf 93       	push	r28
     322:	00 d0       	rcall	.+0      	; 0x324 <recieve_string+0x6>
     324:	0f 92       	push	r0
     326:	0f 92       	push	r0
     328:	cd b7       	in	r28, 0x3d	; 61
     32a:	de b7       	in	r29, 0x3e	; 62
     32c:	9d 83       	std	Y+5, r25	; 0x05
     32e:	8c 83       	std	Y+4, r24	; 0x04
    //code ontworpen voor een GPS module. dollar teken is begin van de string. kan wel gebruikt worden voor het onvangen van complexe instructies.
    char byte = recieve_Byte();
     330:	0e 94 f7 00 	call	0x1ee	; 0x1ee <recieve_Byte>
     334:	8b 83       	std	Y+3, r24	; 0x03
    if(byte == '$')
     336:	8b 81       	ldd	r24, Y+3	; 0x03
     338:	84 32       	cpi	r24, 0x24	; 36
     33a:	c9 f4       	brne	.+50     	; 0x36e <recieve_string+0x50>
    {
        int x = 1;
     33c:	81 e0       	ldi	r24, 0x01	; 1
     33e:	90 e0       	ldi	r25, 0x00	; 0
     340:	9a 83       	std	Y+2, r25	; 0x02
     342:	89 83       	std	Y+1, r24	; 0x01
     344:	11 c0       	rjmp	.+34     	; 0x368 <recieve_string+0x4a>
        while(byte != '\n')
        {
            byte = recieve_Byte();
     346:	0e 94 f7 00 	call	0x1ee	; 0x1ee <recieve_Byte>
     34a:	8b 83       	std	Y+3, r24	; 0x03
            code[x] = byte;
     34c:	29 81       	ldd	r18, Y+1	; 0x01
     34e:	3a 81       	ldd	r19, Y+2	; 0x02
     350:	8c 81       	ldd	r24, Y+4	; 0x04
     352:	9d 81       	ldd	r25, Y+5	; 0x05
     354:	fc 01       	movw	r30, r24
     356:	e2 0f       	add	r30, r18
     358:	f3 1f       	adc	r31, r19
     35a:	8b 81       	ldd	r24, Y+3	; 0x03
     35c:	80 83       	st	Z, r24
            x++;
     35e:	89 81       	ldd	r24, Y+1	; 0x01
     360:	9a 81       	ldd	r25, Y+2	; 0x02
     362:	01 96       	adiw	r24, 0x01	; 1
     364:	9a 83       	std	Y+2, r25	; 0x02
     366:	89 83       	std	Y+1, r24	; 0x01
    //code ontworpen voor een GPS module. dollar teken is begin van de string. kan wel gebruikt worden voor het onvangen van complexe instructies.
    char byte = recieve_Byte();
    if(byte == '$')
    {
        int x = 1;
        while(byte != '\n')
     368:	8b 81       	ldd	r24, Y+3	; 0x03
     36a:	8a 30       	cpi	r24, 0x0A	; 10
     36c:	61 f7       	brne	.-40     	; 0x346 <recieve_string+0x28>
            byte = recieve_Byte();
            code[x] = byte;
            x++;
        }
    }
}
     36e:	0f 90       	pop	r0
     370:	0f 90       	pop	r0
     372:	0f 90       	pop	r0
     374:	0f 90       	pop	r0
     376:	0f 90       	pop	r0
     378:	cf 91       	pop	r28
     37a:	df 91       	pop	r29
     37c:	08 95       	ret

0000037e <construct_sonar>:

#include "sonar.h"
#include "serial.h"

void construct_sonar(sonar *sonar, uint8_t echo_pin, uint8_t trigger_pin)
{
     37e:	df 93       	push	r29
     380:	cf 93       	push	r28
     382:	00 d0       	rcall	.+0      	; 0x384 <construct_sonar+0x6>
     384:	0f 92       	push	r0
     386:	cd b7       	in	r28, 0x3d	; 61
     388:	de b7       	in	r29, 0x3e	; 62
     38a:	9a 83       	std	Y+2, r25	; 0x02
     38c:	89 83       	std	Y+1, r24	; 0x01
     38e:	6b 83       	std	Y+3, r22	; 0x03
     390:	4c 83       	std	Y+4, r20	; 0x04
    sonar->echo_pin = echo_pin;
     392:	e9 81       	ldd	r30, Y+1	; 0x01
     394:	fa 81       	ldd	r31, Y+2	; 0x02
     396:	8b 81       	ldd	r24, Y+3	; 0x03
     398:	80 83       	st	Z, r24
    sonar->trigger_pin = trigger_pin;
     39a:	e9 81       	ldd	r30, Y+1	; 0x01
     39c:	fa 81       	ldd	r31, Y+2	; 0x02
     39e:	8c 81       	ldd	r24, Y+4	; 0x04
     3a0:	81 83       	std	Z+1, r24	; 0x01
}
     3a2:	0f 90       	pop	r0
     3a4:	0f 90       	pop	r0
     3a6:	0f 90       	pop	r0
     3a8:	0f 90       	pop	r0
     3aa:	cf 91       	pop	r28
     3ac:	df 91       	pop	r29
     3ae:	08 95       	ret

000003b0 <init_sonar>:

void init_sonar(sonar *sonar)
{
     3b0:	df 93       	push	r29
     3b2:	cf 93       	push	r28
     3b4:	0f 92       	push	r0
     3b6:	0f 92       	push	r0
     3b8:	cd b7       	in	r28, 0x3d	; 61
     3ba:	de b7       	in	r29, 0x3e	; 62
     3bc:	9a 83       	std	Y+2, r25	; 0x02
     3be:	89 83       	std	Y+1, r24	; 0x01
    PCICR |= (1<<PCIE0);
     3c0:	a8 e6       	ldi	r26, 0x68	; 104
     3c2:	b0 e0       	ldi	r27, 0x00	; 0
     3c4:	e8 e6       	ldi	r30, 0x68	; 104
     3c6:	f0 e0       	ldi	r31, 0x00	; 0
     3c8:	80 81       	ld	r24, Z
     3ca:	81 60       	ori	r24, 0x01	; 1
     3cc:	8c 93       	st	X, r24
    PCMSK0 |= (1<<PCINT0);
     3ce:	ab e6       	ldi	r26, 0x6B	; 107
     3d0:	b0 e0       	ldi	r27, 0x00	; 0
     3d2:	eb e6       	ldi	r30, 0x6B	; 107
     3d4:	f0 e0       	ldi	r31, 0x00	; 0
     3d6:	80 81       	ld	r24, Z
     3d8:	81 60       	ori	r24, 0x01	; 1
     3da:	8c 93       	st	X, r24
    DDRB &= ~(1<<sonar->echo_pin);
     3dc:	a4 e2       	ldi	r26, 0x24	; 36
     3de:	b0 e0       	ldi	r27, 0x00	; 0
     3e0:	e4 e2       	ldi	r30, 0x24	; 36
     3e2:	f0 e0       	ldi	r31, 0x00	; 0
     3e4:	80 81       	ld	r24, Z
     3e6:	48 2f       	mov	r20, r24
     3e8:	e9 81       	ldd	r30, Y+1	; 0x01
     3ea:	fa 81       	ldd	r31, Y+2	; 0x02
     3ec:	80 81       	ld	r24, Z
     3ee:	28 2f       	mov	r18, r24
     3f0:	30 e0       	ldi	r19, 0x00	; 0
     3f2:	81 e0       	ldi	r24, 0x01	; 1
     3f4:	90 e0       	ldi	r25, 0x00	; 0
     3f6:	02 c0       	rjmp	.+4      	; 0x3fc <init_sonar+0x4c>
     3f8:	88 0f       	add	r24, r24
     3fa:	99 1f       	adc	r25, r25
     3fc:	2a 95       	dec	r18
     3fe:	e2 f7       	brpl	.-8      	; 0x3f8 <init_sonar+0x48>
     400:	80 95       	com	r24
     402:	84 23       	and	r24, r20
     404:	8c 93       	st	X, r24
    DDRB |= (1<<sonar->trigger_pin);
     406:	a4 e2       	ldi	r26, 0x24	; 36
     408:	b0 e0       	ldi	r27, 0x00	; 0
     40a:	e4 e2       	ldi	r30, 0x24	; 36
     40c:	f0 e0       	ldi	r31, 0x00	; 0
     40e:	80 81       	ld	r24, Z
     410:	48 2f       	mov	r20, r24
     412:	e9 81       	ldd	r30, Y+1	; 0x01
     414:	fa 81       	ldd	r31, Y+2	; 0x02
     416:	81 81       	ldd	r24, Z+1	; 0x01
     418:	28 2f       	mov	r18, r24
     41a:	30 e0       	ldi	r19, 0x00	; 0
     41c:	81 e0       	ldi	r24, 0x01	; 1
     41e:	90 e0       	ldi	r25, 0x00	; 0
     420:	02 2e       	mov	r0, r18
     422:	02 c0       	rjmp	.+4      	; 0x428 <init_sonar+0x78>
     424:	88 0f       	add	r24, r24
     426:	99 1f       	adc	r25, r25
     428:	0a 94       	dec	r0
     42a:	e2 f7       	brpl	.-8      	; 0x424 <init_sonar+0x74>
     42c:	84 2b       	or	r24, r20
     42e:	8c 93       	st	X, r24
}
     430:	0f 90       	pop	r0
     432:	0f 90       	pop	r0
     434:	cf 91       	pop	r28
     436:	df 91       	pop	r29
     438:	08 95       	ret

0000043a <init_timer3>:


void init_timer3()
{
     43a:	df 93       	push	r29
     43c:	cf 93       	push	r28
     43e:	cd b7       	in	r28, 0x3d	; 61
     440:	de b7       	in	r29, 0x3e	; 62
    TCCR3A |= (0<<WGM31) | (0<<WGM30);
     442:	a0 e9       	ldi	r26, 0x90	; 144
     444:	b0 e0       	ldi	r27, 0x00	; 0
     446:	e0 e9       	ldi	r30, 0x90	; 144
     448:	f0 e0       	ldi	r31, 0x00	; 0
     44a:	80 81       	ld	r24, Z
     44c:	8c 93       	st	X, r24
    TCCR3B |= (0<<WGM32) | (0<<WGM33) | (0<<CS32) | (1<<CS31) | (1<<CS30);
     44e:	a1 e9       	ldi	r26, 0x91	; 145
     450:	b0 e0       	ldi	r27, 0x00	; 0
     452:	e1 e9       	ldi	r30, 0x91	; 145
     454:	f0 e0       	ldi	r31, 0x00	; 0
     456:	80 81       	ld	r24, Z
     458:	83 60       	ori	r24, 0x03	; 3
     45a:	8c 93       	st	X, r24
}
     45c:	cf 91       	pop	r28
     45e:	df 91       	pop	r29
     460:	08 95       	ret

00000462 <trigger_sonar>:

void trigger_sonar(sonar sonar)
{
     462:	df 93       	push	r29
     464:	cf 93       	push	r28
     466:	cd b7       	in	r28, 0x3d	; 61
     468:	de b7       	in	r29, 0x3e	; 62
     46a:	a4 97       	sbiw	r28, 0x24	; 36
     46c:	0f b6       	in	r0, 0x3f	; 63
     46e:	f8 94       	cli
     470:	de bf       	out	0x3e, r29	; 62
     472:	0f be       	out	0x3f, r0	; 63
     474:	cd bf       	out	0x3d, r28	; 61
     476:	2d 8f       	std	Y+29, r18	; 0x1d
     478:	3e 8f       	std	Y+30, r19	; 0x1e
     47a:	4f 8f       	std	Y+31, r20	; 0x1f
     47c:	58 a3       	std	Y+32, r21	; 0x20
     47e:	69 a3       	std	Y+33, r22	; 0x21
     480:	7a a3       	std	Y+34, r23	; 0x22
     482:	8b a3       	std	Y+35, r24	; 0x23
     484:	9c a3       	std	Y+36, r25	; 0x24
    TCNT4 = 0;
     486:	e4 ea       	ldi	r30, 0xA4	; 164
     488:	f0 e0       	ldi	r31, 0x00	; 0
     48a:	11 82       	std	Z+1, r1	; 0x01
     48c:	10 82       	st	Z, r1
    PORTB |= (1<<sonar.trigger_pin);
     48e:	a5 e2       	ldi	r26, 0x25	; 37
     490:	b0 e0       	ldi	r27, 0x00	; 0
     492:	e5 e2       	ldi	r30, 0x25	; 37
     494:	f0 e0       	ldi	r31, 0x00	; 0
     496:	80 81       	ld	r24, Z
     498:	48 2f       	mov	r20, r24
     49a:	8e 8d       	ldd	r24, Y+30	; 0x1e
     49c:	28 2f       	mov	r18, r24
     49e:	30 e0       	ldi	r19, 0x00	; 0
     4a0:	81 e0       	ldi	r24, 0x01	; 1
     4a2:	90 e0       	ldi	r25, 0x00	; 0
     4a4:	02 c0       	rjmp	.+4      	; 0x4aa <trigger_sonar+0x48>
     4a6:	88 0f       	add	r24, r24
     4a8:	99 1f       	adc	r25, r25
     4aa:	2a 95       	dec	r18
     4ac:	e2 f7       	brpl	.-8      	; 0x4a6 <trigger_sonar+0x44>
     4ae:	84 2b       	or	r24, r20
     4b0:	8c 93       	st	X, r24
     4b2:	80 e0       	ldi	r24, 0x00	; 0
     4b4:	90 e0       	ldi	r25, 0x00	; 0
     4b6:	a0 e8       	ldi	r26, 0x80	; 128
     4b8:	bf e3       	ldi	r27, 0x3F	; 63
     4ba:	89 8f       	std	Y+25, r24	; 0x19
     4bc:	9a 8f       	std	Y+26, r25	; 0x1a
     4be:	ab 8f       	std	Y+27, r26	; 0x1b
     4c0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     4c2:	69 8d       	ldd	r22, Y+25	; 0x19
     4c4:	7a 8d       	ldd	r23, Y+26	; 0x1a
     4c6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     4c8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     4ca:	20 e0       	ldi	r18, 0x00	; 0
     4cc:	30 e0       	ldi	r19, 0x00	; 0
     4ce:	4a e7       	ldi	r20, 0x7A	; 122
     4d0:	55 e4       	ldi	r21, 0x45	; 69
     4d2:	0e 94 57 08 	call	0x10ae	; 0x10ae <__mulsf3>
     4d6:	dc 01       	movw	r26, r24
     4d8:	cb 01       	movw	r24, r22
     4da:	8d 8b       	std	Y+21, r24	; 0x15
     4dc:	9e 8b       	std	Y+22, r25	; 0x16
     4de:	af 8b       	std	Y+23, r26	; 0x17
     4e0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     4e2:	6d 89       	ldd	r22, Y+21	; 0x15
     4e4:	7e 89       	ldd	r23, Y+22	; 0x16
     4e6:	8f 89       	ldd	r24, Y+23	; 0x17
     4e8:	98 8d       	ldd	r25, Y+24	; 0x18
     4ea:	20 e0       	ldi	r18, 0x00	; 0
     4ec:	30 e0       	ldi	r19, 0x00	; 0
     4ee:	40 e8       	ldi	r20, 0x80	; 128
     4f0:	5f e3       	ldi	r21, 0x3F	; 63
     4f2:	0e 94 b1 09 	call	0x1362	; 0x1362 <__ltsf2>
     4f6:	88 23       	and	r24, r24
     4f8:	2c f4       	brge	.+10     	; 0x504 <trigger_sonar+0xa2>
		__ticks = 1;
     4fa:	81 e0       	ldi	r24, 0x01	; 1
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	9c 8b       	std	Y+20, r25	; 0x14
     500:	8b 8b       	std	Y+19, r24	; 0x13
     502:	3f c0       	rjmp	.+126    	; 0x582 <trigger_sonar+0x120>
	else if (__tmp > 65535)
     504:	6d 89       	ldd	r22, Y+21	; 0x15
     506:	7e 89       	ldd	r23, Y+22	; 0x16
     508:	8f 89       	ldd	r24, Y+23	; 0x17
     50a:	98 8d       	ldd	r25, Y+24	; 0x18
     50c:	20 e0       	ldi	r18, 0x00	; 0
     50e:	3f ef       	ldi	r19, 0xFF	; 255
     510:	4f e7       	ldi	r20, 0x7F	; 127
     512:	57 e4       	ldi	r21, 0x47	; 71
     514:	0e 94 51 09 	call	0x12a2	; 0x12a2 <__gtsf2>
     518:	18 16       	cp	r1, r24
     51a:	4c f5       	brge	.+82     	; 0x56e <trigger_sonar+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     51c:	69 8d       	ldd	r22, Y+25	; 0x19
     51e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     520:	8b 8d       	ldd	r24, Y+27	; 0x1b
     522:	9c 8d       	ldd	r25, Y+28	; 0x1c
     524:	20 e0       	ldi	r18, 0x00	; 0
     526:	30 e0       	ldi	r19, 0x00	; 0
     528:	40 e2       	ldi	r20, 0x20	; 32
     52a:	51 e4       	ldi	r21, 0x41	; 65
     52c:	0e 94 57 08 	call	0x10ae	; 0x10ae <__mulsf3>
     530:	dc 01       	movw	r26, r24
     532:	cb 01       	movw	r24, r22
     534:	bc 01       	movw	r22, r24
     536:	cd 01       	movw	r24, r26
     538:	0e 94 81 06 	call	0xd02	; 0xd02 <__fixunssfsi>
     53c:	dc 01       	movw	r26, r24
     53e:	cb 01       	movw	r24, r22
     540:	9c 8b       	std	Y+20, r25	; 0x14
     542:	8b 8b       	std	Y+19, r24	; 0x13
     544:	0f c0       	rjmp	.+30     	; 0x564 <trigger_sonar+0x102>
     546:	80 e9       	ldi	r24, 0x90	; 144
     548:	91 e0       	ldi	r25, 0x01	; 1
     54a:	9a 8b       	std	Y+18, r25	; 0x12
     54c:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     54e:	89 89       	ldd	r24, Y+17	; 0x11
     550:	9a 89       	ldd	r25, Y+18	; 0x12
     552:	01 97       	sbiw	r24, 0x01	; 1
     554:	f1 f7       	brne	.-4      	; 0x552 <trigger_sonar+0xf0>
     556:	9a 8b       	std	Y+18, r25	; 0x12
     558:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     55a:	8b 89       	ldd	r24, Y+19	; 0x13
     55c:	9c 89       	ldd	r25, Y+20	; 0x14
     55e:	01 97       	sbiw	r24, 0x01	; 1
     560:	9c 8b       	std	Y+20, r25	; 0x14
     562:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     564:	8b 89       	ldd	r24, Y+19	; 0x13
     566:	9c 89       	ldd	r25, Y+20	; 0x14
     568:	00 97       	sbiw	r24, 0x00	; 0
     56a:	69 f7       	brne	.-38     	; 0x546 <trigger_sonar+0xe4>
     56c:	14 c0       	rjmp	.+40     	; 0x596 <trigger_sonar+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     56e:	6d 89       	ldd	r22, Y+21	; 0x15
     570:	7e 89       	ldd	r23, Y+22	; 0x16
     572:	8f 89       	ldd	r24, Y+23	; 0x17
     574:	98 8d       	ldd	r25, Y+24	; 0x18
     576:	0e 94 81 06 	call	0xd02	; 0xd02 <__fixunssfsi>
     57a:	dc 01       	movw	r26, r24
     57c:	cb 01       	movw	r24, r22
     57e:	9c 8b       	std	Y+20, r25	; 0x14
     580:	8b 8b       	std	Y+19, r24	; 0x13
     582:	8b 89       	ldd	r24, Y+19	; 0x13
     584:	9c 89       	ldd	r25, Y+20	; 0x14
     586:	98 8b       	std	Y+16, r25	; 0x10
     588:	8f 87       	std	Y+15, r24	; 0x0f
     58a:	8f 85       	ldd	r24, Y+15	; 0x0f
     58c:	98 89       	ldd	r25, Y+16	; 0x10
     58e:	01 97       	sbiw	r24, 0x01	; 1
     590:	f1 f7       	brne	.-4      	; 0x58e <trigger_sonar+0x12c>
     592:	98 8b       	std	Y+16, r25	; 0x10
     594:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(1);
    PORTB &= ~(1<<sonar.trigger_pin);
     596:	a5 e2       	ldi	r26, 0x25	; 37
     598:	b0 e0       	ldi	r27, 0x00	; 0
     59a:	e5 e2       	ldi	r30, 0x25	; 37
     59c:	f0 e0       	ldi	r31, 0x00	; 0
     59e:	80 81       	ld	r24, Z
     5a0:	48 2f       	mov	r20, r24
     5a2:	8e 8d       	ldd	r24, Y+30	; 0x1e
     5a4:	28 2f       	mov	r18, r24
     5a6:	30 e0       	ldi	r19, 0x00	; 0
     5a8:	81 e0       	ldi	r24, 0x01	; 1
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	02 c0       	rjmp	.+4      	; 0x5b2 <trigger_sonar+0x150>
     5ae:	88 0f       	add	r24, r24
     5b0:	99 1f       	adc	r25, r25
     5b2:	2a 95       	dec	r18
     5b4:	e2 f7       	brpl	.-8      	; 0x5ae <trigger_sonar+0x14c>
     5b6:	80 95       	com	r24
     5b8:	84 23       	and	r24, r20
     5ba:	8c 93       	st	X, r24
     5bc:	80 e0       	ldi	r24, 0x00	; 0
     5be:	90 e0       	ldi	r25, 0x00	; 0
     5c0:	a0 e8       	ldi	r26, 0x80	; 128
     5c2:	bf e3       	ldi	r27, 0x3F	; 63
     5c4:	8b 87       	std	Y+11, r24	; 0x0b
     5c6:	9c 87       	std	Y+12, r25	; 0x0c
     5c8:	ad 87       	std	Y+13, r26	; 0x0d
     5ca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     5cc:	6b 85       	ldd	r22, Y+11	; 0x0b
     5ce:	7c 85       	ldd	r23, Y+12	; 0x0c
     5d0:	8d 85       	ldd	r24, Y+13	; 0x0d
     5d2:	9e 85       	ldd	r25, Y+14	; 0x0e
     5d4:	20 e0       	ldi	r18, 0x00	; 0
     5d6:	30 e0       	ldi	r19, 0x00	; 0
     5d8:	4a e7       	ldi	r20, 0x7A	; 122
     5da:	55 e4       	ldi	r21, 0x45	; 69
     5dc:	0e 94 57 08 	call	0x10ae	; 0x10ae <__mulsf3>
     5e0:	dc 01       	movw	r26, r24
     5e2:	cb 01       	movw	r24, r22
     5e4:	8f 83       	std	Y+7, r24	; 0x07
     5e6:	98 87       	std	Y+8, r25	; 0x08
     5e8:	a9 87       	std	Y+9, r26	; 0x09
     5ea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     5ec:	6f 81       	ldd	r22, Y+7	; 0x07
     5ee:	78 85       	ldd	r23, Y+8	; 0x08
     5f0:	89 85       	ldd	r24, Y+9	; 0x09
     5f2:	9a 85       	ldd	r25, Y+10	; 0x0a
     5f4:	20 e0       	ldi	r18, 0x00	; 0
     5f6:	30 e0       	ldi	r19, 0x00	; 0
     5f8:	40 e8       	ldi	r20, 0x80	; 128
     5fa:	5f e3       	ldi	r21, 0x3F	; 63
     5fc:	0e 94 b1 09 	call	0x1362	; 0x1362 <__ltsf2>
     600:	88 23       	and	r24, r24
     602:	2c f4       	brge	.+10     	; 0x60e <trigger_sonar+0x1ac>
		__ticks = 1;
     604:	81 e0       	ldi	r24, 0x01	; 1
     606:	90 e0       	ldi	r25, 0x00	; 0
     608:	9e 83       	std	Y+6, r25	; 0x06
     60a:	8d 83       	std	Y+5, r24	; 0x05
     60c:	3f c0       	rjmp	.+126    	; 0x68c <trigger_sonar+0x22a>
	else if (__tmp > 65535)
     60e:	6f 81       	ldd	r22, Y+7	; 0x07
     610:	78 85       	ldd	r23, Y+8	; 0x08
     612:	89 85       	ldd	r24, Y+9	; 0x09
     614:	9a 85       	ldd	r25, Y+10	; 0x0a
     616:	20 e0       	ldi	r18, 0x00	; 0
     618:	3f ef       	ldi	r19, 0xFF	; 255
     61a:	4f e7       	ldi	r20, 0x7F	; 127
     61c:	57 e4       	ldi	r21, 0x47	; 71
     61e:	0e 94 51 09 	call	0x12a2	; 0x12a2 <__gtsf2>
     622:	18 16       	cp	r1, r24
     624:	4c f5       	brge	.+82     	; 0x678 <trigger_sonar+0x216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     626:	6b 85       	ldd	r22, Y+11	; 0x0b
     628:	7c 85       	ldd	r23, Y+12	; 0x0c
     62a:	8d 85       	ldd	r24, Y+13	; 0x0d
     62c:	9e 85       	ldd	r25, Y+14	; 0x0e
     62e:	20 e0       	ldi	r18, 0x00	; 0
     630:	30 e0       	ldi	r19, 0x00	; 0
     632:	40 e2       	ldi	r20, 0x20	; 32
     634:	51 e4       	ldi	r21, 0x41	; 65
     636:	0e 94 57 08 	call	0x10ae	; 0x10ae <__mulsf3>
     63a:	dc 01       	movw	r26, r24
     63c:	cb 01       	movw	r24, r22
     63e:	bc 01       	movw	r22, r24
     640:	cd 01       	movw	r24, r26
     642:	0e 94 81 06 	call	0xd02	; 0xd02 <__fixunssfsi>
     646:	dc 01       	movw	r26, r24
     648:	cb 01       	movw	r24, r22
     64a:	9e 83       	std	Y+6, r25	; 0x06
     64c:	8d 83       	std	Y+5, r24	; 0x05
     64e:	0f c0       	rjmp	.+30     	; 0x66e <trigger_sonar+0x20c>
     650:	80 e9       	ldi	r24, 0x90	; 144
     652:	91 e0       	ldi	r25, 0x01	; 1
     654:	9c 83       	std	Y+4, r25	; 0x04
     656:	8b 83       	std	Y+3, r24	; 0x03
     658:	8b 81       	ldd	r24, Y+3	; 0x03
     65a:	9c 81       	ldd	r25, Y+4	; 0x04
     65c:	01 97       	sbiw	r24, 0x01	; 1
     65e:	f1 f7       	brne	.-4      	; 0x65c <trigger_sonar+0x1fa>
     660:	9c 83       	std	Y+4, r25	; 0x04
     662:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     664:	8d 81       	ldd	r24, Y+5	; 0x05
     666:	9e 81       	ldd	r25, Y+6	; 0x06
     668:	01 97       	sbiw	r24, 0x01	; 1
     66a:	9e 83       	std	Y+6, r25	; 0x06
     66c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     66e:	8d 81       	ldd	r24, Y+5	; 0x05
     670:	9e 81       	ldd	r25, Y+6	; 0x06
     672:	00 97       	sbiw	r24, 0x00	; 0
     674:	69 f7       	brne	.-38     	; 0x650 <trigger_sonar+0x1ee>
     676:	14 c0       	rjmp	.+40     	; 0x6a0 <trigger_sonar+0x23e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     678:	6f 81       	ldd	r22, Y+7	; 0x07
     67a:	78 85       	ldd	r23, Y+8	; 0x08
     67c:	89 85       	ldd	r24, Y+9	; 0x09
     67e:	9a 85       	ldd	r25, Y+10	; 0x0a
     680:	0e 94 81 06 	call	0xd02	; 0xd02 <__fixunssfsi>
     684:	dc 01       	movw	r26, r24
     686:	cb 01       	movw	r24, r22
     688:	9e 83       	std	Y+6, r25	; 0x06
     68a:	8d 83       	std	Y+5, r24	; 0x05
     68c:	8d 81       	ldd	r24, Y+5	; 0x05
     68e:	9e 81       	ldd	r25, Y+6	; 0x06
     690:	9a 83       	std	Y+2, r25	; 0x02
     692:	89 83       	std	Y+1, r24	; 0x01
     694:	89 81       	ldd	r24, Y+1	; 0x01
     696:	9a 81       	ldd	r25, Y+2	; 0x02
     698:	01 97       	sbiw	r24, 0x01	; 1
     69a:	f1 f7       	brne	.-4      	; 0x698 <trigger_sonar+0x236>
     69c:	9a 83       	std	Y+2, r25	; 0x02
     69e:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1);
}
     6a0:	a4 96       	adiw	r28, 0x24	; 36
     6a2:	0f b6       	in	r0, 0x3f	; 63
     6a4:	f8 94       	cli
     6a6:	de bf       	out	0x3e, r29	; 62
     6a8:	0f be       	out	0x3f, r0	; 63
     6aa:	cd bf       	out	0x3d, r28	; 61
     6ac:	cf 91       	pop	r28
     6ae:	df 91       	pop	r29
     6b0:	08 95       	ret

000006b2 <calculate_distance>:

void calculate_distance(sonar *sonar)
{
     6b2:	df 93       	push	r29
     6b4:	cf 93       	push	r28
     6b6:	0f 92       	push	r0
     6b8:	0f 92       	push	r0
     6ba:	cd b7       	in	r28, 0x3d	; 61
     6bc:	de b7       	in	r29, 0x3e	; 62
     6be:	9a 83       	std	Y+2, r25	; 0x02
     6c0:	89 83       	std	Y+1, r24	; 0x01
    sonar->mM = (343000*1024*sonar->timerticks)/(2 * F_CPU);
     6c2:	e9 81       	ldd	r30, Y+1	; 0x01
     6c4:	fa 81       	ldd	r31, Y+2	; 0x02
     6c6:	82 81       	ldd	r24, Z+2	; 0x02
     6c8:	93 81       	ldd	r25, Z+3	; 0x03
     6ca:	cc 01       	movw	r24, r24
     6cc:	a0 e0       	ldi	r26, 0x00	; 0
     6ce:	b0 e0       	ldi	r27, 0x00	; 0
     6d0:	20 e0       	ldi	r18, 0x00	; 0
     6d2:	30 e6       	ldi	r19, 0x60	; 96
     6d4:	4f ee       	ldi	r20, 0xEF	; 239
     6d6:	54 e1       	ldi	r21, 0x14	; 20
     6d8:	bc 01       	movw	r22, r24
     6da:	cd 01       	movw	r24, r26
     6dc:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <__mulsi3>
     6e0:	dc 01       	movw	r26, r24
     6e2:	cb 01       	movw	r24, r22
     6e4:	20 e0       	ldi	r18, 0x00	; 0
     6e6:	38 e4       	ldi	r19, 0x48	; 72
     6e8:	48 ee       	ldi	r20, 0xE8	; 232
     6ea:	51 e0       	ldi	r21, 0x01	; 1
     6ec:	bc 01       	movw	r22, r24
     6ee:	cd 01       	movw	r24, r26
     6f0:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <__udivmodsi4>
     6f4:	da 01       	movw	r26, r20
     6f6:	c9 01       	movw	r24, r18
     6f8:	e9 81       	ldd	r30, Y+1	; 0x01
     6fa:	fa 81       	ldd	r31, Y+2	; 0x02
     6fc:	84 83       	std	Z+4, r24	; 0x04
     6fe:	95 83       	std	Z+5, r25	; 0x05
     700:	a6 83       	std	Z+6, r26	; 0x06
     702:	b7 83       	std	Z+7, r27	; 0x07
}
     704:	0f 90       	pop	r0
     706:	0f 90       	pop	r0
     708:	cf 91       	pop	r28
     70a:	df 91       	pop	r29
     70c:	08 95       	ret

0000070e <__vector_9>:

ISR(PCINT0_vect)
{
     70e:	1f 92       	push	r1
     710:	0f 92       	push	r0
     712:	0f b6       	in	r0, 0x3f	; 63
     714:	0f 92       	push	r0
     716:	00 90 5b 00 	lds	r0, 0x005B
     71a:	0f 92       	push	r0
     71c:	11 24       	eor	r1, r1
     71e:	2f 93       	push	r18
     720:	3f 93       	push	r19
     722:	4f 93       	push	r20
     724:	5f 93       	push	r21
     726:	6f 93       	push	r22
     728:	7f 93       	push	r23
     72a:	8f 93       	push	r24
     72c:	9f 93       	push	r25
     72e:	af 93       	push	r26
     730:	bf 93       	push	r27
     732:	ef 93       	push	r30
     734:	ff 93       	push	r31
     736:	df 93       	push	r29
     738:	cf 93       	push	r28
     73a:	cd b7       	in	r28, 0x3d	; 61
     73c:	de b7       	in	r29, 0x3e	; 62
transmit_byte(2);
     73e:	82 e0       	ldi	r24, 0x02	; 2
     740:	0e 94 06 01 	call	0x20c	; 0x20c <transmit_byte>
    if(bit_is_set(DDRB, front_sonar.echo_pin))
     744:	e4 e2       	ldi	r30, 0x24	; 36
     746:	f0 e0       	ldi	r31, 0x00	; 0
     748:	80 81       	ld	r24, Z
     74a:	28 2f       	mov	r18, r24
     74c:	30 e0       	ldi	r19, 0x00	; 0
     74e:	80 91 14 02 	lds	r24, 0x0214
     752:	88 2f       	mov	r24, r24
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	a9 01       	movw	r20, r18
     758:	02 c0       	rjmp	.+4      	; 0x75e <__vector_9+0x50>
     75a:	55 95       	asr	r21
     75c:	47 95       	ror	r20
     75e:	8a 95       	dec	r24
     760:	e2 f7       	brpl	.-8      	; 0x75a <__vector_9+0x4c>
     762:	ca 01       	movw	r24, r20
     764:	81 70       	andi	r24, 0x01	; 1
     766:	90 70       	andi	r25, 0x00	; 0
     768:	88 23       	and	r24, r24
     76a:	e9 f0       	breq	.+58     	; 0x7a6 <__vector_9+0x98>
    {
        front_sonar.timerticks = TCNT4;
     76c:	e4 ea       	ldi	r30, 0xA4	; 164
     76e:	f0 e0       	ldi	r31, 0x00	; 0
     770:	80 81       	ld	r24, Z
     772:	91 81       	ldd	r25, Z+1	; 0x01
     774:	90 93 17 02 	sts	0x0217, r25
     778:	80 93 16 02 	sts	0x0216, r24
        trigger_sonar(front_sonar);
     77c:	20 91 14 02 	lds	r18, 0x0214
     780:	30 91 15 02 	lds	r19, 0x0215
     784:	40 91 16 02 	lds	r20, 0x0216
     788:	50 91 17 02 	lds	r21, 0x0217
     78c:	60 91 18 02 	lds	r22, 0x0218
     790:	70 91 19 02 	lds	r23, 0x0219
     794:	80 91 1a 02 	lds	r24, 0x021A
     798:	90 91 1b 02 	lds	r25, 0x021B
     79c:	0e 94 31 02 	call	0x462	; 0x462 <trigger_sonar>
        transmit_byte(3);
     7a0:	83 e0       	ldi	r24, 0x03	; 3
     7a2:	0e 94 06 01 	call	0x20c	; 0x20c <transmit_byte>
    }
    if(bit_is_set(DDRB, back_sonar.echo_pin))
     7a6:	e4 e2       	ldi	r30, 0x24	; 36
     7a8:	f0 e0       	ldi	r31, 0x00	; 0
     7aa:	80 81       	ld	r24, Z
     7ac:	28 2f       	mov	r18, r24
     7ae:	30 e0       	ldi	r19, 0x00	; 0
     7b0:	80 91 24 02 	lds	r24, 0x0224
     7b4:	88 2f       	mov	r24, r24
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	a9 01       	movw	r20, r18
     7ba:	02 c0       	rjmp	.+4      	; 0x7c0 <__vector_9+0xb2>
     7bc:	55 95       	asr	r21
     7be:	47 95       	ror	r20
     7c0:	8a 95       	dec	r24
     7c2:	e2 f7       	brpl	.-8      	; 0x7bc <__vector_9+0xae>
     7c4:	ca 01       	movw	r24, r20
     7c6:	81 70       	andi	r24, 0x01	; 1
     7c8:	90 70       	andi	r25, 0x00	; 0
     7ca:	88 23       	and	r24, r24
     7cc:	41 f0       	breq	.+16     	; 0x7de <__vector_9+0xd0>
    {
        back_sonar.timerticks = TCNT4;
     7ce:	e4 ea       	ldi	r30, 0xA4	; 164
     7d0:	f0 e0       	ldi	r31, 0x00	; 0
     7d2:	80 81       	ld	r24, Z
     7d4:	91 81       	ldd	r25, Z+1	; 0x01
     7d6:	90 93 27 02 	sts	0x0227, r25
     7da:	80 93 26 02 	sts	0x0226, r24
    }
    if(bit_is_set(DDRB, left_sonar.echo_pin))
     7de:	e4 e2       	ldi	r30, 0x24	; 36
     7e0:	f0 e0       	ldi	r31, 0x00	; 0
     7e2:	80 81       	ld	r24, Z
     7e4:	28 2f       	mov	r18, r24
     7e6:	30 e0       	ldi	r19, 0x00	; 0
     7e8:	80 91 2c 02 	lds	r24, 0x022C
     7ec:	88 2f       	mov	r24, r24
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	a9 01       	movw	r20, r18
     7f2:	02 c0       	rjmp	.+4      	; 0x7f8 <__vector_9+0xea>
     7f4:	55 95       	asr	r21
     7f6:	47 95       	ror	r20
     7f8:	8a 95       	dec	r24
     7fa:	e2 f7       	brpl	.-8      	; 0x7f4 <__vector_9+0xe6>
     7fc:	ca 01       	movw	r24, r20
     7fe:	81 70       	andi	r24, 0x01	; 1
     800:	90 70       	andi	r25, 0x00	; 0
     802:	88 23       	and	r24, r24
     804:	41 f0       	breq	.+16     	; 0x816 <__vector_9+0x108>
    {
        left_sonar.timerticks = TCNT4;
     806:	e4 ea       	ldi	r30, 0xA4	; 164
     808:	f0 e0       	ldi	r31, 0x00	; 0
     80a:	80 81       	ld	r24, Z
     80c:	91 81       	ldd	r25, Z+1	; 0x01
     80e:	90 93 2f 02 	sts	0x022F, r25
     812:	80 93 2e 02 	sts	0x022E, r24
    }
    if(bit_is_set(DDRB, right_sonar.echo_pin))
     816:	e4 e2       	ldi	r30, 0x24	; 36
     818:	f0 e0       	ldi	r31, 0x00	; 0
     81a:	80 81       	ld	r24, Z
     81c:	28 2f       	mov	r18, r24
     81e:	30 e0       	ldi	r19, 0x00	; 0
     820:	80 91 1c 02 	lds	r24, 0x021C
     824:	88 2f       	mov	r24, r24
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	a9 01       	movw	r20, r18
     82a:	02 c0       	rjmp	.+4      	; 0x830 <__vector_9+0x122>
     82c:	55 95       	asr	r21
     82e:	47 95       	ror	r20
     830:	8a 95       	dec	r24
     832:	e2 f7       	brpl	.-8      	; 0x82c <__vector_9+0x11e>
     834:	ca 01       	movw	r24, r20
     836:	81 70       	andi	r24, 0x01	; 1
     838:	90 70       	andi	r25, 0x00	; 0
     83a:	88 23       	and	r24, r24
     83c:	41 f0       	breq	.+16     	; 0x84e <__vector_9+0x140>
    {
        right_sonar.timerticks = TCNT4;
     83e:	e4 ea       	ldi	r30, 0xA4	; 164
     840:	f0 e0       	ldi	r31, 0x00	; 0
     842:	80 81       	ld	r24, Z
     844:	91 81       	ldd	r25, Z+1	; 0x01
     846:	90 93 1f 02 	sts	0x021F, r25
     84a:	80 93 1e 02 	sts	0x021E, r24
    }
}
     84e:	cf 91       	pop	r28
     850:	df 91       	pop	r29
     852:	ff 91       	pop	r31
     854:	ef 91       	pop	r30
     856:	bf 91       	pop	r27
     858:	af 91       	pop	r26
     85a:	9f 91       	pop	r25
     85c:	8f 91       	pop	r24
     85e:	7f 91       	pop	r23
     860:	6f 91       	pop	r22
     862:	5f 91       	pop	r21
     864:	4f 91       	pop	r20
     866:	3f 91       	pop	r19
     868:	2f 91       	pop	r18
     86a:	0f 90       	pop	r0
     86c:	00 92 5b 00 	sts	0x005B, r0
     870:	0f 90       	pop	r0
     872:	0f be       	out	0x3f, r0	; 63
     874:	0f 90       	pop	r0
     876:	1f 90       	pop	r1
     878:	18 95       	reti

0000087a <construct_stepper>:
#include "stepper.h"
#include "util/delay.h"
#include <avr/interrupt.h>

void construct_stepper(struct stepper *stepper, uint8_t step_pin, uint8_t dir_pin)
{
     87a:	df 93       	push	r29
     87c:	cf 93       	push	r28
     87e:	00 d0       	rcall	.+0      	; 0x880 <construct_stepper+0x6>
     880:	0f 92       	push	r0
     882:	cd b7       	in	r28, 0x3d	; 61
     884:	de b7       	in	r29, 0x3e	; 62
     886:	9a 83       	std	Y+2, r25	; 0x02
     888:	89 83       	std	Y+1, r24	; 0x01
     88a:	6b 83       	std	Y+3, r22	; 0x03
     88c:	4c 83       	std	Y+4, r20	; 0x04
    stepper->speed = 125;
     88e:	e9 81       	ldd	r30, Y+1	; 0x01
     890:	fa 81       	ldd	r31, Y+2	; 0x02
     892:	8d e7       	ldi	r24, 0x7D	; 125
     894:	80 83       	st	Z, r24
    stepper->steps = 0;
     896:	e9 81       	ldd	r30, Y+1	; 0x01
     898:	fa 81       	ldd	r31, Y+2	; 0x02
     89a:	15 82       	std	Z+5, r1	; 0x05
     89c:	14 82       	std	Z+4, r1	; 0x04
    stepper->step_pin = step_pin;
     89e:	e9 81       	ldd	r30, Y+1	; 0x01
     8a0:	fa 81       	ldd	r31, Y+2	; 0x02
     8a2:	8b 81       	ldd	r24, Y+3	; 0x03
     8a4:	82 83       	std	Z+2, r24	; 0x02
    stepper->dir_pin = dir_pin;
     8a6:	e9 81       	ldd	r30, Y+1	; 0x01
     8a8:	fa 81       	ldd	r31, Y+2	; 0x02
     8aa:	8c 81       	ldd	r24, Y+4	; 0x04
     8ac:	83 83       	std	Z+3, r24	; 0x03
    stepper->direction = 0;
     8ae:	e9 81       	ldd	r30, Y+1	; 0x01
     8b0:	fa 81       	ldd	r31, Y+2	; 0x02
     8b2:	11 82       	std	Z+1, r1	; 0x01
}
     8b4:	0f 90       	pop	r0
     8b6:	0f 90       	pop	r0
     8b8:	0f 90       	pop	r0
     8ba:	0f 90       	pop	r0
     8bc:	cf 91       	pop	r28
     8be:	df 91       	pop	r29
     8c0:	08 95       	ret

000008c2 <initialize_steppers>:

void initialize_steppers()
{
     8c2:	df 93       	push	r29
     8c4:	cf 93       	push	r28
     8c6:	0f 92       	push	r0
     8c8:	cd b7       	in	r28, 0x3d	; 61
     8ca:	de b7       	in	r29, 0x3e	; 62
    stepper_DDR |= 0xFF;//init all pins in bank C
     8cc:	e7 e0       	ldi	r30, 0x07	; 7
     8ce:	f1 e0       	ldi	r31, 0x01	; 1
     8d0:	80 81       	ld	r24, Z
     8d2:	e7 e0       	ldi	r30, 0x07	; 7
     8d4:	f1 e0       	ldi	r31, 0x01	; 1
     8d6:	8f ef       	ldi	r24, 0xFF	; 255
     8d8:	80 83       	st	Z, r24
}
     8da:	0f 90       	pop	r0
     8dc:	cf 91       	pop	r28
     8de:	df 91       	pop	r29
     8e0:	08 95       	ret

000008e2 <set_dir>:

void set_dir(struct stepper *stepper)
{
     8e2:	df 93       	push	r29
     8e4:	cf 93       	push	r28
     8e6:	00 d0       	rcall	.+0      	; 0x8e8 <set_dir+0x6>
     8e8:	0f 92       	push	r0
     8ea:	cd b7       	in	r28, 0x3d	; 61
     8ec:	de b7       	in	r29, 0x3e	; 62
     8ee:	9a 83       	std	Y+2, r25	; 0x02
     8f0:	89 83       	std	Y+1, r24	; 0x01
    switch(stepper->direction)
     8f2:	e9 81       	ldd	r30, Y+1	; 0x01
     8f4:	fa 81       	ldd	r31, Y+2	; 0x02
     8f6:	81 81       	ldd	r24, Z+1	; 0x01
     8f8:	28 2f       	mov	r18, r24
     8fa:	30 e0       	ldi	r19, 0x00	; 0
     8fc:	3c 83       	std	Y+4, r19	; 0x04
     8fe:	2b 83       	std	Y+3, r18	; 0x03
     900:	8b 81       	ldd	r24, Y+3	; 0x03
     902:	9c 81       	ldd	r25, Y+4	; 0x04
     904:	81 30       	cpi	r24, 0x01	; 1
     906:	91 05       	cpc	r25, r1
     908:	31 f0       	breq	.+12     	; 0x916 <set_dir+0x34>
     90a:	2b 81       	ldd	r18, Y+3	; 0x03
     90c:	3c 81       	ldd	r19, Y+4	; 0x04
     90e:	22 30       	cpi	r18, 0x02	; 2
     910:	31 05       	cpc	r19, r1
     912:	b9 f0       	breq	.+46     	; 0x942 <set_dir+0x60>
     914:	2c c0       	rjmp	.+88     	; 0x96e <set_dir+0x8c>
    {
    case 1:
        stepper_DDR |= (1<<stepper->step_pin);
     916:	a7 e0       	ldi	r26, 0x07	; 7
     918:	b1 e0       	ldi	r27, 0x01	; 1
     91a:	e7 e0       	ldi	r30, 0x07	; 7
     91c:	f1 e0       	ldi	r31, 0x01	; 1
     91e:	80 81       	ld	r24, Z
     920:	48 2f       	mov	r20, r24
     922:	e9 81       	ldd	r30, Y+1	; 0x01
     924:	fa 81       	ldd	r31, Y+2	; 0x02
     926:	82 81       	ldd	r24, Z+2	; 0x02
     928:	28 2f       	mov	r18, r24
     92a:	30 e0       	ldi	r19, 0x00	; 0
     92c:	81 e0       	ldi	r24, 0x01	; 1
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	02 2e       	mov	r0, r18
     932:	02 c0       	rjmp	.+4      	; 0x938 <set_dir+0x56>
     934:	88 0f       	add	r24, r24
     936:	99 1f       	adc	r25, r25
     938:	0a 94       	dec	r0
     93a:	e2 f7       	brpl	.-8      	; 0x934 <set_dir+0x52>
     93c:	84 2b       	or	r24, r20
     93e:	8c 93       	st	X, r24
     940:	16 c0       	rjmp	.+44     	; 0x96e <set_dir+0x8c>
        break;
    case 2:
        stepper_DDR &= ~(1<<stepper->step_pin);
     942:	a7 e0       	ldi	r26, 0x07	; 7
     944:	b1 e0       	ldi	r27, 0x01	; 1
     946:	e7 e0       	ldi	r30, 0x07	; 7
     948:	f1 e0       	ldi	r31, 0x01	; 1
     94a:	80 81       	ld	r24, Z
     94c:	48 2f       	mov	r20, r24
     94e:	e9 81       	ldd	r30, Y+1	; 0x01
     950:	fa 81       	ldd	r31, Y+2	; 0x02
     952:	82 81       	ldd	r24, Z+2	; 0x02
     954:	28 2f       	mov	r18, r24
     956:	30 e0       	ldi	r19, 0x00	; 0
     958:	81 e0       	ldi	r24, 0x01	; 1
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	02 2e       	mov	r0, r18
     95e:	02 c0       	rjmp	.+4      	; 0x964 <set_dir+0x82>
     960:	88 0f       	add	r24, r24
     962:	99 1f       	adc	r25, r25
     964:	0a 94       	dec	r0
     966:	e2 f7       	brpl	.-8      	; 0x960 <set_dir+0x7e>
     968:	80 95       	com	r24
     96a:	84 23       	and	r24, r20
     96c:	8c 93       	st	X, r24
        break;
    default:
        break;
    }
}
     96e:	0f 90       	pop	r0
     970:	0f 90       	pop	r0
     972:	0f 90       	pop	r0
     974:	0f 90       	pop	r0
     976:	cf 91       	pop	r28
     978:	df 91       	pop	r29
     97a:	08 95       	ret

0000097c <step>:

void step(struct stepper *stepper)
{
     97c:	df 93       	push	r29
     97e:	cf 93       	push	r28
     980:	cd b7       	in	r28, 0x3d	; 61
     982:	de b7       	in	r29, 0x3e	; 62
     984:	6e 97       	sbiw	r28, 0x1e	; 30
     986:	0f b6       	in	r0, 0x3f	; 63
     988:	f8 94       	cli
     98a:	de bf       	out	0x3e, r29	; 62
     98c:	0f be       	out	0x3f, r0	; 63
     98e:	cd bf       	out	0x3d, r28	; 61
     990:	9e 8f       	std	Y+30, r25	; 0x1e
     992:	8d 8f       	std	Y+29, r24	; 0x1d
    stepper->steps++;
     994:	ed 8d       	ldd	r30, Y+29	; 0x1d
     996:	fe 8d       	ldd	r31, Y+30	; 0x1e
     998:	84 81       	ldd	r24, Z+4	; 0x04
     99a:	95 81       	ldd	r25, Z+5	; 0x05
     99c:	01 96       	adiw	r24, 0x01	; 1
     99e:	ed 8d       	ldd	r30, Y+29	; 0x1d
     9a0:	fe 8d       	ldd	r31, Y+30	; 0x1e
     9a2:	95 83       	std	Z+5, r25	; 0x05
     9a4:	84 83       	std	Z+4, r24	; 0x04
    stepper_DDR |= (1<<stepper->step_pin);
     9a6:	a7 e0       	ldi	r26, 0x07	; 7
     9a8:	b1 e0       	ldi	r27, 0x01	; 1
     9aa:	e7 e0       	ldi	r30, 0x07	; 7
     9ac:	f1 e0       	ldi	r31, 0x01	; 1
     9ae:	80 81       	ld	r24, Z
     9b0:	48 2f       	mov	r20, r24
     9b2:	ed 8d       	ldd	r30, Y+29	; 0x1d
     9b4:	fe 8d       	ldd	r31, Y+30	; 0x1e
     9b6:	82 81       	ldd	r24, Z+2	; 0x02
     9b8:	28 2f       	mov	r18, r24
     9ba:	30 e0       	ldi	r19, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	02 c0       	rjmp	.+4      	; 0x9c6 <step+0x4a>
     9c2:	88 0f       	add	r24, r24
     9c4:	99 1f       	adc	r25, r25
     9c6:	2a 95       	dec	r18
     9c8:	e2 f7       	brpl	.-8      	; 0x9c2 <step+0x46>
     9ca:	84 2b       	or	r24, r20
     9cc:	8c 93       	st	X, r24
     9ce:	80 e0       	ldi	r24, 0x00	; 0
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	a0 e8       	ldi	r26, 0x80	; 128
     9d4:	bf e3       	ldi	r27, 0x3F	; 63
     9d6:	89 8f       	std	Y+25, r24	; 0x19
     9d8:	9a 8f       	std	Y+26, r25	; 0x1a
     9da:	ab 8f       	std	Y+27, r26	; 0x1b
     9dc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     9de:	69 8d       	ldd	r22, Y+25	; 0x19
     9e0:	7a 8d       	ldd	r23, Y+26	; 0x1a
     9e2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     9e4:	9c 8d       	ldd	r25, Y+28	; 0x1c
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	4a e7       	ldi	r20, 0x7A	; 122
     9ec:	55 e4       	ldi	r21, 0x45	; 69
     9ee:	0e 94 57 08 	call	0x10ae	; 0x10ae <__mulsf3>
     9f2:	dc 01       	movw	r26, r24
     9f4:	cb 01       	movw	r24, r22
     9f6:	8d 8b       	std	Y+21, r24	; 0x15
     9f8:	9e 8b       	std	Y+22, r25	; 0x16
     9fa:	af 8b       	std	Y+23, r26	; 0x17
     9fc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     9fe:	6d 89       	ldd	r22, Y+21	; 0x15
     a00:	7e 89       	ldd	r23, Y+22	; 0x16
     a02:	8f 89       	ldd	r24, Y+23	; 0x17
     a04:	98 8d       	ldd	r25, Y+24	; 0x18
     a06:	20 e0       	ldi	r18, 0x00	; 0
     a08:	30 e0       	ldi	r19, 0x00	; 0
     a0a:	40 e8       	ldi	r20, 0x80	; 128
     a0c:	5f e3       	ldi	r21, 0x3F	; 63
     a0e:	0e 94 b1 09 	call	0x1362	; 0x1362 <__ltsf2>
     a12:	88 23       	and	r24, r24
     a14:	2c f4       	brge	.+10     	; 0xa20 <step+0xa4>
		__ticks = 1;
     a16:	81 e0       	ldi	r24, 0x01	; 1
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	9c 8b       	std	Y+20, r25	; 0x14
     a1c:	8b 8b       	std	Y+19, r24	; 0x13
     a1e:	3f c0       	rjmp	.+126    	; 0xa9e <step+0x122>
	else if (__tmp > 65535)
     a20:	6d 89       	ldd	r22, Y+21	; 0x15
     a22:	7e 89       	ldd	r23, Y+22	; 0x16
     a24:	8f 89       	ldd	r24, Y+23	; 0x17
     a26:	98 8d       	ldd	r25, Y+24	; 0x18
     a28:	20 e0       	ldi	r18, 0x00	; 0
     a2a:	3f ef       	ldi	r19, 0xFF	; 255
     a2c:	4f e7       	ldi	r20, 0x7F	; 127
     a2e:	57 e4       	ldi	r21, 0x47	; 71
     a30:	0e 94 51 09 	call	0x12a2	; 0x12a2 <__gtsf2>
     a34:	18 16       	cp	r1, r24
     a36:	4c f5       	brge	.+82     	; 0xa8a <step+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a38:	69 8d       	ldd	r22, Y+25	; 0x19
     a3a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     a3c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     a3e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     a40:	20 e0       	ldi	r18, 0x00	; 0
     a42:	30 e0       	ldi	r19, 0x00	; 0
     a44:	40 e2       	ldi	r20, 0x20	; 32
     a46:	51 e4       	ldi	r21, 0x41	; 65
     a48:	0e 94 57 08 	call	0x10ae	; 0x10ae <__mulsf3>
     a4c:	dc 01       	movw	r26, r24
     a4e:	cb 01       	movw	r24, r22
     a50:	bc 01       	movw	r22, r24
     a52:	cd 01       	movw	r24, r26
     a54:	0e 94 81 06 	call	0xd02	; 0xd02 <__fixunssfsi>
     a58:	dc 01       	movw	r26, r24
     a5a:	cb 01       	movw	r24, r22
     a5c:	9c 8b       	std	Y+20, r25	; 0x14
     a5e:	8b 8b       	std	Y+19, r24	; 0x13
     a60:	0f c0       	rjmp	.+30     	; 0xa80 <step+0x104>
     a62:	80 e9       	ldi	r24, 0x90	; 144
     a64:	91 e0       	ldi	r25, 0x01	; 1
     a66:	9a 8b       	std	Y+18, r25	; 0x12
     a68:	89 8b       	std	Y+17, r24	; 0x11
     a6a:	89 89       	ldd	r24, Y+17	; 0x11
     a6c:	9a 89       	ldd	r25, Y+18	; 0x12
     a6e:	01 97       	sbiw	r24, 0x01	; 1
     a70:	f1 f7       	brne	.-4      	; 0xa6e <step+0xf2>
     a72:	9a 8b       	std	Y+18, r25	; 0x12
     a74:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a76:	8b 89       	ldd	r24, Y+19	; 0x13
     a78:	9c 89       	ldd	r25, Y+20	; 0x14
     a7a:	01 97       	sbiw	r24, 0x01	; 1
     a7c:	9c 8b       	std	Y+20, r25	; 0x14
     a7e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a80:	8b 89       	ldd	r24, Y+19	; 0x13
     a82:	9c 89       	ldd	r25, Y+20	; 0x14
     a84:	00 97       	sbiw	r24, 0x00	; 0
     a86:	69 f7       	brne	.-38     	; 0xa62 <step+0xe6>
     a88:	14 c0       	rjmp	.+40     	; 0xab2 <step+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a8a:	6d 89       	ldd	r22, Y+21	; 0x15
     a8c:	7e 89       	ldd	r23, Y+22	; 0x16
     a8e:	8f 89       	ldd	r24, Y+23	; 0x17
     a90:	98 8d       	ldd	r25, Y+24	; 0x18
     a92:	0e 94 81 06 	call	0xd02	; 0xd02 <__fixunssfsi>
     a96:	dc 01       	movw	r26, r24
     a98:	cb 01       	movw	r24, r22
     a9a:	9c 8b       	std	Y+20, r25	; 0x14
     a9c:	8b 8b       	std	Y+19, r24	; 0x13
     a9e:	8b 89       	ldd	r24, Y+19	; 0x13
     aa0:	9c 89       	ldd	r25, Y+20	; 0x14
     aa2:	98 8b       	std	Y+16, r25	; 0x10
     aa4:	8f 87       	std	Y+15, r24	; 0x0f
     aa6:	8f 85       	ldd	r24, Y+15	; 0x0f
     aa8:	98 89       	ldd	r25, Y+16	; 0x10
     aaa:	01 97       	sbiw	r24, 0x01	; 1
     aac:	f1 f7       	brne	.-4      	; 0xaaa <step+0x12e>
     aae:	98 8b       	std	Y+16, r25	; 0x10
     ab0:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(1);
    stepper_DDR &= ~(1<<stepper->step_pin);
     ab2:	a7 e0       	ldi	r26, 0x07	; 7
     ab4:	b1 e0       	ldi	r27, 0x01	; 1
     ab6:	e7 e0       	ldi	r30, 0x07	; 7
     ab8:	f1 e0       	ldi	r31, 0x01	; 1
     aba:	80 81       	ld	r24, Z
     abc:	48 2f       	mov	r20, r24
     abe:	ed 8d       	ldd	r30, Y+29	; 0x1d
     ac0:	fe 8d       	ldd	r31, Y+30	; 0x1e
     ac2:	82 81       	ldd	r24, Z+2	; 0x02
     ac4:	28 2f       	mov	r18, r24
     ac6:	30 e0       	ldi	r19, 0x00	; 0
     ac8:	81 e0       	ldi	r24, 0x01	; 1
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	02 c0       	rjmp	.+4      	; 0xad2 <step+0x156>
     ace:	88 0f       	add	r24, r24
     ad0:	99 1f       	adc	r25, r25
     ad2:	2a 95       	dec	r18
     ad4:	e2 f7       	brpl	.-8      	; 0xace <step+0x152>
     ad6:	80 95       	com	r24
     ad8:	84 23       	and	r24, r20
     ada:	8c 93       	st	X, r24
     adc:	80 e0       	ldi	r24, 0x00	; 0
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	a0 e8       	ldi	r26, 0x80	; 128
     ae2:	bf e3       	ldi	r27, 0x3F	; 63
     ae4:	8b 87       	std	Y+11, r24	; 0x0b
     ae6:	9c 87       	std	Y+12, r25	; 0x0c
     ae8:	ad 87       	std	Y+13, r26	; 0x0d
     aea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     aec:	6b 85       	ldd	r22, Y+11	; 0x0b
     aee:	7c 85       	ldd	r23, Y+12	; 0x0c
     af0:	8d 85       	ldd	r24, Y+13	; 0x0d
     af2:	9e 85       	ldd	r25, Y+14	; 0x0e
     af4:	20 e0       	ldi	r18, 0x00	; 0
     af6:	30 e0       	ldi	r19, 0x00	; 0
     af8:	4a e7       	ldi	r20, 0x7A	; 122
     afa:	55 e4       	ldi	r21, 0x45	; 69
     afc:	0e 94 57 08 	call	0x10ae	; 0x10ae <__mulsf3>
     b00:	dc 01       	movw	r26, r24
     b02:	cb 01       	movw	r24, r22
     b04:	8f 83       	std	Y+7, r24	; 0x07
     b06:	98 87       	std	Y+8, r25	; 0x08
     b08:	a9 87       	std	Y+9, r26	; 0x09
     b0a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     b0c:	6f 81       	ldd	r22, Y+7	; 0x07
     b0e:	78 85       	ldd	r23, Y+8	; 0x08
     b10:	89 85       	ldd	r24, Y+9	; 0x09
     b12:	9a 85       	ldd	r25, Y+10	; 0x0a
     b14:	20 e0       	ldi	r18, 0x00	; 0
     b16:	30 e0       	ldi	r19, 0x00	; 0
     b18:	40 e8       	ldi	r20, 0x80	; 128
     b1a:	5f e3       	ldi	r21, 0x3F	; 63
     b1c:	0e 94 b1 09 	call	0x1362	; 0x1362 <__ltsf2>
     b20:	88 23       	and	r24, r24
     b22:	2c f4       	brge	.+10     	; 0xb2e <step+0x1b2>
		__ticks = 1;
     b24:	81 e0       	ldi	r24, 0x01	; 1
     b26:	90 e0       	ldi	r25, 0x00	; 0
     b28:	9e 83       	std	Y+6, r25	; 0x06
     b2a:	8d 83       	std	Y+5, r24	; 0x05
     b2c:	3f c0       	rjmp	.+126    	; 0xbac <step+0x230>
	else if (__tmp > 65535)
     b2e:	6f 81       	ldd	r22, Y+7	; 0x07
     b30:	78 85       	ldd	r23, Y+8	; 0x08
     b32:	89 85       	ldd	r24, Y+9	; 0x09
     b34:	9a 85       	ldd	r25, Y+10	; 0x0a
     b36:	20 e0       	ldi	r18, 0x00	; 0
     b38:	3f ef       	ldi	r19, 0xFF	; 255
     b3a:	4f e7       	ldi	r20, 0x7F	; 127
     b3c:	57 e4       	ldi	r21, 0x47	; 71
     b3e:	0e 94 51 09 	call	0x12a2	; 0x12a2 <__gtsf2>
     b42:	18 16       	cp	r1, r24
     b44:	4c f5       	brge	.+82     	; 0xb98 <step+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b46:	6b 85       	ldd	r22, Y+11	; 0x0b
     b48:	7c 85       	ldd	r23, Y+12	; 0x0c
     b4a:	8d 85       	ldd	r24, Y+13	; 0x0d
     b4c:	9e 85       	ldd	r25, Y+14	; 0x0e
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e2       	ldi	r20, 0x20	; 32
     b54:	51 e4       	ldi	r21, 0x41	; 65
     b56:	0e 94 57 08 	call	0x10ae	; 0x10ae <__mulsf3>
     b5a:	dc 01       	movw	r26, r24
     b5c:	cb 01       	movw	r24, r22
     b5e:	bc 01       	movw	r22, r24
     b60:	cd 01       	movw	r24, r26
     b62:	0e 94 81 06 	call	0xd02	; 0xd02 <__fixunssfsi>
     b66:	dc 01       	movw	r26, r24
     b68:	cb 01       	movw	r24, r22
     b6a:	9e 83       	std	Y+6, r25	; 0x06
     b6c:	8d 83       	std	Y+5, r24	; 0x05
     b6e:	0f c0       	rjmp	.+30     	; 0xb8e <step+0x212>
     b70:	80 e9       	ldi	r24, 0x90	; 144
     b72:	91 e0       	ldi	r25, 0x01	; 1
     b74:	9c 83       	std	Y+4, r25	; 0x04
     b76:	8b 83       	std	Y+3, r24	; 0x03
     b78:	8b 81       	ldd	r24, Y+3	; 0x03
     b7a:	9c 81       	ldd	r25, Y+4	; 0x04
     b7c:	01 97       	sbiw	r24, 0x01	; 1
     b7e:	f1 f7       	brne	.-4      	; 0xb7c <step+0x200>
     b80:	9c 83       	std	Y+4, r25	; 0x04
     b82:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b84:	8d 81       	ldd	r24, Y+5	; 0x05
     b86:	9e 81       	ldd	r25, Y+6	; 0x06
     b88:	01 97       	sbiw	r24, 0x01	; 1
     b8a:	9e 83       	std	Y+6, r25	; 0x06
     b8c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b8e:	8d 81       	ldd	r24, Y+5	; 0x05
     b90:	9e 81       	ldd	r25, Y+6	; 0x06
     b92:	00 97       	sbiw	r24, 0x00	; 0
     b94:	69 f7       	brne	.-38     	; 0xb70 <step+0x1f4>
     b96:	14 c0       	rjmp	.+40     	; 0xbc0 <step+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b98:	6f 81       	ldd	r22, Y+7	; 0x07
     b9a:	78 85       	ldd	r23, Y+8	; 0x08
     b9c:	89 85       	ldd	r24, Y+9	; 0x09
     b9e:	9a 85       	ldd	r25, Y+10	; 0x0a
     ba0:	0e 94 81 06 	call	0xd02	; 0xd02 <__fixunssfsi>
     ba4:	dc 01       	movw	r26, r24
     ba6:	cb 01       	movw	r24, r22
     ba8:	9e 83       	std	Y+6, r25	; 0x06
     baa:	8d 83       	std	Y+5, r24	; 0x05
     bac:	8d 81       	ldd	r24, Y+5	; 0x05
     bae:	9e 81       	ldd	r25, Y+6	; 0x06
     bb0:	9a 83       	std	Y+2, r25	; 0x02
     bb2:	89 83       	std	Y+1, r24	; 0x01
     bb4:	89 81       	ldd	r24, Y+1	; 0x01
     bb6:	9a 81       	ldd	r25, Y+2	; 0x02
     bb8:	01 97       	sbiw	r24, 0x01	; 1
     bba:	f1 f7       	brne	.-4      	; 0xbb8 <step+0x23c>
     bbc:	9a 83       	std	Y+2, r25	; 0x02
     bbe:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1);
}
     bc0:	6e 96       	adiw	r28, 0x1e	; 30
     bc2:	0f b6       	in	r0, 0x3f	; 63
     bc4:	f8 94       	cli
     bc6:	de bf       	out	0x3e, r29	; 62
     bc8:	0f be       	out	0x3f, r0	; 63
     bca:	cd bf       	out	0x3d, r28	; 61
     bcc:	cf 91       	pop	r28
     bce:	df 91       	pop	r29
     bd0:	08 95       	ret

00000bd2 <init_stepper_timer>:



void init_stepper_timer()
{
     bd2:	df 93       	push	r29
     bd4:	cf 93       	push	r28
     bd6:	cd b7       	in	r28, 0x3d	; 61
     bd8:	de b7       	in	r29, 0x3e	; 62
    TCCR1A |= (0<<WGM11) | (1<<WGM10);
     bda:	a0 e8       	ldi	r26, 0x80	; 128
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	e0 e8       	ldi	r30, 0x80	; 128
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	80 81       	ld	r24, Z
     be4:	81 60       	ori	r24, 0x01	; 1
     be6:	8c 93       	st	X, r24
    TCCR1B |= (1<<WGM12) | (0<<WGM13) | (0<<CS12) | (1<<CS11) | (1<<CS10);
     be8:	a1 e8       	ldi	r26, 0x81	; 129
     bea:	b0 e0       	ldi	r27, 0x00	; 0
     bec:	e1 e8       	ldi	r30, 0x81	; 129
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	80 81       	ld	r24, Z
     bf2:	8b 60       	ori	r24, 0x0B	; 11
     bf4:	8c 93       	st	X, r24
    TIMSK1 |= (1<<OCIE1A) | (1<<OCIE1B);
     bf6:	af e6       	ldi	r26, 0x6F	; 111
     bf8:	b0 e0       	ldi	r27, 0x00	; 0
     bfa:	ef e6       	ldi	r30, 0x6F	; 111
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	80 81       	ld	r24, Z
     c00:	86 60       	ori	r24, 0x06	; 6
     c02:	8c 93       	st	X, r24

}
     c04:	cf 91       	pop	r28
     c06:	df 91       	pop	r29
     c08:	08 95       	ret

00000c0a <__vector_17>:

ISR(TIMER1_COMPA_vect)
{
     c0a:	1f 92       	push	r1
     c0c:	0f 92       	push	r0
     c0e:	0f b6       	in	r0, 0x3f	; 63
     c10:	0f 92       	push	r0
     c12:	00 90 5b 00 	lds	r0, 0x005B
     c16:	0f 92       	push	r0
     c18:	11 24       	eor	r1, r1
     c1a:	2f 93       	push	r18
     c1c:	3f 93       	push	r19
     c1e:	4f 93       	push	r20
     c20:	5f 93       	push	r21
     c22:	6f 93       	push	r22
     c24:	7f 93       	push	r23
     c26:	8f 93       	push	r24
     c28:	9f 93       	push	r25
     c2a:	af 93       	push	r26
     c2c:	bf 93       	push	r27
     c2e:	ef 93       	push	r30
     c30:	ff 93       	push	r31
     c32:	df 93       	push	r29
     c34:	cf 93       	push	r28
     c36:	cd b7       	in	r28, 0x3d	; 61
     c38:	de b7       	in	r29, 0x3e	; 62
    step(&stepper1);
     c3a:	8e e0       	ldi	r24, 0x0E	; 14
     c3c:	92 e0       	ldi	r25, 0x02	; 2
     c3e:	0e 94 be 04 	call	0x97c	; 0x97c <step>
    set_dir(&stepper1);
     c42:	8e e0       	ldi	r24, 0x0E	; 14
     c44:	92 e0       	ldi	r25, 0x02	; 2
     c46:	0e 94 71 04 	call	0x8e2	; 0x8e2 <set_dir>
    OCR1A = stepper1.speed;
     c4a:	e8 e8       	ldi	r30, 0x88	; 136
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	80 91 0e 02 	lds	r24, 0x020E
     c52:	88 2f       	mov	r24, r24
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	91 83       	std	Z+1, r25	; 0x01
     c58:	80 83       	st	Z, r24

}
     c5a:	cf 91       	pop	r28
     c5c:	df 91       	pop	r29
     c5e:	ff 91       	pop	r31
     c60:	ef 91       	pop	r30
     c62:	bf 91       	pop	r27
     c64:	af 91       	pop	r26
     c66:	9f 91       	pop	r25
     c68:	8f 91       	pop	r24
     c6a:	7f 91       	pop	r23
     c6c:	6f 91       	pop	r22
     c6e:	5f 91       	pop	r21
     c70:	4f 91       	pop	r20
     c72:	3f 91       	pop	r19
     c74:	2f 91       	pop	r18
     c76:	0f 90       	pop	r0
     c78:	00 92 5b 00 	sts	0x005B, r0
     c7c:	0f 90       	pop	r0
     c7e:	0f be       	out	0x3f, r0	; 63
     c80:	0f 90       	pop	r0
     c82:	1f 90       	pop	r1
     c84:	18 95       	reti

00000c86 <__vector_18>:

ISR(TIMER1_COMPB_vect)
{
     c86:	1f 92       	push	r1
     c88:	0f 92       	push	r0
     c8a:	0f b6       	in	r0, 0x3f	; 63
     c8c:	0f 92       	push	r0
     c8e:	00 90 5b 00 	lds	r0, 0x005B
     c92:	0f 92       	push	r0
     c94:	11 24       	eor	r1, r1
     c96:	2f 93       	push	r18
     c98:	3f 93       	push	r19
     c9a:	4f 93       	push	r20
     c9c:	5f 93       	push	r21
     c9e:	6f 93       	push	r22
     ca0:	7f 93       	push	r23
     ca2:	8f 93       	push	r24
     ca4:	9f 93       	push	r25
     ca6:	af 93       	push	r26
     ca8:	bf 93       	push	r27
     caa:	ef 93       	push	r30
     cac:	ff 93       	push	r31
     cae:	df 93       	push	r29
     cb0:	cf 93       	push	r28
     cb2:	cd b7       	in	r28, 0x3d	; 61
     cb4:	de b7       	in	r29, 0x3e	; 62
    step(&stepper2);
     cb6:	88 e0       	ldi	r24, 0x08	; 8
     cb8:	92 e0       	ldi	r25, 0x02	; 2
     cba:	0e 94 be 04 	call	0x97c	; 0x97c <step>
    set_dir(&stepper2);
     cbe:	88 e0       	ldi	r24, 0x08	; 8
     cc0:	92 e0       	ldi	r25, 0x02	; 2
     cc2:	0e 94 71 04 	call	0x8e2	; 0x8e2 <set_dir>
    OCR1B = stepper2.speed;
     cc6:	ea e8       	ldi	r30, 0x8A	; 138
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 91 08 02 	lds	r24, 0x0208
     cce:	88 2f       	mov	r24, r24
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	91 83       	std	Z+1, r25	; 0x01
     cd4:	80 83       	st	Z, r24
}
     cd6:	cf 91       	pop	r28
     cd8:	df 91       	pop	r29
     cda:	ff 91       	pop	r31
     cdc:	ef 91       	pop	r30
     cde:	bf 91       	pop	r27
     ce0:	af 91       	pop	r26
     ce2:	9f 91       	pop	r25
     ce4:	8f 91       	pop	r24
     ce6:	7f 91       	pop	r23
     ce8:	6f 91       	pop	r22
     cea:	5f 91       	pop	r21
     cec:	4f 91       	pop	r20
     cee:	3f 91       	pop	r19
     cf0:	2f 91       	pop	r18
     cf2:	0f 90       	pop	r0
     cf4:	00 92 5b 00 	sts	0x005B, r0
     cf8:	0f 90       	pop	r0
     cfa:	0f be       	out	0x3f, r0	; 63
     cfc:	0f 90       	pop	r0
     cfe:	1f 90       	pop	r1
     d00:	18 95       	reti

00000d02 <__fixunssfsi>:
     d02:	ef 92       	push	r14
     d04:	ff 92       	push	r15
     d06:	0f 93       	push	r16
     d08:	1f 93       	push	r17
     d0a:	7b 01       	movw	r14, r22
     d0c:	8c 01       	movw	r16, r24
     d0e:	20 e0       	ldi	r18, 0x00	; 0
     d10:	30 e0       	ldi	r19, 0x00	; 0
     d12:	40 e0       	ldi	r20, 0x00	; 0
     d14:	5f e4       	ldi	r21, 0x4F	; 79
     d16:	0e 94 81 09 	call	0x1302	; 0x1302 <__gesf2>
     d1a:	88 23       	and	r24, r24
     d1c:	8c f0       	brlt	.+34     	; 0xd40 <__fixunssfsi+0x3e>
     d1e:	c8 01       	movw	r24, r16
     d20:	b7 01       	movw	r22, r14
     d22:	20 e0       	ldi	r18, 0x00	; 0
     d24:	30 e0       	ldi	r19, 0x00	; 0
     d26:	40 e0       	ldi	r20, 0x00	; 0
     d28:	5f e4       	ldi	r21, 0x4F	; 79
     d2a:	0e 94 f9 07 	call	0xff2	; 0xff2 <__subsf3>
     d2e:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <__fixsfsi>
     d32:	9b 01       	movw	r18, r22
     d34:	ac 01       	movw	r20, r24
     d36:	20 50       	subi	r18, 0x00	; 0
     d38:	30 40       	sbci	r19, 0x00	; 0
     d3a:	40 40       	sbci	r20, 0x00	; 0
     d3c:	50 48       	sbci	r21, 0x80	; 128
     d3e:	06 c0       	rjmp	.+12     	; 0xd4c <__fixunssfsi+0x4a>
     d40:	c8 01       	movw	r24, r16
     d42:	b7 01       	movw	r22, r14
     d44:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <__fixsfsi>
     d48:	9b 01       	movw	r18, r22
     d4a:	ac 01       	movw	r20, r24
     d4c:	b9 01       	movw	r22, r18
     d4e:	ca 01       	movw	r24, r20
     d50:	1f 91       	pop	r17
     d52:	0f 91       	pop	r16
     d54:	ff 90       	pop	r15
     d56:	ef 90       	pop	r14
     d58:	08 95       	ret

00000d5a <_fpadd_parts>:
     d5a:	a0 e0       	ldi	r26, 0x00	; 0
     d5c:	b0 e0       	ldi	r27, 0x00	; 0
     d5e:	e3 eb       	ldi	r30, 0xB3	; 179
     d60:	f6 e0       	ldi	r31, 0x06	; 6
     d62:	0c 94 1c 0c 	jmp	0x1838	; 0x1838 <__prologue_saves__>
     d66:	dc 01       	movw	r26, r24
     d68:	2b 01       	movw	r4, r22
     d6a:	fa 01       	movw	r30, r20
     d6c:	9c 91       	ld	r25, X
     d6e:	92 30       	cpi	r25, 0x02	; 2
     d70:	08 f4       	brcc	.+2      	; 0xd74 <_fpadd_parts+0x1a>
     d72:	39 c1       	rjmp	.+626    	; 0xfe6 <_fpadd_parts+0x28c>
     d74:	eb 01       	movw	r28, r22
     d76:	88 81       	ld	r24, Y
     d78:	82 30       	cpi	r24, 0x02	; 2
     d7a:	08 f4       	brcc	.+2      	; 0xd7e <_fpadd_parts+0x24>
     d7c:	33 c1       	rjmp	.+614    	; 0xfe4 <_fpadd_parts+0x28a>
     d7e:	94 30       	cpi	r25, 0x04	; 4
     d80:	69 f4       	brne	.+26     	; 0xd9c <_fpadd_parts+0x42>
     d82:	84 30       	cpi	r24, 0x04	; 4
     d84:	09 f0       	breq	.+2      	; 0xd88 <_fpadd_parts+0x2e>
     d86:	2f c1       	rjmp	.+606    	; 0xfe6 <_fpadd_parts+0x28c>
     d88:	11 96       	adiw	r26, 0x01	; 1
     d8a:	9c 91       	ld	r25, X
     d8c:	11 97       	sbiw	r26, 0x01	; 1
     d8e:	89 81       	ldd	r24, Y+1	; 0x01
     d90:	98 17       	cp	r25, r24
     d92:	09 f4       	brne	.+2      	; 0xd96 <_fpadd_parts+0x3c>
     d94:	28 c1       	rjmp	.+592    	; 0xfe6 <_fpadd_parts+0x28c>
     d96:	a0 e0       	ldi	r26, 0x00	; 0
     d98:	b2 e0       	ldi	r27, 0x02	; 2
     d9a:	25 c1       	rjmp	.+586    	; 0xfe6 <_fpadd_parts+0x28c>
     d9c:	84 30       	cpi	r24, 0x04	; 4
     d9e:	09 f4       	brne	.+2      	; 0xda2 <_fpadd_parts+0x48>
     da0:	21 c1       	rjmp	.+578    	; 0xfe4 <_fpadd_parts+0x28a>
     da2:	82 30       	cpi	r24, 0x02	; 2
     da4:	a9 f4       	brne	.+42     	; 0xdd0 <_fpadd_parts+0x76>
     da6:	92 30       	cpi	r25, 0x02	; 2
     da8:	09 f0       	breq	.+2      	; 0xdac <_fpadd_parts+0x52>
     daa:	1d c1       	rjmp	.+570    	; 0xfe6 <_fpadd_parts+0x28c>
     dac:	9a 01       	movw	r18, r20
     dae:	ad 01       	movw	r20, r26
     db0:	88 e0       	ldi	r24, 0x08	; 8
     db2:	ea 01       	movw	r28, r20
     db4:	09 90       	ld	r0, Y+
     db6:	ae 01       	movw	r20, r28
     db8:	e9 01       	movw	r28, r18
     dba:	09 92       	st	Y+, r0
     dbc:	9e 01       	movw	r18, r28
     dbe:	81 50       	subi	r24, 0x01	; 1
     dc0:	c1 f7       	brne	.-16     	; 0xdb2 <_fpadd_parts+0x58>
     dc2:	e2 01       	movw	r28, r4
     dc4:	89 81       	ldd	r24, Y+1	; 0x01
     dc6:	11 96       	adiw	r26, 0x01	; 1
     dc8:	9c 91       	ld	r25, X
     dca:	89 23       	and	r24, r25
     dcc:	81 83       	std	Z+1, r24	; 0x01
     dce:	08 c1       	rjmp	.+528    	; 0xfe0 <_fpadd_parts+0x286>
     dd0:	92 30       	cpi	r25, 0x02	; 2
     dd2:	09 f4       	brne	.+2      	; 0xdd6 <_fpadd_parts+0x7c>
     dd4:	07 c1       	rjmp	.+526    	; 0xfe4 <_fpadd_parts+0x28a>
     dd6:	12 96       	adiw	r26, 0x02	; 2
     dd8:	2d 90       	ld	r2, X+
     dda:	3c 90       	ld	r3, X
     ddc:	13 97       	sbiw	r26, 0x03	; 3
     dde:	eb 01       	movw	r28, r22
     de0:	8a 81       	ldd	r24, Y+2	; 0x02
     de2:	9b 81       	ldd	r25, Y+3	; 0x03
     de4:	14 96       	adiw	r26, 0x04	; 4
     de6:	ad 90       	ld	r10, X+
     de8:	bd 90       	ld	r11, X+
     dea:	cd 90       	ld	r12, X+
     dec:	dc 90       	ld	r13, X
     dee:	17 97       	sbiw	r26, 0x07	; 7
     df0:	ec 80       	ldd	r14, Y+4	; 0x04
     df2:	fd 80       	ldd	r15, Y+5	; 0x05
     df4:	0e 81       	ldd	r16, Y+6	; 0x06
     df6:	1f 81       	ldd	r17, Y+7	; 0x07
     df8:	91 01       	movw	r18, r2
     dfa:	28 1b       	sub	r18, r24
     dfc:	39 0b       	sbc	r19, r25
     dfe:	b9 01       	movw	r22, r18
     e00:	37 ff       	sbrs	r19, 7
     e02:	04 c0       	rjmp	.+8      	; 0xe0c <_fpadd_parts+0xb2>
     e04:	66 27       	eor	r22, r22
     e06:	77 27       	eor	r23, r23
     e08:	62 1b       	sub	r22, r18
     e0a:	73 0b       	sbc	r23, r19
     e0c:	60 32       	cpi	r22, 0x20	; 32
     e0e:	71 05       	cpc	r23, r1
     e10:	0c f0       	brlt	.+2      	; 0xe14 <_fpadd_parts+0xba>
     e12:	61 c0       	rjmp	.+194    	; 0xed6 <_fpadd_parts+0x17c>
     e14:	12 16       	cp	r1, r18
     e16:	13 06       	cpc	r1, r19
     e18:	6c f5       	brge	.+90     	; 0xe74 <_fpadd_parts+0x11a>
     e1a:	37 01       	movw	r6, r14
     e1c:	48 01       	movw	r8, r16
     e1e:	06 2e       	mov	r0, r22
     e20:	04 c0       	rjmp	.+8      	; 0xe2a <_fpadd_parts+0xd0>
     e22:	96 94       	lsr	r9
     e24:	87 94       	ror	r8
     e26:	77 94       	ror	r7
     e28:	67 94       	ror	r6
     e2a:	0a 94       	dec	r0
     e2c:	d2 f7       	brpl	.-12     	; 0xe22 <_fpadd_parts+0xc8>
     e2e:	21 e0       	ldi	r18, 0x01	; 1
     e30:	30 e0       	ldi	r19, 0x00	; 0
     e32:	40 e0       	ldi	r20, 0x00	; 0
     e34:	50 e0       	ldi	r21, 0x00	; 0
     e36:	04 c0       	rjmp	.+8      	; 0xe40 <_fpadd_parts+0xe6>
     e38:	22 0f       	add	r18, r18
     e3a:	33 1f       	adc	r19, r19
     e3c:	44 1f       	adc	r20, r20
     e3e:	55 1f       	adc	r21, r21
     e40:	6a 95       	dec	r22
     e42:	d2 f7       	brpl	.-12     	; 0xe38 <_fpadd_parts+0xde>
     e44:	21 50       	subi	r18, 0x01	; 1
     e46:	30 40       	sbci	r19, 0x00	; 0
     e48:	40 40       	sbci	r20, 0x00	; 0
     e4a:	50 40       	sbci	r21, 0x00	; 0
     e4c:	2e 21       	and	r18, r14
     e4e:	3f 21       	and	r19, r15
     e50:	40 23       	and	r20, r16
     e52:	51 23       	and	r21, r17
     e54:	21 15       	cp	r18, r1
     e56:	31 05       	cpc	r19, r1
     e58:	41 05       	cpc	r20, r1
     e5a:	51 05       	cpc	r21, r1
     e5c:	21 f0       	breq	.+8      	; 0xe66 <_fpadd_parts+0x10c>
     e5e:	21 e0       	ldi	r18, 0x01	; 1
     e60:	30 e0       	ldi	r19, 0x00	; 0
     e62:	40 e0       	ldi	r20, 0x00	; 0
     e64:	50 e0       	ldi	r21, 0x00	; 0
     e66:	79 01       	movw	r14, r18
     e68:	8a 01       	movw	r16, r20
     e6a:	e6 28       	or	r14, r6
     e6c:	f7 28       	or	r15, r7
     e6e:	08 29       	or	r16, r8
     e70:	19 29       	or	r17, r9
     e72:	3c c0       	rjmp	.+120    	; 0xeec <_fpadd_parts+0x192>
     e74:	23 2b       	or	r18, r19
     e76:	d1 f1       	breq	.+116    	; 0xeec <_fpadd_parts+0x192>
     e78:	26 0e       	add	r2, r22
     e7a:	37 1e       	adc	r3, r23
     e7c:	35 01       	movw	r6, r10
     e7e:	46 01       	movw	r8, r12
     e80:	06 2e       	mov	r0, r22
     e82:	04 c0       	rjmp	.+8      	; 0xe8c <_fpadd_parts+0x132>
     e84:	96 94       	lsr	r9
     e86:	87 94       	ror	r8
     e88:	77 94       	ror	r7
     e8a:	67 94       	ror	r6
     e8c:	0a 94       	dec	r0
     e8e:	d2 f7       	brpl	.-12     	; 0xe84 <_fpadd_parts+0x12a>
     e90:	21 e0       	ldi	r18, 0x01	; 1
     e92:	30 e0       	ldi	r19, 0x00	; 0
     e94:	40 e0       	ldi	r20, 0x00	; 0
     e96:	50 e0       	ldi	r21, 0x00	; 0
     e98:	04 c0       	rjmp	.+8      	; 0xea2 <_fpadd_parts+0x148>
     e9a:	22 0f       	add	r18, r18
     e9c:	33 1f       	adc	r19, r19
     e9e:	44 1f       	adc	r20, r20
     ea0:	55 1f       	adc	r21, r21
     ea2:	6a 95       	dec	r22
     ea4:	d2 f7       	brpl	.-12     	; 0xe9a <_fpadd_parts+0x140>
     ea6:	21 50       	subi	r18, 0x01	; 1
     ea8:	30 40       	sbci	r19, 0x00	; 0
     eaa:	40 40       	sbci	r20, 0x00	; 0
     eac:	50 40       	sbci	r21, 0x00	; 0
     eae:	2a 21       	and	r18, r10
     eb0:	3b 21       	and	r19, r11
     eb2:	4c 21       	and	r20, r12
     eb4:	5d 21       	and	r21, r13
     eb6:	21 15       	cp	r18, r1
     eb8:	31 05       	cpc	r19, r1
     eba:	41 05       	cpc	r20, r1
     ebc:	51 05       	cpc	r21, r1
     ebe:	21 f0       	breq	.+8      	; 0xec8 <_fpadd_parts+0x16e>
     ec0:	21 e0       	ldi	r18, 0x01	; 1
     ec2:	30 e0       	ldi	r19, 0x00	; 0
     ec4:	40 e0       	ldi	r20, 0x00	; 0
     ec6:	50 e0       	ldi	r21, 0x00	; 0
     ec8:	59 01       	movw	r10, r18
     eca:	6a 01       	movw	r12, r20
     ecc:	a6 28       	or	r10, r6
     ece:	b7 28       	or	r11, r7
     ed0:	c8 28       	or	r12, r8
     ed2:	d9 28       	or	r13, r9
     ed4:	0b c0       	rjmp	.+22     	; 0xeec <_fpadd_parts+0x192>
     ed6:	82 15       	cp	r24, r2
     ed8:	93 05       	cpc	r25, r3
     eda:	2c f0       	brlt	.+10     	; 0xee6 <_fpadd_parts+0x18c>
     edc:	1c 01       	movw	r2, r24
     ede:	aa 24       	eor	r10, r10
     ee0:	bb 24       	eor	r11, r11
     ee2:	65 01       	movw	r12, r10
     ee4:	03 c0       	rjmp	.+6      	; 0xeec <_fpadd_parts+0x192>
     ee6:	ee 24       	eor	r14, r14
     ee8:	ff 24       	eor	r15, r15
     eea:	87 01       	movw	r16, r14
     eec:	11 96       	adiw	r26, 0x01	; 1
     eee:	9c 91       	ld	r25, X
     ef0:	d2 01       	movw	r26, r4
     ef2:	11 96       	adiw	r26, 0x01	; 1
     ef4:	8c 91       	ld	r24, X
     ef6:	98 17       	cp	r25, r24
     ef8:	09 f4       	brne	.+2      	; 0xefc <_fpadd_parts+0x1a2>
     efa:	45 c0       	rjmp	.+138    	; 0xf86 <_fpadd_parts+0x22c>
     efc:	99 23       	and	r25, r25
     efe:	39 f0       	breq	.+14     	; 0xf0e <_fpadd_parts+0x1b4>
     f00:	a8 01       	movw	r20, r16
     f02:	97 01       	movw	r18, r14
     f04:	2a 19       	sub	r18, r10
     f06:	3b 09       	sbc	r19, r11
     f08:	4c 09       	sbc	r20, r12
     f0a:	5d 09       	sbc	r21, r13
     f0c:	06 c0       	rjmp	.+12     	; 0xf1a <_fpadd_parts+0x1c0>
     f0e:	a6 01       	movw	r20, r12
     f10:	95 01       	movw	r18, r10
     f12:	2e 19       	sub	r18, r14
     f14:	3f 09       	sbc	r19, r15
     f16:	40 0b       	sbc	r20, r16
     f18:	51 0b       	sbc	r21, r17
     f1a:	57 fd       	sbrc	r21, 7
     f1c:	08 c0       	rjmp	.+16     	; 0xf2e <_fpadd_parts+0x1d4>
     f1e:	11 82       	std	Z+1, r1	; 0x01
     f20:	33 82       	std	Z+3, r3	; 0x03
     f22:	22 82       	std	Z+2, r2	; 0x02
     f24:	24 83       	std	Z+4, r18	; 0x04
     f26:	35 83       	std	Z+5, r19	; 0x05
     f28:	46 83       	std	Z+6, r20	; 0x06
     f2a:	57 83       	std	Z+7, r21	; 0x07
     f2c:	1d c0       	rjmp	.+58     	; 0xf68 <_fpadd_parts+0x20e>
     f2e:	81 e0       	ldi	r24, 0x01	; 1
     f30:	81 83       	std	Z+1, r24	; 0x01
     f32:	33 82       	std	Z+3, r3	; 0x03
     f34:	22 82       	std	Z+2, r2	; 0x02
     f36:	88 27       	eor	r24, r24
     f38:	99 27       	eor	r25, r25
     f3a:	dc 01       	movw	r26, r24
     f3c:	82 1b       	sub	r24, r18
     f3e:	93 0b       	sbc	r25, r19
     f40:	a4 0b       	sbc	r26, r20
     f42:	b5 0b       	sbc	r27, r21
     f44:	84 83       	std	Z+4, r24	; 0x04
     f46:	95 83       	std	Z+5, r25	; 0x05
     f48:	a6 83       	std	Z+6, r26	; 0x06
     f4a:	b7 83       	std	Z+7, r27	; 0x07
     f4c:	0d c0       	rjmp	.+26     	; 0xf68 <_fpadd_parts+0x20e>
     f4e:	22 0f       	add	r18, r18
     f50:	33 1f       	adc	r19, r19
     f52:	44 1f       	adc	r20, r20
     f54:	55 1f       	adc	r21, r21
     f56:	24 83       	std	Z+4, r18	; 0x04
     f58:	35 83       	std	Z+5, r19	; 0x05
     f5a:	46 83       	std	Z+6, r20	; 0x06
     f5c:	57 83       	std	Z+7, r21	; 0x07
     f5e:	82 81       	ldd	r24, Z+2	; 0x02
     f60:	93 81       	ldd	r25, Z+3	; 0x03
     f62:	01 97       	sbiw	r24, 0x01	; 1
     f64:	93 83       	std	Z+3, r25	; 0x03
     f66:	82 83       	std	Z+2, r24	; 0x02
     f68:	24 81       	ldd	r18, Z+4	; 0x04
     f6a:	35 81       	ldd	r19, Z+5	; 0x05
     f6c:	46 81       	ldd	r20, Z+6	; 0x06
     f6e:	57 81       	ldd	r21, Z+7	; 0x07
     f70:	da 01       	movw	r26, r20
     f72:	c9 01       	movw	r24, r18
     f74:	01 97       	sbiw	r24, 0x01	; 1
     f76:	a1 09       	sbc	r26, r1
     f78:	b1 09       	sbc	r27, r1
     f7a:	8f 5f       	subi	r24, 0xFF	; 255
     f7c:	9f 4f       	sbci	r25, 0xFF	; 255
     f7e:	af 4f       	sbci	r26, 0xFF	; 255
     f80:	bf 43       	sbci	r27, 0x3F	; 63
     f82:	28 f3       	brcs	.-54     	; 0xf4e <_fpadd_parts+0x1f4>
     f84:	0b c0       	rjmp	.+22     	; 0xf9c <_fpadd_parts+0x242>
     f86:	91 83       	std	Z+1, r25	; 0x01
     f88:	33 82       	std	Z+3, r3	; 0x03
     f8a:	22 82       	std	Z+2, r2	; 0x02
     f8c:	ea 0c       	add	r14, r10
     f8e:	fb 1c       	adc	r15, r11
     f90:	0c 1d       	adc	r16, r12
     f92:	1d 1d       	adc	r17, r13
     f94:	e4 82       	std	Z+4, r14	; 0x04
     f96:	f5 82       	std	Z+5, r15	; 0x05
     f98:	06 83       	std	Z+6, r16	; 0x06
     f9a:	17 83       	std	Z+7, r17	; 0x07
     f9c:	83 e0       	ldi	r24, 0x03	; 3
     f9e:	80 83       	st	Z, r24
     fa0:	24 81       	ldd	r18, Z+4	; 0x04
     fa2:	35 81       	ldd	r19, Z+5	; 0x05
     fa4:	46 81       	ldd	r20, Z+6	; 0x06
     fa6:	57 81       	ldd	r21, Z+7	; 0x07
     fa8:	57 ff       	sbrs	r21, 7
     faa:	1a c0       	rjmp	.+52     	; 0xfe0 <_fpadd_parts+0x286>
     fac:	c9 01       	movw	r24, r18
     fae:	aa 27       	eor	r26, r26
     fb0:	97 fd       	sbrc	r25, 7
     fb2:	a0 95       	com	r26
     fb4:	ba 2f       	mov	r27, r26
     fb6:	81 70       	andi	r24, 0x01	; 1
     fb8:	90 70       	andi	r25, 0x00	; 0
     fba:	a0 70       	andi	r26, 0x00	; 0
     fbc:	b0 70       	andi	r27, 0x00	; 0
     fbe:	56 95       	lsr	r21
     fc0:	47 95       	ror	r20
     fc2:	37 95       	ror	r19
     fc4:	27 95       	ror	r18
     fc6:	82 2b       	or	r24, r18
     fc8:	93 2b       	or	r25, r19
     fca:	a4 2b       	or	r26, r20
     fcc:	b5 2b       	or	r27, r21
     fce:	84 83       	std	Z+4, r24	; 0x04
     fd0:	95 83       	std	Z+5, r25	; 0x05
     fd2:	a6 83       	std	Z+6, r26	; 0x06
     fd4:	b7 83       	std	Z+7, r27	; 0x07
     fd6:	82 81       	ldd	r24, Z+2	; 0x02
     fd8:	93 81       	ldd	r25, Z+3	; 0x03
     fda:	01 96       	adiw	r24, 0x01	; 1
     fdc:	93 83       	std	Z+3, r25	; 0x03
     fde:	82 83       	std	Z+2, r24	; 0x02
     fe0:	df 01       	movw	r26, r30
     fe2:	01 c0       	rjmp	.+2      	; 0xfe6 <_fpadd_parts+0x28c>
     fe4:	d2 01       	movw	r26, r4
     fe6:	cd 01       	movw	r24, r26
     fe8:	cd b7       	in	r28, 0x3d	; 61
     fea:	de b7       	in	r29, 0x3e	; 62
     fec:	e2 e1       	ldi	r30, 0x12	; 18
     fee:	0c 94 38 0c 	jmp	0x1870	; 0x1870 <__epilogue_restores__>

00000ff2 <__subsf3>:
     ff2:	a0 e2       	ldi	r26, 0x20	; 32
     ff4:	b0 e0       	ldi	r27, 0x00	; 0
     ff6:	ef ef       	ldi	r30, 0xFF	; 255
     ff8:	f7 e0       	ldi	r31, 0x07	; 7
     ffa:	0c 94 28 0c 	jmp	0x1850	; 0x1850 <__prologue_saves__+0x18>
     ffe:	69 83       	std	Y+1, r22	; 0x01
    1000:	7a 83       	std	Y+2, r23	; 0x02
    1002:	8b 83       	std	Y+3, r24	; 0x03
    1004:	9c 83       	std	Y+4, r25	; 0x04
    1006:	2d 83       	std	Y+5, r18	; 0x05
    1008:	3e 83       	std	Y+6, r19	; 0x06
    100a:	4f 83       	std	Y+7, r20	; 0x07
    100c:	58 87       	std	Y+8, r21	; 0x08
    100e:	e9 e0       	ldi	r30, 0x09	; 9
    1010:	ee 2e       	mov	r14, r30
    1012:	f1 2c       	mov	r15, r1
    1014:	ec 0e       	add	r14, r28
    1016:	fd 1e       	adc	r15, r29
    1018:	ce 01       	movw	r24, r28
    101a:	01 96       	adiw	r24, 0x01	; 1
    101c:	b7 01       	movw	r22, r14
    101e:	0e 94 0a 0b 	call	0x1614	; 0x1614 <__unpack_f>
    1022:	8e 01       	movw	r16, r28
    1024:	0f 5e       	subi	r16, 0xEF	; 239
    1026:	1f 4f       	sbci	r17, 0xFF	; 255
    1028:	ce 01       	movw	r24, r28
    102a:	05 96       	adiw	r24, 0x05	; 5
    102c:	b8 01       	movw	r22, r16
    102e:	0e 94 0a 0b 	call	0x1614	; 0x1614 <__unpack_f>
    1032:	8a 89       	ldd	r24, Y+18	; 0x12
    1034:	91 e0       	ldi	r25, 0x01	; 1
    1036:	89 27       	eor	r24, r25
    1038:	8a 8b       	std	Y+18, r24	; 0x12
    103a:	c7 01       	movw	r24, r14
    103c:	b8 01       	movw	r22, r16
    103e:	ae 01       	movw	r20, r28
    1040:	47 5e       	subi	r20, 0xE7	; 231
    1042:	5f 4f       	sbci	r21, 0xFF	; 255
    1044:	0e 94 ad 06 	call	0xd5a	; 0xd5a <_fpadd_parts>
    1048:	0e 94 35 0a 	call	0x146a	; 0x146a <__pack_f>
    104c:	a0 96       	adiw	r28, 0x20	; 32
    104e:	e6 e0       	ldi	r30, 0x06	; 6
    1050:	0c 94 44 0c 	jmp	0x1888	; 0x1888 <__epilogue_restores__+0x18>

00001054 <__addsf3>:
    1054:	a0 e2       	ldi	r26, 0x20	; 32
    1056:	b0 e0       	ldi	r27, 0x00	; 0
    1058:	e0 e3       	ldi	r30, 0x30	; 48
    105a:	f8 e0       	ldi	r31, 0x08	; 8
    105c:	0c 94 28 0c 	jmp	0x1850	; 0x1850 <__prologue_saves__+0x18>
    1060:	69 83       	std	Y+1, r22	; 0x01
    1062:	7a 83       	std	Y+2, r23	; 0x02
    1064:	8b 83       	std	Y+3, r24	; 0x03
    1066:	9c 83       	std	Y+4, r25	; 0x04
    1068:	2d 83       	std	Y+5, r18	; 0x05
    106a:	3e 83       	std	Y+6, r19	; 0x06
    106c:	4f 83       	std	Y+7, r20	; 0x07
    106e:	58 87       	std	Y+8, r21	; 0x08
    1070:	f9 e0       	ldi	r31, 0x09	; 9
    1072:	ef 2e       	mov	r14, r31
    1074:	f1 2c       	mov	r15, r1
    1076:	ec 0e       	add	r14, r28
    1078:	fd 1e       	adc	r15, r29
    107a:	ce 01       	movw	r24, r28
    107c:	01 96       	adiw	r24, 0x01	; 1
    107e:	b7 01       	movw	r22, r14
    1080:	0e 94 0a 0b 	call	0x1614	; 0x1614 <__unpack_f>
    1084:	8e 01       	movw	r16, r28
    1086:	0f 5e       	subi	r16, 0xEF	; 239
    1088:	1f 4f       	sbci	r17, 0xFF	; 255
    108a:	ce 01       	movw	r24, r28
    108c:	05 96       	adiw	r24, 0x05	; 5
    108e:	b8 01       	movw	r22, r16
    1090:	0e 94 0a 0b 	call	0x1614	; 0x1614 <__unpack_f>
    1094:	c7 01       	movw	r24, r14
    1096:	b8 01       	movw	r22, r16
    1098:	ae 01       	movw	r20, r28
    109a:	47 5e       	subi	r20, 0xE7	; 231
    109c:	5f 4f       	sbci	r21, 0xFF	; 255
    109e:	0e 94 ad 06 	call	0xd5a	; 0xd5a <_fpadd_parts>
    10a2:	0e 94 35 0a 	call	0x146a	; 0x146a <__pack_f>
    10a6:	a0 96       	adiw	r28, 0x20	; 32
    10a8:	e6 e0       	ldi	r30, 0x06	; 6
    10aa:	0c 94 44 0c 	jmp	0x1888	; 0x1888 <__epilogue_restores__+0x18>

000010ae <__mulsf3>:
    10ae:	a0 e2       	ldi	r26, 0x20	; 32
    10b0:	b0 e0       	ldi	r27, 0x00	; 0
    10b2:	ed e5       	ldi	r30, 0x5D	; 93
    10b4:	f8 e0       	ldi	r31, 0x08	; 8
    10b6:	0c 94 1c 0c 	jmp	0x1838	; 0x1838 <__prologue_saves__>
    10ba:	69 83       	std	Y+1, r22	; 0x01
    10bc:	7a 83       	std	Y+2, r23	; 0x02
    10be:	8b 83       	std	Y+3, r24	; 0x03
    10c0:	9c 83       	std	Y+4, r25	; 0x04
    10c2:	2d 83       	std	Y+5, r18	; 0x05
    10c4:	3e 83       	std	Y+6, r19	; 0x06
    10c6:	4f 83       	std	Y+7, r20	; 0x07
    10c8:	58 87       	std	Y+8, r21	; 0x08
    10ca:	ce 01       	movw	r24, r28
    10cc:	01 96       	adiw	r24, 0x01	; 1
    10ce:	be 01       	movw	r22, r28
    10d0:	67 5f       	subi	r22, 0xF7	; 247
    10d2:	7f 4f       	sbci	r23, 0xFF	; 255
    10d4:	0e 94 0a 0b 	call	0x1614	; 0x1614 <__unpack_f>
    10d8:	ce 01       	movw	r24, r28
    10da:	05 96       	adiw	r24, 0x05	; 5
    10dc:	be 01       	movw	r22, r28
    10de:	6f 5e       	subi	r22, 0xEF	; 239
    10e0:	7f 4f       	sbci	r23, 0xFF	; 255
    10e2:	0e 94 0a 0b 	call	0x1614	; 0x1614 <__unpack_f>
    10e6:	99 85       	ldd	r25, Y+9	; 0x09
    10e8:	92 30       	cpi	r25, 0x02	; 2
    10ea:	88 f0       	brcs	.+34     	; 0x110e <__mulsf3+0x60>
    10ec:	89 89       	ldd	r24, Y+17	; 0x11
    10ee:	82 30       	cpi	r24, 0x02	; 2
    10f0:	c8 f0       	brcs	.+50     	; 0x1124 <__mulsf3+0x76>
    10f2:	94 30       	cpi	r25, 0x04	; 4
    10f4:	19 f4       	brne	.+6      	; 0x10fc <__mulsf3+0x4e>
    10f6:	82 30       	cpi	r24, 0x02	; 2
    10f8:	51 f4       	brne	.+20     	; 0x110e <__mulsf3+0x60>
    10fa:	04 c0       	rjmp	.+8      	; 0x1104 <__mulsf3+0x56>
    10fc:	84 30       	cpi	r24, 0x04	; 4
    10fe:	29 f4       	brne	.+10     	; 0x110a <__mulsf3+0x5c>
    1100:	92 30       	cpi	r25, 0x02	; 2
    1102:	81 f4       	brne	.+32     	; 0x1124 <__mulsf3+0x76>
    1104:	80 e0       	ldi	r24, 0x00	; 0
    1106:	92 e0       	ldi	r25, 0x02	; 2
    1108:	c6 c0       	rjmp	.+396    	; 0x1296 <__mulsf3+0x1e8>
    110a:	92 30       	cpi	r25, 0x02	; 2
    110c:	49 f4       	brne	.+18     	; 0x1120 <__mulsf3+0x72>
    110e:	20 e0       	ldi	r18, 0x00	; 0
    1110:	9a 85       	ldd	r25, Y+10	; 0x0a
    1112:	8a 89       	ldd	r24, Y+18	; 0x12
    1114:	98 13       	cpse	r25, r24
    1116:	21 e0       	ldi	r18, 0x01	; 1
    1118:	2a 87       	std	Y+10, r18	; 0x0a
    111a:	ce 01       	movw	r24, r28
    111c:	09 96       	adiw	r24, 0x09	; 9
    111e:	bb c0       	rjmp	.+374    	; 0x1296 <__mulsf3+0x1e8>
    1120:	82 30       	cpi	r24, 0x02	; 2
    1122:	49 f4       	brne	.+18     	; 0x1136 <__mulsf3+0x88>
    1124:	20 e0       	ldi	r18, 0x00	; 0
    1126:	9a 85       	ldd	r25, Y+10	; 0x0a
    1128:	8a 89       	ldd	r24, Y+18	; 0x12
    112a:	98 13       	cpse	r25, r24
    112c:	21 e0       	ldi	r18, 0x01	; 1
    112e:	2a 8b       	std	Y+18, r18	; 0x12
    1130:	ce 01       	movw	r24, r28
    1132:	41 96       	adiw	r24, 0x11	; 17
    1134:	b0 c0       	rjmp	.+352    	; 0x1296 <__mulsf3+0x1e8>
    1136:	2d 84       	ldd	r2, Y+13	; 0x0d
    1138:	3e 84       	ldd	r3, Y+14	; 0x0e
    113a:	4f 84       	ldd	r4, Y+15	; 0x0f
    113c:	58 88       	ldd	r5, Y+16	; 0x10
    113e:	6d 88       	ldd	r6, Y+21	; 0x15
    1140:	7e 88       	ldd	r7, Y+22	; 0x16
    1142:	8f 88       	ldd	r8, Y+23	; 0x17
    1144:	98 8c       	ldd	r9, Y+24	; 0x18
    1146:	ee 24       	eor	r14, r14
    1148:	ff 24       	eor	r15, r15
    114a:	87 01       	movw	r16, r14
    114c:	aa 24       	eor	r10, r10
    114e:	bb 24       	eor	r11, r11
    1150:	65 01       	movw	r12, r10
    1152:	40 e0       	ldi	r20, 0x00	; 0
    1154:	50 e0       	ldi	r21, 0x00	; 0
    1156:	60 e0       	ldi	r22, 0x00	; 0
    1158:	70 e0       	ldi	r23, 0x00	; 0
    115a:	e0 e0       	ldi	r30, 0x00	; 0
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	c1 01       	movw	r24, r2
    1160:	81 70       	andi	r24, 0x01	; 1
    1162:	90 70       	andi	r25, 0x00	; 0
    1164:	89 2b       	or	r24, r25
    1166:	e9 f0       	breq	.+58     	; 0x11a2 <__mulsf3+0xf4>
    1168:	e6 0c       	add	r14, r6
    116a:	f7 1c       	adc	r15, r7
    116c:	08 1d       	adc	r16, r8
    116e:	19 1d       	adc	r17, r9
    1170:	9a 01       	movw	r18, r20
    1172:	ab 01       	movw	r20, r22
    1174:	2a 0d       	add	r18, r10
    1176:	3b 1d       	adc	r19, r11
    1178:	4c 1d       	adc	r20, r12
    117a:	5d 1d       	adc	r21, r13
    117c:	80 e0       	ldi	r24, 0x00	; 0
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	a0 e0       	ldi	r26, 0x00	; 0
    1182:	b0 e0       	ldi	r27, 0x00	; 0
    1184:	e6 14       	cp	r14, r6
    1186:	f7 04       	cpc	r15, r7
    1188:	08 05       	cpc	r16, r8
    118a:	19 05       	cpc	r17, r9
    118c:	20 f4       	brcc	.+8      	; 0x1196 <__mulsf3+0xe8>
    118e:	81 e0       	ldi	r24, 0x01	; 1
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	a0 e0       	ldi	r26, 0x00	; 0
    1194:	b0 e0       	ldi	r27, 0x00	; 0
    1196:	ba 01       	movw	r22, r20
    1198:	a9 01       	movw	r20, r18
    119a:	48 0f       	add	r20, r24
    119c:	59 1f       	adc	r21, r25
    119e:	6a 1f       	adc	r22, r26
    11a0:	7b 1f       	adc	r23, r27
    11a2:	aa 0c       	add	r10, r10
    11a4:	bb 1c       	adc	r11, r11
    11a6:	cc 1c       	adc	r12, r12
    11a8:	dd 1c       	adc	r13, r13
    11aa:	97 fe       	sbrs	r9, 7
    11ac:	08 c0       	rjmp	.+16     	; 0x11be <__mulsf3+0x110>
    11ae:	81 e0       	ldi	r24, 0x01	; 1
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	a0 e0       	ldi	r26, 0x00	; 0
    11b4:	b0 e0       	ldi	r27, 0x00	; 0
    11b6:	a8 2a       	or	r10, r24
    11b8:	b9 2a       	or	r11, r25
    11ba:	ca 2a       	or	r12, r26
    11bc:	db 2a       	or	r13, r27
    11be:	31 96       	adiw	r30, 0x01	; 1
    11c0:	e0 32       	cpi	r30, 0x20	; 32
    11c2:	f1 05       	cpc	r31, r1
    11c4:	49 f0       	breq	.+18     	; 0x11d8 <__mulsf3+0x12a>
    11c6:	66 0c       	add	r6, r6
    11c8:	77 1c       	adc	r7, r7
    11ca:	88 1c       	adc	r8, r8
    11cc:	99 1c       	adc	r9, r9
    11ce:	56 94       	lsr	r5
    11d0:	47 94       	ror	r4
    11d2:	37 94       	ror	r3
    11d4:	27 94       	ror	r2
    11d6:	c3 cf       	rjmp	.-122    	; 0x115e <__mulsf3+0xb0>
    11d8:	fa 85       	ldd	r31, Y+10	; 0x0a
    11da:	ea 89       	ldd	r30, Y+18	; 0x12
    11dc:	2b 89       	ldd	r18, Y+19	; 0x13
    11de:	3c 89       	ldd	r19, Y+20	; 0x14
    11e0:	8b 85       	ldd	r24, Y+11	; 0x0b
    11e2:	9c 85       	ldd	r25, Y+12	; 0x0c
    11e4:	28 0f       	add	r18, r24
    11e6:	39 1f       	adc	r19, r25
    11e8:	2e 5f       	subi	r18, 0xFE	; 254
    11ea:	3f 4f       	sbci	r19, 0xFF	; 255
    11ec:	17 c0       	rjmp	.+46     	; 0x121c <__mulsf3+0x16e>
    11ee:	ca 01       	movw	r24, r20
    11f0:	81 70       	andi	r24, 0x01	; 1
    11f2:	90 70       	andi	r25, 0x00	; 0
    11f4:	89 2b       	or	r24, r25
    11f6:	61 f0       	breq	.+24     	; 0x1210 <__mulsf3+0x162>
    11f8:	16 95       	lsr	r17
    11fa:	07 95       	ror	r16
    11fc:	f7 94       	ror	r15
    11fe:	e7 94       	ror	r14
    1200:	80 e0       	ldi	r24, 0x00	; 0
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	a0 e0       	ldi	r26, 0x00	; 0
    1206:	b0 e8       	ldi	r27, 0x80	; 128
    1208:	e8 2a       	or	r14, r24
    120a:	f9 2a       	or	r15, r25
    120c:	0a 2b       	or	r16, r26
    120e:	1b 2b       	or	r17, r27
    1210:	76 95       	lsr	r23
    1212:	67 95       	ror	r22
    1214:	57 95       	ror	r21
    1216:	47 95       	ror	r20
    1218:	2f 5f       	subi	r18, 0xFF	; 255
    121a:	3f 4f       	sbci	r19, 0xFF	; 255
    121c:	77 fd       	sbrc	r23, 7
    121e:	e7 cf       	rjmp	.-50     	; 0x11ee <__mulsf3+0x140>
    1220:	0c c0       	rjmp	.+24     	; 0x123a <__mulsf3+0x18c>
    1222:	44 0f       	add	r20, r20
    1224:	55 1f       	adc	r21, r21
    1226:	66 1f       	adc	r22, r22
    1228:	77 1f       	adc	r23, r23
    122a:	17 fd       	sbrc	r17, 7
    122c:	41 60       	ori	r20, 0x01	; 1
    122e:	ee 0c       	add	r14, r14
    1230:	ff 1c       	adc	r15, r15
    1232:	00 1f       	adc	r16, r16
    1234:	11 1f       	adc	r17, r17
    1236:	21 50       	subi	r18, 0x01	; 1
    1238:	30 40       	sbci	r19, 0x00	; 0
    123a:	40 30       	cpi	r20, 0x00	; 0
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	59 07       	cpc	r21, r25
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	69 07       	cpc	r22, r25
    1244:	90 e4       	ldi	r25, 0x40	; 64
    1246:	79 07       	cpc	r23, r25
    1248:	60 f3       	brcs	.-40     	; 0x1222 <__mulsf3+0x174>
    124a:	2b 8f       	std	Y+27, r18	; 0x1b
    124c:	3c 8f       	std	Y+28, r19	; 0x1c
    124e:	db 01       	movw	r26, r22
    1250:	ca 01       	movw	r24, r20
    1252:	8f 77       	andi	r24, 0x7F	; 127
    1254:	90 70       	andi	r25, 0x00	; 0
    1256:	a0 70       	andi	r26, 0x00	; 0
    1258:	b0 70       	andi	r27, 0x00	; 0
    125a:	80 34       	cpi	r24, 0x40	; 64
    125c:	91 05       	cpc	r25, r1
    125e:	a1 05       	cpc	r26, r1
    1260:	b1 05       	cpc	r27, r1
    1262:	61 f4       	brne	.+24     	; 0x127c <__mulsf3+0x1ce>
    1264:	47 fd       	sbrc	r20, 7
    1266:	0a c0       	rjmp	.+20     	; 0x127c <__mulsf3+0x1ce>
    1268:	e1 14       	cp	r14, r1
    126a:	f1 04       	cpc	r15, r1
    126c:	01 05       	cpc	r16, r1
    126e:	11 05       	cpc	r17, r1
    1270:	29 f0       	breq	.+10     	; 0x127c <__mulsf3+0x1ce>
    1272:	40 5c       	subi	r20, 0xC0	; 192
    1274:	5f 4f       	sbci	r21, 0xFF	; 255
    1276:	6f 4f       	sbci	r22, 0xFF	; 255
    1278:	7f 4f       	sbci	r23, 0xFF	; 255
    127a:	40 78       	andi	r20, 0x80	; 128
    127c:	1a 8e       	std	Y+26, r1	; 0x1a
    127e:	fe 17       	cp	r31, r30
    1280:	11 f0       	breq	.+4      	; 0x1286 <__mulsf3+0x1d8>
    1282:	81 e0       	ldi	r24, 0x01	; 1
    1284:	8a 8f       	std	Y+26, r24	; 0x1a
    1286:	4d 8f       	std	Y+29, r20	; 0x1d
    1288:	5e 8f       	std	Y+30, r21	; 0x1e
    128a:	6f 8f       	std	Y+31, r22	; 0x1f
    128c:	78 a3       	std	Y+32, r23	; 0x20
    128e:	83 e0       	ldi	r24, 0x03	; 3
    1290:	89 8f       	std	Y+25, r24	; 0x19
    1292:	ce 01       	movw	r24, r28
    1294:	49 96       	adiw	r24, 0x19	; 25
    1296:	0e 94 35 0a 	call	0x146a	; 0x146a <__pack_f>
    129a:	a0 96       	adiw	r28, 0x20	; 32
    129c:	e2 e1       	ldi	r30, 0x12	; 18
    129e:	0c 94 38 0c 	jmp	0x1870	; 0x1870 <__epilogue_restores__>

000012a2 <__gtsf2>:
    12a2:	a8 e1       	ldi	r26, 0x18	; 24
    12a4:	b0 e0       	ldi	r27, 0x00	; 0
    12a6:	e7 e5       	ldi	r30, 0x57	; 87
    12a8:	f9 e0       	ldi	r31, 0x09	; 9
    12aa:	0c 94 28 0c 	jmp	0x1850	; 0x1850 <__prologue_saves__+0x18>
    12ae:	69 83       	std	Y+1, r22	; 0x01
    12b0:	7a 83       	std	Y+2, r23	; 0x02
    12b2:	8b 83       	std	Y+3, r24	; 0x03
    12b4:	9c 83       	std	Y+4, r25	; 0x04
    12b6:	2d 83       	std	Y+5, r18	; 0x05
    12b8:	3e 83       	std	Y+6, r19	; 0x06
    12ba:	4f 83       	std	Y+7, r20	; 0x07
    12bc:	58 87       	std	Y+8, r21	; 0x08
    12be:	89 e0       	ldi	r24, 0x09	; 9
    12c0:	e8 2e       	mov	r14, r24
    12c2:	f1 2c       	mov	r15, r1
    12c4:	ec 0e       	add	r14, r28
    12c6:	fd 1e       	adc	r15, r29
    12c8:	ce 01       	movw	r24, r28
    12ca:	01 96       	adiw	r24, 0x01	; 1
    12cc:	b7 01       	movw	r22, r14
    12ce:	0e 94 0a 0b 	call	0x1614	; 0x1614 <__unpack_f>
    12d2:	8e 01       	movw	r16, r28
    12d4:	0f 5e       	subi	r16, 0xEF	; 239
    12d6:	1f 4f       	sbci	r17, 0xFF	; 255
    12d8:	ce 01       	movw	r24, r28
    12da:	05 96       	adiw	r24, 0x05	; 5
    12dc:	b8 01       	movw	r22, r16
    12de:	0e 94 0a 0b 	call	0x1614	; 0x1614 <__unpack_f>
    12e2:	89 85       	ldd	r24, Y+9	; 0x09
    12e4:	82 30       	cpi	r24, 0x02	; 2
    12e6:	40 f0       	brcs	.+16     	; 0x12f8 <__gtsf2+0x56>
    12e8:	89 89       	ldd	r24, Y+17	; 0x11
    12ea:	82 30       	cpi	r24, 0x02	; 2
    12ec:	28 f0       	brcs	.+10     	; 0x12f8 <__gtsf2+0x56>
    12ee:	c7 01       	movw	r24, r14
    12f0:	b8 01       	movw	r22, r16
    12f2:	0e 94 82 0b 	call	0x1704	; 0x1704 <__fpcmp_parts_f>
    12f6:	01 c0       	rjmp	.+2      	; 0x12fa <__gtsf2+0x58>
    12f8:	8f ef       	ldi	r24, 0xFF	; 255
    12fa:	68 96       	adiw	r28, 0x18	; 24
    12fc:	e6 e0       	ldi	r30, 0x06	; 6
    12fe:	0c 94 44 0c 	jmp	0x1888	; 0x1888 <__epilogue_restores__+0x18>

00001302 <__gesf2>:
    1302:	a8 e1       	ldi	r26, 0x18	; 24
    1304:	b0 e0       	ldi	r27, 0x00	; 0
    1306:	e7 e8       	ldi	r30, 0x87	; 135
    1308:	f9 e0       	ldi	r31, 0x09	; 9
    130a:	0c 94 28 0c 	jmp	0x1850	; 0x1850 <__prologue_saves__+0x18>
    130e:	69 83       	std	Y+1, r22	; 0x01
    1310:	7a 83       	std	Y+2, r23	; 0x02
    1312:	8b 83       	std	Y+3, r24	; 0x03
    1314:	9c 83       	std	Y+4, r25	; 0x04
    1316:	2d 83       	std	Y+5, r18	; 0x05
    1318:	3e 83       	std	Y+6, r19	; 0x06
    131a:	4f 83       	std	Y+7, r20	; 0x07
    131c:	58 87       	std	Y+8, r21	; 0x08
    131e:	89 e0       	ldi	r24, 0x09	; 9
    1320:	e8 2e       	mov	r14, r24
    1322:	f1 2c       	mov	r15, r1
    1324:	ec 0e       	add	r14, r28
    1326:	fd 1e       	adc	r15, r29
    1328:	ce 01       	movw	r24, r28
    132a:	01 96       	adiw	r24, 0x01	; 1
    132c:	b7 01       	movw	r22, r14
    132e:	0e 94 0a 0b 	call	0x1614	; 0x1614 <__unpack_f>
    1332:	8e 01       	movw	r16, r28
    1334:	0f 5e       	subi	r16, 0xEF	; 239
    1336:	1f 4f       	sbci	r17, 0xFF	; 255
    1338:	ce 01       	movw	r24, r28
    133a:	05 96       	adiw	r24, 0x05	; 5
    133c:	b8 01       	movw	r22, r16
    133e:	0e 94 0a 0b 	call	0x1614	; 0x1614 <__unpack_f>
    1342:	89 85       	ldd	r24, Y+9	; 0x09
    1344:	82 30       	cpi	r24, 0x02	; 2
    1346:	40 f0       	brcs	.+16     	; 0x1358 <__gesf2+0x56>
    1348:	89 89       	ldd	r24, Y+17	; 0x11
    134a:	82 30       	cpi	r24, 0x02	; 2
    134c:	28 f0       	brcs	.+10     	; 0x1358 <__gesf2+0x56>
    134e:	c7 01       	movw	r24, r14
    1350:	b8 01       	movw	r22, r16
    1352:	0e 94 82 0b 	call	0x1704	; 0x1704 <__fpcmp_parts_f>
    1356:	01 c0       	rjmp	.+2      	; 0x135a <__gesf2+0x58>
    1358:	8f ef       	ldi	r24, 0xFF	; 255
    135a:	68 96       	adiw	r28, 0x18	; 24
    135c:	e6 e0       	ldi	r30, 0x06	; 6
    135e:	0c 94 44 0c 	jmp	0x1888	; 0x1888 <__epilogue_restores__+0x18>

00001362 <__ltsf2>:
    1362:	a8 e1       	ldi	r26, 0x18	; 24
    1364:	b0 e0       	ldi	r27, 0x00	; 0
    1366:	e7 eb       	ldi	r30, 0xB7	; 183
    1368:	f9 e0       	ldi	r31, 0x09	; 9
    136a:	0c 94 28 0c 	jmp	0x1850	; 0x1850 <__prologue_saves__+0x18>
    136e:	69 83       	std	Y+1, r22	; 0x01
    1370:	7a 83       	std	Y+2, r23	; 0x02
    1372:	8b 83       	std	Y+3, r24	; 0x03
    1374:	9c 83       	std	Y+4, r25	; 0x04
    1376:	2d 83       	std	Y+5, r18	; 0x05
    1378:	3e 83       	std	Y+6, r19	; 0x06
    137a:	4f 83       	std	Y+7, r20	; 0x07
    137c:	58 87       	std	Y+8, r21	; 0x08
    137e:	89 e0       	ldi	r24, 0x09	; 9
    1380:	e8 2e       	mov	r14, r24
    1382:	f1 2c       	mov	r15, r1
    1384:	ec 0e       	add	r14, r28
    1386:	fd 1e       	adc	r15, r29
    1388:	ce 01       	movw	r24, r28
    138a:	01 96       	adiw	r24, 0x01	; 1
    138c:	b7 01       	movw	r22, r14
    138e:	0e 94 0a 0b 	call	0x1614	; 0x1614 <__unpack_f>
    1392:	8e 01       	movw	r16, r28
    1394:	0f 5e       	subi	r16, 0xEF	; 239
    1396:	1f 4f       	sbci	r17, 0xFF	; 255
    1398:	ce 01       	movw	r24, r28
    139a:	05 96       	adiw	r24, 0x05	; 5
    139c:	b8 01       	movw	r22, r16
    139e:	0e 94 0a 0b 	call	0x1614	; 0x1614 <__unpack_f>
    13a2:	89 85       	ldd	r24, Y+9	; 0x09
    13a4:	82 30       	cpi	r24, 0x02	; 2
    13a6:	40 f0       	brcs	.+16     	; 0x13b8 <__ltsf2+0x56>
    13a8:	89 89       	ldd	r24, Y+17	; 0x11
    13aa:	82 30       	cpi	r24, 0x02	; 2
    13ac:	28 f0       	brcs	.+10     	; 0x13b8 <__ltsf2+0x56>
    13ae:	c7 01       	movw	r24, r14
    13b0:	b8 01       	movw	r22, r16
    13b2:	0e 94 82 0b 	call	0x1704	; 0x1704 <__fpcmp_parts_f>
    13b6:	01 c0       	rjmp	.+2      	; 0x13ba <__ltsf2+0x58>
    13b8:	81 e0       	ldi	r24, 0x01	; 1
    13ba:	68 96       	adiw	r28, 0x18	; 24
    13bc:	e6 e0       	ldi	r30, 0x06	; 6
    13be:	0c 94 44 0c 	jmp	0x1888	; 0x1888 <__epilogue_restores__+0x18>

000013c2 <__fixsfsi>:
    13c2:	ac e0       	ldi	r26, 0x0C	; 12
    13c4:	b0 e0       	ldi	r27, 0x00	; 0
    13c6:	e7 ee       	ldi	r30, 0xE7	; 231
    13c8:	f9 e0       	ldi	r31, 0x09	; 9
    13ca:	0c 94 2c 0c 	jmp	0x1858	; 0x1858 <__prologue_saves__+0x20>
    13ce:	69 83       	std	Y+1, r22	; 0x01
    13d0:	7a 83       	std	Y+2, r23	; 0x02
    13d2:	8b 83       	std	Y+3, r24	; 0x03
    13d4:	9c 83       	std	Y+4, r25	; 0x04
    13d6:	ce 01       	movw	r24, r28
    13d8:	01 96       	adiw	r24, 0x01	; 1
    13da:	be 01       	movw	r22, r28
    13dc:	6b 5f       	subi	r22, 0xFB	; 251
    13de:	7f 4f       	sbci	r23, 0xFF	; 255
    13e0:	0e 94 0a 0b 	call	0x1614	; 0x1614 <__unpack_f>
    13e4:	8d 81       	ldd	r24, Y+5	; 0x05
    13e6:	82 30       	cpi	r24, 0x02	; 2
    13e8:	61 f1       	breq	.+88     	; 0x1442 <__fixsfsi+0x80>
    13ea:	82 30       	cpi	r24, 0x02	; 2
    13ec:	50 f1       	brcs	.+84     	; 0x1442 <__fixsfsi+0x80>
    13ee:	84 30       	cpi	r24, 0x04	; 4
    13f0:	21 f4       	brne	.+8      	; 0x13fa <__fixsfsi+0x38>
    13f2:	8e 81       	ldd	r24, Y+6	; 0x06
    13f4:	88 23       	and	r24, r24
    13f6:	51 f1       	breq	.+84     	; 0x144c <__fixsfsi+0x8a>
    13f8:	2e c0       	rjmp	.+92     	; 0x1456 <__fixsfsi+0x94>
    13fa:	2f 81       	ldd	r18, Y+7	; 0x07
    13fc:	38 85       	ldd	r19, Y+8	; 0x08
    13fe:	37 fd       	sbrc	r19, 7
    1400:	20 c0       	rjmp	.+64     	; 0x1442 <__fixsfsi+0x80>
    1402:	6e 81       	ldd	r22, Y+6	; 0x06
    1404:	2f 31       	cpi	r18, 0x1F	; 31
    1406:	31 05       	cpc	r19, r1
    1408:	1c f0       	brlt	.+6      	; 0x1410 <__fixsfsi+0x4e>
    140a:	66 23       	and	r22, r22
    140c:	f9 f0       	breq	.+62     	; 0x144c <__fixsfsi+0x8a>
    140e:	23 c0       	rjmp	.+70     	; 0x1456 <__fixsfsi+0x94>
    1410:	8e e1       	ldi	r24, 0x1E	; 30
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	82 1b       	sub	r24, r18
    1416:	93 0b       	sbc	r25, r19
    1418:	29 85       	ldd	r18, Y+9	; 0x09
    141a:	3a 85       	ldd	r19, Y+10	; 0x0a
    141c:	4b 85       	ldd	r20, Y+11	; 0x0b
    141e:	5c 85       	ldd	r21, Y+12	; 0x0c
    1420:	04 c0       	rjmp	.+8      	; 0x142a <__fixsfsi+0x68>
    1422:	56 95       	lsr	r21
    1424:	47 95       	ror	r20
    1426:	37 95       	ror	r19
    1428:	27 95       	ror	r18
    142a:	8a 95       	dec	r24
    142c:	d2 f7       	brpl	.-12     	; 0x1422 <__fixsfsi+0x60>
    142e:	66 23       	and	r22, r22
    1430:	b1 f0       	breq	.+44     	; 0x145e <__fixsfsi+0x9c>
    1432:	50 95       	com	r21
    1434:	40 95       	com	r20
    1436:	30 95       	com	r19
    1438:	21 95       	neg	r18
    143a:	3f 4f       	sbci	r19, 0xFF	; 255
    143c:	4f 4f       	sbci	r20, 0xFF	; 255
    143e:	5f 4f       	sbci	r21, 0xFF	; 255
    1440:	0e c0       	rjmp	.+28     	; 0x145e <__fixsfsi+0x9c>
    1442:	20 e0       	ldi	r18, 0x00	; 0
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	40 e0       	ldi	r20, 0x00	; 0
    1448:	50 e0       	ldi	r21, 0x00	; 0
    144a:	09 c0       	rjmp	.+18     	; 0x145e <__fixsfsi+0x9c>
    144c:	2f ef       	ldi	r18, 0xFF	; 255
    144e:	3f ef       	ldi	r19, 0xFF	; 255
    1450:	4f ef       	ldi	r20, 0xFF	; 255
    1452:	5f e7       	ldi	r21, 0x7F	; 127
    1454:	04 c0       	rjmp	.+8      	; 0x145e <__fixsfsi+0x9c>
    1456:	20 e0       	ldi	r18, 0x00	; 0
    1458:	30 e0       	ldi	r19, 0x00	; 0
    145a:	40 e0       	ldi	r20, 0x00	; 0
    145c:	50 e8       	ldi	r21, 0x80	; 128
    145e:	b9 01       	movw	r22, r18
    1460:	ca 01       	movw	r24, r20
    1462:	2c 96       	adiw	r28, 0x0c	; 12
    1464:	e2 e0       	ldi	r30, 0x02	; 2
    1466:	0c 94 48 0c 	jmp	0x1890	; 0x1890 <__epilogue_restores__+0x20>

0000146a <__pack_f>:
    146a:	df 92       	push	r13
    146c:	ef 92       	push	r14
    146e:	ff 92       	push	r15
    1470:	0f 93       	push	r16
    1472:	1f 93       	push	r17
    1474:	fc 01       	movw	r30, r24
    1476:	e4 80       	ldd	r14, Z+4	; 0x04
    1478:	f5 80       	ldd	r15, Z+5	; 0x05
    147a:	06 81       	ldd	r16, Z+6	; 0x06
    147c:	17 81       	ldd	r17, Z+7	; 0x07
    147e:	d1 80       	ldd	r13, Z+1	; 0x01
    1480:	80 81       	ld	r24, Z
    1482:	82 30       	cpi	r24, 0x02	; 2
    1484:	48 f4       	brcc	.+18     	; 0x1498 <__pack_f+0x2e>
    1486:	80 e0       	ldi	r24, 0x00	; 0
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	a0 e1       	ldi	r26, 0x10	; 16
    148c:	b0 e0       	ldi	r27, 0x00	; 0
    148e:	e8 2a       	or	r14, r24
    1490:	f9 2a       	or	r15, r25
    1492:	0a 2b       	or	r16, r26
    1494:	1b 2b       	or	r17, r27
    1496:	a5 c0       	rjmp	.+330    	; 0x15e2 <__pack_f+0x178>
    1498:	84 30       	cpi	r24, 0x04	; 4
    149a:	09 f4       	brne	.+2      	; 0x149e <__pack_f+0x34>
    149c:	9f c0       	rjmp	.+318    	; 0x15dc <__pack_f+0x172>
    149e:	82 30       	cpi	r24, 0x02	; 2
    14a0:	21 f4       	brne	.+8      	; 0x14aa <__pack_f+0x40>
    14a2:	ee 24       	eor	r14, r14
    14a4:	ff 24       	eor	r15, r15
    14a6:	87 01       	movw	r16, r14
    14a8:	05 c0       	rjmp	.+10     	; 0x14b4 <__pack_f+0x4a>
    14aa:	e1 14       	cp	r14, r1
    14ac:	f1 04       	cpc	r15, r1
    14ae:	01 05       	cpc	r16, r1
    14b0:	11 05       	cpc	r17, r1
    14b2:	19 f4       	brne	.+6      	; 0x14ba <__pack_f+0x50>
    14b4:	e0 e0       	ldi	r30, 0x00	; 0
    14b6:	f0 e0       	ldi	r31, 0x00	; 0
    14b8:	96 c0       	rjmp	.+300    	; 0x15e6 <__pack_f+0x17c>
    14ba:	62 81       	ldd	r22, Z+2	; 0x02
    14bc:	73 81       	ldd	r23, Z+3	; 0x03
    14be:	9f ef       	ldi	r25, 0xFF	; 255
    14c0:	62 38       	cpi	r22, 0x82	; 130
    14c2:	79 07       	cpc	r23, r25
    14c4:	0c f0       	brlt	.+2      	; 0x14c8 <__pack_f+0x5e>
    14c6:	5b c0       	rjmp	.+182    	; 0x157e <__pack_f+0x114>
    14c8:	22 e8       	ldi	r18, 0x82	; 130
    14ca:	3f ef       	ldi	r19, 0xFF	; 255
    14cc:	26 1b       	sub	r18, r22
    14ce:	37 0b       	sbc	r19, r23
    14d0:	2a 31       	cpi	r18, 0x1A	; 26
    14d2:	31 05       	cpc	r19, r1
    14d4:	2c f0       	brlt	.+10     	; 0x14e0 <__pack_f+0x76>
    14d6:	20 e0       	ldi	r18, 0x00	; 0
    14d8:	30 e0       	ldi	r19, 0x00	; 0
    14da:	40 e0       	ldi	r20, 0x00	; 0
    14dc:	50 e0       	ldi	r21, 0x00	; 0
    14de:	2a c0       	rjmp	.+84     	; 0x1534 <__pack_f+0xca>
    14e0:	b8 01       	movw	r22, r16
    14e2:	a7 01       	movw	r20, r14
    14e4:	02 2e       	mov	r0, r18
    14e6:	04 c0       	rjmp	.+8      	; 0x14f0 <__pack_f+0x86>
    14e8:	76 95       	lsr	r23
    14ea:	67 95       	ror	r22
    14ec:	57 95       	ror	r21
    14ee:	47 95       	ror	r20
    14f0:	0a 94       	dec	r0
    14f2:	d2 f7       	brpl	.-12     	; 0x14e8 <__pack_f+0x7e>
    14f4:	81 e0       	ldi	r24, 0x01	; 1
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	a0 e0       	ldi	r26, 0x00	; 0
    14fa:	b0 e0       	ldi	r27, 0x00	; 0
    14fc:	04 c0       	rjmp	.+8      	; 0x1506 <__pack_f+0x9c>
    14fe:	88 0f       	add	r24, r24
    1500:	99 1f       	adc	r25, r25
    1502:	aa 1f       	adc	r26, r26
    1504:	bb 1f       	adc	r27, r27
    1506:	2a 95       	dec	r18
    1508:	d2 f7       	brpl	.-12     	; 0x14fe <__pack_f+0x94>
    150a:	01 97       	sbiw	r24, 0x01	; 1
    150c:	a1 09       	sbc	r26, r1
    150e:	b1 09       	sbc	r27, r1
    1510:	8e 21       	and	r24, r14
    1512:	9f 21       	and	r25, r15
    1514:	a0 23       	and	r26, r16
    1516:	b1 23       	and	r27, r17
    1518:	00 97       	sbiw	r24, 0x00	; 0
    151a:	a1 05       	cpc	r26, r1
    151c:	b1 05       	cpc	r27, r1
    151e:	21 f0       	breq	.+8      	; 0x1528 <__pack_f+0xbe>
    1520:	81 e0       	ldi	r24, 0x01	; 1
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	a0 e0       	ldi	r26, 0x00	; 0
    1526:	b0 e0       	ldi	r27, 0x00	; 0
    1528:	9a 01       	movw	r18, r20
    152a:	ab 01       	movw	r20, r22
    152c:	28 2b       	or	r18, r24
    152e:	39 2b       	or	r19, r25
    1530:	4a 2b       	or	r20, r26
    1532:	5b 2b       	or	r21, r27
    1534:	da 01       	movw	r26, r20
    1536:	c9 01       	movw	r24, r18
    1538:	8f 77       	andi	r24, 0x7F	; 127
    153a:	90 70       	andi	r25, 0x00	; 0
    153c:	a0 70       	andi	r26, 0x00	; 0
    153e:	b0 70       	andi	r27, 0x00	; 0
    1540:	80 34       	cpi	r24, 0x40	; 64
    1542:	91 05       	cpc	r25, r1
    1544:	a1 05       	cpc	r26, r1
    1546:	b1 05       	cpc	r27, r1
    1548:	39 f4       	brne	.+14     	; 0x1558 <__pack_f+0xee>
    154a:	27 ff       	sbrs	r18, 7
    154c:	09 c0       	rjmp	.+18     	; 0x1560 <__pack_f+0xf6>
    154e:	20 5c       	subi	r18, 0xC0	; 192
    1550:	3f 4f       	sbci	r19, 0xFF	; 255
    1552:	4f 4f       	sbci	r20, 0xFF	; 255
    1554:	5f 4f       	sbci	r21, 0xFF	; 255
    1556:	04 c0       	rjmp	.+8      	; 0x1560 <__pack_f+0xf6>
    1558:	21 5c       	subi	r18, 0xC1	; 193
    155a:	3f 4f       	sbci	r19, 0xFF	; 255
    155c:	4f 4f       	sbci	r20, 0xFF	; 255
    155e:	5f 4f       	sbci	r21, 0xFF	; 255
    1560:	e0 e0       	ldi	r30, 0x00	; 0
    1562:	f0 e0       	ldi	r31, 0x00	; 0
    1564:	20 30       	cpi	r18, 0x00	; 0
    1566:	a0 e0       	ldi	r26, 0x00	; 0
    1568:	3a 07       	cpc	r19, r26
    156a:	a0 e0       	ldi	r26, 0x00	; 0
    156c:	4a 07       	cpc	r20, r26
    156e:	a0 e4       	ldi	r26, 0x40	; 64
    1570:	5a 07       	cpc	r21, r26
    1572:	10 f0       	brcs	.+4      	; 0x1578 <__pack_f+0x10e>
    1574:	e1 e0       	ldi	r30, 0x01	; 1
    1576:	f0 e0       	ldi	r31, 0x00	; 0
    1578:	79 01       	movw	r14, r18
    157a:	8a 01       	movw	r16, r20
    157c:	27 c0       	rjmp	.+78     	; 0x15cc <__pack_f+0x162>
    157e:	60 38       	cpi	r22, 0x80	; 128
    1580:	71 05       	cpc	r23, r1
    1582:	64 f5       	brge	.+88     	; 0x15dc <__pack_f+0x172>
    1584:	fb 01       	movw	r30, r22
    1586:	e1 58       	subi	r30, 0x81	; 129
    1588:	ff 4f       	sbci	r31, 0xFF	; 255
    158a:	d8 01       	movw	r26, r16
    158c:	c7 01       	movw	r24, r14
    158e:	8f 77       	andi	r24, 0x7F	; 127
    1590:	90 70       	andi	r25, 0x00	; 0
    1592:	a0 70       	andi	r26, 0x00	; 0
    1594:	b0 70       	andi	r27, 0x00	; 0
    1596:	80 34       	cpi	r24, 0x40	; 64
    1598:	91 05       	cpc	r25, r1
    159a:	a1 05       	cpc	r26, r1
    159c:	b1 05       	cpc	r27, r1
    159e:	39 f4       	brne	.+14     	; 0x15ae <__pack_f+0x144>
    15a0:	e7 fe       	sbrs	r14, 7
    15a2:	0d c0       	rjmp	.+26     	; 0x15be <__pack_f+0x154>
    15a4:	80 e4       	ldi	r24, 0x40	; 64
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	a0 e0       	ldi	r26, 0x00	; 0
    15aa:	b0 e0       	ldi	r27, 0x00	; 0
    15ac:	04 c0       	rjmp	.+8      	; 0x15b6 <__pack_f+0x14c>
    15ae:	8f e3       	ldi	r24, 0x3F	; 63
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	a0 e0       	ldi	r26, 0x00	; 0
    15b4:	b0 e0       	ldi	r27, 0x00	; 0
    15b6:	e8 0e       	add	r14, r24
    15b8:	f9 1e       	adc	r15, r25
    15ba:	0a 1f       	adc	r16, r26
    15bc:	1b 1f       	adc	r17, r27
    15be:	17 ff       	sbrs	r17, 7
    15c0:	05 c0       	rjmp	.+10     	; 0x15cc <__pack_f+0x162>
    15c2:	16 95       	lsr	r17
    15c4:	07 95       	ror	r16
    15c6:	f7 94       	ror	r15
    15c8:	e7 94       	ror	r14
    15ca:	31 96       	adiw	r30, 0x01	; 1
    15cc:	87 e0       	ldi	r24, 0x07	; 7
    15ce:	16 95       	lsr	r17
    15d0:	07 95       	ror	r16
    15d2:	f7 94       	ror	r15
    15d4:	e7 94       	ror	r14
    15d6:	8a 95       	dec	r24
    15d8:	d1 f7       	brne	.-12     	; 0x15ce <__pack_f+0x164>
    15da:	05 c0       	rjmp	.+10     	; 0x15e6 <__pack_f+0x17c>
    15dc:	ee 24       	eor	r14, r14
    15de:	ff 24       	eor	r15, r15
    15e0:	87 01       	movw	r16, r14
    15e2:	ef ef       	ldi	r30, 0xFF	; 255
    15e4:	f0 e0       	ldi	r31, 0x00	; 0
    15e6:	6e 2f       	mov	r22, r30
    15e8:	67 95       	ror	r22
    15ea:	66 27       	eor	r22, r22
    15ec:	67 95       	ror	r22
    15ee:	90 2f       	mov	r25, r16
    15f0:	9f 77       	andi	r25, 0x7F	; 127
    15f2:	d7 94       	ror	r13
    15f4:	dd 24       	eor	r13, r13
    15f6:	d7 94       	ror	r13
    15f8:	8e 2f       	mov	r24, r30
    15fa:	86 95       	lsr	r24
    15fc:	49 2f       	mov	r20, r25
    15fe:	46 2b       	or	r20, r22
    1600:	58 2f       	mov	r21, r24
    1602:	5d 29       	or	r21, r13
    1604:	b7 01       	movw	r22, r14
    1606:	ca 01       	movw	r24, r20
    1608:	1f 91       	pop	r17
    160a:	0f 91       	pop	r16
    160c:	ff 90       	pop	r15
    160e:	ef 90       	pop	r14
    1610:	df 90       	pop	r13
    1612:	08 95       	ret

00001614 <__unpack_f>:
    1614:	fc 01       	movw	r30, r24
    1616:	db 01       	movw	r26, r22
    1618:	40 81       	ld	r20, Z
    161a:	51 81       	ldd	r21, Z+1	; 0x01
    161c:	22 81       	ldd	r18, Z+2	; 0x02
    161e:	62 2f       	mov	r22, r18
    1620:	6f 77       	andi	r22, 0x7F	; 127
    1622:	70 e0       	ldi	r23, 0x00	; 0
    1624:	22 1f       	adc	r18, r18
    1626:	22 27       	eor	r18, r18
    1628:	22 1f       	adc	r18, r18
    162a:	93 81       	ldd	r25, Z+3	; 0x03
    162c:	89 2f       	mov	r24, r25
    162e:	88 0f       	add	r24, r24
    1630:	82 2b       	or	r24, r18
    1632:	28 2f       	mov	r18, r24
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	99 1f       	adc	r25, r25
    1638:	99 27       	eor	r25, r25
    163a:	99 1f       	adc	r25, r25
    163c:	11 96       	adiw	r26, 0x01	; 1
    163e:	9c 93       	st	X, r25
    1640:	11 97       	sbiw	r26, 0x01	; 1
    1642:	21 15       	cp	r18, r1
    1644:	31 05       	cpc	r19, r1
    1646:	a9 f5       	brne	.+106    	; 0x16b2 <__unpack_f+0x9e>
    1648:	41 15       	cp	r20, r1
    164a:	51 05       	cpc	r21, r1
    164c:	61 05       	cpc	r22, r1
    164e:	71 05       	cpc	r23, r1
    1650:	11 f4       	brne	.+4      	; 0x1656 <__unpack_f+0x42>
    1652:	82 e0       	ldi	r24, 0x02	; 2
    1654:	37 c0       	rjmp	.+110    	; 0x16c4 <__unpack_f+0xb0>
    1656:	82 e8       	ldi	r24, 0x82	; 130
    1658:	9f ef       	ldi	r25, 0xFF	; 255
    165a:	13 96       	adiw	r26, 0x03	; 3
    165c:	9c 93       	st	X, r25
    165e:	8e 93       	st	-X, r24
    1660:	12 97       	sbiw	r26, 0x02	; 2
    1662:	9a 01       	movw	r18, r20
    1664:	ab 01       	movw	r20, r22
    1666:	67 e0       	ldi	r22, 0x07	; 7
    1668:	22 0f       	add	r18, r18
    166a:	33 1f       	adc	r19, r19
    166c:	44 1f       	adc	r20, r20
    166e:	55 1f       	adc	r21, r21
    1670:	6a 95       	dec	r22
    1672:	d1 f7       	brne	.-12     	; 0x1668 <__unpack_f+0x54>
    1674:	83 e0       	ldi	r24, 0x03	; 3
    1676:	8c 93       	st	X, r24
    1678:	0d c0       	rjmp	.+26     	; 0x1694 <__unpack_f+0x80>
    167a:	22 0f       	add	r18, r18
    167c:	33 1f       	adc	r19, r19
    167e:	44 1f       	adc	r20, r20
    1680:	55 1f       	adc	r21, r21
    1682:	12 96       	adiw	r26, 0x02	; 2
    1684:	8d 91       	ld	r24, X+
    1686:	9c 91       	ld	r25, X
    1688:	13 97       	sbiw	r26, 0x03	; 3
    168a:	01 97       	sbiw	r24, 0x01	; 1
    168c:	13 96       	adiw	r26, 0x03	; 3
    168e:	9c 93       	st	X, r25
    1690:	8e 93       	st	-X, r24
    1692:	12 97       	sbiw	r26, 0x02	; 2
    1694:	20 30       	cpi	r18, 0x00	; 0
    1696:	80 e0       	ldi	r24, 0x00	; 0
    1698:	38 07       	cpc	r19, r24
    169a:	80 e0       	ldi	r24, 0x00	; 0
    169c:	48 07       	cpc	r20, r24
    169e:	80 e4       	ldi	r24, 0x40	; 64
    16a0:	58 07       	cpc	r21, r24
    16a2:	58 f3       	brcs	.-42     	; 0x167a <__unpack_f+0x66>
    16a4:	14 96       	adiw	r26, 0x04	; 4
    16a6:	2d 93       	st	X+, r18
    16a8:	3d 93       	st	X+, r19
    16aa:	4d 93       	st	X+, r20
    16ac:	5c 93       	st	X, r21
    16ae:	17 97       	sbiw	r26, 0x07	; 7
    16b0:	08 95       	ret
    16b2:	2f 3f       	cpi	r18, 0xFF	; 255
    16b4:	31 05       	cpc	r19, r1
    16b6:	79 f4       	brne	.+30     	; 0x16d6 <__unpack_f+0xc2>
    16b8:	41 15       	cp	r20, r1
    16ba:	51 05       	cpc	r21, r1
    16bc:	61 05       	cpc	r22, r1
    16be:	71 05       	cpc	r23, r1
    16c0:	19 f4       	brne	.+6      	; 0x16c8 <__unpack_f+0xb4>
    16c2:	84 e0       	ldi	r24, 0x04	; 4
    16c4:	8c 93       	st	X, r24
    16c6:	08 95       	ret
    16c8:	64 ff       	sbrs	r22, 4
    16ca:	03 c0       	rjmp	.+6      	; 0x16d2 <__unpack_f+0xbe>
    16cc:	81 e0       	ldi	r24, 0x01	; 1
    16ce:	8c 93       	st	X, r24
    16d0:	12 c0       	rjmp	.+36     	; 0x16f6 <__unpack_f+0xe2>
    16d2:	1c 92       	st	X, r1
    16d4:	10 c0       	rjmp	.+32     	; 0x16f6 <__unpack_f+0xe2>
    16d6:	2f 57       	subi	r18, 0x7F	; 127
    16d8:	30 40       	sbci	r19, 0x00	; 0
    16da:	13 96       	adiw	r26, 0x03	; 3
    16dc:	3c 93       	st	X, r19
    16de:	2e 93       	st	-X, r18
    16e0:	12 97       	sbiw	r26, 0x02	; 2
    16e2:	83 e0       	ldi	r24, 0x03	; 3
    16e4:	8c 93       	st	X, r24
    16e6:	87 e0       	ldi	r24, 0x07	; 7
    16e8:	44 0f       	add	r20, r20
    16ea:	55 1f       	adc	r21, r21
    16ec:	66 1f       	adc	r22, r22
    16ee:	77 1f       	adc	r23, r23
    16f0:	8a 95       	dec	r24
    16f2:	d1 f7       	brne	.-12     	; 0x16e8 <__unpack_f+0xd4>
    16f4:	70 64       	ori	r23, 0x40	; 64
    16f6:	14 96       	adiw	r26, 0x04	; 4
    16f8:	4d 93       	st	X+, r20
    16fa:	5d 93       	st	X+, r21
    16fc:	6d 93       	st	X+, r22
    16fe:	7c 93       	st	X, r23
    1700:	17 97       	sbiw	r26, 0x07	; 7
    1702:	08 95       	ret

00001704 <__fpcmp_parts_f>:
    1704:	1f 93       	push	r17
    1706:	dc 01       	movw	r26, r24
    1708:	fb 01       	movw	r30, r22
    170a:	9c 91       	ld	r25, X
    170c:	92 30       	cpi	r25, 0x02	; 2
    170e:	08 f4       	brcc	.+2      	; 0x1712 <__fpcmp_parts_f+0xe>
    1710:	47 c0       	rjmp	.+142    	; 0x17a0 <__fpcmp_parts_f+0x9c>
    1712:	80 81       	ld	r24, Z
    1714:	82 30       	cpi	r24, 0x02	; 2
    1716:	08 f4       	brcc	.+2      	; 0x171a <__fpcmp_parts_f+0x16>
    1718:	43 c0       	rjmp	.+134    	; 0x17a0 <__fpcmp_parts_f+0x9c>
    171a:	94 30       	cpi	r25, 0x04	; 4
    171c:	51 f4       	brne	.+20     	; 0x1732 <__fpcmp_parts_f+0x2e>
    171e:	11 96       	adiw	r26, 0x01	; 1
    1720:	1c 91       	ld	r17, X
    1722:	84 30       	cpi	r24, 0x04	; 4
    1724:	99 f5       	brne	.+102    	; 0x178c <__fpcmp_parts_f+0x88>
    1726:	81 81       	ldd	r24, Z+1	; 0x01
    1728:	68 2f       	mov	r22, r24
    172a:	70 e0       	ldi	r23, 0x00	; 0
    172c:	61 1b       	sub	r22, r17
    172e:	71 09       	sbc	r23, r1
    1730:	3f c0       	rjmp	.+126    	; 0x17b0 <__fpcmp_parts_f+0xac>
    1732:	84 30       	cpi	r24, 0x04	; 4
    1734:	21 f0       	breq	.+8      	; 0x173e <__fpcmp_parts_f+0x3a>
    1736:	92 30       	cpi	r25, 0x02	; 2
    1738:	31 f4       	brne	.+12     	; 0x1746 <__fpcmp_parts_f+0x42>
    173a:	82 30       	cpi	r24, 0x02	; 2
    173c:	b9 f1       	breq	.+110    	; 0x17ac <__fpcmp_parts_f+0xa8>
    173e:	81 81       	ldd	r24, Z+1	; 0x01
    1740:	88 23       	and	r24, r24
    1742:	89 f1       	breq	.+98     	; 0x17a6 <__fpcmp_parts_f+0xa2>
    1744:	2d c0       	rjmp	.+90     	; 0x17a0 <__fpcmp_parts_f+0x9c>
    1746:	11 96       	adiw	r26, 0x01	; 1
    1748:	1c 91       	ld	r17, X
    174a:	11 97       	sbiw	r26, 0x01	; 1
    174c:	82 30       	cpi	r24, 0x02	; 2
    174e:	f1 f0       	breq	.+60     	; 0x178c <__fpcmp_parts_f+0x88>
    1750:	81 81       	ldd	r24, Z+1	; 0x01
    1752:	18 17       	cp	r17, r24
    1754:	d9 f4       	brne	.+54     	; 0x178c <__fpcmp_parts_f+0x88>
    1756:	12 96       	adiw	r26, 0x02	; 2
    1758:	2d 91       	ld	r18, X+
    175a:	3c 91       	ld	r19, X
    175c:	13 97       	sbiw	r26, 0x03	; 3
    175e:	82 81       	ldd	r24, Z+2	; 0x02
    1760:	93 81       	ldd	r25, Z+3	; 0x03
    1762:	82 17       	cp	r24, r18
    1764:	93 07       	cpc	r25, r19
    1766:	94 f0       	brlt	.+36     	; 0x178c <__fpcmp_parts_f+0x88>
    1768:	28 17       	cp	r18, r24
    176a:	39 07       	cpc	r19, r25
    176c:	bc f0       	brlt	.+46     	; 0x179c <__fpcmp_parts_f+0x98>
    176e:	14 96       	adiw	r26, 0x04	; 4
    1770:	8d 91       	ld	r24, X+
    1772:	9d 91       	ld	r25, X+
    1774:	0d 90       	ld	r0, X+
    1776:	bc 91       	ld	r27, X
    1778:	a0 2d       	mov	r26, r0
    177a:	24 81       	ldd	r18, Z+4	; 0x04
    177c:	35 81       	ldd	r19, Z+5	; 0x05
    177e:	46 81       	ldd	r20, Z+6	; 0x06
    1780:	57 81       	ldd	r21, Z+7	; 0x07
    1782:	28 17       	cp	r18, r24
    1784:	39 07       	cpc	r19, r25
    1786:	4a 07       	cpc	r20, r26
    1788:	5b 07       	cpc	r21, r27
    178a:	18 f4       	brcc	.+6      	; 0x1792 <__fpcmp_parts_f+0x8e>
    178c:	11 23       	and	r17, r17
    178e:	41 f0       	breq	.+16     	; 0x17a0 <__fpcmp_parts_f+0x9c>
    1790:	0a c0       	rjmp	.+20     	; 0x17a6 <__fpcmp_parts_f+0xa2>
    1792:	82 17       	cp	r24, r18
    1794:	93 07       	cpc	r25, r19
    1796:	a4 07       	cpc	r26, r20
    1798:	b5 07       	cpc	r27, r21
    179a:	40 f4       	brcc	.+16     	; 0x17ac <__fpcmp_parts_f+0xa8>
    179c:	11 23       	and	r17, r17
    179e:	19 f0       	breq	.+6      	; 0x17a6 <__fpcmp_parts_f+0xa2>
    17a0:	61 e0       	ldi	r22, 0x01	; 1
    17a2:	70 e0       	ldi	r23, 0x00	; 0
    17a4:	05 c0       	rjmp	.+10     	; 0x17b0 <__fpcmp_parts_f+0xac>
    17a6:	6f ef       	ldi	r22, 0xFF	; 255
    17a8:	7f ef       	ldi	r23, 0xFF	; 255
    17aa:	02 c0       	rjmp	.+4      	; 0x17b0 <__fpcmp_parts_f+0xac>
    17ac:	60 e0       	ldi	r22, 0x00	; 0
    17ae:	70 e0       	ldi	r23, 0x00	; 0
    17b0:	cb 01       	movw	r24, r22
    17b2:	1f 91       	pop	r17
    17b4:	08 95       	ret

000017b6 <__mulsi3>:
    17b6:	62 9f       	mul	r22, r18
    17b8:	d0 01       	movw	r26, r0
    17ba:	73 9f       	mul	r23, r19
    17bc:	f0 01       	movw	r30, r0
    17be:	82 9f       	mul	r24, r18
    17c0:	e0 0d       	add	r30, r0
    17c2:	f1 1d       	adc	r31, r1
    17c4:	64 9f       	mul	r22, r20
    17c6:	e0 0d       	add	r30, r0
    17c8:	f1 1d       	adc	r31, r1
    17ca:	92 9f       	mul	r25, r18
    17cc:	f0 0d       	add	r31, r0
    17ce:	83 9f       	mul	r24, r19
    17d0:	f0 0d       	add	r31, r0
    17d2:	74 9f       	mul	r23, r20
    17d4:	f0 0d       	add	r31, r0
    17d6:	65 9f       	mul	r22, r21
    17d8:	f0 0d       	add	r31, r0
    17da:	99 27       	eor	r25, r25
    17dc:	72 9f       	mul	r23, r18
    17de:	b0 0d       	add	r27, r0
    17e0:	e1 1d       	adc	r30, r1
    17e2:	f9 1f       	adc	r31, r25
    17e4:	63 9f       	mul	r22, r19
    17e6:	b0 0d       	add	r27, r0
    17e8:	e1 1d       	adc	r30, r1
    17ea:	f9 1f       	adc	r31, r25
    17ec:	bd 01       	movw	r22, r26
    17ee:	cf 01       	movw	r24, r30
    17f0:	11 24       	eor	r1, r1
    17f2:	08 95       	ret

000017f4 <__udivmodsi4>:
    17f4:	a1 e2       	ldi	r26, 0x21	; 33
    17f6:	1a 2e       	mov	r1, r26
    17f8:	aa 1b       	sub	r26, r26
    17fa:	bb 1b       	sub	r27, r27
    17fc:	fd 01       	movw	r30, r26
    17fe:	0d c0       	rjmp	.+26     	; 0x181a <__udivmodsi4_ep>

00001800 <__udivmodsi4_loop>:
    1800:	aa 1f       	adc	r26, r26
    1802:	bb 1f       	adc	r27, r27
    1804:	ee 1f       	adc	r30, r30
    1806:	ff 1f       	adc	r31, r31
    1808:	a2 17       	cp	r26, r18
    180a:	b3 07       	cpc	r27, r19
    180c:	e4 07       	cpc	r30, r20
    180e:	f5 07       	cpc	r31, r21
    1810:	20 f0       	brcs	.+8      	; 0x181a <__udivmodsi4_ep>
    1812:	a2 1b       	sub	r26, r18
    1814:	b3 0b       	sbc	r27, r19
    1816:	e4 0b       	sbc	r30, r20
    1818:	f5 0b       	sbc	r31, r21

0000181a <__udivmodsi4_ep>:
    181a:	66 1f       	adc	r22, r22
    181c:	77 1f       	adc	r23, r23
    181e:	88 1f       	adc	r24, r24
    1820:	99 1f       	adc	r25, r25
    1822:	1a 94       	dec	r1
    1824:	69 f7       	brne	.-38     	; 0x1800 <__udivmodsi4_loop>
    1826:	60 95       	com	r22
    1828:	70 95       	com	r23
    182a:	80 95       	com	r24
    182c:	90 95       	com	r25
    182e:	9b 01       	movw	r18, r22
    1830:	ac 01       	movw	r20, r24
    1832:	bd 01       	movw	r22, r26
    1834:	cf 01       	movw	r24, r30
    1836:	08 95       	ret

00001838 <__prologue_saves__>:
    1838:	2f 92       	push	r2
    183a:	3f 92       	push	r3
    183c:	4f 92       	push	r4
    183e:	5f 92       	push	r5
    1840:	6f 92       	push	r6
    1842:	7f 92       	push	r7
    1844:	8f 92       	push	r8
    1846:	9f 92       	push	r9
    1848:	af 92       	push	r10
    184a:	bf 92       	push	r11
    184c:	cf 92       	push	r12
    184e:	df 92       	push	r13
    1850:	ef 92       	push	r14
    1852:	ff 92       	push	r15
    1854:	0f 93       	push	r16
    1856:	1f 93       	push	r17
    1858:	cf 93       	push	r28
    185a:	df 93       	push	r29
    185c:	cd b7       	in	r28, 0x3d	; 61
    185e:	de b7       	in	r29, 0x3e	; 62
    1860:	ca 1b       	sub	r28, r26
    1862:	db 0b       	sbc	r29, r27
    1864:	0f b6       	in	r0, 0x3f	; 63
    1866:	f8 94       	cli
    1868:	de bf       	out	0x3e, r29	; 62
    186a:	0f be       	out	0x3f, r0	; 63
    186c:	cd bf       	out	0x3d, r28	; 61
    186e:	19 94       	eijmp

00001870 <__epilogue_restores__>:
    1870:	2a 88       	ldd	r2, Y+18	; 0x12
    1872:	39 88       	ldd	r3, Y+17	; 0x11
    1874:	48 88       	ldd	r4, Y+16	; 0x10
    1876:	5f 84       	ldd	r5, Y+15	; 0x0f
    1878:	6e 84       	ldd	r6, Y+14	; 0x0e
    187a:	7d 84       	ldd	r7, Y+13	; 0x0d
    187c:	8c 84       	ldd	r8, Y+12	; 0x0c
    187e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1880:	aa 84       	ldd	r10, Y+10	; 0x0a
    1882:	b9 84       	ldd	r11, Y+9	; 0x09
    1884:	c8 84       	ldd	r12, Y+8	; 0x08
    1886:	df 80       	ldd	r13, Y+7	; 0x07
    1888:	ee 80       	ldd	r14, Y+6	; 0x06
    188a:	fd 80       	ldd	r15, Y+5	; 0x05
    188c:	0c 81       	ldd	r16, Y+4	; 0x04
    188e:	1b 81       	ldd	r17, Y+3	; 0x03
    1890:	aa 81       	ldd	r26, Y+2	; 0x02
    1892:	b9 81       	ldd	r27, Y+1	; 0x01
    1894:	ce 0f       	add	r28, r30
    1896:	d1 1d       	adc	r29, r1
    1898:	0f b6       	in	r0, 0x3f	; 63
    189a:	f8 94       	cli
    189c:	de bf       	out	0x3e, r29	; 62
    189e:	0f be       	out	0x3f, r0	; 63
    18a0:	cd bf       	out	0x3d, r28	; 61
    18a2:	ed 01       	movw	r28, r26
    18a4:	08 95       	ret

000018a6 <_exit>:
    18a6:	f8 94       	cli

000018a8 <__stop_program>:
    18a8:	ff cf       	rjmp	.-2      	; 0x18a8 <__stop_program>
