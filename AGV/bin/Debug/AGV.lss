
bin\Debug\AGV.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000108  00800200  00001b00  00001bb4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b00  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001a  00800308  00800308  00001cbc  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  00001cbc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 00000200  00000000  00000000  00001cbf  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000036f  00000000  00000000  00001ebf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002be6  00000000  00000000  0000222e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000169a  00000000  00000000  00004e14  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000197f  00000000  00000000  000064ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002f0  00000000  00000000  00007e30  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000574  00000000  00000000  00008120  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009ce  00000000  00000000  00008694  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00009062  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <__vector_23>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	13 e0       	ldi	r17, 0x03	; 3
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e0 e0       	ldi	r30, 0x00	; 0
      fc:	fb e1       	ldi	r31, 0x1B	; 27
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a8 30       	cpi	r26, 0x08	; 8
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	13 e0       	ldi	r17, 0x03	; 3
     110:	a8 e0       	ldi	r26, 0x08	; 8
     112:	b3 e0       	ldi	r27, 0x03	; 3
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a2 32       	cpi	r26, 0x22	; 34
     11a:	b1 07       	cpc	r27, r17
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 95 00 	call	0x12a	; 0x12a <main>
     122:	0c 94 7e 0d 	jmp	0x1afc	; 0x1afc <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <main>:

#include "stepper.h"
#include "serial.h"

int main(void)
{
     12a:	df 93       	push	r29
     12c:	cf 93       	push	r28
     12e:	cd b7       	in	r28, 0x3d	; 61
     130:	de b7       	in	r29, 0x3e	; 62
    ///initializing stepper motors///
    construct_stepper(&stepper1, PK0, PK1);
     132:	83 e1       	ldi	r24, 0x13	; 19
     134:	93 e0       	ldi	r25, 0x03	; 3
     136:	60 e0       	ldi	r22, 0x00	; 0
     138:	41 e0       	ldi	r20, 0x01	; 1
     13a:	0e 94 25 02 	call	0x44a	; 0x44a <construct_stepper>
    construct_stepper(&stepper2, PK2, PK3);
     13e:	88 e0       	ldi	r24, 0x08	; 8
     140:	93 e0       	ldi	r25, 0x03	; 3
     142:	62 e0       	ldi	r22, 0x02	; 2
     144:	43 e0       	ldi	r20, 0x03	; 3
     146:	0e 94 25 02 	call	0x44a	; 0x44a <construct_stepper>
    initialize_steppers();
     14a:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <initialize_steppers>
    init_stepper_timer0();
     14e:	0e 94 3c 06 	call	0xc78	; 0xc78 <init_stepper_timer0>
    sei();
     152:	78 94       	sei

    ///initializing serial coms
    USART_Init(MYUBRR);
     154:	87 e6       	ldi	r24, 0x67	; 103
     156:	90 e0       	ldi	r25, 0x00	; 0
     158:	0e 94 07 01 	call	0x20e	; 0x20e <USART_Init>

    stepper2.direction = forward;
     15c:	82 e0       	ldi	r24, 0x02	; 2
     15e:	80 93 10 03 	sts	0x0310, r24
    stepper1.direction = backward;
     162:	81 e0       	ldi	r24, 0x01	; 1
     164:	80 93 1b 03 	sts	0x031B, r24
    stepper1.target_speed = 10;
     168:	8a e0       	ldi	r24, 0x0A	; 10
     16a:	80 93 19 03 	sts	0x0319, r24
    stepper2.target_speed = 10;
     16e:	8a e0       	ldi	r24, 0x0A	; 10
     170:	80 93 0e 03 	sts	0x030E, r24


    turn(360, &stepper1, &stepper2);
     174:	23 e1       	ldi	r18, 0x13	; 19
     176:	33 e0       	ldi	r19, 0x03	; 3
     178:	48 e0       	ldi	r20, 0x08	; 8
     17a:	53 e0       	ldi	r21, 0x03	; 3
     17c:	88 e6       	ldi	r24, 0x68	; 104
     17e:	91 e0       	ldi	r25, 0x01	; 1
     180:	b9 01       	movw	r22, r18
     182:	0e 94 0b 05 	call	0xa16	; 0xa16 <turn>
    while(1)
    {
        //

        accel_speed(&stepper1);
     186:	83 e1       	ldi	r24, 0x13	; 19
     188:	93 e0       	ldi	r25, 0x03	; 3
     18a:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <accel_speed>
        accel_speed(&stepper2);
     18e:	88 e0       	ldi	r24, 0x08	; 8
     190:	93 e0       	ldi	r25, 0x03	; 3
     192:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <accel_speed>
        Handle_steps(&stepper1);
     196:	83 e1       	ldi	r24, 0x13	; 19
     198:	93 e0       	ldi	r25, 0x03	; 3
     19a:	0e 94 b1 04 	call	0x962	; 0x962 <Handle_steps>
        Handle_steps(&stepper2);
     19e:	88 e0       	ldi	r24, 0x08	; 8
     1a0:	93 e0       	ldi	r25, 0x03	; 3
     1a2:	0e 94 b1 04 	call	0x962	; 0x962 <Handle_steps>
        set_dir(&stepper1);
     1a6:	83 e1       	ldi	r24, 0x13	; 19
     1a8:	93 e0       	ldi	r25, 0x03	; 3
     1aa:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <set_dir>
        set_dir(&stepper2);
     1ae:	88 e0       	ldi	r24, 0x08	; 8
     1b0:	93 e0       	ldi	r25, 0x03	; 3
     1b2:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <set_dir>
     1b6:	e7 cf       	rjmp	.-50     	; 0x186 <main+0x5c>

000001b8 <__vector_23>:

    return 0;
}

ISR(TIMER0_OVF_vect)
{
     1b8:	1f 92       	push	r1
     1ba:	0f 92       	push	r0
     1bc:	0f b6       	in	r0, 0x3f	; 63
     1be:	0f 92       	push	r0
     1c0:	11 24       	eor	r1, r1
     1c2:	8f 93       	push	r24
     1c4:	9f 93       	push	r25
     1c6:	af 93       	push	r26
     1c8:	bf 93       	push	r27
     1ca:	df 93       	push	r29
     1cc:	cf 93       	push	r28
     1ce:	cd b7       	in	r28, 0x3d	; 61
     1d0:	de b7       	in	r29, 0x3e	; 62
    ms++;
     1d2:	80 91 1e 03 	lds	r24, 0x031E
     1d6:	90 91 1f 03 	lds	r25, 0x031F
     1da:	a0 91 20 03 	lds	r26, 0x0320
     1de:	b0 91 21 03 	lds	r27, 0x0321
     1e2:	01 96       	adiw	r24, 0x01	; 1
     1e4:	a1 1d       	adc	r26, r1
     1e6:	b1 1d       	adc	r27, r1
     1e8:	80 93 1e 03 	sts	0x031E, r24
     1ec:	90 93 1f 03 	sts	0x031F, r25
     1f0:	a0 93 20 03 	sts	0x0320, r26
     1f4:	b0 93 21 03 	sts	0x0321, r27
}
     1f8:	cf 91       	pop	r28
     1fa:	df 91       	pop	r29
     1fc:	bf 91       	pop	r27
     1fe:	af 91       	pop	r26
     200:	9f 91       	pop	r25
     202:	8f 91       	pop	r24
     204:	0f 90       	pop	r0
     206:	0f be       	out	0x3f, r0	; 63
     208:	0f 90       	pop	r0
     20a:	1f 90       	pop	r1
     20c:	18 95       	reti

0000020e <USART_Init>:

#include "serial.h"

void USART_Init( unsigned int ubrr)
{
     20e:	df 93       	push	r29
     210:	cf 93       	push	r28
     212:	0f 92       	push	r0
     214:	0f 92       	push	r0
     216:	cd b7       	in	r28, 0x3d	; 61
     218:	de b7       	in	r29, 0x3e	; 62
     21a:	9a 83       	std	Y+2, r25	; 0x02
     21c:	89 83       	std	Y+1, r24	; 0x01
    /*Set baud rate */
    UBRR0H = (unsigned char)(ubrr>>8);
     21e:	e5 ec       	ldi	r30, 0xC5	; 197
     220:	f0 e0       	ldi	r31, 0x00	; 0
     222:	89 81       	ldd	r24, Y+1	; 0x01
     224:	9a 81       	ldd	r25, Y+2	; 0x02
     226:	89 2f       	mov	r24, r25
     228:	99 27       	eor	r25, r25
     22a:	80 83       	st	Z, r24
    UBRR0L = (unsigned char)ubrr;
     22c:	e4 ec       	ldi	r30, 0xC4	; 196
     22e:	f0 e0       	ldi	r31, 0x00	; 0
     230:	89 81       	ldd	r24, Y+1	; 0x01
     232:	80 83       	st	Z, r24
    /*Enable receiver and transmitter */
    UCSR0B |= (1<<RXEN0);
     234:	a1 ec       	ldi	r26, 0xC1	; 193
     236:	b0 e0       	ldi	r27, 0x00	; 0
     238:	e1 ec       	ldi	r30, 0xC1	; 193
     23a:	f0 e0       	ldi	r31, 0x00	; 0
     23c:	80 81       	ld	r24, Z
     23e:	80 61       	ori	r24, 0x10	; 16
     240:	8c 93       	st	X, r24
    UCSR0B |= (1<<TXEN0);
     242:	a1 ec       	ldi	r26, 0xC1	; 193
     244:	b0 e0       	ldi	r27, 0x00	; 0
     246:	e1 ec       	ldi	r30, 0xC1	; 193
     248:	f0 e0       	ldi	r31, 0x00	; 0
     24a:	80 81       	ld	r24, Z
     24c:	88 60       	ori	r24, 0x08	; 8
     24e:	8c 93       	st	X, r24
    /* Set frame format: 8data, 2stop bit */
    UCSR0C = (1<<UCSZ01)|(3<<UCSZ00);
     250:	e2 ec       	ldi	r30, 0xC2	; 194
     252:	f0 e0       	ldi	r31, 0x00	; 0
     254:	86 e0       	ldi	r24, 0x06	; 6
     256:	80 83       	st	Z, r24
}
     258:	0f 90       	pop	r0
     25a:	0f 90       	pop	r0
     25c:	cf 91       	pop	r28
     25e:	df 91       	pop	r29
     260:	08 95       	ret

00000262 <recieve_Byte>:


uint8_t recieve_Byte(void)
{
     262:	df 93       	push	r29
     264:	cf 93       	push	r28
     266:	cd b7       	in	r28, 0x3d	; 61
     268:	de b7       	in	r29, 0x3e	; 62
    loop_until_bit_is_set(UCSR0A, RXC0);
     26a:	e0 ec       	ldi	r30, 0xC0	; 192
     26c:	f0 e0       	ldi	r31, 0x00	; 0
     26e:	80 81       	ld	r24, Z
     270:	88 23       	and	r24, r24
     272:	dc f7       	brge	.-10     	; 0x26a <recieve_Byte+0x8>
    {
     return UDR0;
     274:	e6 ec       	ldi	r30, 0xC6	; 198
     276:	f0 e0       	ldi	r31, 0x00	; 0
     278:	80 81       	ld	r24, Z
    }
    /*else
    {
        return -1;
    }*/
}
     27a:	cf 91       	pop	r28
     27c:	df 91       	pop	r29
     27e:	08 95       	ret

00000280 <transmit_byte>:

void transmit_byte(uint8_t byte)
{
     280:	df 93       	push	r29
     282:	cf 93       	push	r28
     284:	0f 92       	push	r0
     286:	cd b7       	in	r28, 0x3d	; 61
     288:	de b7       	in	r29, 0x3e	; 62
     28a:	89 83       	std	Y+1, r24	; 0x01
    loop_until_bit_is_set(UCSR0A, UDRE0);
     28c:	e0 ec       	ldi	r30, 0xC0	; 192
     28e:	f0 e0       	ldi	r31, 0x00	; 0
     290:	80 81       	ld	r24, Z
     292:	88 2f       	mov	r24, r24
     294:	90 e0       	ldi	r25, 0x00	; 0
     296:	80 72       	andi	r24, 0x20	; 32
     298:	90 70       	andi	r25, 0x00	; 0
     29a:	00 97       	sbiw	r24, 0x00	; 0
     29c:	b9 f3       	breq	.-18     	; 0x28c <transmit_byte+0xc>
    UDR0 = byte;
     29e:	e6 ec       	ldi	r30, 0xC6	; 198
     2a0:	f0 e0       	ldi	r31, 0x00	; 0
     2a2:	89 81       	ldd	r24, Y+1	; 0x01
     2a4:	80 83       	st	Z, r24
}
     2a6:	0f 90       	pop	r0
     2a8:	cf 91       	pop	r28
     2aa:	df 91       	pop	r29
     2ac:	08 95       	ret

000002ae <print_int32>:

void print_int32(int32_t byte)
{
     2ae:	df 93       	push	r29
     2b0:	cf 93       	push	r28
     2b2:	00 d0       	rcall	.+0      	; 0x2b4 <print_int32+0x6>
     2b4:	0f 92       	push	r0
     2b6:	cd b7       	in	r28, 0x3d	; 61
     2b8:	de b7       	in	r29, 0x3e	; 62
     2ba:	69 83       	std	Y+1, r22	; 0x01
     2bc:	7a 83       	std	Y+2, r23	; 0x02
     2be:	8b 83       	std	Y+3, r24	; 0x03
     2c0:	9c 83       	std	Y+4, r25	; 0x04
    transmit_byte((byte/1000)%10);
     2c2:	89 81       	ldd	r24, Y+1	; 0x01
     2c4:	9a 81       	ldd	r25, Y+2	; 0x02
     2c6:	ab 81       	ldd	r26, Y+3	; 0x03
     2c8:	bc 81       	ldd	r27, Y+4	; 0x04
     2ca:	28 ee       	ldi	r18, 0xE8	; 232
     2cc:	33 e0       	ldi	r19, 0x03	; 3
     2ce:	40 e0       	ldi	r20, 0x00	; 0
     2d0:	50 e0       	ldi	r21, 0x00	; 0
     2d2:	bc 01       	movw	r22, r24
     2d4:	cd 01       	movw	r24, r26
     2d6:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <__divmodsi4>
     2da:	da 01       	movw	r26, r20
     2dc:	c9 01       	movw	r24, r18
     2de:	2a e0       	ldi	r18, 0x0A	; 10
     2e0:	30 e0       	ldi	r19, 0x00	; 0
     2e2:	40 e0       	ldi	r20, 0x00	; 0
     2e4:	50 e0       	ldi	r21, 0x00	; 0
     2e6:	bc 01       	movw	r22, r24
     2e8:	cd 01       	movw	r24, r26
     2ea:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <__divmodsi4>
     2ee:	dc 01       	movw	r26, r24
     2f0:	cb 01       	movw	r24, r22
     2f2:	0e 94 40 01 	call	0x280	; 0x280 <transmit_byte>
    transmit_byte((byte/100)%10);
     2f6:	89 81       	ldd	r24, Y+1	; 0x01
     2f8:	9a 81       	ldd	r25, Y+2	; 0x02
     2fa:	ab 81       	ldd	r26, Y+3	; 0x03
     2fc:	bc 81       	ldd	r27, Y+4	; 0x04
     2fe:	24 e6       	ldi	r18, 0x64	; 100
     300:	30 e0       	ldi	r19, 0x00	; 0
     302:	40 e0       	ldi	r20, 0x00	; 0
     304:	50 e0       	ldi	r21, 0x00	; 0
     306:	bc 01       	movw	r22, r24
     308:	cd 01       	movw	r24, r26
     30a:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <__divmodsi4>
     30e:	da 01       	movw	r26, r20
     310:	c9 01       	movw	r24, r18
     312:	2a e0       	ldi	r18, 0x0A	; 10
     314:	30 e0       	ldi	r19, 0x00	; 0
     316:	40 e0       	ldi	r20, 0x00	; 0
     318:	50 e0       	ldi	r21, 0x00	; 0
     31a:	bc 01       	movw	r22, r24
     31c:	cd 01       	movw	r24, r26
     31e:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <__divmodsi4>
     322:	dc 01       	movw	r26, r24
     324:	cb 01       	movw	r24, r22
     326:	0e 94 40 01 	call	0x280	; 0x280 <transmit_byte>
    transmit_byte((byte/10)%10);
     32a:	89 81       	ldd	r24, Y+1	; 0x01
     32c:	9a 81       	ldd	r25, Y+2	; 0x02
     32e:	ab 81       	ldd	r26, Y+3	; 0x03
     330:	bc 81       	ldd	r27, Y+4	; 0x04
     332:	2a e0       	ldi	r18, 0x0A	; 10
     334:	30 e0       	ldi	r19, 0x00	; 0
     336:	40 e0       	ldi	r20, 0x00	; 0
     338:	50 e0       	ldi	r21, 0x00	; 0
     33a:	bc 01       	movw	r22, r24
     33c:	cd 01       	movw	r24, r26
     33e:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <__divmodsi4>
     342:	da 01       	movw	r26, r20
     344:	c9 01       	movw	r24, r18
     346:	2a e0       	ldi	r18, 0x0A	; 10
     348:	30 e0       	ldi	r19, 0x00	; 0
     34a:	40 e0       	ldi	r20, 0x00	; 0
     34c:	50 e0       	ldi	r21, 0x00	; 0
     34e:	bc 01       	movw	r22, r24
     350:	cd 01       	movw	r24, r26
     352:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <__divmodsi4>
     356:	dc 01       	movw	r26, r24
     358:	cb 01       	movw	r24, r22
     35a:	0e 94 40 01 	call	0x280	; 0x280 <transmit_byte>
    transmit_byte((byte%10));
     35e:	89 81       	ldd	r24, Y+1	; 0x01
     360:	9a 81       	ldd	r25, Y+2	; 0x02
     362:	ab 81       	ldd	r26, Y+3	; 0x03
     364:	bc 81       	ldd	r27, Y+4	; 0x04
     366:	2a e0       	ldi	r18, 0x0A	; 10
     368:	30 e0       	ldi	r19, 0x00	; 0
     36a:	40 e0       	ldi	r20, 0x00	; 0
     36c:	50 e0       	ldi	r21, 0x00	; 0
     36e:	bc 01       	movw	r22, r24
     370:	cd 01       	movw	r24, r26
     372:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <__divmodsi4>
     376:	dc 01       	movw	r26, r24
     378:	cb 01       	movw	r24, r22
     37a:	0e 94 40 01 	call	0x280	; 0x280 <transmit_byte>
    transmit_byte(0xA5);
     37e:	85 ea       	ldi	r24, 0xA5	; 165
     380:	0e 94 40 01 	call	0x280	; 0x280 <transmit_byte>
}
     384:	0f 90       	pop	r0
     386:	0f 90       	pop	r0
     388:	0f 90       	pop	r0
     38a:	0f 90       	pop	r0
     38c:	cf 91       	pop	r28
     38e:	df 91       	pop	r29
     390:	08 95       	ret

00000392 <recieve_string>:



void recieve_string(char code[])
{
     392:	df 93       	push	r29
     394:	cf 93       	push	r28
     396:	00 d0       	rcall	.+0      	; 0x398 <recieve_string+0x6>
     398:	0f 92       	push	r0
     39a:	0f 92       	push	r0
     39c:	cd b7       	in	r28, 0x3d	; 61
     39e:	de b7       	in	r29, 0x3e	; 62
     3a0:	9d 83       	std	Y+5, r25	; 0x05
     3a2:	8c 83       	std	Y+4, r24	; 0x04
    //code ontworpen voor een GPS module. dollar teken is begin van de string. kan wel gebruikt worden voor het onvangen van complexe instructies.
    char byte = recieve_Byte();
     3a4:	0e 94 31 01 	call	0x262	; 0x262 <recieve_Byte>
     3a8:	8b 83       	std	Y+3, r24	; 0x03
    if(byte == '$')
     3aa:	8b 81       	ldd	r24, Y+3	; 0x03
     3ac:	84 32       	cpi	r24, 0x24	; 36
     3ae:	c9 f4       	brne	.+50     	; 0x3e2 <recieve_string+0x50>
    {
        int x = 1;
     3b0:	81 e0       	ldi	r24, 0x01	; 1
     3b2:	90 e0       	ldi	r25, 0x00	; 0
     3b4:	9a 83       	std	Y+2, r25	; 0x02
     3b6:	89 83       	std	Y+1, r24	; 0x01
     3b8:	11 c0       	rjmp	.+34     	; 0x3dc <recieve_string+0x4a>
        while(byte != '\n')
        {
            byte = recieve_Byte();
     3ba:	0e 94 31 01 	call	0x262	; 0x262 <recieve_Byte>
     3be:	8b 83       	std	Y+3, r24	; 0x03
            code[x] = byte;
     3c0:	29 81       	ldd	r18, Y+1	; 0x01
     3c2:	3a 81       	ldd	r19, Y+2	; 0x02
     3c4:	8c 81       	ldd	r24, Y+4	; 0x04
     3c6:	9d 81       	ldd	r25, Y+5	; 0x05
     3c8:	fc 01       	movw	r30, r24
     3ca:	e2 0f       	add	r30, r18
     3cc:	f3 1f       	adc	r31, r19
     3ce:	8b 81       	ldd	r24, Y+3	; 0x03
     3d0:	80 83       	st	Z, r24
            x++;
     3d2:	89 81       	ldd	r24, Y+1	; 0x01
     3d4:	9a 81       	ldd	r25, Y+2	; 0x02
     3d6:	01 96       	adiw	r24, 0x01	; 1
     3d8:	9a 83       	std	Y+2, r25	; 0x02
     3da:	89 83       	std	Y+1, r24	; 0x01
    //code ontworpen voor een GPS module. dollar teken is begin van de string. kan wel gebruikt worden voor het onvangen van complexe instructies.
    char byte = recieve_Byte();
    if(byte == '$')
    {
        int x = 1;
        while(byte != '\n')
     3dc:	8b 81       	ldd	r24, Y+3	; 0x03
     3de:	8a 30       	cpi	r24, 0x0A	; 10
     3e0:	61 f7       	brne	.-40     	; 0x3ba <recieve_string+0x28>
            byte = recieve_Byte();
            code[x] = byte;
            x++;
        }
    }
}
     3e2:	0f 90       	pop	r0
     3e4:	0f 90       	pop	r0
     3e6:	0f 90       	pop	r0
     3e8:	0f 90       	pop	r0
     3ea:	0f 90       	pop	r0
     3ec:	cf 91       	pop	r28
     3ee:	df 91       	pop	r29
     3f0:	08 95       	ret

000003f2 <accel_speed>:
#include <avr/interrupt.h>

#include "stepper.h"

void accel_speed(volatile struct stepper *stepper)
{
     3f2:	df 93       	push	r29
     3f4:	cf 93       	push	r28
     3f6:	0f 92       	push	r0
     3f8:	0f 92       	push	r0
     3fa:	cd b7       	in	r28, 0x3d	; 61
     3fc:	de b7       	in	r29, 0x3e	; 62
     3fe:	9a 83       	std	Y+2, r25	; 0x02
     400:	89 83       	std	Y+1, r24	; 0x01
    //take target_speed as target
    //take current_speed as current
    //compare current_speed with target_speed
    //if current speed < target_speed -> accelarate ++
    if(stepper->current_speed < stepper->target_speed)
     402:	e9 81       	ldd	r30, Y+1	; 0x01
     404:	fa 81       	ldd	r31, Y+2	; 0x02
     406:	97 81       	ldd	r25, Z+7	; 0x07
     408:	e9 81       	ldd	r30, Y+1	; 0x01
     40a:	fa 81       	ldd	r31, Y+2	; 0x02
     40c:	86 81       	ldd	r24, Z+6	; 0x06
     40e:	98 17       	cp	r25, r24
     410:	40 f4       	brcc	.+16     	; 0x422 <accel_speed+0x30>
    {
        stepper->current_speed++;
     412:	e9 81       	ldd	r30, Y+1	; 0x01
     414:	fa 81       	ldd	r31, Y+2	; 0x02
     416:	87 81       	ldd	r24, Z+7	; 0x07
     418:	8f 5f       	subi	r24, 0xFF	; 255
     41a:	e9 81       	ldd	r30, Y+1	; 0x01
     41c:	fa 81       	ldd	r31, Y+2	; 0x02
     41e:	87 83       	std	Z+7, r24	; 0x07
     420:	0f c0       	rjmp	.+30     	; 0x440 <accel_speed+0x4e>
    }
    //if current speed > targetspeed > deccelerate
    else if(stepper->current_speed > stepper->target_speed)
     422:	e9 81       	ldd	r30, Y+1	; 0x01
     424:	fa 81       	ldd	r31, Y+2	; 0x02
     426:	97 81       	ldd	r25, Z+7	; 0x07
     428:	e9 81       	ldd	r30, Y+1	; 0x01
     42a:	fa 81       	ldd	r31, Y+2	; 0x02
     42c:	86 81       	ldd	r24, Z+6	; 0x06
     42e:	89 17       	cp	r24, r25
     430:	38 f4       	brcc	.+14     	; 0x440 <accel_speed+0x4e>
    {
        stepper->current_speed--;
     432:	e9 81       	ldd	r30, Y+1	; 0x01
     434:	fa 81       	ldd	r31, Y+2	; 0x02
     436:	87 81       	ldd	r24, Z+7	; 0x07
     438:	81 50       	subi	r24, 0x01	; 1
     43a:	e9 81       	ldd	r30, Y+1	; 0x01
     43c:	fa 81       	ldd	r31, Y+2	; 0x02
     43e:	87 83       	std	Z+7, r24	; 0x07
    }
    //else we're on speed
}
     440:	0f 90       	pop	r0
     442:	0f 90       	pop	r0
     444:	cf 91       	pop	r28
     446:	df 91       	pop	r29
     448:	08 95       	ret

0000044a <construct_stepper>:

void construct_stepper(volatile struct stepper *stepper, uint8_t step_pin, uint8_t dir_pin)
{
     44a:	df 93       	push	r29
     44c:	cf 93       	push	r28
     44e:	00 d0       	rcall	.+0      	; 0x450 <construct_stepper+0x6>
     450:	0f 92       	push	r0
     452:	cd b7       	in	r28, 0x3d	; 61
     454:	de b7       	in	r29, 0x3e	; 62
     456:	9a 83       	std	Y+2, r25	; 0x02
     458:	89 83       	std	Y+1, r24	; 0x01
     45a:	6b 83       	std	Y+3, r22	; 0x03
     45c:	4c 83       	std	Y+4, r20	; 0x04
    stepper->last_step = ms;
     45e:	80 91 1e 03 	lds	r24, 0x031E
     462:	90 91 1f 03 	lds	r25, 0x031F
     466:	a0 91 20 03 	lds	r26, 0x0320
     46a:	b0 91 21 03 	lds	r27, 0x0321
     46e:	e9 81       	ldd	r30, Y+1	; 0x01
     470:	fa 81       	ldd	r31, Y+2	; 0x02
     472:	82 83       	std	Z+2, r24	; 0x02
     474:	93 83       	std	Z+3, r25	; 0x03
     476:	a4 83       	std	Z+4, r26	; 0x04
     478:	b5 83       	std	Z+5, r27	; 0x05
    stepper->target_speed = 1;
     47a:	e9 81       	ldd	r30, Y+1	; 0x01
     47c:	fa 81       	ldd	r31, Y+2	; 0x02
     47e:	81 e0       	ldi	r24, 0x01	; 1
     480:	86 83       	std	Z+6, r24	; 0x06
    stepper->current_speed = 1;
     482:	e9 81       	ldd	r30, Y+1	; 0x01
     484:	fa 81       	ldd	r31, Y+2	; 0x02
     486:	81 e0       	ldi	r24, 0x01	; 1
     488:	87 83       	std	Z+7, r24	; 0x07
    stepper->steps = 0;
     48a:	e9 81       	ldd	r30, Y+1	; 0x01
     48c:	fa 81       	ldd	r31, Y+2	; 0x02
     48e:	12 86       	std	Z+10, r1	; 0x0a
     490:	11 86       	std	Z+9, r1	; 0x09
    stepper->step_pin = step_pin;
     492:	e9 81       	ldd	r30, Y+1	; 0x01
     494:	fa 81       	ldd	r31, Y+2	; 0x02
     496:	8b 81       	ldd	r24, Y+3	; 0x03
     498:	80 83       	st	Z, r24
    stepper->dir_pin = dir_pin;
     49a:	e9 81       	ldd	r30, Y+1	; 0x01
     49c:	fa 81       	ldd	r31, Y+2	; 0x02
     49e:	8c 81       	ldd	r24, Y+4	; 0x04
     4a0:	81 83       	std	Z+1, r24	; 0x01
    stepper->direction = 0;
     4a2:	e9 81       	ldd	r30, Y+1	; 0x01
     4a4:	fa 81       	ldd	r31, Y+2	; 0x02
     4a6:	10 86       	std	Z+8, r1	; 0x08
}
     4a8:	0f 90       	pop	r0
     4aa:	0f 90       	pop	r0
     4ac:	0f 90       	pop	r0
     4ae:	0f 90       	pop	r0
     4b0:	cf 91       	pop	r28
     4b2:	df 91       	pop	r29
     4b4:	08 95       	ret

000004b6 <initialize_steppers>:

void initialize_steppers()
{
     4b6:	df 93       	push	r29
     4b8:	cf 93       	push	r28
     4ba:	0f 92       	push	r0
     4bc:	cd b7       	in	r28, 0x3d	; 61
     4be:	de b7       	in	r29, 0x3e	; 62
    stepper_DDR |= 0xFF;//init all pins in bank C
     4c0:	e7 e0       	ldi	r30, 0x07	; 7
     4c2:	f1 e0       	ldi	r31, 0x01	; 1
     4c4:	80 81       	ld	r24, Z
     4c6:	e7 e0       	ldi	r30, 0x07	; 7
     4c8:	f1 e0       	ldi	r31, 0x01	; 1
     4ca:	8f ef       	ldi	r24, 0xFF	; 255
     4cc:	80 83       	st	Z, r24
}
     4ce:	0f 90       	pop	r0
     4d0:	cf 91       	pop	r28
     4d2:	df 91       	pop	r29
     4d4:	08 95       	ret

000004d6 <set_dir>:

void set_dir(volatile struct stepper *stepper)
{
     4d6:	df 93       	push	r29
     4d8:	cf 93       	push	r28
     4da:	00 d0       	rcall	.+0      	; 0x4dc <set_dir+0x6>
     4dc:	0f 92       	push	r0
     4de:	cd b7       	in	r28, 0x3d	; 61
     4e0:	de b7       	in	r29, 0x3e	; 62
     4e2:	9a 83       	std	Y+2, r25	; 0x02
     4e4:	89 83       	std	Y+1, r24	; 0x01
    switch(stepper->direction)
     4e6:	e9 81       	ldd	r30, Y+1	; 0x01
     4e8:	fa 81       	ldd	r31, Y+2	; 0x02
     4ea:	80 85       	ldd	r24, Z+8	; 0x08
     4ec:	28 2f       	mov	r18, r24
     4ee:	30 e0       	ldi	r19, 0x00	; 0
     4f0:	3c 83       	std	Y+4, r19	; 0x04
     4f2:	2b 83       	std	Y+3, r18	; 0x03
     4f4:	8b 81       	ldd	r24, Y+3	; 0x03
     4f6:	9c 81       	ldd	r25, Y+4	; 0x04
     4f8:	81 30       	cpi	r24, 0x01	; 1
     4fa:	91 05       	cpc	r25, r1
     4fc:	d9 f0       	breq	.+54     	; 0x534 <set_dir+0x5e>
     4fe:	2b 81       	ldd	r18, Y+3	; 0x03
     500:	3c 81       	ldd	r19, Y+4	; 0x04
     502:	22 30       	cpi	r18, 0x02	; 2
     504:	31 05       	cpc	r19, r1
     506:	61 f5       	brne	.+88     	; 0x560 <set_dir+0x8a>
    {
    case forward:
        stepper_port |= (1<<stepper->dir_pin);
     508:	a8 e0       	ldi	r26, 0x08	; 8
     50a:	b1 e0       	ldi	r27, 0x01	; 1
     50c:	e8 e0       	ldi	r30, 0x08	; 8
     50e:	f1 e0       	ldi	r31, 0x01	; 1
     510:	80 81       	ld	r24, Z
     512:	48 2f       	mov	r20, r24
     514:	e9 81       	ldd	r30, Y+1	; 0x01
     516:	fa 81       	ldd	r31, Y+2	; 0x02
     518:	81 81       	ldd	r24, Z+1	; 0x01
     51a:	28 2f       	mov	r18, r24
     51c:	30 e0       	ldi	r19, 0x00	; 0
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	02 2e       	mov	r0, r18
     524:	02 c0       	rjmp	.+4      	; 0x52a <set_dir+0x54>
     526:	88 0f       	add	r24, r24
     528:	99 1f       	adc	r25, r25
     52a:	0a 94       	dec	r0
     52c:	e2 f7       	brpl	.-8      	; 0x526 <set_dir+0x50>
     52e:	84 2b       	or	r24, r20
     530:	8c 93       	st	X, r24
     532:	16 c0       	rjmp	.+44     	; 0x560 <set_dir+0x8a>
        break;
    case backward:
        stepper_port &= ~(1<<stepper->dir_pin);
     534:	a8 e0       	ldi	r26, 0x08	; 8
     536:	b1 e0       	ldi	r27, 0x01	; 1
     538:	e8 e0       	ldi	r30, 0x08	; 8
     53a:	f1 e0       	ldi	r31, 0x01	; 1
     53c:	80 81       	ld	r24, Z
     53e:	48 2f       	mov	r20, r24
     540:	e9 81       	ldd	r30, Y+1	; 0x01
     542:	fa 81       	ldd	r31, Y+2	; 0x02
     544:	81 81       	ldd	r24, Z+1	; 0x01
     546:	28 2f       	mov	r18, r24
     548:	30 e0       	ldi	r19, 0x00	; 0
     54a:	81 e0       	ldi	r24, 0x01	; 1
     54c:	90 e0       	ldi	r25, 0x00	; 0
     54e:	02 2e       	mov	r0, r18
     550:	02 c0       	rjmp	.+4      	; 0x556 <set_dir+0x80>
     552:	88 0f       	add	r24, r24
     554:	99 1f       	adc	r25, r25
     556:	0a 94       	dec	r0
     558:	e2 f7       	brpl	.-8      	; 0x552 <set_dir+0x7c>
     55a:	80 95       	com	r24
     55c:	84 23       	and	r24, r20
     55e:	8c 93       	st	X, r24
        break;
    default:
        break;
    }
}
     560:	0f 90       	pop	r0
     562:	0f 90       	pop	r0
     564:	0f 90       	pop	r0
     566:	0f 90       	pop	r0
     568:	cf 91       	pop	r28
     56a:	df 91       	pop	r29
     56c:	08 95       	ret

0000056e <step>:

void static step(volatile struct stepper stepper)
{
     56e:	ef 92       	push	r14
     570:	ff 92       	push	r15
     572:	0f 93       	push	r16
     574:	1f 93       	push	r17
     576:	df 93       	push	r29
     578:	cf 93       	push	r28
     57a:	cd b7       	in	r28, 0x3d	; 61
     57c:	de b7       	in	r29, 0x3e	; 62
     57e:	eb 97       	sbiw	r28, 0x3b	; 59
     580:	0f b6       	in	r0, 0x3f	; 63
     582:	f8 94       	cli
     584:	de bf       	out	0x3e, r29	; 62
     586:	0f be       	out	0x3f, r0	; 63
     588:	cd bf       	out	0x3d, r28	; 61
     58a:	e9 aa       	std	Y+49, r14	; 0x31
     58c:	fa aa       	std	Y+50, r15	; 0x32
     58e:	0b ab       	std	Y+51, r16	; 0x33
     590:	1c ab       	std	Y+52, r17	; 0x34
     592:	2d ab       	std	Y+53, r18	; 0x35
     594:	3e ab       	std	Y+54, r19	; 0x36
     596:	4f ab       	std	Y+55, r20	; 0x37
     598:	58 af       	std	Y+56, r21	; 0x38
     59a:	69 af       	std	Y+57, r22	; 0x39
     59c:	7a af       	std	Y+58, r23	; 0x3a
     59e:	8b af       	std	Y+59, r24	; 0x3b

            stepper_port |= (1<<stepper.step_pin);
     5a0:	a8 e0       	ldi	r26, 0x08	; 8
     5a2:	b1 e0       	ldi	r27, 0x01	; 1
     5a4:	e8 e0       	ldi	r30, 0x08	; 8
     5a6:	f1 e0       	ldi	r31, 0x01	; 1
     5a8:	80 81       	ld	r24, Z
     5aa:	48 2f       	mov	r20, r24
     5ac:	89 a9       	ldd	r24, Y+49	; 0x31
     5ae:	28 2f       	mov	r18, r24
     5b0:	30 e0       	ldi	r19, 0x00	; 0
     5b2:	81 e0       	ldi	r24, 0x01	; 1
     5b4:	90 e0       	ldi	r25, 0x00	; 0
     5b6:	02 c0       	rjmp	.+4      	; 0x5bc <step+0x4e>
     5b8:	88 0f       	add	r24, r24
     5ba:	99 1f       	adc	r25, r25
     5bc:	2a 95       	dec	r18
     5be:	e2 f7       	brpl	.-8      	; 0x5b8 <step+0x4a>
     5c0:	84 2b       	or	r24, r20
     5c2:	8c 93       	st	X, r24
     5c4:	80 e0       	ldi	r24, 0x00	; 0
     5c6:	90 e0       	ldi	r25, 0x00	; 0
     5c8:	a0 e0       	ldi	r26, 0x00	; 0
     5ca:	b0 e4       	ldi	r27, 0x40	; 64
     5cc:	8d a7       	std	Y+45, r24	; 0x2d
     5ce:	9e a7       	std	Y+46, r25	; 0x2e
     5d0:	af a7       	std	Y+47, r26	; 0x2f
     5d2:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     5d4:	6d a5       	ldd	r22, Y+45	; 0x2d
     5d6:	7e a5       	ldd	r23, Y+46	; 0x2e
     5d8:	8f a5       	ldd	r24, Y+47	; 0x2f
     5da:	98 a9       	ldd	r25, Y+48	; 0x30
     5dc:	2b ea       	ldi	r18, 0xAB	; 171
     5de:	3a ea       	ldi	r19, 0xAA	; 170
     5e0:	4a ea       	ldi	r20, 0xAA	; 170
     5e2:	50 e4       	ldi	r21, 0x40	; 64
     5e4:	0e 94 2d 08 	call	0x105a	; 0x105a <__mulsf3>
     5e8:	dc 01       	movw	r26, r24
     5ea:	cb 01       	movw	r24, r22
     5ec:	89 a7       	std	Y+41, r24	; 0x29
     5ee:	9a a7       	std	Y+42, r25	; 0x2a
     5f0:	ab a7       	std	Y+43, r26	; 0x2b
     5f2:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
     5f4:	69 a5       	ldd	r22, Y+41	; 0x29
     5f6:	7a a5       	ldd	r23, Y+42	; 0x2a
     5f8:	8b a5       	ldd	r24, Y+43	; 0x2b
     5fa:	9c a5       	ldd	r25, Y+44	; 0x2c
     5fc:	20 e0       	ldi	r18, 0x00	; 0
     5fe:	30 e0       	ldi	r19, 0x00	; 0
     600:	40 e8       	ldi	r20, 0x80	; 128
     602:	5f e3       	ldi	r21, 0x3F	; 63
     604:	0e 94 33 0a 	call	0x1466	; 0x1466 <__ltsf2>
     608:	88 23       	and	r24, r24
     60a:	1c f4       	brge	.+6      	; 0x612 <step+0xa4>
		__ticks = 1;
     60c:	81 e0       	ldi	r24, 0x01	; 1
     60e:	88 a7       	std	Y+40, r24	; 0x28
     610:	91 c0       	rjmp	.+290    	; 0x734 <step+0x1c6>
	else if (__tmp > 255)
     612:	69 a5       	ldd	r22, Y+41	; 0x29
     614:	7a a5       	ldd	r23, Y+42	; 0x2a
     616:	8b a5       	ldd	r24, Y+43	; 0x2b
     618:	9c a5       	ldd	r25, Y+44	; 0x2c
     61a:	20 e0       	ldi	r18, 0x00	; 0
     61c:	30 e0       	ldi	r19, 0x00	; 0
     61e:	4f e7       	ldi	r20, 0x7F	; 127
     620:	53 e4       	ldi	r21, 0x43	; 67
     622:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <__gtsf2>
     626:	18 16       	cp	r1, r24
     628:	0c f0       	brlt	.+2      	; 0x62c <step+0xbe>
     62a:	7b c0       	rjmp	.+246    	; 0x722 <step+0x1b4>
	{
		_delay_ms(__us / 1000.0);
     62c:	6d a5       	ldd	r22, Y+45	; 0x2d
     62e:	7e a5       	ldd	r23, Y+46	; 0x2e
     630:	8f a5       	ldd	r24, Y+47	; 0x2f
     632:	98 a9       	ldd	r25, Y+48	; 0x30
     634:	20 e0       	ldi	r18, 0x00	; 0
     636:	30 e0       	ldi	r19, 0x00	; 0
     638:	4a e7       	ldi	r20, 0x7A	; 122
     63a:	54 e4       	ldi	r21, 0x44	; 68
     63c:	0e 94 27 09 	call	0x124e	; 0x124e <__divsf3>
     640:	dc 01       	movw	r26, r24
     642:	cb 01       	movw	r24, r22
     644:	8c a3       	std	Y+36, r24	; 0x24
     646:	9d a3       	std	Y+37, r25	; 0x25
     648:	ae a3       	std	Y+38, r26	; 0x26
     64a:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     64c:	6c a1       	ldd	r22, Y+36	; 0x24
     64e:	7d a1       	ldd	r23, Y+37	; 0x25
     650:	8e a1       	ldd	r24, Y+38	; 0x26
     652:	9f a1       	ldd	r25, Y+39	; 0x27
     654:	20 e0       	ldi	r18, 0x00	; 0
     656:	30 e0       	ldi	r19, 0x00	; 0
     658:	4a e7       	ldi	r20, 0x7A	; 122
     65a:	55 e4       	ldi	r21, 0x45	; 69
     65c:	0e 94 2d 08 	call	0x105a	; 0x105a <__mulsf3>
     660:	dc 01       	movw	r26, r24
     662:	cb 01       	movw	r24, r22
     664:	88 a3       	std	Y+32, r24	; 0x20
     666:	99 a3       	std	Y+33, r25	; 0x21
     668:	aa a3       	std	Y+34, r26	; 0x22
     66a:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
     66c:	68 a1       	ldd	r22, Y+32	; 0x20
     66e:	79 a1       	ldd	r23, Y+33	; 0x21
     670:	8a a1       	ldd	r24, Y+34	; 0x22
     672:	9b a1       	ldd	r25, Y+35	; 0x23
     674:	20 e0       	ldi	r18, 0x00	; 0
     676:	30 e0       	ldi	r19, 0x00	; 0
     678:	40 e8       	ldi	r20, 0x80	; 128
     67a:	5f e3       	ldi	r21, 0x3F	; 63
     67c:	0e 94 33 0a 	call	0x1466	; 0x1466 <__ltsf2>
     680:	88 23       	and	r24, r24
     682:	2c f4       	brge	.+10     	; 0x68e <step+0x120>
		__ticks = 1;
     684:	81 e0       	ldi	r24, 0x01	; 1
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	9f 8f       	std	Y+31, r25	; 0x1f
     68a:	8e 8f       	std	Y+30, r24	; 0x1e
     68c:	3f c0       	rjmp	.+126    	; 0x70c <step+0x19e>
	else if (__tmp > 65535)
     68e:	68 a1       	ldd	r22, Y+32	; 0x20
     690:	79 a1       	ldd	r23, Y+33	; 0x21
     692:	8a a1       	ldd	r24, Y+34	; 0x22
     694:	9b a1       	ldd	r25, Y+35	; 0x23
     696:	20 e0       	ldi	r18, 0x00	; 0
     698:	3f ef       	ldi	r19, 0xFF	; 255
     69a:	4f e7       	ldi	r20, 0x7F	; 127
     69c:	57 e4       	ldi	r21, 0x47	; 71
     69e:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <__gtsf2>
     6a2:	18 16       	cp	r1, r24
     6a4:	4c f5       	brge	.+82     	; 0x6f8 <step+0x18a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     6a6:	6c a1       	ldd	r22, Y+36	; 0x24
     6a8:	7d a1       	ldd	r23, Y+37	; 0x25
     6aa:	8e a1       	ldd	r24, Y+38	; 0x26
     6ac:	9f a1       	ldd	r25, Y+39	; 0x27
     6ae:	20 e0       	ldi	r18, 0x00	; 0
     6b0:	30 e0       	ldi	r19, 0x00	; 0
     6b2:	40 e2       	ldi	r20, 0x20	; 32
     6b4:	51 e4       	ldi	r21, 0x41	; 65
     6b6:	0e 94 2d 08 	call	0x105a	; 0x105a <__mulsf3>
     6ba:	dc 01       	movw	r26, r24
     6bc:	cb 01       	movw	r24, r22
     6be:	bc 01       	movw	r22, r24
     6c0:	cd 01       	movw	r24, r26
     6c2:	0e 94 57 06 	call	0xcae	; 0xcae <__fixunssfsi>
     6c6:	dc 01       	movw	r26, r24
     6c8:	cb 01       	movw	r24, r22
     6ca:	9f 8f       	std	Y+31, r25	; 0x1f
     6cc:	8e 8f       	std	Y+30, r24	; 0x1e
     6ce:	0f c0       	rjmp	.+30     	; 0x6ee <step+0x180>
     6d0:	80 e9       	ldi	r24, 0x90	; 144
     6d2:	91 e0       	ldi	r25, 0x01	; 1
     6d4:	9d 8f       	std	Y+29, r25	; 0x1d
     6d6:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     6d8:	8c 8d       	ldd	r24, Y+28	; 0x1c
     6da:	9d 8d       	ldd	r25, Y+29	; 0x1d
     6dc:	01 97       	sbiw	r24, 0x01	; 1
     6de:	f1 f7       	brne	.-4      	; 0x6dc <step+0x16e>
     6e0:	9d 8f       	std	Y+29, r25	; 0x1d
     6e2:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6e4:	8e 8d       	ldd	r24, Y+30	; 0x1e
     6e6:	9f 8d       	ldd	r25, Y+31	; 0x1f
     6e8:	01 97       	sbiw	r24, 0x01	; 1
     6ea:	9f 8f       	std	Y+31, r25	; 0x1f
     6ec:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6ee:	8e 8d       	ldd	r24, Y+30	; 0x1e
     6f0:	9f 8d       	ldd	r25, Y+31	; 0x1f
     6f2:	00 97       	sbiw	r24, 0x00	; 0
     6f4:	69 f7       	brne	.-38     	; 0x6d0 <step+0x162>
     6f6:	24 c0       	rjmp	.+72     	; 0x740 <step+0x1d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     6f8:	68 a1       	ldd	r22, Y+32	; 0x20
     6fa:	79 a1       	ldd	r23, Y+33	; 0x21
     6fc:	8a a1       	ldd	r24, Y+34	; 0x22
     6fe:	9b a1       	ldd	r25, Y+35	; 0x23
     700:	0e 94 57 06 	call	0xcae	; 0xcae <__fixunssfsi>
     704:	dc 01       	movw	r26, r24
     706:	cb 01       	movw	r24, r22
     708:	9f 8f       	std	Y+31, r25	; 0x1f
     70a:	8e 8f       	std	Y+30, r24	; 0x1e
     70c:	8e 8d       	ldd	r24, Y+30	; 0x1e
     70e:	9f 8d       	ldd	r25, Y+31	; 0x1f
     710:	9b 8f       	std	Y+27, r25	; 0x1b
     712:	8a 8f       	std	Y+26, r24	; 0x1a
     714:	8a 8d       	ldd	r24, Y+26	; 0x1a
     716:	9b 8d       	ldd	r25, Y+27	; 0x1b
     718:	01 97       	sbiw	r24, 0x01	; 1
     71a:	f1 f7       	brne	.-4      	; 0x718 <step+0x1aa>
     71c:	9b 8f       	std	Y+27, r25	; 0x1b
     71e:	8a 8f       	std	Y+26, r24	; 0x1a
     720:	0f c0       	rjmp	.+30     	; 0x740 <step+0x1d2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     722:	69 a5       	ldd	r22, Y+41	; 0x29
     724:	7a a5       	ldd	r23, Y+42	; 0x2a
     726:	8b a5       	ldd	r24, Y+43	; 0x2b
     728:	9c a5       	ldd	r25, Y+44	; 0x2c
     72a:	0e 94 57 06 	call	0xcae	; 0xcae <__fixunssfsi>
     72e:	dc 01       	movw	r26, r24
     730:	cb 01       	movw	r24, r22
     732:	88 a7       	std	Y+40, r24	; 0x28
     734:	88 a5       	ldd	r24, Y+40	; 0x28
     736:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     738:	89 8d       	ldd	r24, Y+25	; 0x19
     73a:	8a 95       	dec	r24
     73c:	f1 f7       	brne	.-4      	; 0x73a <step+0x1cc>
     73e:	89 8f       	std	Y+25, r24	; 0x19
            _delay_us(2);
            stepper_port &= ~(1<<stepper.step_pin);
     740:	a8 e0       	ldi	r26, 0x08	; 8
     742:	b1 e0       	ldi	r27, 0x01	; 1
     744:	e8 e0       	ldi	r30, 0x08	; 8
     746:	f1 e0       	ldi	r31, 0x01	; 1
     748:	80 81       	ld	r24, Z
     74a:	48 2f       	mov	r20, r24
     74c:	89 a9       	ldd	r24, Y+49	; 0x31
     74e:	28 2f       	mov	r18, r24
     750:	30 e0       	ldi	r19, 0x00	; 0
     752:	81 e0       	ldi	r24, 0x01	; 1
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	02 c0       	rjmp	.+4      	; 0x75c <step+0x1ee>
     758:	88 0f       	add	r24, r24
     75a:	99 1f       	adc	r25, r25
     75c:	2a 95       	dec	r18
     75e:	e2 f7       	brpl	.-8      	; 0x758 <step+0x1ea>
     760:	80 95       	com	r24
     762:	84 23       	and	r24, r20
     764:	8c 93       	st	X, r24
     766:	80 e0       	ldi	r24, 0x00	; 0
     768:	90 e0       	ldi	r25, 0x00	; 0
     76a:	a0 e0       	ldi	r26, 0x00	; 0
     76c:	b0 e4       	ldi	r27, 0x40	; 64
     76e:	8d 8b       	std	Y+21, r24	; 0x15
     770:	9e 8b       	std	Y+22, r25	; 0x16
     772:	af 8b       	std	Y+23, r26	; 0x17
     774:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     776:	6d 89       	ldd	r22, Y+21	; 0x15
     778:	7e 89       	ldd	r23, Y+22	; 0x16
     77a:	8f 89       	ldd	r24, Y+23	; 0x17
     77c:	98 8d       	ldd	r25, Y+24	; 0x18
     77e:	2b ea       	ldi	r18, 0xAB	; 171
     780:	3a ea       	ldi	r19, 0xAA	; 170
     782:	4a ea       	ldi	r20, 0xAA	; 170
     784:	50 e4       	ldi	r21, 0x40	; 64
     786:	0e 94 2d 08 	call	0x105a	; 0x105a <__mulsf3>
     78a:	dc 01       	movw	r26, r24
     78c:	cb 01       	movw	r24, r22
     78e:	89 8b       	std	Y+17, r24	; 0x11
     790:	9a 8b       	std	Y+18, r25	; 0x12
     792:	ab 8b       	std	Y+19, r26	; 0x13
     794:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     796:	69 89       	ldd	r22, Y+17	; 0x11
     798:	7a 89       	ldd	r23, Y+18	; 0x12
     79a:	8b 89       	ldd	r24, Y+19	; 0x13
     79c:	9c 89       	ldd	r25, Y+20	; 0x14
     79e:	20 e0       	ldi	r18, 0x00	; 0
     7a0:	30 e0       	ldi	r19, 0x00	; 0
     7a2:	40 e8       	ldi	r20, 0x80	; 128
     7a4:	5f e3       	ldi	r21, 0x3F	; 63
     7a6:	0e 94 33 0a 	call	0x1466	; 0x1466 <__ltsf2>
     7aa:	88 23       	and	r24, r24
     7ac:	1c f4       	brge	.+6      	; 0x7b4 <step+0x246>
		__ticks = 1;
     7ae:	81 e0       	ldi	r24, 0x01	; 1
     7b0:	88 8b       	std	Y+16, r24	; 0x10
     7b2:	91 c0       	rjmp	.+290    	; 0x8d6 <step+0x368>
	else if (__tmp > 255)
     7b4:	69 89       	ldd	r22, Y+17	; 0x11
     7b6:	7a 89       	ldd	r23, Y+18	; 0x12
     7b8:	8b 89       	ldd	r24, Y+19	; 0x13
     7ba:	9c 89       	ldd	r25, Y+20	; 0x14
     7bc:	20 e0       	ldi	r18, 0x00	; 0
     7be:	30 e0       	ldi	r19, 0x00	; 0
     7c0:	4f e7       	ldi	r20, 0x7F	; 127
     7c2:	53 e4       	ldi	r21, 0x43	; 67
     7c4:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <__gtsf2>
     7c8:	18 16       	cp	r1, r24
     7ca:	0c f0       	brlt	.+2      	; 0x7ce <step+0x260>
     7cc:	7b c0       	rjmp	.+246    	; 0x8c4 <step+0x356>
	{
		_delay_ms(__us / 1000.0);
     7ce:	6d 89       	ldd	r22, Y+21	; 0x15
     7d0:	7e 89       	ldd	r23, Y+22	; 0x16
     7d2:	8f 89       	ldd	r24, Y+23	; 0x17
     7d4:	98 8d       	ldd	r25, Y+24	; 0x18
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	4a e7       	ldi	r20, 0x7A	; 122
     7dc:	54 e4       	ldi	r21, 0x44	; 68
     7de:	0e 94 27 09 	call	0x124e	; 0x124e <__divsf3>
     7e2:	dc 01       	movw	r26, r24
     7e4:	cb 01       	movw	r24, r22
     7e6:	8c 87       	std	Y+12, r24	; 0x0c
     7e8:	9d 87       	std	Y+13, r25	; 0x0d
     7ea:	ae 87       	std	Y+14, r26	; 0x0e
     7ec:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     7ee:	6c 85       	ldd	r22, Y+12	; 0x0c
     7f0:	7d 85       	ldd	r23, Y+13	; 0x0d
     7f2:	8e 85       	ldd	r24, Y+14	; 0x0e
     7f4:	9f 85       	ldd	r25, Y+15	; 0x0f
     7f6:	20 e0       	ldi	r18, 0x00	; 0
     7f8:	30 e0       	ldi	r19, 0x00	; 0
     7fa:	4a e7       	ldi	r20, 0x7A	; 122
     7fc:	55 e4       	ldi	r21, 0x45	; 69
     7fe:	0e 94 2d 08 	call	0x105a	; 0x105a <__mulsf3>
     802:	dc 01       	movw	r26, r24
     804:	cb 01       	movw	r24, r22
     806:	88 87       	std	Y+8, r24	; 0x08
     808:	99 87       	std	Y+9, r25	; 0x09
     80a:	aa 87       	std	Y+10, r26	; 0x0a
     80c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
     80e:	68 85       	ldd	r22, Y+8	; 0x08
     810:	79 85       	ldd	r23, Y+9	; 0x09
     812:	8a 85       	ldd	r24, Y+10	; 0x0a
     814:	9b 85       	ldd	r25, Y+11	; 0x0b
     816:	20 e0       	ldi	r18, 0x00	; 0
     818:	30 e0       	ldi	r19, 0x00	; 0
     81a:	40 e8       	ldi	r20, 0x80	; 128
     81c:	5f e3       	ldi	r21, 0x3F	; 63
     81e:	0e 94 33 0a 	call	0x1466	; 0x1466 <__ltsf2>
     822:	88 23       	and	r24, r24
     824:	2c f4       	brge	.+10     	; 0x830 <step+0x2c2>
		__ticks = 1;
     826:	81 e0       	ldi	r24, 0x01	; 1
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	9f 83       	std	Y+7, r25	; 0x07
     82c:	8e 83       	std	Y+6, r24	; 0x06
     82e:	3f c0       	rjmp	.+126    	; 0x8ae <step+0x340>
	else if (__tmp > 65535)
     830:	68 85       	ldd	r22, Y+8	; 0x08
     832:	79 85       	ldd	r23, Y+9	; 0x09
     834:	8a 85       	ldd	r24, Y+10	; 0x0a
     836:	9b 85       	ldd	r25, Y+11	; 0x0b
     838:	20 e0       	ldi	r18, 0x00	; 0
     83a:	3f ef       	ldi	r19, 0xFF	; 255
     83c:	4f e7       	ldi	r20, 0x7F	; 127
     83e:	57 e4       	ldi	r21, 0x47	; 71
     840:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <__gtsf2>
     844:	18 16       	cp	r1, r24
     846:	4c f5       	brge	.+82     	; 0x89a <step+0x32c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     848:	6c 85       	ldd	r22, Y+12	; 0x0c
     84a:	7d 85       	ldd	r23, Y+13	; 0x0d
     84c:	8e 85       	ldd	r24, Y+14	; 0x0e
     84e:	9f 85       	ldd	r25, Y+15	; 0x0f
     850:	20 e0       	ldi	r18, 0x00	; 0
     852:	30 e0       	ldi	r19, 0x00	; 0
     854:	40 e2       	ldi	r20, 0x20	; 32
     856:	51 e4       	ldi	r21, 0x41	; 65
     858:	0e 94 2d 08 	call	0x105a	; 0x105a <__mulsf3>
     85c:	dc 01       	movw	r26, r24
     85e:	cb 01       	movw	r24, r22
     860:	bc 01       	movw	r22, r24
     862:	cd 01       	movw	r24, r26
     864:	0e 94 57 06 	call	0xcae	; 0xcae <__fixunssfsi>
     868:	dc 01       	movw	r26, r24
     86a:	cb 01       	movw	r24, r22
     86c:	9f 83       	std	Y+7, r25	; 0x07
     86e:	8e 83       	std	Y+6, r24	; 0x06
     870:	0f c0       	rjmp	.+30     	; 0x890 <step+0x322>
     872:	80 e9       	ldi	r24, 0x90	; 144
     874:	91 e0       	ldi	r25, 0x01	; 1
     876:	9d 83       	std	Y+5, r25	; 0x05
     878:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     87a:	8c 81       	ldd	r24, Y+4	; 0x04
     87c:	9d 81       	ldd	r25, Y+5	; 0x05
     87e:	01 97       	sbiw	r24, 0x01	; 1
     880:	f1 f7       	brne	.-4      	; 0x87e <step+0x310>
     882:	9d 83       	std	Y+5, r25	; 0x05
     884:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     886:	8e 81       	ldd	r24, Y+6	; 0x06
     888:	9f 81       	ldd	r25, Y+7	; 0x07
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	9f 83       	std	Y+7, r25	; 0x07
     88e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     890:	8e 81       	ldd	r24, Y+6	; 0x06
     892:	9f 81       	ldd	r25, Y+7	; 0x07
     894:	00 97       	sbiw	r24, 0x00	; 0
     896:	69 f7       	brne	.-38     	; 0x872 <step+0x304>
     898:	24 c0       	rjmp	.+72     	; 0x8e2 <step+0x374>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     89a:	68 85       	ldd	r22, Y+8	; 0x08
     89c:	79 85       	ldd	r23, Y+9	; 0x09
     89e:	8a 85       	ldd	r24, Y+10	; 0x0a
     8a0:	9b 85       	ldd	r25, Y+11	; 0x0b
     8a2:	0e 94 57 06 	call	0xcae	; 0xcae <__fixunssfsi>
     8a6:	dc 01       	movw	r26, r24
     8a8:	cb 01       	movw	r24, r22
     8aa:	9f 83       	std	Y+7, r25	; 0x07
     8ac:	8e 83       	std	Y+6, r24	; 0x06
     8ae:	8e 81       	ldd	r24, Y+6	; 0x06
     8b0:	9f 81       	ldd	r25, Y+7	; 0x07
     8b2:	9b 83       	std	Y+3, r25	; 0x03
     8b4:	8a 83       	std	Y+2, r24	; 0x02
     8b6:	8a 81       	ldd	r24, Y+2	; 0x02
     8b8:	9b 81       	ldd	r25, Y+3	; 0x03
     8ba:	01 97       	sbiw	r24, 0x01	; 1
     8bc:	f1 f7       	brne	.-4      	; 0x8ba <step+0x34c>
     8be:	9b 83       	std	Y+3, r25	; 0x03
     8c0:	8a 83       	std	Y+2, r24	; 0x02
     8c2:	0f c0       	rjmp	.+30     	; 0x8e2 <step+0x374>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     8c4:	69 89       	ldd	r22, Y+17	; 0x11
     8c6:	7a 89       	ldd	r23, Y+18	; 0x12
     8c8:	8b 89       	ldd	r24, Y+19	; 0x13
     8ca:	9c 89       	ldd	r25, Y+20	; 0x14
     8cc:	0e 94 57 06 	call	0xcae	; 0xcae <__fixunssfsi>
     8d0:	dc 01       	movw	r26, r24
     8d2:	cb 01       	movw	r24, r22
     8d4:	88 8b       	std	Y+16, r24	; 0x10
     8d6:	88 89       	ldd	r24, Y+16	; 0x10
     8d8:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     8da:	89 81       	ldd	r24, Y+1	; 0x01
     8dc:	8a 95       	dec	r24
     8de:	f1 f7       	brne	.-4      	; 0x8dc <step+0x36e>
     8e0:	89 83       	std	Y+1, r24	; 0x01
            _delay_us(2);
}
     8e2:	eb 96       	adiw	r28, 0x3b	; 59
     8e4:	0f b6       	in	r0, 0x3f	; 63
     8e6:	f8 94       	cli
     8e8:	de bf       	out	0x3e, r29	; 62
     8ea:	0f be       	out	0x3f, r0	; 63
     8ec:	cd bf       	out	0x3d, r28	; 61
     8ee:	cf 91       	pop	r28
     8f0:	df 91       	pop	r29
     8f2:	1f 91       	pop	r17
     8f4:	0f 91       	pop	r16
     8f6:	ff 90       	pop	r15
     8f8:	ef 90       	pop	r14
     8fa:	08 95       	ret

000008fc <count_steps>:

void static count_steps(volatile struct stepper *stepperino)
{
     8fc:	df 93       	push	r29
     8fe:	cf 93       	push	r28
     900:	00 d0       	rcall	.+0      	; 0x902 <count_steps+0x6>
     902:	0f 92       	push	r0
     904:	cd b7       	in	r28, 0x3d	; 61
     906:	de b7       	in	r29, 0x3e	; 62
     908:	9a 83       	std	Y+2, r25	; 0x02
     90a:	89 83       	std	Y+1, r24	; 0x01
    switch(stepperino->direction)
     90c:	e9 81       	ldd	r30, Y+1	; 0x01
     90e:	fa 81       	ldd	r31, Y+2	; 0x02
     910:	80 85       	ldd	r24, Z+8	; 0x08
     912:	28 2f       	mov	r18, r24
     914:	30 e0       	ldi	r19, 0x00	; 0
     916:	3c 83       	std	Y+4, r19	; 0x04
     918:	2b 83       	std	Y+3, r18	; 0x03
     91a:	8b 81       	ldd	r24, Y+3	; 0x03
     91c:	9c 81       	ldd	r25, Y+4	; 0x04
     91e:	81 30       	cpi	r24, 0x01	; 1
     920:	91 05       	cpc	r25, r1
     922:	79 f0       	breq	.+30     	; 0x942 <count_steps+0x46>
     924:	2b 81       	ldd	r18, Y+3	; 0x03
     926:	3c 81       	ldd	r19, Y+4	; 0x04
     928:	22 30       	cpi	r18, 0x02	; 2
     92a:	31 05       	cpc	r19, r1
     92c:	99 f4       	brne	.+38     	; 0x954 <count_steps+0x58>
        {
        case forward:
        stepperino->steps++;
     92e:	e9 81       	ldd	r30, Y+1	; 0x01
     930:	fa 81       	ldd	r31, Y+2	; 0x02
     932:	81 85       	ldd	r24, Z+9	; 0x09
     934:	92 85       	ldd	r25, Z+10	; 0x0a
     936:	01 96       	adiw	r24, 0x01	; 1
     938:	e9 81       	ldd	r30, Y+1	; 0x01
     93a:	fa 81       	ldd	r31, Y+2	; 0x02
     93c:	92 87       	std	Z+10, r25	; 0x0a
     93e:	81 87       	std	Z+9, r24	; 0x09
     940:	09 c0       	rjmp	.+18     	; 0x954 <count_steps+0x58>
        break;
        case backward:
        stepperino->steps--;
     942:	e9 81       	ldd	r30, Y+1	; 0x01
     944:	fa 81       	ldd	r31, Y+2	; 0x02
     946:	81 85       	ldd	r24, Z+9	; 0x09
     948:	92 85       	ldd	r25, Z+10	; 0x0a
     94a:	01 97       	sbiw	r24, 0x01	; 1
     94c:	e9 81       	ldd	r30, Y+1	; 0x01
     94e:	fa 81       	ldd	r31, Y+2	; 0x02
     950:	92 87       	std	Z+10, r25	; 0x0a
     952:	81 87       	std	Z+9, r24	; 0x09
        break;
        default:
        break;
        }
}
     954:	0f 90       	pop	r0
     956:	0f 90       	pop	r0
     958:	0f 90       	pop	r0
     95a:	0f 90       	pop	r0
     95c:	cf 91       	pop	r28
     95e:	df 91       	pop	r29
     960:	08 95       	ret

00000962 <Handle_steps>:

void Handle_steps(volatile struct stepper *stepperino)
{
     962:	ef 92       	push	r14
     964:	ff 92       	push	r15
     966:	0f 93       	push	r16
     968:	1f 93       	push	r17
     96a:	df 93       	push	r29
     96c:	cf 93       	push	r28
     96e:	0f 92       	push	r0
     970:	0f 92       	push	r0
     972:	cd b7       	in	r28, 0x3d	; 61
     974:	de b7       	in	r29, 0x3e	; 62
     976:	9a 83       	std	Y+2, r25	; 0x02
     978:	89 83       	std	Y+1, r24	; 0x01
    if(stepperino->current_speed == 0)
     97a:	e9 81       	ldd	r30, Y+1	; 0x01
     97c:	fa 81       	ldd	r31, Y+2	; 0x02
     97e:	87 81       	ldd	r24, Z+7	; 0x07
     980:	88 23       	and	r24, r24
     982:	09 f4       	brne	.+2      	; 0x986 <Handle_steps+0x24>
     984:	3f c0       	rjmp	.+126    	; 0xa04 <Handle_steps+0xa2>
    {

    }
    else if(ms >= (stepperino->last_step + stepperino->current_speed))
     986:	e9 81       	ldd	r30, Y+1	; 0x01
     988:	fa 81       	ldd	r31, Y+2	; 0x02
     98a:	22 81       	ldd	r18, Z+2	; 0x02
     98c:	33 81       	ldd	r19, Z+3	; 0x03
     98e:	44 81       	ldd	r20, Z+4	; 0x04
     990:	55 81       	ldd	r21, Z+5	; 0x05
     992:	e9 81       	ldd	r30, Y+1	; 0x01
     994:	fa 81       	ldd	r31, Y+2	; 0x02
     996:	87 81       	ldd	r24, Z+7	; 0x07
     998:	88 2f       	mov	r24, r24
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	a0 e0       	ldi	r26, 0x00	; 0
     99e:	b0 e0       	ldi	r27, 0x00	; 0
     9a0:	28 0f       	add	r18, r24
     9a2:	39 1f       	adc	r19, r25
     9a4:	4a 1f       	adc	r20, r26
     9a6:	5b 1f       	adc	r21, r27
     9a8:	80 91 1e 03 	lds	r24, 0x031E
     9ac:	90 91 1f 03 	lds	r25, 0x031F
     9b0:	a0 91 20 03 	lds	r26, 0x0320
     9b4:	b0 91 21 03 	lds	r27, 0x0321
     9b8:	82 17       	cp	r24, r18
     9ba:	93 07       	cpc	r25, r19
     9bc:	a4 07       	cpc	r26, r20
     9be:	b5 07       	cpc	r27, r21
     9c0:	0c f1       	brlt	.+66     	; 0xa04 <Handle_steps+0xa2>
    {
        step(*stepperino);
     9c2:	e9 81       	ldd	r30, Y+1	; 0x01
     9c4:	fa 81       	ldd	r31, Y+2	; 0x02
     9c6:	e0 80       	ld	r14, Z
     9c8:	f1 80       	ldd	r15, Z+1	; 0x01
     9ca:	02 81       	ldd	r16, Z+2	; 0x02
     9cc:	13 81       	ldd	r17, Z+3	; 0x03
     9ce:	24 81       	ldd	r18, Z+4	; 0x04
     9d0:	35 81       	ldd	r19, Z+5	; 0x05
     9d2:	46 81       	ldd	r20, Z+6	; 0x06
     9d4:	57 81       	ldd	r21, Z+7	; 0x07
     9d6:	60 85       	ldd	r22, Z+8	; 0x08
     9d8:	71 85       	ldd	r23, Z+9	; 0x09
     9da:	82 85       	ldd	r24, Z+10	; 0x0a
     9dc:	0e 94 b7 02 	call	0x56e	; 0x56e <step>
        stepperino->last_step = ms;
     9e0:	80 91 1e 03 	lds	r24, 0x031E
     9e4:	90 91 1f 03 	lds	r25, 0x031F
     9e8:	a0 91 20 03 	lds	r26, 0x0320
     9ec:	b0 91 21 03 	lds	r27, 0x0321
     9f0:	e9 81       	ldd	r30, Y+1	; 0x01
     9f2:	fa 81       	ldd	r31, Y+2	; 0x02
     9f4:	82 83       	std	Z+2, r24	; 0x02
     9f6:	93 83       	std	Z+3, r25	; 0x03
     9f8:	a4 83       	std	Z+4, r26	; 0x04
     9fa:	b5 83       	std	Z+5, r27	; 0x05
        count_steps(stepperino);
     9fc:	89 81       	ldd	r24, Y+1	; 0x01
     9fe:	9a 81       	ldd	r25, Y+2	; 0x02
     a00:	0e 94 7e 04 	call	0x8fc	; 0x8fc <count_steps>

    }
}
     a04:	0f 90       	pop	r0
     a06:	0f 90       	pop	r0
     a08:	cf 91       	pop	r28
     a0a:	df 91       	pop	r29
     a0c:	1f 91       	pop	r17
     a0e:	0f 91       	pop	r16
     a10:	ff 90       	pop	r15
     a12:	ef 90       	pop	r14
     a14:	08 95       	ret

00000a16 <turn>:

void turn(int16_t degrees, volatile struct stepper *stepperino1, volatile struct stepper *stepperino2)
{
     a16:	df 93       	push	r29
     a18:	cf 93       	push	r28
     a1a:	cd b7       	in	r28, 0x3d	; 61
     a1c:	de b7       	in	r29, 0x3e	; 62
     a1e:	e2 97       	sbiw	r28, 0x32	; 50
     a20:	0f b6       	in	r0, 0x3f	; 63
     a22:	f8 94       	cli
     a24:	de bf       	out	0x3e, r29	; 62
     a26:	0f be       	out	0x3f, r0	; 63
     a28:	cd bf       	out	0x3d, r28	; 61
     a2a:	9a 8f       	std	Y+26, r25	; 0x1a
     a2c:	89 8f       	std	Y+25, r24	; 0x19
     a2e:	7c 8f       	std	Y+28, r23	; 0x1c
     a30:	6b 8f       	std	Y+27, r22	; 0x1b
     a32:	5e 8f       	std	Y+30, r21	; 0x1e
     a34:	4d 8f       	std	Y+29, r20	; 0x1d
    int16_t turn_steps = (float)(0.55)*degrees * magic;
     a36:	89 8d       	ldd	r24, Y+25	; 0x19
     a38:	9a 8d       	ldd	r25, Y+26	; 0x1a
     a3a:	aa 27       	eor	r26, r26
     a3c:	97 fd       	sbrc	r25, 7
     a3e:	a0 95       	com	r26
     a40:	ba 2f       	mov	r27, r26
     a42:	bc 01       	movw	r22, r24
     a44:	cd 01       	movw	r24, r26
     a46:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <__floatsisf>
     a4a:	dc 01       	movw	r26, r24
     a4c:	cb 01       	movw	r24, r22
     a4e:	bc 01       	movw	r22, r24
     a50:	cd 01       	movw	r24, r26
     a52:	2d ec       	ldi	r18, 0xCD	; 205
     a54:	3c ec       	ldi	r19, 0xCC	; 204
     a56:	4c e0       	ldi	r20, 0x0C	; 12
     a58:	5f e3       	ldi	r21, 0x3F	; 63
     a5a:	0e 94 2d 08 	call	0x105a	; 0x105a <__mulsf3>
     a5e:	dc 01       	movw	r26, r24
     a60:	cb 01       	movw	r24, r22
     a62:	bc 01       	movw	r22, r24
     a64:	cd 01       	movw	r24, r26
     a66:	20 e0       	ldi	r18, 0x00	; 0
     a68:	30 e0       	ldi	r19, 0x00	; 0
     a6a:	40 e8       	ldi	r20, 0x80	; 128
     a6c:	50 e4       	ldi	r21, 0x40	; 64
     a6e:	0e 94 2d 08 	call	0x105a	; 0x105a <__mulsf3>
     a72:	dc 01       	movw	r26, r24
     a74:	cb 01       	movw	r24, r22
     a76:	bc 01       	movw	r22, r24
     a78:	cd 01       	movw	r24, r26
     a7a:	0e 94 c1 0a 	call	0x1582	; 0x1582 <__fixsfsi>
     a7e:	dc 01       	movw	r26, r24
     a80:	cb 01       	movw	r24, r22
     a82:	9a 83       	std	Y+2, r25	; 0x02
     a84:	89 83       	std	Y+1, r24	; 0x01
    struct stepper copy1 = *stepperino1;
     a86:	8b 8d       	ldd	r24, Y+27	; 0x1b
     a88:	9c 8d       	ldd	r25, Y+28	; 0x1c
     a8a:	9e 01       	movw	r18, r28
     a8c:	2d 5f       	subi	r18, 0xFD	; 253
     a8e:	3f 4f       	sbci	r19, 0xFF	; 255
     a90:	38 a3       	std	Y+32, r19	; 0x20
     a92:	2f 8f       	std	Y+31, r18	; 0x1f
     a94:	9a a3       	std	Y+34, r25	; 0x22
     a96:	89 a3       	std	Y+33, r24	; 0x21
     a98:	3b e0       	ldi	r19, 0x0B	; 11
     a9a:	3b a3       	std	Y+35, r19	; 0x23
     a9c:	e9 a1       	ldd	r30, Y+33	; 0x21
     a9e:	fa a1       	ldd	r31, Y+34	; 0x22
     aa0:	00 80       	ld	r0, Z
     aa2:	29 a1       	ldd	r18, Y+33	; 0x21
     aa4:	3a a1       	ldd	r19, Y+34	; 0x22
     aa6:	2f 5f       	subi	r18, 0xFF	; 255
     aa8:	3f 4f       	sbci	r19, 0xFF	; 255
     aaa:	3a a3       	std	Y+34, r19	; 0x22
     aac:	29 a3       	std	Y+33, r18	; 0x21
     aae:	ef 8d       	ldd	r30, Y+31	; 0x1f
     ab0:	f8 a1       	ldd	r31, Y+32	; 0x20
     ab2:	00 82       	st	Z, r0
     ab4:	2f 8d       	ldd	r18, Y+31	; 0x1f
     ab6:	38 a1       	ldd	r19, Y+32	; 0x20
     ab8:	2f 5f       	subi	r18, 0xFF	; 255
     aba:	3f 4f       	sbci	r19, 0xFF	; 255
     abc:	38 a3       	std	Y+32, r19	; 0x20
     abe:	2f 8f       	std	Y+31, r18	; 0x1f
     ac0:	3b a1       	ldd	r19, Y+35	; 0x23
     ac2:	31 50       	subi	r19, 0x01	; 1
     ac4:	3b a3       	std	Y+35, r19	; 0x23
     ac6:	8b a1       	ldd	r24, Y+35	; 0x23
     ac8:	88 23       	and	r24, r24
     aca:	41 f7       	brne	.-48     	; 0xa9c <turn+0x86>
    struct stepper copy2 = *stepperino2;
     acc:	8d 8d       	ldd	r24, Y+29	; 0x1d
     ace:	9e 8d       	ldd	r25, Y+30	; 0x1e
     ad0:	fe 01       	movw	r30, r28
     ad2:	3e 96       	adiw	r30, 0x0e	; 14
     ad4:	fd a3       	std	Y+37, r31	; 0x25
     ad6:	ec a3       	std	Y+36, r30	; 0x24
     ad8:	9f a3       	std	Y+39, r25	; 0x27
     ada:	8e a3       	std	Y+38, r24	; 0x26
     adc:	fb e0       	ldi	r31, 0x0B	; 11
     ade:	f8 a7       	std	Y+40, r31	; 0x28
     ae0:	ee a1       	ldd	r30, Y+38	; 0x26
     ae2:	ff a1       	ldd	r31, Y+39	; 0x27
     ae4:	00 80       	ld	r0, Z
     ae6:	2e a1       	ldd	r18, Y+38	; 0x26
     ae8:	3f a1       	ldd	r19, Y+39	; 0x27
     aea:	2f 5f       	subi	r18, 0xFF	; 255
     aec:	3f 4f       	sbci	r19, 0xFF	; 255
     aee:	3f a3       	std	Y+39, r19	; 0x27
     af0:	2e a3       	std	Y+38, r18	; 0x26
     af2:	ec a1       	ldd	r30, Y+36	; 0x24
     af4:	fd a1       	ldd	r31, Y+37	; 0x25
     af6:	00 82       	st	Z, r0
     af8:	2c a1       	ldd	r18, Y+36	; 0x24
     afa:	3d a1       	ldd	r19, Y+37	; 0x25
     afc:	2f 5f       	subi	r18, 0xFF	; 255
     afe:	3f 4f       	sbci	r19, 0xFF	; 255
     b00:	3d a3       	std	Y+37, r19	; 0x25
     b02:	2c a3       	std	Y+36, r18	; 0x24
     b04:	38 a5       	ldd	r19, Y+40	; 0x28
     b06:	31 50       	subi	r19, 0x01	; 1
     b08:	38 a7       	std	Y+40, r19	; 0x28
     b0a:	88 a5       	ldd	r24, Y+40	; 0x28
     b0c:	88 23       	and	r24, r24
     b0e:	41 f7       	brne	.-48     	; 0xae0 <turn+0xca>

        stepperino1->target_speed = 10;
     b10:	eb 8d       	ldd	r30, Y+27	; 0x1b
     b12:	fc 8d       	ldd	r31, Y+28	; 0x1c
     b14:	8a e0       	ldi	r24, 0x0A	; 10
     b16:	86 83       	std	Z+6, r24	; 0x06
        stepperino1->steps = 0;
     b18:	eb 8d       	ldd	r30, Y+27	; 0x1b
     b1a:	fc 8d       	ldd	r31, Y+28	; 0x1c
     b1c:	12 86       	std	Z+10, r1	; 0x0a
     b1e:	11 86       	std	Z+9, r1	; 0x09
        stepperino2->target_speed = 10;
     b20:	ed 8d       	ldd	r30, Y+29	; 0x1d
     b22:	fe 8d       	ldd	r31, Y+30	; 0x1e
     b24:	8a e0       	ldi	r24, 0x0A	; 10
     b26:	86 83       	std	Z+6, r24	; 0x06
        stepperino2->steps = 0;
     b28:	ed 8d       	ldd	r30, Y+29	; 0x1d
     b2a:	fe 8d       	ldd	r31, Y+30	; 0x1e
     b2c:	12 86       	std	Z+10, r1	; 0x0a
     b2e:	11 86       	std	Z+9, r1	; 0x09

    if(turn_steps > 0)
     b30:	89 81       	ldd	r24, Y+1	; 0x01
     b32:	9a 81       	ldd	r25, Y+2	; 0x02
     b34:	18 16       	cp	r1, r24
     b36:	19 06       	cpc	r1, r25
     b38:	3c f5       	brge	.+78     	; 0xb88 <turn+0x172>
    {
        turn_steps++;
     b3a:	89 81       	ldd	r24, Y+1	; 0x01
     b3c:	9a 81       	ldd	r25, Y+2	; 0x02
     b3e:	01 96       	adiw	r24, 0x01	; 1
     b40:	9a 83       	std	Y+2, r25	; 0x02
     b42:	89 83       	std	Y+1, r24	; 0x01
        stepperino1->direction = forward;
     b44:	eb 8d       	ldd	r30, Y+27	; 0x1b
     b46:	fc 8d       	ldd	r31, Y+28	; 0x1c
     b48:	82 e0       	ldi	r24, 0x02	; 2
     b4a:	80 87       	std	Z+8, r24	; 0x08
        stepperino2->direction = forward;
     b4c:	ed 8d       	ldd	r30, Y+29	; 0x1d
     b4e:	fe 8d       	ldd	r31, Y+30	; 0x1e
     b50:	82 e0       	ldi	r24, 0x02	; 2
     b52:	80 87       	std	Z+8, r24	; 0x08
        set_dir(stepperino1);
     b54:	8b 8d       	ldd	r24, Y+27	; 0x1b
     b56:	9c 8d       	ldd	r25, Y+28	; 0x1c
     b58:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <set_dir>
        set_dir(stepperino2);
     b5c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     b5e:	9e 8d       	ldd	r25, Y+30	; 0x1e
     b60:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <set_dir>
     b64:	08 c0       	rjmp	.+16     	; 0xb76 <turn+0x160>

        while(stepperino1->steps < (int)turn_steps)
        {
        Handle_steps(stepperino1);
     b66:	8b 8d       	ldd	r24, Y+27	; 0x1b
     b68:	9c 8d       	ldd	r25, Y+28	; 0x1c
     b6a:	0e 94 b1 04 	call	0x962	; 0x962 <Handle_steps>
        Handle_steps(stepperino2);
     b6e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     b70:	9e 8d       	ldd	r25, Y+30	; 0x1e
     b72:	0e 94 b1 04 	call	0x962	; 0x962 <Handle_steps>
        stepperino1->direction = forward;
        stepperino2->direction = forward;
        set_dir(stepperino1);
        set_dir(stepperino2);

        while(stepperino1->steps < (int)turn_steps)
     b76:	eb 8d       	ldd	r30, Y+27	; 0x1b
     b78:	fc 8d       	ldd	r31, Y+28	; 0x1c
     b7a:	21 85       	ldd	r18, Z+9	; 0x09
     b7c:	32 85       	ldd	r19, Z+10	; 0x0a
     b7e:	89 81       	ldd	r24, Y+1	; 0x01
     b80:	9a 81       	ldd	r25, Y+2	; 0x02
     b82:	28 17       	cp	r18, r24
     b84:	39 07       	cpc	r19, r25
     b86:	7c f3       	brlt	.-34     	; 0xb66 <turn+0x150>
        Handle_steps(stepperino1);
        Handle_steps(stepperino2);
        }
    }

    if(turn_steps < 0)
     b88:	89 81       	ldd	r24, Y+1	; 0x01
     b8a:	9a 81       	ldd	r25, Y+2	; 0x02
     b8c:	99 23       	and	r25, r25
     b8e:	3c f5       	brge	.+78     	; 0xbde <turn+0x1c8>
    {
        turn_steps--;
     b90:	89 81       	ldd	r24, Y+1	; 0x01
     b92:	9a 81       	ldd	r25, Y+2	; 0x02
     b94:	01 97       	sbiw	r24, 0x01	; 1
     b96:	9a 83       	std	Y+2, r25	; 0x02
     b98:	89 83       	std	Y+1, r24	; 0x01
        stepperino1->direction = backward;
     b9a:	eb 8d       	ldd	r30, Y+27	; 0x1b
     b9c:	fc 8d       	ldd	r31, Y+28	; 0x1c
     b9e:	81 e0       	ldi	r24, 0x01	; 1
     ba0:	80 87       	std	Z+8, r24	; 0x08
        stepperino2->direction = backward;
     ba2:	ed 8d       	ldd	r30, Y+29	; 0x1d
     ba4:	fe 8d       	ldd	r31, Y+30	; 0x1e
     ba6:	81 e0       	ldi	r24, 0x01	; 1
     ba8:	80 87       	std	Z+8, r24	; 0x08
        set_dir(stepperino1);
     baa:	8b 8d       	ldd	r24, Y+27	; 0x1b
     bac:	9c 8d       	ldd	r25, Y+28	; 0x1c
     bae:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <set_dir>
        set_dir(stepperino2);
     bb2:	8d 8d       	ldd	r24, Y+29	; 0x1d
     bb4:	9e 8d       	ldd	r25, Y+30	; 0x1e
     bb6:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <set_dir>
     bba:	08 c0       	rjmp	.+16     	; 0xbcc <turn+0x1b6>

        while(stepperino2->steps > turn_steps)
        {
        //transmit_byte(turn_steps);
        Handle_steps(stepperino1);
     bbc:	8b 8d       	ldd	r24, Y+27	; 0x1b
     bbe:	9c 8d       	ldd	r25, Y+28	; 0x1c
     bc0:	0e 94 b1 04 	call	0x962	; 0x962 <Handle_steps>
        Handle_steps(stepperino2);
     bc4:	8d 8d       	ldd	r24, Y+29	; 0x1d
     bc6:	9e 8d       	ldd	r25, Y+30	; 0x1e
     bc8:	0e 94 b1 04 	call	0x962	; 0x962 <Handle_steps>
        stepperino1->direction = backward;
        stepperino2->direction = backward;
        set_dir(stepperino1);
        set_dir(stepperino2);

        while(stepperino2->steps > turn_steps)
     bcc:	ed 8d       	ldd	r30, Y+29	; 0x1d
     bce:	fe 8d       	ldd	r31, Y+30	; 0x1e
     bd0:	21 85       	ldd	r18, Z+9	; 0x09
     bd2:	32 85       	ldd	r19, Z+10	; 0x0a
     bd4:	89 81       	ldd	r24, Y+1	; 0x01
     bd6:	9a 81       	ldd	r25, Y+2	; 0x02
     bd8:	82 17       	cp	r24, r18
     bda:	93 07       	cpc	r25, r19
     bdc:	7c f3       	brlt	.-34     	; 0xbbc <turn+0x1a6>
        //transmit_byte(turn_steps);
        Handle_steps(stepperino1);
        Handle_steps(stepperino2);
        }
    }
        *stepperino1 = copy1;
     bde:	8b 8d       	ldd	r24, Y+27	; 0x1b
     be0:	9c 8d       	ldd	r25, Y+28	; 0x1c
     be2:	9a a7       	std	Y+42, r25	; 0x2a
     be4:	89 a7       	std	Y+41, r24	; 0x29
     be6:	fe 01       	movw	r30, r28
     be8:	33 96       	adiw	r30, 0x03	; 3
     bea:	fc a7       	std	Y+44, r31	; 0x2c
     bec:	eb a7       	std	Y+43, r30	; 0x2b
     bee:	fb e0       	ldi	r31, 0x0B	; 11
     bf0:	fd a7       	std	Y+45, r31	; 0x2d
     bf2:	eb a5       	ldd	r30, Y+43	; 0x2b
     bf4:	fc a5       	ldd	r31, Y+44	; 0x2c
     bf6:	00 80       	ld	r0, Z
     bf8:	2b a5       	ldd	r18, Y+43	; 0x2b
     bfa:	3c a5       	ldd	r19, Y+44	; 0x2c
     bfc:	2f 5f       	subi	r18, 0xFF	; 255
     bfe:	3f 4f       	sbci	r19, 0xFF	; 255
     c00:	3c a7       	std	Y+44, r19	; 0x2c
     c02:	2b a7       	std	Y+43, r18	; 0x2b
     c04:	e9 a5       	ldd	r30, Y+41	; 0x29
     c06:	fa a5       	ldd	r31, Y+42	; 0x2a
     c08:	00 82       	st	Z, r0
     c0a:	29 a5       	ldd	r18, Y+41	; 0x29
     c0c:	3a a5       	ldd	r19, Y+42	; 0x2a
     c0e:	2f 5f       	subi	r18, 0xFF	; 255
     c10:	3f 4f       	sbci	r19, 0xFF	; 255
     c12:	3a a7       	std	Y+42, r19	; 0x2a
     c14:	29 a7       	std	Y+41, r18	; 0x29
     c16:	3d a5       	ldd	r19, Y+45	; 0x2d
     c18:	31 50       	subi	r19, 0x01	; 1
     c1a:	3d a7       	std	Y+45, r19	; 0x2d
     c1c:	8d a5       	ldd	r24, Y+45	; 0x2d
     c1e:	88 23       	and	r24, r24
     c20:	41 f7       	brne	.-48     	; 0xbf2 <turn+0x1dc>
        *stepperino2 = copy2;
     c22:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c24:	9e 8d       	ldd	r25, Y+30	; 0x1e
     c26:	9f a7       	std	Y+47, r25	; 0x2f
     c28:	8e a7       	std	Y+46, r24	; 0x2e
     c2a:	fe 01       	movw	r30, r28
     c2c:	3e 96       	adiw	r30, 0x0e	; 14
     c2e:	f9 ab       	std	Y+49, r31	; 0x31
     c30:	e8 ab       	std	Y+48, r30	; 0x30
     c32:	fb e0       	ldi	r31, 0x0B	; 11
     c34:	fa ab       	std	Y+50, r31	; 0x32
     c36:	e8 a9       	ldd	r30, Y+48	; 0x30
     c38:	f9 a9       	ldd	r31, Y+49	; 0x31
     c3a:	00 80       	ld	r0, Z
     c3c:	28 a9       	ldd	r18, Y+48	; 0x30
     c3e:	39 a9       	ldd	r19, Y+49	; 0x31
     c40:	2f 5f       	subi	r18, 0xFF	; 255
     c42:	3f 4f       	sbci	r19, 0xFF	; 255
     c44:	39 ab       	std	Y+49, r19	; 0x31
     c46:	28 ab       	std	Y+48, r18	; 0x30
     c48:	ee a5       	ldd	r30, Y+46	; 0x2e
     c4a:	ff a5       	ldd	r31, Y+47	; 0x2f
     c4c:	00 82       	st	Z, r0
     c4e:	2e a5       	ldd	r18, Y+46	; 0x2e
     c50:	3f a5       	ldd	r19, Y+47	; 0x2f
     c52:	2f 5f       	subi	r18, 0xFF	; 255
     c54:	3f 4f       	sbci	r19, 0xFF	; 255
     c56:	3f a7       	std	Y+47, r19	; 0x2f
     c58:	2e a7       	std	Y+46, r18	; 0x2e
     c5a:	3a a9       	ldd	r19, Y+50	; 0x32
     c5c:	31 50       	subi	r19, 0x01	; 1
     c5e:	3a ab       	std	Y+50, r19	; 0x32
     c60:	8a a9       	ldd	r24, Y+50	; 0x32
     c62:	88 23       	and	r24, r24
     c64:	41 f7       	brne	.-48     	; 0xc36 <turn+0x220>
}
     c66:	e2 96       	adiw	r28, 0x32	; 50
     c68:	0f b6       	in	r0, 0x3f	; 63
     c6a:	f8 94       	cli
     c6c:	de bf       	out	0x3e, r29	; 62
     c6e:	0f be       	out	0x3f, r0	; 63
     c70:	cd bf       	out	0x3d, r28	; 61
     c72:	cf 91       	pop	r28
     c74:	df 91       	pop	r29
     c76:	08 95       	ret

00000c78 <init_stepper_timer0>:

void init_stepper_timer0()
{
     c78:	df 93       	push	r29
     c7a:	cf 93       	push	r28
     c7c:	cd b7       	in	r28, 0x3d	; 61
     c7e:	de b7       	in	r29, 0x3e	; 62
    TCCR0A |= (0<<WGM01) | (0<<WGM00);
     c80:	a4 e4       	ldi	r26, 0x44	; 68
     c82:	b0 e0       	ldi	r27, 0x00	; 0
     c84:	e4 e4       	ldi	r30, 0x44	; 68
     c86:	f0 e0       	ldi	r31, 0x00	; 0
     c88:	80 81       	ld	r24, Z
     c8a:	8c 93       	st	X, r24
    TCCR0B |= (0<<WGM02) | (1<<CS02) | (0<<CS01) | (0<<CS00);
     c8c:	a5 e4       	ldi	r26, 0x45	; 69
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	e5 e4       	ldi	r30, 0x45	; 69
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	84 60       	ori	r24, 0x04	; 4
     c98:	8c 93       	st	X, r24
    TIMSK0 |= (1<<TOIE0);
     c9a:	ae e6       	ldi	r26, 0x6E	; 110
     c9c:	b0 e0       	ldi	r27, 0x00	; 0
     c9e:	ee e6       	ldi	r30, 0x6E	; 110
     ca0:	f0 e0       	ldi	r31, 0x00	; 0
     ca2:	80 81       	ld	r24, Z
     ca4:	81 60       	ori	r24, 0x01	; 1
     ca6:	8c 93       	st	X, r24
}
     ca8:	cf 91       	pop	r28
     caa:	df 91       	pop	r29
     cac:	08 95       	ret

00000cae <__fixunssfsi>:
     cae:	ef 92       	push	r14
     cb0:	ff 92       	push	r15
     cb2:	0f 93       	push	r16
     cb4:	1f 93       	push	r17
     cb6:	7b 01       	movw	r14, r22
     cb8:	8c 01       	movw	r16, r24
     cba:	20 e0       	ldi	r18, 0x00	; 0
     cbc:	30 e0       	ldi	r19, 0x00	; 0
     cbe:	40 e0       	ldi	r20, 0x00	; 0
     cc0:	5f e4       	ldi	r21, 0x4F	; 79
     cc2:	0e 94 03 0a 	call	0x1406	; 0x1406 <__gesf2>
     cc6:	88 23       	and	r24, r24
     cc8:	8c f0       	brlt	.+34     	; 0xcec <__fixunssfsi+0x3e>
     cca:	c8 01       	movw	r24, r16
     ccc:	b7 01       	movw	r22, r14
     cce:	20 e0       	ldi	r18, 0x00	; 0
     cd0:	30 e0       	ldi	r19, 0x00	; 0
     cd2:	40 e0       	ldi	r20, 0x00	; 0
     cd4:	5f e4       	ldi	r21, 0x4F	; 79
     cd6:	0e 94 cf 07 	call	0xf9e	; 0xf9e <__subsf3>
     cda:	0e 94 c1 0a 	call	0x1582	; 0x1582 <__fixsfsi>
     cde:	9b 01       	movw	r18, r22
     ce0:	ac 01       	movw	r20, r24
     ce2:	20 50       	subi	r18, 0x00	; 0
     ce4:	30 40       	sbci	r19, 0x00	; 0
     ce6:	40 40       	sbci	r20, 0x00	; 0
     ce8:	50 48       	sbci	r21, 0x80	; 128
     cea:	06 c0       	rjmp	.+12     	; 0xcf8 <__fixunssfsi+0x4a>
     cec:	c8 01       	movw	r24, r16
     cee:	b7 01       	movw	r22, r14
     cf0:	0e 94 c1 0a 	call	0x1582	; 0x1582 <__fixsfsi>
     cf4:	9b 01       	movw	r18, r22
     cf6:	ac 01       	movw	r20, r24
     cf8:	b9 01       	movw	r22, r18
     cfa:	ca 01       	movw	r24, r20
     cfc:	1f 91       	pop	r17
     cfe:	0f 91       	pop	r16
     d00:	ff 90       	pop	r15
     d02:	ef 90       	pop	r14
     d04:	08 95       	ret

00000d06 <_fpadd_parts>:
     d06:	a0 e0       	ldi	r26, 0x00	; 0
     d08:	b0 e0       	ldi	r27, 0x00	; 0
     d0a:	e9 e8       	ldi	r30, 0x89	; 137
     d0c:	f6 e0       	ldi	r31, 0x06	; 6
     d0e:	0c 94 47 0d 	jmp	0x1a8e	; 0x1a8e <__prologue_saves__>
     d12:	dc 01       	movw	r26, r24
     d14:	2b 01       	movw	r4, r22
     d16:	fa 01       	movw	r30, r20
     d18:	9c 91       	ld	r25, X
     d1a:	92 30       	cpi	r25, 0x02	; 2
     d1c:	08 f4       	brcc	.+2      	; 0xd20 <_fpadd_parts+0x1a>
     d1e:	39 c1       	rjmp	.+626    	; 0xf92 <_fpadd_parts+0x28c>
     d20:	eb 01       	movw	r28, r22
     d22:	88 81       	ld	r24, Y
     d24:	82 30       	cpi	r24, 0x02	; 2
     d26:	08 f4       	brcc	.+2      	; 0xd2a <_fpadd_parts+0x24>
     d28:	33 c1       	rjmp	.+614    	; 0xf90 <_fpadd_parts+0x28a>
     d2a:	94 30       	cpi	r25, 0x04	; 4
     d2c:	69 f4       	brne	.+26     	; 0xd48 <_fpadd_parts+0x42>
     d2e:	84 30       	cpi	r24, 0x04	; 4
     d30:	09 f0       	breq	.+2      	; 0xd34 <_fpadd_parts+0x2e>
     d32:	2f c1       	rjmp	.+606    	; 0xf92 <_fpadd_parts+0x28c>
     d34:	11 96       	adiw	r26, 0x01	; 1
     d36:	9c 91       	ld	r25, X
     d38:	11 97       	sbiw	r26, 0x01	; 1
     d3a:	89 81       	ldd	r24, Y+1	; 0x01
     d3c:	98 17       	cp	r25, r24
     d3e:	09 f4       	brne	.+2      	; 0xd42 <_fpadd_parts+0x3c>
     d40:	28 c1       	rjmp	.+592    	; 0xf92 <_fpadd_parts+0x28c>
     d42:	a0 e0       	ldi	r26, 0x00	; 0
     d44:	b2 e0       	ldi	r27, 0x02	; 2
     d46:	25 c1       	rjmp	.+586    	; 0xf92 <_fpadd_parts+0x28c>
     d48:	84 30       	cpi	r24, 0x04	; 4
     d4a:	09 f4       	brne	.+2      	; 0xd4e <_fpadd_parts+0x48>
     d4c:	21 c1       	rjmp	.+578    	; 0xf90 <_fpadd_parts+0x28a>
     d4e:	82 30       	cpi	r24, 0x02	; 2
     d50:	a9 f4       	brne	.+42     	; 0xd7c <_fpadd_parts+0x76>
     d52:	92 30       	cpi	r25, 0x02	; 2
     d54:	09 f0       	breq	.+2      	; 0xd58 <_fpadd_parts+0x52>
     d56:	1d c1       	rjmp	.+570    	; 0xf92 <_fpadd_parts+0x28c>
     d58:	9a 01       	movw	r18, r20
     d5a:	ad 01       	movw	r20, r26
     d5c:	88 e0       	ldi	r24, 0x08	; 8
     d5e:	ea 01       	movw	r28, r20
     d60:	09 90       	ld	r0, Y+
     d62:	ae 01       	movw	r20, r28
     d64:	e9 01       	movw	r28, r18
     d66:	09 92       	st	Y+, r0
     d68:	9e 01       	movw	r18, r28
     d6a:	81 50       	subi	r24, 0x01	; 1
     d6c:	c1 f7       	brne	.-16     	; 0xd5e <_fpadd_parts+0x58>
     d6e:	e2 01       	movw	r28, r4
     d70:	89 81       	ldd	r24, Y+1	; 0x01
     d72:	11 96       	adiw	r26, 0x01	; 1
     d74:	9c 91       	ld	r25, X
     d76:	89 23       	and	r24, r25
     d78:	81 83       	std	Z+1, r24	; 0x01
     d7a:	08 c1       	rjmp	.+528    	; 0xf8c <_fpadd_parts+0x286>
     d7c:	92 30       	cpi	r25, 0x02	; 2
     d7e:	09 f4       	brne	.+2      	; 0xd82 <_fpadd_parts+0x7c>
     d80:	07 c1       	rjmp	.+526    	; 0xf90 <_fpadd_parts+0x28a>
     d82:	12 96       	adiw	r26, 0x02	; 2
     d84:	2d 90       	ld	r2, X+
     d86:	3c 90       	ld	r3, X
     d88:	13 97       	sbiw	r26, 0x03	; 3
     d8a:	eb 01       	movw	r28, r22
     d8c:	8a 81       	ldd	r24, Y+2	; 0x02
     d8e:	9b 81       	ldd	r25, Y+3	; 0x03
     d90:	14 96       	adiw	r26, 0x04	; 4
     d92:	ad 90       	ld	r10, X+
     d94:	bd 90       	ld	r11, X+
     d96:	cd 90       	ld	r12, X+
     d98:	dc 90       	ld	r13, X
     d9a:	17 97       	sbiw	r26, 0x07	; 7
     d9c:	ec 80       	ldd	r14, Y+4	; 0x04
     d9e:	fd 80       	ldd	r15, Y+5	; 0x05
     da0:	0e 81       	ldd	r16, Y+6	; 0x06
     da2:	1f 81       	ldd	r17, Y+7	; 0x07
     da4:	91 01       	movw	r18, r2
     da6:	28 1b       	sub	r18, r24
     da8:	39 0b       	sbc	r19, r25
     daa:	b9 01       	movw	r22, r18
     dac:	37 ff       	sbrs	r19, 7
     dae:	04 c0       	rjmp	.+8      	; 0xdb8 <_fpadd_parts+0xb2>
     db0:	66 27       	eor	r22, r22
     db2:	77 27       	eor	r23, r23
     db4:	62 1b       	sub	r22, r18
     db6:	73 0b       	sbc	r23, r19
     db8:	60 32       	cpi	r22, 0x20	; 32
     dba:	71 05       	cpc	r23, r1
     dbc:	0c f0       	brlt	.+2      	; 0xdc0 <_fpadd_parts+0xba>
     dbe:	61 c0       	rjmp	.+194    	; 0xe82 <_fpadd_parts+0x17c>
     dc0:	12 16       	cp	r1, r18
     dc2:	13 06       	cpc	r1, r19
     dc4:	6c f5       	brge	.+90     	; 0xe20 <_fpadd_parts+0x11a>
     dc6:	37 01       	movw	r6, r14
     dc8:	48 01       	movw	r8, r16
     dca:	06 2e       	mov	r0, r22
     dcc:	04 c0       	rjmp	.+8      	; 0xdd6 <_fpadd_parts+0xd0>
     dce:	96 94       	lsr	r9
     dd0:	87 94       	ror	r8
     dd2:	77 94       	ror	r7
     dd4:	67 94       	ror	r6
     dd6:	0a 94       	dec	r0
     dd8:	d2 f7       	brpl	.-12     	; 0xdce <_fpadd_parts+0xc8>
     dda:	21 e0       	ldi	r18, 0x01	; 1
     ddc:	30 e0       	ldi	r19, 0x00	; 0
     dde:	40 e0       	ldi	r20, 0x00	; 0
     de0:	50 e0       	ldi	r21, 0x00	; 0
     de2:	04 c0       	rjmp	.+8      	; 0xdec <_fpadd_parts+0xe6>
     de4:	22 0f       	add	r18, r18
     de6:	33 1f       	adc	r19, r19
     de8:	44 1f       	adc	r20, r20
     dea:	55 1f       	adc	r21, r21
     dec:	6a 95       	dec	r22
     dee:	d2 f7       	brpl	.-12     	; 0xde4 <_fpadd_parts+0xde>
     df0:	21 50       	subi	r18, 0x01	; 1
     df2:	30 40       	sbci	r19, 0x00	; 0
     df4:	40 40       	sbci	r20, 0x00	; 0
     df6:	50 40       	sbci	r21, 0x00	; 0
     df8:	2e 21       	and	r18, r14
     dfa:	3f 21       	and	r19, r15
     dfc:	40 23       	and	r20, r16
     dfe:	51 23       	and	r21, r17
     e00:	21 15       	cp	r18, r1
     e02:	31 05       	cpc	r19, r1
     e04:	41 05       	cpc	r20, r1
     e06:	51 05       	cpc	r21, r1
     e08:	21 f0       	breq	.+8      	; 0xe12 <_fpadd_parts+0x10c>
     e0a:	21 e0       	ldi	r18, 0x01	; 1
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	40 e0       	ldi	r20, 0x00	; 0
     e10:	50 e0       	ldi	r21, 0x00	; 0
     e12:	79 01       	movw	r14, r18
     e14:	8a 01       	movw	r16, r20
     e16:	e6 28       	or	r14, r6
     e18:	f7 28       	or	r15, r7
     e1a:	08 29       	or	r16, r8
     e1c:	19 29       	or	r17, r9
     e1e:	3c c0       	rjmp	.+120    	; 0xe98 <_fpadd_parts+0x192>
     e20:	23 2b       	or	r18, r19
     e22:	d1 f1       	breq	.+116    	; 0xe98 <_fpadd_parts+0x192>
     e24:	26 0e       	add	r2, r22
     e26:	37 1e       	adc	r3, r23
     e28:	35 01       	movw	r6, r10
     e2a:	46 01       	movw	r8, r12
     e2c:	06 2e       	mov	r0, r22
     e2e:	04 c0       	rjmp	.+8      	; 0xe38 <_fpadd_parts+0x132>
     e30:	96 94       	lsr	r9
     e32:	87 94       	ror	r8
     e34:	77 94       	ror	r7
     e36:	67 94       	ror	r6
     e38:	0a 94       	dec	r0
     e3a:	d2 f7       	brpl	.-12     	; 0xe30 <_fpadd_parts+0x12a>
     e3c:	21 e0       	ldi	r18, 0x01	; 1
     e3e:	30 e0       	ldi	r19, 0x00	; 0
     e40:	40 e0       	ldi	r20, 0x00	; 0
     e42:	50 e0       	ldi	r21, 0x00	; 0
     e44:	04 c0       	rjmp	.+8      	; 0xe4e <_fpadd_parts+0x148>
     e46:	22 0f       	add	r18, r18
     e48:	33 1f       	adc	r19, r19
     e4a:	44 1f       	adc	r20, r20
     e4c:	55 1f       	adc	r21, r21
     e4e:	6a 95       	dec	r22
     e50:	d2 f7       	brpl	.-12     	; 0xe46 <_fpadd_parts+0x140>
     e52:	21 50       	subi	r18, 0x01	; 1
     e54:	30 40       	sbci	r19, 0x00	; 0
     e56:	40 40       	sbci	r20, 0x00	; 0
     e58:	50 40       	sbci	r21, 0x00	; 0
     e5a:	2a 21       	and	r18, r10
     e5c:	3b 21       	and	r19, r11
     e5e:	4c 21       	and	r20, r12
     e60:	5d 21       	and	r21, r13
     e62:	21 15       	cp	r18, r1
     e64:	31 05       	cpc	r19, r1
     e66:	41 05       	cpc	r20, r1
     e68:	51 05       	cpc	r21, r1
     e6a:	21 f0       	breq	.+8      	; 0xe74 <_fpadd_parts+0x16e>
     e6c:	21 e0       	ldi	r18, 0x01	; 1
     e6e:	30 e0       	ldi	r19, 0x00	; 0
     e70:	40 e0       	ldi	r20, 0x00	; 0
     e72:	50 e0       	ldi	r21, 0x00	; 0
     e74:	59 01       	movw	r10, r18
     e76:	6a 01       	movw	r12, r20
     e78:	a6 28       	or	r10, r6
     e7a:	b7 28       	or	r11, r7
     e7c:	c8 28       	or	r12, r8
     e7e:	d9 28       	or	r13, r9
     e80:	0b c0       	rjmp	.+22     	; 0xe98 <_fpadd_parts+0x192>
     e82:	82 15       	cp	r24, r2
     e84:	93 05       	cpc	r25, r3
     e86:	2c f0       	brlt	.+10     	; 0xe92 <_fpadd_parts+0x18c>
     e88:	1c 01       	movw	r2, r24
     e8a:	aa 24       	eor	r10, r10
     e8c:	bb 24       	eor	r11, r11
     e8e:	65 01       	movw	r12, r10
     e90:	03 c0       	rjmp	.+6      	; 0xe98 <_fpadd_parts+0x192>
     e92:	ee 24       	eor	r14, r14
     e94:	ff 24       	eor	r15, r15
     e96:	87 01       	movw	r16, r14
     e98:	11 96       	adiw	r26, 0x01	; 1
     e9a:	9c 91       	ld	r25, X
     e9c:	d2 01       	movw	r26, r4
     e9e:	11 96       	adiw	r26, 0x01	; 1
     ea0:	8c 91       	ld	r24, X
     ea2:	98 17       	cp	r25, r24
     ea4:	09 f4       	brne	.+2      	; 0xea8 <_fpadd_parts+0x1a2>
     ea6:	45 c0       	rjmp	.+138    	; 0xf32 <_fpadd_parts+0x22c>
     ea8:	99 23       	and	r25, r25
     eaa:	39 f0       	breq	.+14     	; 0xeba <_fpadd_parts+0x1b4>
     eac:	a8 01       	movw	r20, r16
     eae:	97 01       	movw	r18, r14
     eb0:	2a 19       	sub	r18, r10
     eb2:	3b 09       	sbc	r19, r11
     eb4:	4c 09       	sbc	r20, r12
     eb6:	5d 09       	sbc	r21, r13
     eb8:	06 c0       	rjmp	.+12     	; 0xec6 <_fpadd_parts+0x1c0>
     eba:	a6 01       	movw	r20, r12
     ebc:	95 01       	movw	r18, r10
     ebe:	2e 19       	sub	r18, r14
     ec0:	3f 09       	sbc	r19, r15
     ec2:	40 0b       	sbc	r20, r16
     ec4:	51 0b       	sbc	r21, r17
     ec6:	57 fd       	sbrc	r21, 7
     ec8:	08 c0       	rjmp	.+16     	; 0xeda <_fpadd_parts+0x1d4>
     eca:	11 82       	std	Z+1, r1	; 0x01
     ecc:	33 82       	std	Z+3, r3	; 0x03
     ece:	22 82       	std	Z+2, r2	; 0x02
     ed0:	24 83       	std	Z+4, r18	; 0x04
     ed2:	35 83       	std	Z+5, r19	; 0x05
     ed4:	46 83       	std	Z+6, r20	; 0x06
     ed6:	57 83       	std	Z+7, r21	; 0x07
     ed8:	1d c0       	rjmp	.+58     	; 0xf14 <_fpadd_parts+0x20e>
     eda:	81 e0       	ldi	r24, 0x01	; 1
     edc:	81 83       	std	Z+1, r24	; 0x01
     ede:	33 82       	std	Z+3, r3	; 0x03
     ee0:	22 82       	std	Z+2, r2	; 0x02
     ee2:	88 27       	eor	r24, r24
     ee4:	99 27       	eor	r25, r25
     ee6:	dc 01       	movw	r26, r24
     ee8:	82 1b       	sub	r24, r18
     eea:	93 0b       	sbc	r25, r19
     eec:	a4 0b       	sbc	r26, r20
     eee:	b5 0b       	sbc	r27, r21
     ef0:	84 83       	std	Z+4, r24	; 0x04
     ef2:	95 83       	std	Z+5, r25	; 0x05
     ef4:	a6 83       	std	Z+6, r26	; 0x06
     ef6:	b7 83       	std	Z+7, r27	; 0x07
     ef8:	0d c0       	rjmp	.+26     	; 0xf14 <_fpadd_parts+0x20e>
     efa:	22 0f       	add	r18, r18
     efc:	33 1f       	adc	r19, r19
     efe:	44 1f       	adc	r20, r20
     f00:	55 1f       	adc	r21, r21
     f02:	24 83       	std	Z+4, r18	; 0x04
     f04:	35 83       	std	Z+5, r19	; 0x05
     f06:	46 83       	std	Z+6, r20	; 0x06
     f08:	57 83       	std	Z+7, r21	; 0x07
     f0a:	82 81       	ldd	r24, Z+2	; 0x02
     f0c:	93 81       	ldd	r25, Z+3	; 0x03
     f0e:	01 97       	sbiw	r24, 0x01	; 1
     f10:	93 83       	std	Z+3, r25	; 0x03
     f12:	82 83       	std	Z+2, r24	; 0x02
     f14:	24 81       	ldd	r18, Z+4	; 0x04
     f16:	35 81       	ldd	r19, Z+5	; 0x05
     f18:	46 81       	ldd	r20, Z+6	; 0x06
     f1a:	57 81       	ldd	r21, Z+7	; 0x07
     f1c:	da 01       	movw	r26, r20
     f1e:	c9 01       	movw	r24, r18
     f20:	01 97       	sbiw	r24, 0x01	; 1
     f22:	a1 09       	sbc	r26, r1
     f24:	b1 09       	sbc	r27, r1
     f26:	8f 5f       	subi	r24, 0xFF	; 255
     f28:	9f 4f       	sbci	r25, 0xFF	; 255
     f2a:	af 4f       	sbci	r26, 0xFF	; 255
     f2c:	bf 43       	sbci	r27, 0x3F	; 63
     f2e:	28 f3       	brcs	.-54     	; 0xefa <_fpadd_parts+0x1f4>
     f30:	0b c0       	rjmp	.+22     	; 0xf48 <_fpadd_parts+0x242>
     f32:	91 83       	std	Z+1, r25	; 0x01
     f34:	33 82       	std	Z+3, r3	; 0x03
     f36:	22 82       	std	Z+2, r2	; 0x02
     f38:	ea 0c       	add	r14, r10
     f3a:	fb 1c       	adc	r15, r11
     f3c:	0c 1d       	adc	r16, r12
     f3e:	1d 1d       	adc	r17, r13
     f40:	e4 82       	std	Z+4, r14	; 0x04
     f42:	f5 82       	std	Z+5, r15	; 0x05
     f44:	06 83       	std	Z+6, r16	; 0x06
     f46:	17 83       	std	Z+7, r17	; 0x07
     f48:	83 e0       	ldi	r24, 0x03	; 3
     f4a:	80 83       	st	Z, r24
     f4c:	24 81       	ldd	r18, Z+4	; 0x04
     f4e:	35 81       	ldd	r19, Z+5	; 0x05
     f50:	46 81       	ldd	r20, Z+6	; 0x06
     f52:	57 81       	ldd	r21, Z+7	; 0x07
     f54:	57 ff       	sbrs	r21, 7
     f56:	1a c0       	rjmp	.+52     	; 0xf8c <_fpadd_parts+0x286>
     f58:	c9 01       	movw	r24, r18
     f5a:	aa 27       	eor	r26, r26
     f5c:	97 fd       	sbrc	r25, 7
     f5e:	a0 95       	com	r26
     f60:	ba 2f       	mov	r27, r26
     f62:	81 70       	andi	r24, 0x01	; 1
     f64:	90 70       	andi	r25, 0x00	; 0
     f66:	a0 70       	andi	r26, 0x00	; 0
     f68:	b0 70       	andi	r27, 0x00	; 0
     f6a:	56 95       	lsr	r21
     f6c:	47 95       	ror	r20
     f6e:	37 95       	ror	r19
     f70:	27 95       	ror	r18
     f72:	82 2b       	or	r24, r18
     f74:	93 2b       	or	r25, r19
     f76:	a4 2b       	or	r26, r20
     f78:	b5 2b       	or	r27, r21
     f7a:	84 83       	std	Z+4, r24	; 0x04
     f7c:	95 83       	std	Z+5, r25	; 0x05
     f7e:	a6 83       	std	Z+6, r26	; 0x06
     f80:	b7 83       	std	Z+7, r27	; 0x07
     f82:	82 81       	ldd	r24, Z+2	; 0x02
     f84:	93 81       	ldd	r25, Z+3	; 0x03
     f86:	01 96       	adiw	r24, 0x01	; 1
     f88:	93 83       	std	Z+3, r25	; 0x03
     f8a:	82 83       	std	Z+2, r24	; 0x02
     f8c:	df 01       	movw	r26, r30
     f8e:	01 c0       	rjmp	.+2      	; 0xf92 <_fpadd_parts+0x28c>
     f90:	d2 01       	movw	r26, r4
     f92:	cd 01       	movw	r24, r26
     f94:	cd b7       	in	r28, 0x3d	; 61
     f96:	de b7       	in	r29, 0x3e	; 62
     f98:	e2 e1       	ldi	r30, 0x12	; 18
     f9a:	0c 94 63 0d 	jmp	0x1ac6	; 0x1ac6 <__epilogue_restores__>

00000f9e <__subsf3>:
     f9e:	a0 e2       	ldi	r26, 0x20	; 32
     fa0:	b0 e0       	ldi	r27, 0x00	; 0
     fa2:	e5 ed       	ldi	r30, 0xD5	; 213
     fa4:	f7 e0       	ldi	r31, 0x07	; 7
     fa6:	0c 94 53 0d 	jmp	0x1aa6	; 0x1aa6 <__prologue_saves__+0x18>
     faa:	69 83       	std	Y+1, r22	; 0x01
     fac:	7a 83       	std	Y+2, r23	; 0x02
     fae:	8b 83       	std	Y+3, r24	; 0x03
     fb0:	9c 83       	std	Y+4, r25	; 0x04
     fb2:	2d 83       	std	Y+5, r18	; 0x05
     fb4:	3e 83       	std	Y+6, r19	; 0x06
     fb6:	4f 83       	std	Y+7, r20	; 0x07
     fb8:	58 87       	std	Y+8, r21	; 0x08
     fba:	e9 e0       	ldi	r30, 0x09	; 9
     fbc:	ee 2e       	mov	r14, r30
     fbe:	f1 2c       	mov	r15, r1
     fc0:	ec 0e       	add	r14, r28
     fc2:	fd 1e       	adc	r15, r29
     fc4:	ce 01       	movw	r24, r28
     fc6:	01 96       	adiw	r24, 0x01	; 1
     fc8:	b7 01       	movw	r22, r14
     fca:	0e 94 39 0c 	call	0x1872	; 0x1872 <__unpack_f>
     fce:	8e 01       	movw	r16, r28
     fd0:	0f 5e       	subi	r16, 0xEF	; 239
     fd2:	1f 4f       	sbci	r17, 0xFF	; 255
     fd4:	ce 01       	movw	r24, r28
     fd6:	05 96       	adiw	r24, 0x05	; 5
     fd8:	b8 01       	movw	r22, r16
     fda:	0e 94 39 0c 	call	0x1872	; 0x1872 <__unpack_f>
     fde:	8a 89       	ldd	r24, Y+18	; 0x12
     fe0:	91 e0       	ldi	r25, 0x01	; 1
     fe2:	89 27       	eor	r24, r25
     fe4:	8a 8b       	std	Y+18, r24	; 0x12
     fe6:	c7 01       	movw	r24, r14
     fe8:	b8 01       	movw	r22, r16
     fea:	ae 01       	movw	r20, r28
     fec:	47 5e       	subi	r20, 0xE7	; 231
     fee:	5f 4f       	sbci	r21, 0xFF	; 255
     ff0:	0e 94 83 06 	call	0xd06	; 0xd06 <_fpadd_parts>
     ff4:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <__pack_f>
     ff8:	a0 96       	adiw	r28, 0x20	; 32
     ffa:	e6 e0       	ldi	r30, 0x06	; 6
     ffc:	0c 94 6f 0d 	jmp	0x1ade	; 0x1ade <__epilogue_restores__+0x18>

00001000 <__addsf3>:
    1000:	a0 e2       	ldi	r26, 0x20	; 32
    1002:	b0 e0       	ldi	r27, 0x00	; 0
    1004:	e6 e0       	ldi	r30, 0x06	; 6
    1006:	f8 e0       	ldi	r31, 0x08	; 8
    1008:	0c 94 53 0d 	jmp	0x1aa6	; 0x1aa6 <__prologue_saves__+0x18>
    100c:	69 83       	std	Y+1, r22	; 0x01
    100e:	7a 83       	std	Y+2, r23	; 0x02
    1010:	8b 83       	std	Y+3, r24	; 0x03
    1012:	9c 83       	std	Y+4, r25	; 0x04
    1014:	2d 83       	std	Y+5, r18	; 0x05
    1016:	3e 83       	std	Y+6, r19	; 0x06
    1018:	4f 83       	std	Y+7, r20	; 0x07
    101a:	58 87       	std	Y+8, r21	; 0x08
    101c:	f9 e0       	ldi	r31, 0x09	; 9
    101e:	ef 2e       	mov	r14, r31
    1020:	f1 2c       	mov	r15, r1
    1022:	ec 0e       	add	r14, r28
    1024:	fd 1e       	adc	r15, r29
    1026:	ce 01       	movw	r24, r28
    1028:	01 96       	adiw	r24, 0x01	; 1
    102a:	b7 01       	movw	r22, r14
    102c:	0e 94 39 0c 	call	0x1872	; 0x1872 <__unpack_f>
    1030:	8e 01       	movw	r16, r28
    1032:	0f 5e       	subi	r16, 0xEF	; 239
    1034:	1f 4f       	sbci	r17, 0xFF	; 255
    1036:	ce 01       	movw	r24, r28
    1038:	05 96       	adiw	r24, 0x05	; 5
    103a:	b8 01       	movw	r22, r16
    103c:	0e 94 39 0c 	call	0x1872	; 0x1872 <__unpack_f>
    1040:	c7 01       	movw	r24, r14
    1042:	b8 01       	movw	r22, r16
    1044:	ae 01       	movw	r20, r28
    1046:	47 5e       	subi	r20, 0xE7	; 231
    1048:	5f 4f       	sbci	r21, 0xFF	; 255
    104a:	0e 94 83 06 	call	0xd06	; 0xd06 <_fpadd_parts>
    104e:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <__pack_f>
    1052:	a0 96       	adiw	r28, 0x20	; 32
    1054:	e6 e0       	ldi	r30, 0x06	; 6
    1056:	0c 94 6f 0d 	jmp	0x1ade	; 0x1ade <__epilogue_restores__+0x18>

0000105a <__mulsf3>:
    105a:	a0 e2       	ldi	r26, 0x20	; 32
    105c:	b0 e0       	ldi	r27, 0x00	; 0
    105e:	e3 e3       	ldi	r30, 0x33	; 51
    1060:	f8 e0       	ldi	r31, 0x08	; 8
    1062:	0c 94 47 0d 	jmp	0x1a8e	; 0x1a8e <__prologue_saves__>
    1066:	69 83       	std	Y+1, r22	; 0x01
    1068:	7a 83       	std	Y+2, r23	; 0x02
    106a:	8b 83       	std	Y+3, r24	; 0x03
    106c:	9c 83       	std	Y+4, r25	; 0x04
    106e:	2d 83       	std	Y+5, r18	; 0x05
    1070:	3e 83       	std	Y+6, r19	; 0x06
    1072:	4f 83       	std	Y+7, r20	; 0x07
    1074:	58 87       	std	Y+8, r21	; 0x08
    1076:	ce 01       	movw	r24, r28
    1078:	01 96       	adiw	r24, 0x01	; 1
    107a:	be 01       	movw	r22, r28
    107c:	67 5f       	subi	r22, 0xF7	; 247
    107e:	7f 4f       	sbci	r23, 0xFF	; 255
    1080:	0e 94 39 0c 	call	0x1872	; 0x1872 <__unpack_f>
    1084:	ce 01       	movw	r24, r28
    1086:	05 96       	adiw	r24, 0x05	; 5
    1088:	be 01       	movw	r22, r28
    108a:	6f 5e       	subi	r22, 0xEF	; 239
    108c:	7f 4f       	sbci	r23, 0xFF	; 255
    108e:	0e 94 39 0c 	call	0x1872	; 0x1872 <__unpack_f>
    1092:	99 85       	ldd	r25, Y+9	; 0x09
    1094:	92 30       	cpi	r25, 0x02	; 2
    1096:	88 f0       	brcs	.+34     	; 0x10ba <__mulsf3+0x60>
    1098:	89 89       	ldd	r24, Y+17	; 0x11
    109a:	82 30       	cpi	r24, 0x02	; 2
    109c:	c8 f0       	brcs	.+50     	; 0x10d0 <__mulsf3+0x76>
    109e:	94 30       	cpi	r25, 0x04	; 4
    10a0:	19 f4       	brne	.+6      	; 0x10a8 <__mulsf3+0x4e>
    10a2:	82 30       	cpi	r24, 0x02	; 2
    10a4:	51 f4       	brne	.+20     	; 0x10ba <__mulsf3+0x60>
    10a6:	04 c0       	rjmp	.+8      	; 0x10b0 <__mulsf3+0x56>
    10a8:	84 30       	cpi	r24, 0x04	; 4
    10aa:	29 f4       	brne	.+10     	; 0x10b6 <__mulsf3+0x5c>
    10ac:	92 30       	cpi	r25, 0x02	; 2
    10ae:	81 f4       	brne	.+32     	; 0x10d0 <__mulsf3+0x76>
    10b0:	80 e0       	ldi	r24, 0x00	; 0
    10b2:	92 e0       	ldi	r25, 0x02	; 2
    10b4:	c6 c0       	rjmp	.+396    	; 0x1242 <__mulsf3+0x1e8>
    10b6:	92 30       	cpi	r25, 0x02	; 2
    10b8:	49 f4       	brne	.+18     	; 0x10cc <__mulsf3+0x72>
    10ba:	20 e0       	ldi	r18, 0x00	; 0
    10bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    10be:	8a 89       	ldd	r24, Y+18	; 0x12
    10c0:	98 13       	cpse	r25, r24
    10c2:	21 e0       	ldi	r18, 0x01	; 1
    10c4:	2a 87       	std	Y+10, r18	; 0x0a
    10c6:	ce 01       	movw	r24, r28
    10c8:	09 96       	adiw	r24, 0x09	; 9
    10ca:	bb c0       	rjmp	.+374    	; 0x1242 <__mulsf3+0x1e8>
    10cc:	82 30       	cpi	r24, 0x02	; 2
    10ce:	49 f4       	brne	.+18     	; 0x10e2 <__mulsf3+0x88>
    10d0:	20 e0       	ldi	r18, 0x00	; 0
    10d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    10d4:	8a 89       	ldd	r24, Y+18	; 0x12
    10d6:	98 13       	cpse	r25, r24
    10d8:	21 e0       	ldi	r18, 0x01	; 1
    10da:	2a 8b       	std	Y+18, r18	; 0x12
    10dc:	ce 01       	movw	r24, r28
    10de:	41 96       	adiw	r24, 0x11	; 17
    10e0:	b0 c0       	rjmp	.+352    	; 0x1242 <__mulsf3+0x1e8>
    10e2:	2d 84       	ldd	r2, Y+13	; 0x0d
    10e4:	3e 84       	ldd	r3, Y+14	; 0x0e
    10e6:	4f 84       	ldd	r4, Y+15	; 0x0f
    10e8:	58 88       	ldd	r5, Y+16	; 0x10
    10ea:	6d 88       	ldd	r6, Y+21	; 0x15
    10ec:	7e 88       	ldd	r7, Y+22	; 0x16
    10ee:	8f 88       	ldd	r8, Y+23	; 0x17
    10f0:	98 8c       	ldd	r9, Y+24	; 0x18
    10f2:	ee 24       	eor	r14, r14
    10f4:	ff 24       	eor	r15, r15
    10f6:	87 01       	movw	r16, r14
    10f8:	aa 24       	eor	r10, r10
    10fa:	bb 24       	eor	r11, r11
    10fc:	65 01       	movw	r12, r10
    10fe:	40 e0       	ldi	r20, 0x00	; 0
    1100:	50 e0       	ldi	r21, 0x00	; 0
    1102:	60 e0       	ldi	r22, 0x00	; 0
    1104:	70 e0       	ldi	r23, 0x00	; 0
    1106:	e0 e0       	ldi	r30, 0x00	; 0
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	c1 01       	movw	r24, r2
    110c:	81 70       	andi	r24, 0x01	; 1
    110e:	90 70       	andi	r25, 0x00	; 0
    1110:	89 2b       	or	r24, r25
    1112:	e9 f0       	breq	.+58     	; 0x114e <__mulsf3+0xf4>
    1114:	e6 0c       	add	r14, r6
    1116:	f7 1c       	adc	r15, r7
    1118:	08 1d       	adc	r16, r8
    111a:	19 1d       	adc	r17, r9
    111c:	9a 01       	movw	r18, r20
    111e:	ab 01       	movw	r20, r22
    1120:	2a 0d       	add	r18, r10
    1122:	3b 1d       	adc	r19, r11
    1124:	4c 1d       	adc	r20, r12
    1126:	5d 1d       	adc	r21, r13
    1128:	80 e0       	ldi	r24, 0x00	; 0
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	a0 e0       	ldi	r26, 0x00	; 0
    112e:	b0 e0       	ldi	r27, 0x00	; 0
    1130:	e6 14       	cp	r14, r6
    1132:	f7 04       	cpc	r15, r7
    1134:	08 05       	cpc	r16, r8
    1136:	19 05       	cpc	r17, r9
    1138:	20 f4       	brcc	.+8      	; 0x1142 <__mulsf3+0xe8>
    113a:	81 e0       	ldi	r24, 0x01	; 1
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	a0 e0       	ldi	r26, 0x00	; 0
    1140:	b0 e0       	ldi	r27, 0x00	; 0
    1142:	ba 01       	movw	r22, r20
    1144:	a9 01       	movw	r20, r18
    1146:	48 0f       	add	r20, r24
    1148:	59 1f       	adc	r21, r25
    114a:	6a 1f       	adc	r22, r26
    114c:	7b 1f       	adc	r23, r27
    114e:	aa 0c       	add	r10, r10
    1150:	bb 1c       	adc	r11, r11
    1152:	cc 1c       	adc	r12, r12
    1154:	dd 1c       	adc	r13, r13
    1156:	97 fe       	sbrs	r9, 7
    1158:	08 c0       	rjmp	.+16     	; 0x116a <__mulsf3+0x110>
    115a:	81 e0       	ldi	r24, 0x01	; 1
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	a0 e0       	ldi	r26, 0x00	; 0
    1160:	b0 e0       	ldi	r27, 0x00	; 0
    1162:	a8 2a       	or	r10, r24
    1164:	b9 2a       	or	r11, r25
    1166:	ca 2a       	or	r12, r26
    1168:	db 2a       	or	r13, r27
    116a:	31 96       	adiw	r30, 0x01	; 1
    116c:	e0 32       	cpi	r30, 0x20	; 32
    116e:	f1 05       	cpc	r31, r1
    1170:	49 f0       	breq	.+18     	; 0x1184 <__mulsf3+0x12a>
    1172:	66 0c       	add	r6, r6
    1174:	77 1c       	adc	r7, r7
    1176:	88 1c       	adc	r8, r8
    1178:	99 1c       	adc	r9, r9
    117a:	56 94       	lsr	r5
    117c:	47 94       	ror	r4
    117e:	37 94       	ror	r3
    1180:	27 94       	ror	r2
    1182:	c3 cf       	rjmp	.-122    	; 0x110a <__mulsf3+0xb0>
    1184:	fa 85       	ldd	r31, Y+10	; 0x0a
    1186:	ea 89       	ldd	r30, Y+18	; 0x12
    1188:	2b 89       	ldd	r18, Y+19	; 0x13
    118a:	3c 89       	ldd	r19, Y+20	; 0x14
    118c:	8b 85       	ldd	r24, Y+11	; 0x0b
    118e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1190:	28 0f       	add	r18, r24
    1192:	39 1f       	adc	r19, r25
    1194:	2e 5f       	subi	r18, 0xFE	; 254
    1196:	3f 4f       	sbci	r19, 0xFF	; 255
    1198:	17 c0       	rjmp	.+46     	; 0x11c8 <__mulsf3+0x16e>
    119a:	ca 01       	movw	r24, r20
    119c:	81 70       	andi	r24, 0x01	; 1
    119e:	90 70       	andi	r25, 0x00	; 0
    11a0:	89 2b       	or	r24, r25
    11a2:	61 f0       	breq	.+24     	; 0x11bc <__mulsf3+0x162>
    11a4:	16 95       	lsr	r17
    11a6:	07 95       	ror	r16
    11a8:	f7 94       	ror	r15
    11aa:	e7 94       	ror	r14
    11ac:	80 e0       	ldi	r24, 0x00	; 0
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	a0 e0       	ldi	r26, 0x00	; 0
    11b2:	b0 e8       	ldi	r27, 0x80	; 128
    11b4:	e8 2a       	or	r14, r24
    11b6:	f9 2a       	or	r15, r25
    11b8:	0a 2b       	or	r16, r26
    11ba:	1b 2b       	or	r17, r27
    11bc:	76 95       	lsr	r23
    11be:	67 95       	ror	r22
    11c0:	57 95       	ror	r21
    11c2:	47 95       	ror	r20
    11c4:	2f 5f       	subi	r18, 0xFF	; 255
    11c6:	3f 4f       	sbci	r19, 0xFF	; 255
    11c8:	77 fd       	sbrc	r23, 7
    11ca:	e7 cf       	rjmp	.-50     	; 0x119a <__mulsf3+0x140>
    11cc:	0c c0       	rjmp	.+24     	; 0x11e6 <__mulsf3+0x18c>
    11ce:	44 0f       	add	r20, r20
    11d0:	55 1f       	adc	r21, r21
    11d2:	66 1f       	adc	r22, r22
    11d4:	77 1f       	adc	r23, r23
    11d6:	17 fd       	sbrc	r17, 7
    11d8:	41 60       	ori	r20, 0x01	; 1
    11da:	ee 0c       	add	r14, r14
    11dc:	ff 1c       	adc	r15, r15
    11de:	00 1f       	adc	r16, r16
    11e0:	11 1f       	adc	r17, r17
    11e2:	21 50       	subi	r18, 0x01	; 1
    11e4:	30 40       	sbci	r19, 0x00	; 0
    11e6:	40 30       	cpi	r20, 0x00	; 0
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	59 07       	cpc	r21, r25
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	69 07       	cpc	r22, r25
    11f0:	90 e4       	ldi	r25, 0x40	; 64
    11f2:	79 07       	cpc	r23, r25
    11f4:	60 f3       	brcs	.-40     	; 0x11ce <__mulsf3+0x174>
    11f6:	2b 8f       	std	Y+27, r18	; 0x1b
    11f8:	3c 8f       	std	Y+28, r19	; 0x1c
    11fa:	db 01       	movw	r26, r22
    11fc:	ca 01       	movw	r24, r20
    11fe:	8f 77       	andi	r24, 0x7F	; 127
    1200:	90 70       	andi	r25, 0x00	; 0
    1202:	a0 70       	andi	r26, 0x00	; 0
    1204:	b0 70       	andi	r27, 0x00	; 0
    1206:	80 34       	cpi	r24, 0x40	; 64
    1208:	91 05       	cpc	r25, r1
    120a:	a1 05       	cpc	r26, r1
    120c:	b1 05       	cpc	r27, r1
    120e:	61 f4       	brne	.+24     	; 0x1228 <__mulsf3+0x1ce>
    1210:	47 fd       	sbrc	r20, 7
    1212:	0a c0       	rjmp	.+20     	; 0x1228 <__mulsf3+0x1ce>
    1214:	e1 14       	cp	r14, r1
    1216:	f1 04       	cpc	r15, r1
    1218:	01 05       	cpc	r16, r1
    121a:	11 05       	cpc	r17, r1
    121c:	29 f0       	breq	.+10     	; 0x1228 <__mulsf3+0x1ce>
    121e:	40 5c       	subi	r20, 0xC0	; 192
    1220:	5f 4f       	sbci	r21, 0xFF	; 255
    1222:	6f 4f       	sbci	r22, 0xFF	; 255
    1224:	7f 4f       	sbci	r23, 0xFF	; 255
    1226:	40 78       	andi	r20, 0x80	; 128
    1228:	1a 8e       	std	Y+26, r1	; 0x1a
    122a:	fe 17       	cp	r31, r30
    122c:	11 f0       	breq	.+4      	; 0x1232 <__mulsf3+0x1d8>
    122e:	81 e0       	ldi	r24, 0x01	; 1
    1230:	8a 8f       	std	Y+26, r24	; 0x1a
    1232:	4d 8f       	std	Y+29, r20	; 0x1d
    1234:	5e 8f       	std	Y+30, r21	; 0x1e
    1236:	6f 8f       	std	Y+31, r22	; 0x1f
    1238:	78 a3       	std	Y+32, r23	; 0x20
    123a:	83 e0       	ldi	r24, 0x03	; 3
    123c:	89 8f       	std	Y+25, r24	; 0x19
    123e:	ce 01       	movw	r24, r28
    1240:	49 96       	adiw	r24, 0x19	; 25
    1242:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <__pack_f>
    1246:	a0 96       	adiw	r28, 0x20	; 32
    1248:	e2 e1       	ldi	r30, 0x12	; 18
    124a:	0c 94 63 0d 	jmp	0x1ac6	; 0x1ac6 <__epilogue_restores__>

0000124e <__divsf3>:
    124e:	a8 e1       	ldi	r26, 0x18	; 24
    1250:	b0 e0       	ldi	r27, 0x00	; 0
    1252:	ed e2       	ldi	r30, 0x2D	; 45
    1254:	f9 e0       	ldi	r31, 0x09	; 9
    1256:	0c 94 4f 0d 	jmp	0x1a9e	; 0x1a9e <__prologue_saves__+0x10>
    125a:	69 83       	std	Y+1, r22	; 0x01
    125c:	7a 83       	std	Y+2, r23	; 0x02
    125e:	8b 83       	std	Y+3, r24	; 0x03
    1260:	9c 83       	std	Y+4, r25	; 0x04
    1262:	2d 83       	std	Y+5, r18	; 0x05
    1264:	3e 83       	std	Y+6, r19	; 0x06
    1266:	4f 83       	std	Y+7, r20	; 0x07
    1268:	58 87       	std	Y+8, r21	; 0x08
    126a:	b9 e0       	ldi	r27, 0x09	; 9
    126c:	eb 2e       	mov	r14, r27
    126e:	f1 2c       	mov	r15, r1
    1270:	ec 0e       	add	r14, r28
    1272:	fd 1e       	adc	r15, r29
    1274:	ce 01       	movw	r24, r28
    1276:	01 96       	adiw	r24, 0x01	; 1
    1278:	b7 01       	movw	r22, r14
    127a:	0e 94 39 0c 	call	0x1872	; 0x1872 <__unpack_f>
    127e:	8e 01       	movw	r16, r28
    1280:	0f 5e       	subi	r16, 0xEF	; 239
    1282:	1f 4f       	sbci	r17, 0xFF	; 255
    1284:	ce 01       	movw	r24, r28
    1286:	05 96       	adiw	r24, 0x05	; 5
    1288:	b8 01       	movw	r22, r16
    128a:	0e 94 39 0c 	call	0x1872	; 0x1872 <__unpack_f>
    128e:	29 85       	ldd	r18, Y+9	; 0x09
    1290:	22 30       	cpi	r18, 0x02	; 2
    1292:	08 f4       	brcc	.+2      	; 0x1296 <__divsf3+0x48>
    1294:	7e c0       	rjmp	.+252    	; 0x1392 <__divsf3+0x144>
    1296:	39 89       	ldd	r19, Y+17	; 0x11
    1298:	32 30       	cpi	r19, 0x02	; 2
    129a:	10 f4       	brcc	.+4      	; 0x12a0 <__divsf3+0x52>
    129c:	b8 01       	movw	r22, r16
    129e:	7c c0       	rjmp	.+248    	; 0x1398 <__divsf3+0x14a>
    12a0:	8a 85       	ldd	r24, Y+10	; 0x0a
    12a2:	9a 89       	ldd	r25, Y+18	; 0x12
    12a4:	89 27       	eor	r24, r25
    12a6:	8a 87       	std	Y+10, r24	; 0x0a
    12a8:	24 30       	cpi	r18, 0x04	; 4
    12aa:	11 f0       	breq	.+4      	; 0x12b0 <__divsf3+0x62>
    12ac:	22 30       	cpi	r18, 0x02	; 2
    12ae:	31 f4       	brne	.+12     	; 0x12bc <__divsf3+0x6e>
    12b0:	23 17       	cp	r18, r19
    12b2:	09 f0       	breq	.+2      	; 0x12b6 <__divsf3+0x68>
    12b4:	6e c0       	rjmp	.+220    	; 0x1392 <__divsf3+0x144>
    12b6:	60 e0       	ldi	r22, 0x00	; 0
    12b8:	72 e0       	ldi	r23, 0x02	; 2
    12ba:	6e c0       	rjmp	.+220    	; 0x1398 <__divsf3+0x14a>
    12bc:	34 30       	cpi	r19, 0x04	; 4
    12be:	39 f4       	brne	.+14     	; 0x12ce <__divsf3+0x80>
    12c0:	1d 86       	std	Y+13, r1	; 0x0d
    12c2:	1e 86       	std	Y+14, r1	; 0x0e
    12c4:	1f 86       	std	Y+15, r1	; 0x0f
    12c6:	18 8a       	std	Y+16, r1	; 0x10
    12c8:	1c 86       	std	Y+12, r1	; 0x0c
    12ca:	1b 86       	std	Y+11, r1	; 0x0b
    12cc:	04 c0       	rjmp	.+8      	; 0x12d6 <__divsf3+0x88>
    12ce:	32 30       	cpi	r19, 0x02	; 2
    12d0:	21 f4       	brne	.+8      	; 0x12da <__divsf3+0x8c>
    12d2:	84 e0       	ldi	r24, 0x04	; 4
    12d4:	89 87       	std	Y+9, r24	; 0x09
    12d6:	b7 01       	movw	r22, r14
    12d8:	5f c0       	rjmp	.+190    	; 0x1398 <__divsf3+0x14a>
    12da:	2b 85       	ldd	r18, Y+11	; 0x0b
    12dc:	3c 85       	ldd	r19, Y+12	; 0x0c
    12de:	8b 89       	ldd	r24, Y+19	; 0x13
    12e0:	9c 89       	ldd	r25, Y+20	; 0x14
    12e2:	28 1b       	sub	r18, r24
    12e4:	39 0b       	sbc	r19, r25
    12e6:	3c 87       	std	Y+12, r19	; 0x0c
    12e8:	2b 87       	std	Y+11, r18	; 0x0b
    12ea:	ed 84       	ldd	r14, Y+13	; 0x0d
    12ec:	fe 84       	ldd	r15, Y+14	; 0x0e
    12ee:	0f 85       	ldd	r16, Y+15	; 0x0f
    12f0:	18 89       	ldd	r17, Y+16	; 0x10
    12f2:	ad 88       	ldd	r10, Y+21	; 0x15
    12f4:	be 88       	ldd	r11, Y+22	; 0x16
    12f6:	cf 88       	ldd	r12, Y+23	; 0x17
    12f8:	d8 8c       	ldd	r13, Y+24	; 0x18
    12fa:	ea 14       	cp	r14, r10
    12fc:	fb 04       	cpc	r15, r11
    12fe:	0c 05       	cpc	r16, r12
    1300:	1d 05       	cpc	r17, r13
    1302:	40 f4       	brcc	.+16     	; 0x1314 <__divsf3+0xc6>
    1304:	ee 0c       	add	r14, r14
    1306:	ff 1c       	adc	r15, r15
    1308:	00 1f       	adc	r16, r16
    130a:	11 1f       	adc	r17, r17
    130c:	21 50       	subi	r18, 0x01	; 1
    130e:	30 40       	sbci	r19, 0x00	; 0
    1310:	3c 87       	std	Y+12, r19	; 0x0c
    1312:	2b 87       	std	Y+11, r18	; 0x0b
    1314:	20 e0       	ldi	r18, 0x00	; 0
    1316:	30 e0       	ldi	r19, 0x00	; 0
    1318:	40 e0       	ldi	r20, 0x00	; 0
    131a:	50 e0       	ldi	r21, 0x00	; 0
    131c:	80 e0       	ldi	r24, 0x00	; 0
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	a0 e0       	ldi	r26, 0x00	; 0
    1322:	b0 e4       	ldi	r27, 0x40	; 64
    1324:	60 e0       	ldi	r22, 0x00	; 0
    1326:	70 e0       	ldi	r23, 0x00	; 0
    1328:	ea 14       	cp	r14, r10
    132a:	fb 04       	cpc	r15, r11
    132c:	0c 05       	cpc	r16, r12
    132e:	1d 05       	cpc	r17, r13
    1330:	40 f0       	brcs	.+16     	; 0x1342 <__divsf3+0xf4>
    1332:	28 2b       	or	r18, r24
    1334:	39 2b       	or	r19, r25
    1336:	4a 2b       	or	r20, r26
    1338:	5b 2b       	or	r21, r27
    133a:	ea 18       	sub	r14, r10
    133c:	fb 08       	sbc	r15, r11
    133e:	0c 09       	sbc	r16, r12
    1340:	1d 09       	sbc	r17, r13
    1342:	b6 95       	lsr	r27
    1344:	a7 95       	ror	r26
    1346:	97 95       	ror	r25
    1348:	87 95       	ror	r24
    134a:	ee 0c       	add	r14, r14
    134c:	ff 1c       	adc	r15, r15
    134e:	00 1f       	adc	r16, r16
    1350:	11 1f       	adc	r17, r17
    1352:	6f 5f       	subi	r22, 0xFF	; 255
    1354:	7f 4f       	sbci	r23, 0xFF	; 255
    1356:	6f 31       	cpi	r22, 0x1F	; 31
    1358:	71 05       	cpc	r23, r1
    135a:	31 f7       	brne	.-52     	; 0x1328 <__divsf3+0xda>
    135c:	da 01       	movw	r26, r20
    135e:	c9 01       	movw	r24, r18
    1360:	8f 77       	andi	r24, 0x7F	; 127
    1362:	90 70       	andi	r25, 0x00	; 0
    1364:	a0 70       	andi	r26, 0x00	; 0
    1366:	b0 70       	andi	r27, 0x00	; 0
    1368:	80 34       	cpi	r24, 0x40	; 64
    136a:	91 05       	cpc	r25, r1
    136c:	a1 05       	cpc	r26, r1
    136e:	b1 05       	cpc	r27, r1
    1370:	61 f4       	brne	.+24     	; 0x138a <__divsf3+0x13c>
    1372:	27 fd       	sbrc	r18, 7
    1374:	0a c0       	rjmp	.+20     	; 0x138a <__divsf3+0x13c>
    1376:	e1 14       	cp	r14, r1
    1378:	f1 04       	cpc	r15, r1
    137a:	01 05       	cpc	r16, r1
    137c:	11 05       	cpc	r17, r1
    137e:	29 f0       	breq	.+10     	; 0x138a <__divsf3+0x13c>
    1380:	20 5c       	subi	r18, 0xC0	; 192
    1382:	3f 4f       	sbci	r19, 0xFF	; 255
    1384:	4f 4f       	sbci	r20, 0xFF	; 255
    1386:	5f 4f       	sbci	r21, 0xFF	; 255
    1388:	20 78       	andi	r18, 0x80	; 128
    138a:	2d 87       	std	Y+13, r18	; 0x0d
    138c:	3e 87       	std	Y+14, r19	; 0x0e
    138e:	4f 87       	std	Y+15, r20	; 0x0f
    1390:	58 8b       	std	Y+16, r21	; 0x10
    1392:	be 01       	movw	r22, r28
    1394:	67 5f       	subi	r22, 0xF7	; 247
    1396:	7f 4f       	sbci	r23, 0xFF	; 255
    1398:	cb 01       	movw	r24, r22
    139a:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <__pack_f>
    139e:	68 96       	adiw	r28, 0x18	; 24
    13a0:	ea e0       	ldi	r30, 0x0A	; 10
    13a2:	0c 94 6b 0d 	jmp	0x1ad6	; 0x1ad6 <__epilogue_restores__+0x10>

000013a6 <__gtsf2>:
    13a6:	a8 e1       	ldi	r26, 0x18	; 24
    13a8:	b0 e0       	ldi	r27, 0x00	; 0
    13aa:	e9 ed       	ldi	r30, 0xD9	; 217
    13ac:	f9 e0       	ldi	r31, 0x09	; 9
    13ae:	0c 94 53 0d 	jmp	0x1aa6	; 0x1aa6 <__prologue_saves__+0x18>
    13b2:	69 83       	std	Y+1, r22	; 0x01
    13b4:	7a 83       	std	Y+2, r23	; 0x02
    13b6:	8b 83       	std	Y+3, r24	; 0x03
    13b8:	9c 83       	std	Y+4, r25	; 0x04
    13ba:	2d 83       	std	Y+5, r18	; 0x05
    13bc:	3e 83       	std	Y+6, r19	; 0x06
    13be:	4f 83       	std	Y+7, r20	; 0x07
    13c0:	58 87       	std	Y+8, r21	; 0x08
    13c2:	89 e0       	ldi	r24, 0x09	; 9
    13c4:	e8 2e       	mov	r14, r24
    13c6:	f1 2c       	mov	r15, r1
    13c8:	ec 0e       	add	r14, r28
    13ca:	fd 1e       	adc	r15, r29
    13cc:	ce 01       	movw	r24, r28
    13ce:	01 96       	adiw	r24, 0x01	; 1
    13d0:	b7 01       	movw	r22, r14
    13d2:	0e 94 39 0c 	call	0x1872	; 0x1872 <__unpack_f>
    13d6:	8e 01       	movw	r16, r28
    13d8:	0f 5e       	subi	r16, 0xEF	; 239
    13da:	1f 4f       	sbci	r17, 0xFF	; 255
    13dc:	ce 01       	movw	r24, r28
    13de:	05 96       	adiw	r24, 0x05	; 5
    13e0:	b8 01       	movw	r22, r16
    13e2:	0e 94 39 0c 	call	0x1872	; 0x1872 <__unpack_f>
    13e6:	89 85       	ldd	r24, Y+9	; 0x09
    13e8:	82 30       	cpi	r24, 0x02	; 2
    13ea:	40 f0       	brcs	.+16     	; 0x13fc <__gtsf2+0x56>
    13ec:	89 89       	ldd	r24, Y+17	; 0x11
    13ee:	82 30       	cpi	r24, 0x02	; 2
    13f0:	28 f0       	brcs	.+10     	; 0x13fc <__gtsf2+0x56>
    13f2:	c7 01       	movw	r24, r14
    13f4:	b8 01       	movw	r22, r16
    13f6:	0e 94 b1 0c 	call	0x1962	; 0x1962 <__fpcmp_parts_f>
    13fa:	01 c0       	rjmp	.+2      	; 0x13fe <__gtsf2+0x58>
    13fc:	8f ef       	ldi	r24, 0xFF	; 255
    13fe:	68 96       	adiw	r28, 0x18	; 24
    1400:	e6 e0       	ldi	r30, 0x06	; 6
    1402:	0c 94 6f 0d 	jmp	0x1ade	; 0x1ade <__epilogue_restores__+0x18>

00001406 <__gesf2>:
    1406:	a8 e1       	ldi	r26, 0x18	; 24
    1408:	b0 e0       	ldi	r27, 0x00	; 0
    140a:	e9 e0       	ldi	r30, 0x09	; 9
    140c:	fa e0       	ldi	r31, 0x0A	; 10
    140e:	0c 94 53 0d 	jmp	0x1aa6	; 0x1aa6 <__prologue_saves__+0x18>
    1412:	69 83       	std	Y+1, r22	; 0x01
    1414:	7a 83       	std	Y+2, r23	; 0x02
    1416:	8b 83       	std	Y+3, r24	; 0x03
    1418:	9c 83       	std	Y+4, r25	; 0x04
    141a:	2d 83       	std	Y+5, r18	; 0x05
    141c:	3e 83       	std	Y+6, r19	; 0x06
    141e:	4f 83       	std	Y+7, r20	; 0x07
    1420:	58 87       	std	Y+8, r21	; 0x08
    1422:	89 e0       	ldi	r24, 0x09	; 9
    1424:	e8 2e       	mov	r14, r24
    1426:	f1 2c       	mov	r15, r1
    1428:	ec 0e       	add	r14, r28
    142a:	fd 1e       	adc	r15, r29
    142c:	ce 01       	movw	r24, r28
    142e:	01 96       	adiw	r24, 0x01	; 1
    1430:	b7 01       	movw	r22, r14
    1432:	0e 94 39 0c 	call	0x1872	; 0x1872 <__unpack_f>
    1436:	8e 01       	movw	r16, r28
    1438:	0f 5e       	subi	r16, 0xEF	; 239
    143a:	1f 4f       	sbci	r17, 0xFF	; 255
    143c:	ce 01       	movw	r24, r28
    143e:	05 96       	adiw	r24, 0x05	; 5
    1440:	b8 01       	movw	r22, r16
    1442:	0e 94 39 0c 	call	0x1872	; 0x1872 <__unpack_f>
    1446:	89 85       	ldd	r24, Y+9	; 0x09
    1448:	82 30       	cpi	r24, 0x02	; 2
    144a:	40 f0       	brcs	.+16     	; 0x145c <__gesf2+0x56>
    144c:	89 89       	ldd	r24, Y+17	; 0x11
    144e:	82 30       	cpi	r24, 0x02	; 2
    1450:	28 f0       	brcs	.+10     	; 0x145c <__gesf2+0x56>
    1452:	c7 01       	movw	r24, r14
    1454:	b8 01       	movw	r22, r16
    1456:	0e 94 b1 0c 	call	0x1962	; 0x1962 <__fpcmp_parts_f>
    145a:	01 c0       	rjmp	.+2      	; 0x145e <__gesf2+0x58>
    145c:	8f ef       	ldi	r24, 0xFF	; 255
    145e:	68 96       	adiw	r28, 0x18	; 24
    1460:	e6 e0       	ldi	r30, 0x06	; 6
    1462:	0c 94 6f 0d 	jmp	0x1ade	; 0x1ade <__epilogue_restores__+0x18>

00001466 <__ltsf2>:
    1466:	a8 e1       	ldi	r26, 0x18	; 24
    1468:	b0 e0       	ldi	r27, 0x00	; 0
    146a:	e9 e3       	ldi	r30, 0x39	; 57
    146c:	fa e0       	ldi	r31, 0x0A	; 10
    146e:	0c 94 53 0d 	jmp	0x1aa6	; 0x1aa6 <__prologue_saves__+0x18>
    1472:	69 83       	std	Y+1, r22	; 0x01
    1474:	7a 83       	std	Y+2, r23	; 0x02
    1476:	8b 83       	std	Y+3, r24	; 0x03
    1478:	9c 83       	std	Y+4, r25	; 0x04
    147a:	2d 83       	std	Y+5, r18	; 0x05
    147c:	3e 83       	std	Y+6, r19	; 0x06
    147e:	4f 83       	std	Y+7, r20	; 0x07
    1480:	58 87       	std	Y+8, r21	; 0x08
    1482:	89 e0       	ldi	r24, 0x09	; 9
    1484:	e8 2e       	mov	r14, r24
    1486:	f1 2c       	mov	r15, r1
    1488:	ec 0e       	add	r14, r28
    148a:	fd 1e       	adc	r15, r29
    148c:	ce 01       	movw	r24, r28
    148e:	01 96       	adiw	r24, 0x01	; 1
    1490:	b7 01       	movw	r22, r14
    1492:	0e 94 39 0c 	call	0x1872	; 0x1872 <__unpack_f>
    1496:	8e 01       	movw	r16, r28
    1498:	0f 5e       	subi	r16, 0xEF	; 239
    149a:	1f 4f       	sbci	r17, 0xFF	; 255
    149c:	ce 01       	movw	r24, r28
    149e:	05 96       	adiw	r24, 0x05	; 5
    14a0:	b8 01       	movw	r22, r16
    14a2:	0e 94 39 0c 	call	0x1872	; 0x1872 <__unpack_f>
    14a6:	89 85       	ldd	r24, Y+9	; 0x09
    14a8:	82 30       	cpi	r24, 0x02	; 2
    14aa:	40 f0       	brcs	.+16     	; 0x14bc <__ltsf2+0x56>
    14ac:	89 89       	ldd	r24, Y+17	; 0x11
    14ae:	82 30       	cpi	r24, 0x02	; 2
    14b0:	28 f0       	brcs	.+10     	; 0x14bc <__ltsf2+0x56>
    14b2:	c7 01       	movw	r24, r14
    14b4:	b8 01       	movw	r22, r16
    14b6:	0e 94 b1 0c 	call	0x1962	; 0x1962 <__fpcmp_parts_f>
    14ba:	01 c0       	rjmp	.+2      	; 0x14be <__ltsf2+0x58>
    14bc:	81 e0       	ldi	r24, 0x01	; 1
    14be:	68 96       	adiw	r28, 0x18	; 24
    14c0:	e6 e0       	ldi	r30, 0x06	; 6
    14c2:	0c 94 6f 0d 	jmp	0x1ade	; 0x1ade <__epilogue_restores__+0x18>

000014c6 <__floatsisf>:
    14c6:	a8 e0       	ldi	r26, 0x08	; 8
    14c8:	b0 e0       	ldi	r27, 0x00	; 0
    14ca:	e9 e6       	ldi	r30, 0x69	; 105
    14cc:	fa e0       	ldi	r31, 0x0A	; 10
    14ce:	0c 94 50 0d 	jmp	0x1aa0	; 0x1aa0 <__prologue_saves__+0x12>
    14d2:	9b 01       	movw	r18, r22
    14d4:	ac 01       	movw	r20, r24
    14d6:	83 e0       	ldi	r24, 0x03	; 3
    14d8:	89 83       	std	Y+1, r24	; 0x01
    14da:	da 01       	movw	r26, r20
    14dc:	c9 01       	movw	r24, r18
    14de:	88 27       	eor	r24, r24
    14e0:	b7 fd       	sbrc	r27, 7
    14e2:	83 95       	inc	r24
    14e4:	99 27       	eor	r25, r25
    14e6:	aa 27       	eor	r26, r26
    14e8:	bb 27       	eor	r27, r27
    14ea:	b8 2e       	mov	r11, r24
    14ec:	21 15       	cp	r18, r1
    14ee:	31 05       	cpc	r19, r1
    14f0:	41 05       	cpc	r20, r1
    14f2:	51 05       	cpc	r21, r1
    14f4:	19 f4       	brne	.+6      	; 0x14fc <__floatsisf+0x36>
    14f6:	82 e0       	ldi	r24, 0x02	; 2
    14f8:	89 83       	std	Y+1, r24	; 0x01
    14fa:	3a c0       	rjmp	.+116    	; 0x1570 <__floatsisf+0xaa>
    14fc:	88 23       	and	r24, r24
    14fe:	a9 f0       	breq	.+42     	; 0x152a <__floatsisf+0x64>
    1500:	20 30       	cpi	r18, 0x00	; 0
    1502:	80 e0       	ldi	r24, 0x00	; 0
    1504:	38 07       	cpc	r19, r24
    1506:	80 e0       	ldi	r24, 0x00	; 0
    1508:	48 07       	cpc	r20, r24
    150a:	80 e8       	ldi	r24, 0x80	; 128
    150c:	58 07       	cpc	r21, r24
    150e:	29 f4       	brne	.+10     	; 0x151a <__floatsisf+0x54>
    1510:	60 e0       	ldi	r22, 0x00	; 0
    1512:	70 e0       	ldi	r23, 0x00	; 0
    1514:	80 e0       	ldi	r24, 0x00	; 0
    1516:	9f ec       	ldi	r25, 0xCF	; 207
    1518:	30 c0       	rjmp	.+96     	; 0x157a <__floatsisf+0xb4>
    151a:	ee 24       	eor	r14, r14
    151c:	ff 24       	eor	r15, r15
    151e:	87 01       	movw	r16, r14
    1520:	e2 1a       	sub	r14, r18
    1522:	f3 0a       	sbc	r15, r19
    1524:	04 0b       	sbc	r16, r20
    1526:	15 0b       	sbc	r17, r21
    1528:	02 c0       	rjmp	.+4      	; 0x152e <__floatsisf+0x68>
    152a:	79 01       	movw	r14, r18
    152c:	8a 01       	movw	r16, r20
    152e:	8e e1       	ldi	r24, 0x1E	; 30
    1530:	c8 2e       	mov	r12, r24
    1532:	d1 2c       	mov	r13, r1
    1534:	dc 82       	std	Y+4, r13	; 0x04
    1536:	cb 82       	std	Y+3, r12	; 0x03
    1538:	ed 82       	std	Y+5, r14	; 0x05
    153a:	fe 82       	std	Y+6, r15	; 0x06
    153c:	0f 83       	std	Y+7, r16	; 0x07
    153e:	18 87       	std	Y+8, r17	; 0x08
    1540:	c8 01       	movw	r24, r16
    1542:	b7 01       	movw	r22, r14
    1544:	0e 94 15 0b 	call	0x162a	; 0x162a <__clzsi2>
    1548:	01 97       	sbiw	r24, 0x01	; 1
    154a:	18 16       	cp	r1, r24
    154c:	19 06       	cpc	r1, r25
    154e:	84 f4       	brge	.+32     	; 0x1570 <__floatsisf+0xaa>
    1550:	08 2e       	mov	r0, r24
    1552:	04 c0       	rjmp	.+8      	; 0x155c <__floatsisf+0x96>
    1554:	ee 0c       	add	r14, r14
    1556:	ff 1c       	adc	r15, r15
    1558:	00 1f       	adc	r16, r16
    155a:	11 1f       	adc	r17, r17
    155c:	0a 94       	dec	r0
    155e:	d2 f7       	brpl	.-12     	; 0x1554 <__floatsisf+0x8e>
    1560:	ed 82       	std	Y+5, r14	; 0x05
    1562:	fe 82       	std	Y+6, r15	; 0x06
    1564:	0f 83       	std	Y+7, r16	; 0x07
    1566:	18 87       	std	Y+8, r17	; 0x08
    1568:	c8 1a       	sub	r12, r24
    156a:	d9 0a       	sbc	r13, r25
    156c:	dc 82       	std	Y+4, r13	; 0x04
    156e:	cb 82       	std	Y+3, r12	; 0x03
    1570:	ba 82       	std	Y+2, r11	; 0x02
    1572:	ce 01       	movw	r24, r28
    1574:	01 96       	adiw	r24, 0x01	; 1
    1576:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <__pack_f>
    157a:	28 96       	adiw	r28, 0x08	; 8
    157c:	e9 e0       	ldi	r30, 0x09	; 9
    157e:	0c 94 6c 0d 	jmp	0x1ad8	; 0x1ad8 <__epilogue_restores__+0x12>

00001582 <__fixsfsi>:
    1582:	ac e0       	ldi	r26, 0x0C	; 12
    1584:	b0 e0       	ldi	r27, 0x00	; 0
    1586:	e7 ec       	ldi	r30, 0xC7	; 199
    1588:	fa e0       	ldi	r31, 0x0A	; 10
    158a:	0c 94 57 0d 	jmp	0x1aae	; 0x1aae <__prologue_saves__+0x20>
    158e:	69 83       	std	Y+1, r22	; 0x01
    1590:	7a 83       	std	Y+2, r23	; 0x02
    1592:	8b 83       	std	Y+3, r24	; 0x03
    1594:	9c 83       	std	Y+4, r25	; 0x04
    1596:	ce 01       	movw	r24, r28
    1598:	01 96       	adiw	r24, 0x01	; 1
    159a:	be 01       	movw	r22, r28
    159c:	6b 5f       	subi	r22, 0xFB	; 251
    159e:	7f 4f       	sbci	r23, 0xFF	; 255
    15a0:	0e 94 39 0c 	call	0x1872	; 0x1872 <__unpack_f>
    15a4:	8d 81       	ldd	r24, Y+5	; 0x05
    15a6:	82 30       	cpi	r24, 0x02	; 2
    15a8:	61 f1       	breq	.+88     	; 0x1602 <__fixsfsi+0x80>
    15aa:	82 30       	cpi	r24, 0x02	; 2
    15ac:	50 f1       	brcs	.+84     	; 0x1602 <__fixsfsi+0x80>
    15ae:	84 30       	cpi	r24, 0x04	; 4
    15b0:	21 f4       	brne	.+8      	; 0x15ba <__fixsfsi+0x38>
    15b2:	8e 81       	ldd	r24, Y+6	; 0x06
    15b4:	88 23       	and	r24, r24
    15b6:	51 f1       	breq	.+84     	; 0x160c <__fixsfsi+0x8a>
    15b8:	2e c0       	rjmp	.+92     	; 0x1616 <__fixsfsi+0x94>
    15ba:	2f 81       	ldd	r18, Y+7	; 0x07
    15bc:	38 85       	ldd	r19, Y+8	; 0x08
    15be:	37 fd       	sbrc	r19, 7
    15c0:	20 c0       	rjmp	.+64     	; 0x1602 <__fixsfsi+0x80>
    15c2:	6e 81       	ldd	r22, Y+6	; 0x06
    15c4:	2f 31       	cpi	r18, 0x1F	; 31
    15c6:	31 05       	cpc	r19, r1
    15c8:	1c f0       	brlt	.+6      	; 0x15d0 <__fixsfsi+0x4e>
    15ca:	66 23       	and	r22, r22
    15cc:	f9 f0       	breq	.+62     	; 0x160c <__fixsfsi+0x8a>
    15ce:	23 c0       	rjmp	.+70     	; 0x1616 <__fixsfsi+0x94>
    15d0:	8e e1       	ldi	r24, 0x1E	; 30
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	82 1b       	sub	r24, r18
    15d6:	93 0b       	sbc	r25, r19
    15d8:	29 85       	ldd	r18, Y+9	; 0x09
    15da:	3a 85       	ldd	r19, Y+10	; 0x0a
    15dc:	4b 85       	ldd	r20, Y+11	; 0x0b
    15de:	5c 85       	ldd	r21, Y+12	; 0x0c
    15e0:	04 c0       	rjmp	.+8      	; 0x15ea <__fixsfsi+0x68>
    15e2:	56 95       	lsr	r21
    15e4:	47 95       	ror	r20
    15e6:	37 95       	ror	r19
    15e8:	27 95       	ror	r18
    15ea:	8a 95       	dec	r24
    15ec:	d2 f7       	brpl	.-12     	; 0x15e2 <__fixsfsi+0x60>
    15ee:	66 23       	and	r22, r22
    15f0:	b1 f0       	breq	.+44     	; 0x161e <__fixsfsi+0x9c>
    15f2:	50 95       	com	r21
    15f4:	40 95       	com	r20
    15f6:	30 95       	com	r19
    15f8:	21 95       	neg	r18
    15fa:	3f 4f       	sbci	r19, 0xFF	; 255
    15fc:	4f 4f       	sbci	r20, 0xFF	; 255
    15fe:	5f 4f       	sbci	r21, 0xFF	; 255
    1600:	0e c0       	rjmp	.+28     	; 0x161e <__fixsfsi+0x9c>
    1602:	20 e0       	ldi	r18, 0x00	; 0
    1604:	30 e0       	ldi	r19, 0x00	; 0
    1606:	40 e0       	ldi	r20, 0x00	; 0
    1608:	50 e0       	ldi	r21, 0x00	; 0
    160a:	09 c0       	rjmp	.+18     	; 0x161e <__fixsfsi+0x9c>
    160c:	2f ef       	ldi	r18, 0xFF	; 255
    160e:	3f ef       	ldi	r19, 0xFF	; 255
    1610:	4f ef       	ldi	r20, 0xFF	; 255
    1612:	5f e7       	ldi	r21, 0x7F	; 127
    1614:	04 c0       	rjmp	.+8      	; 0x161e <__fixsfsi+0x9c>
    1616:	20 e0       	ldi	r18, 0x00	; 0
    1618:	30 e0       	ldi	r19, 0x00	; 0
    161a:	40 e0       	ldi	r20, 0x00	; 0
    161c:	50 e8       	ldi	r21, 0x80	; 128
    161e:	b9 01       	movw	r22, r18
    1620:	ca 01       	movw	r24, r20
    1622:	2c 96       	adiw	r28, 0x0c	; 12
    1624:	e2 e0       	ldi	r30, 0x02	; 2
    1626:	0c 94 73 0d 	jmp	0x1ae6	; 0x1ae6 <__epilogue_restores__+0x20>

0000162a <__clzsi2>:
    162a:	ef 92       	push	r14
    162c:	ff 92       	push	r15
    162e:	0f 93       	push	r16
    1630:	1f 93       	push	r17
    1632:	7b 01       	movw	r14, r22
    1634:	8c 01       	movw	r16, r24
    1636:	80 e0       	ldi	r24, 0x00	; 0
    1638:	e8 16       	cp	r14, r24
    163a:	80 e0       	ldi	r24, 0x00	; 0
    163c:	f8 06       	cpc	r15, r24
    163e:	81 e0       	ldi	r24, 0x01	; 1
    1640:	08 07       	cpc	r16, r24
    1642:	80 e0       	ldi	r24, 0x00	; 0
    1644:	18 07       	cpc	r17, r24
    1646:	88 f4       	brcc	.+34     	; 0x166a <__clzsi2+0x40>
    1648:	8f ef       	ldi	r24, 0xFF	; 255
    164a:	e8 16       	cp	r14, r24
    164c:	f1 04       	cpc	r15, r1
    164e:	01 05       	cpc	r16, r1
    1650:	11 05       	cpc	r17, r1
    1652:	31 f0       	breq	.+12     	; 0x1660 <__clzsi2+0x36>
    1654:	28 f0       	brcs	.+10     	; 0x1660 <__clzsi2+0x36>
    1656:	88 e0       	ldi	r24, 0x08	; 8
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	a0 e0       	ldi	r26, 0x00	; 0
    165c:	b0 e0       	ldi	r27, 0x00	; 0
    165e:	17 c0       	rjmp	.+46     	; 0x168e <__clzsi2+0x64>
    1660:	80 e0       	ldi	r24, 0x00	; 0
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	a0 e0       	ldi	r26, 0x00	; 0
    1666:	b0 e0       	ldi	r27, 0x00	; 0
    1668:	12 c0       	rjmp	.+36     	; 0x168e <__clzsi2+0x64>
    166a:	80 e0       	ldi	r24, 0x00	; 0
    166c:	e8 16       	cp	r14, r24
    166e:	80 e0       	ldi	r24, 0x00	; 0
    1670:	f8 06       	cpc	r15, r24
    1672:	80 e0       	ldi	r24, 0x00	; 0
    1674:	08 07       	cpc	r16, r24
    1676:	81 e0       	ldi	r24, 0x01	; 1
    1678:	18 07       	cpc	r17, r24
    167a:	28 f0       	brcs	.+10     	; 0x1686 <__clzsi2+0x5c>
    167c:	88 e1       	ldi	r24, 0x18	; 24
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	a0 e0       	ldi	r26, 0x00	; 0
    1682:	b0 e0       	ldi	r27, 0x00	; 0
    1684:	04 c0       	rjmp	.+8      	; 0x168e <__clzsi2+0x64>
    1686:	80 e1       	ldi	r24, 0x10	; 16
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	a0 e0       	ldi	r26, 0x00	; 0
    168c:	b0 e0       	ldi	r27, 0x00	; 0
    168e:	20 e2       	ldi	r18, 0x20	; 32
    1690:	30 e0       	ldi	r19, 0x00	; 0
    1692:	40 e0       	ldi	r20, 0x00	; 0
    1694:	50 e0       	ldi	r21, 0x00	; 0
    1696:	28 1b       	sub	r18, r24
    1698:	39 0b       	sbc	r19, r25
    169a:	4a 0b       	sbc	r20, r26
    169c:	5b 0b       	sbc	r21, r27
    169e:	04 c0       	rjmp	.+8      	; 0x16a8 <__clzsi2+0x7e>
    16a0:	16 95       	lsr	r17
    16a2:	07 95       	ror	r16
    16a4:	f7 94       	ror	r15
    16a6:	e7 94       	ror	r14
    16a8:	8a 95       	dec	r24
    16aa:	d2 f7       	brpl	.-12     	; 0x16a0 <__clzsi2+0x76>
    16ac:	f7 01       	movw	r30, r14
    16ae:	e8 5f       	subi	r30, 0xF8	; 248
    16b0:	fd 4f       	sbci	r31, 0xFD	; 253
    16b2:	80 81       	ld	r24, Z
    16b4:	28 1b       	sub	r18, r24
    16b6:	31 09       	sbc	r19, r1
    16b8:	41 09       	sbc	r20, r1
    16ba:	51 09       	sbc	r21, r1
    16bc:	c9 01       	movw	r24, r18
    16be:	1f 91       	pop	r17
    16c0:	0f 91       	pop	r16
    16c2:	ff 90       	pop	r15
    16c4:	ef 90       	pop	r14
    16c6:	08 95       	ret

000016c8 <__pack_f>:
    16c8:	df 92       	push	r13
    16ca:	ef 92       	push	r14
    16cc:	ff 92       	push	r15
    16ce:	0f 93       	push	r16
    16d0:	1f 93       	push	r17
    16d2:	fc 01       	movw	r30, r24
    16d4:	e4 80       	ldd	r14, Z+4	; 0x04
    16d6:	f5 80       	ldd	r15, Z+5	; 0x05
    16d8:	06 81       	ldd	r16, Z+6	; 0x06
    16da:	17 81       	ldd	r17, Z+7	; 0x07
    16dc:	d1 80       	ldd	r13, Z+1	; 0x01
    16de:	80 81       	ld	r24, Z
    16e0:	82 30       	cpi	r24, 0x02	; 2
    16e2:	48 f4       	brcc	.+18     	; 0x16f6 <__pack_f+0x2e>
    16e4:	80 e0       	ldi	r24, 0x00	; 0
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	a0 e1       	ldi	r26, 0x10	; 16
    16ea:	b0 e0       	ldi	r27, 0x00	; 0
    16ec:	e8 2a       	or	r14, r24
    16ee:	f9 2a       	or	r15, r25
    16f0:	0a 2b       	or	r16, r26
    16f2:	1b 2b       	or	r17, r27
    16f4:	a5 c0       	rjmp	.+330    	; 0x1840 <__pack_f+0x178>
    16f6:	84 30       	cpi	r24, 0x04	; 4
    16f8:	09 f4       	brne	.+2      	; 0x16fc <__pack_f+0x34>
    16fa:	9f c0       	rjmp	.+318    	; 0x183a <__pack_f+0x172>
    16fc:	82 30       	cpi	r24, 0x02	; 2
    16fe:	21 f4       	brne	.+8      	; 0x1708 <__pack_f+0x40>
    1700:	ee 24       	eor	r14, r14
    1702:	ff 24       	eor	r15, r15
    1704:	87 01       	movw	r16, r14
    1706:	05 c0       	rjmp	.+10     	; 0x1712 <__pack_f+0x4a>
    1708:	e1 14       	cp	r14, r1
    170a:	f1 04       	cpc	r15, r1
    170c:	01 05       	cpc	r16, r1
    170e:	11 05       	cpc	r17, r1
    1710:	19 f4       	brne	.+6      	; 0x1718 <__pack_f+0x50>
    1712:	e0 e0       	ldi	r30, 0x00	; 0
    1714:	f0 e0       	ldi	r31, 0x00	; 0
    1716:	96 c0       	rjmp	.+300    	; 0x1844 <__pack_f+0x17c>
    1718:	62 81       	ldd	r22, Z+2	; 0x02
    171a:	73 81       	ldd	r23, Z+3	; 0x03
    171c:	9f ef       	ldi	r25, 0xFF	; 255
    171e:	62 38       	cpi	r22, 0x82	; 130
    1720:	79 07       	cpc	r23, r25
    1722:	0c f0       	brlt	.+2      	; 0x1726 <__pack_f+0x5e>
    1724:	5b c0       	rjmp	.+182    	; 0x17dc <__pack_f+0x114>
    1726:	22 e8       	ldi	r18, 0x82	; 130
    1728:	3f ef       	ldi	r19, 0xFF	; 255
    172a:	26 1b       	sub	r18, r22
    172c:	37 0b       	sbc	r19, r23
    172e:	2a 31       	cpi	r18, 0x1A	; 26
    1730:	31 05       	cpc	r19, r1
    1732:	2c f0       	brlt	.+10     	; 0x173e <__pack_f+0x76>
    1734:	20 e0       	ldi	r18, 0x00	; 0
    1736:	30 e0       	ldi	r19, 0x00	; 0
    1738:	40 e0       	ldi	r20, 0x00	; 0
    173a:	50 e0       	ldi	r21, 0x00	; 0
    173c:	2a c0       	rjmp	.+84     	; 0x1792 <__pack_f+0xca>
    173e:	b8 01       	movw	r22, r16
    1740:	a7 01       	movw	r20, r14
    1742:	02 2e       	mov	r0, r18
    1744:	04 c0       	rjmp	.+8      	; 0x174e <__pack_f+0x86>
    1746:	76 95       	lsr	r23
    1748:	67 95       	ror	r22
    174a:	57 95       	ror	r21
    174c:	47 95       	ror	r20
    174e:	0a 94       	dec	r0
    1750:	d2 f7       	brpl	.-12     	; 0x1746 <__pack_f+0x7e>
    1752:	81 e0       	ldi	r24, 0x01	; 1
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	a0 e0       	ldi	r26, 0x00	; 0
    1758:	b0 e0       	ldi	r27, 0x00	; 0
    175a:	04 c0       	rjmp	.+8      	; 0x1764 <__pack_f+0x9c>
    175c:	88 0f       	add	r24, r24
    175e:	99 1f       	adc	r25, r25
    1760:	aa 1f       	adc	r26, r26
    1762:	bb 1f       	adc	r27, r27
    1764:	2a 95       	dec	r18
    1766:	d2 f7       	brpl	.-12     	; 0x175c <__pack_f+0x94>
    1768:	01 97       	sbiw	r24, 0x01	; 1
    176a:	a1 09       	sbc	r26, r1
    176c:	b1 09       	sbc	r27, r1
    176e:	8e 21       	and	r24, r14
    1770:	9f 21       	and	r25, r15
    1772:	a0 23       	and	r26, r16
    1774:	b1 23       	and	r27, r17
    1776:	00 97       	sbiw	r24, 0x00	; 0
    1778:	a1 05       	cpc	r26, r1
    177a:	b1 05       	cpc	r27, r1
    177c:	21 f0       	breq	.+8      	; 0x1786 <__pack_f+0xbe>
    177e:	81 e0       	ldi	r24, 0x01	; 1
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	a0 e0       	ldi	r26, 0x00	; 0
    1784:	b0 e0       	ldi	r27, 0x00	; 0
    1786:	9a 01       	movw	r18, r20
    1788:	ab 01       	movw	r20, r22
    178a:	28 2b       	or	r18, r24
    178c:	39 2b       	or	r19, r25
    178e:	4a 2b       	or	r20, r26
    1790:	5b 2b       	or	r21, r27
    1792:	da 01       	movw	r26, r20
    1794:	c9 01       	movw	r24, r18
    1796:	8f 77       	andi	r24, 0x7F	; 127
    1798:	90 70       	andi	r25, 0x00	; 0
    179a:	a0 70       	andi	r26, 0x00	; 0
    179c:	b0 70       	andi	r27, 0x00	; 0
    179e:	80 34       	cpi	r24, 0x40	; 64
    17a0:	91 05       	cpc	r25, r1
    17a2:	a1 05       	cpc	r26, r1
    17a4:	b1 05       	cpc	r27, r1
    17a6:	39 f4       	brne	.+14     	; 0x17b6 <__pack_f+0xee>
    17a8:	27 ff       	sbrs	r18, 7
    17aa:	09 c0       	rjmp	.+18     	; 0x17be <__pack_f+0xf6>
    17ac:	20 5c       	subi	r18, 0xC0	; 192
    17ae:	3f 4f       	sbci	r19, 0xFF	; 255
    17b0:	4f 4f       	sbci	r20, 0xFF	; 255
    17b2:	5f 4f       	sbci	r21, 0xFF	; 255
    17b4:	04 c0       	rjmp	.+8      	; 0x17be <__pack_f+0xf6>
    17b6:	21 5c       	subi	r18, 0xC1	; 193
    17b8:	3f 4f       	sbci	r19, 0xFF	; 255
    17ba:	4f 4f       	sbci	r20, 0xFF	; 255
    17bc:	5f 4f       	sbci	r21, 0xFF	; 255
    17be:	e0 e0       	ldi	r30, 0x00	; 0
    17c0:	f0 e0       	ldi	r31, 0x00	; 0
    17c2:	20 30       	cpi	r18, 0x00	; 0
    17c4:	a0 e0       	ldi	r26, 0x00	; 0
    17c6:	3a 07       	cpc	r19, r26
    17c8:	a0 e0       	ldi	r26, 0x00	; 0
    17ca:	4a 07       	cpc	r20, r26
    17cc:	a0 e4       	ldi	r26, 0x40	; 64
    17ce:	5a 07       	cpc	r21, r26
    17d0:	10 f0       	brcs	.+4      	; 0x17d6 <__pack_f+0x10e>
    17d2:	e1 e0       	ldi	r30, 0x01	; 1
    17d4:	f0 e0       	ldi	r31, 0x00	; 0
    17d6:	79 01       	movw	r14, r18
    17d8:	8a 01       	movw	r16, r20
    17da:	27 c0       	rjmp	.+78     	; 0x182a <__pack_f+0x162>
    17dc:	60 38       	cpi	r22, 0x80	; 128
    17de:	71 05       	cpc	r23, r1
    17e0:	64 f5       	brge	.+88     	; 0x183a <__pack_f+0x172>
    17e2:	fb 01       	movw	r30, r22
    17e4:	e1 58       	subi	r30, 0x81	; 129
    17e6:	ff 4f       	sbci	r31, 0xFF	; 255
    17e8:	d8 01       	movw	r26, r16
    17ea:	c7 01       	movw	r24, r14
    17ec:	8f 77       	andi	r24, 0x7F	; 127
    17ee:	90 70       	andi	r25, 0x00	; 0
    17f0:	a0 70       	andi	r26, 0x00	; 0
    17f2:	b0 70       	andi	r27, 0x00	; 0
    17f4:	80 34       	cpi	r24, 0x40	; 64
    17f6:	91 05       	cpc	r25, r1
    17f8:	a1 05       	cpc	r26, r1
    17fa:	b1 05       	cpc	r27, r1
    17fc:	39 f4       	brne	.+14     	; 0x180c <__pack_f+0x144>
    17fe:	e7 fe       	sbrs	r14, 7
    1800:	0d c0       	rjmp	.+26     	; 0x181c <__pack_f+0x154>
    1802:	80 e4       	ldi	r24, 0x40	; 64
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	a0 e0       	ldi	r26, 0x00	; 0
    1808:	b0 e0       	ldi	r27, 0x00	; 0
    180a:	04 c0       	rjmp	.+8      	; 0x1814 <__pack_f+0x14c>
    180c:	8f e3       	ldi	r24, 0x3F	; 63
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	a0 e0       	ldi	r26, 0x00	; 0
    1812:	b0 e0       	ldi	r27, 0x00	; 0
    1814:	e8 0e       	add	r14, r24
    1816:	f9 1e       	adc	r15, r25
    1818:	0a 1f       	adc	r16, r26
    181a:	1b 1f       	adc	r17, r27
    181c:	17 ff       	sbrs	r17, 7
    181e:	05 c0       	rjmp	.+10     	; 0x182a <__pack_f+0x162>
    1820:	16 95       	lsr	r17
    1822:	07 95       	ror	r16
    1824:	f7 94       	ror	r15
    1826:	e7 94       	ror	r14
    1828:	31 96       	adiw	r30, 0x01	; 1
    182a:	87 e0       	ldi	r24, 0x07	; 7
    182c:	16 95       	lsr	r17
    182e:	07 95       	ror	r16
    1830:	f7 94       	ror	r15
    1832:	e7 94       	ror	r14
    1834:	8a 95       	dec	r24
    1836:	d1 f7       	brne	.-12     	; 0x182c <__pack_f+0x164>
    1838:	05 c0       	rjmp	.+10     	; 0x1844 <__pack_f+0x17c>
    183a:	ee 24       	eor	r14, r14
    183c:	ff 24       	eor	r15, r15
    183e:	87 01       	movw	r16, r14
    1840:	ef ef       	ldi	r30, 0xFF	; 255
    1842:	f0 e0       	ldi	r31, 0x00	; 0
    1844:	6e 2f       	mov	r22, r30
    1846:	67 95       	ror	r22
    1848:	66 27       	eor	r22, r22
    184a:	67 95       	ror	r22
    184c:	90 2f       	mov	r25, r16
    184e:	9f 77       	andi	r25, 0x7F	; 127
    1850:	d7 94       	ror	r13
    1852:	dd 24       	eor	r13, r13
    1854:	d7 94       	ror	r13
    1856:	8e 2f       	mov	r24, r30
    1858:	86 95       	lsr	r24
    185a:	49 2f       	mov	r20, r25
    185c:	46 2b       	or	r20, r22
    185e:	58 2f       	mov	r21, r24
    1860:	5d 29       	or	r21, r13
    1862:	b7 01       	movw	r22, r14
    1864:	ca 01       	movw	r24, r20
    1866:	1f 91       	pop	r17
    1868:	0f 91       	pop	r16
    186a:	ff 90       	pop	r15
    186c:	ef 90       	pop	r14
    186e:	df 90       	pop	r13
    1870:	08 95       	ret

00001872 <__unpack_f>:
    1872:	fc 01       	movw	r30, r24
    1874:	db 01       	movw	r26, r22
    1876:	40 81       	ld	r20, Z
    1878:	51 81       	ldd	r21, Z+1	; 0x01
    187a:	22 81       	ldd	r18, Z+2	; 0x02
    187c:	62 2f       	mov	r22, r18
    187e:	6f 77       	andi	r22, 0x7F	; 127
    1880:	70 e0       	ldi	r23, 0x00	; 0
    1882:	22 1f       	adc	r18, r18
    1884:	22 27       	eor	r18, r18
    1886:	22 1f       	adc	r18, r18
    1888:	93 81       	ldd	r25, Z+3	; 0x03
    188a:	89 2f       	mov	r24, r25
    188c:	88 0f       	add	r24, r24
    188e:	82 2b       	or	r24, r18
    1890:	28 2f       	mov	r18, r24
    1892:	30 e0       	ldi	r19, 0x00	; 0
    1894:	99 1f       	adc	r25, r25
    1896:	99 27       	eor	r25, r25
    1898:	99 1f       	adc	r25, r25
    189a:	11 96       	adiw	r26, 0x01	; 1
    189c:	9c 93       	st	X, r25
    189e:	11 97       	sbiw	r26, 0x01	; 1
    18a0:	21 15       	cp	r18, r1
    18a2:	31 05       	cpc	r19, r1
    18a4:	a9 f5       	brne	.+106    	; 0x1910 <__unpack_f+0x9e>
    18a6:	41 15       	cp	r20, r1
    18a8:	51 05       	cpc	r21, r1
    18aa:	61 05       	cpc	r22, r1
    18ac:	71 05       	cpc	r23, r1
    18ae:	11 f4       	brne	.+4      	; 0x18b4 <__unpack_f+0x42>
    18b0:	82 e0       	ldi	r24, 0x02	; 2
    18b2:	37 c0       	rjmp	.+110    	; 0x1922 <__unpack_f+0xb0>
    18b4:	82 e8       	ldi	r24, 0x82	; 130
    18b6:	9f ef       	ldi	r25, 0xFF	; 255
    18b8:	13 96       	adiw	r26, 0x03	; 3
    18ba:	9c 93       	st	X, r25
    18bc:	8e 93       	st	-X, r24
    18be:	12 97       	sbiw	r26, 0x02	; 2
    18c0:	9a 01       	movw	r18, r20
    18c2:	ab 01       	movw	r20, r22
    18c4:	67 e0       	ldi	r22, 0x07	; 7
    18c6:	22 0f       	add	r18, r18
    18c8:	33 1f       	adc	r19, r19
    18ca:	44 1f       	adc	r20, r20
    18cc:	55 1f       	adc	r21, r21
    18ce:	6a 95       	dec	r22
    18d0:	d1 f7       	brne	.-12     	; 0x18c6 <__unpack_f+0x54>
    18d2:	83 e0       	ldi	r24, 0x03	; 3
    18d4:	8c 93       	st	X, r24
    18d6:	0d c0       	rjmp	.+26     	; 0x18f2 <__unpack_f+0x80>
    18d8:	22 0f       	add	r18, r18
    18da:	33 1f       	adc	r19, r19
    18dc:	44 1f       	adc	r20, r20
    18de:	55 1f       	adc	r21, r21
    18e0:	12 96       	adiw	r26, 0x02	; 2
    18e2:	8d 91       	ld	r24, X+
    18e4:	9c 91       	ld	r25, X
    18e6:	13 97       	sbiw	r26, 0x03	; 3
    18e8:	01 97       	sbiw	r24, 0x01	; 1
    18ea:	13 96       	adiw	r26, 0x03	; 3
    18ec:	9c 93       	st	X, r25
    18ee:	8e 93       	st	-X, r24
    18f0:	12 97       	sbiw	r26, 0x02	; 2
    18f2:	20 30       	cpi	r18, 0x00	; 0
    18f4:	80 e0       	ldi	r24, 0x00	; 0
    18f6:	38 07       	cpc	r19, r24
    18f8:	80 e0       	ldi	r24, 0x00	; 0
    18fa:	48 07       	cpc	r20, r24
    18fc:	80 e4       	ldi	r24, 0x40	; 64
    18fe:	58 07       	cpc	r21, r24
    1900:	58 f3       	brcs	.-42     	; 0x18d8 <__unpack_f+0x66>
    1902:	14 96       	adiw	r26, 0x04	; 4
    1904:	2d 93       	st	X+, r18
    1906:	3d 93       	st	X+, r19
    1908:	4d 93       	st	X+, r20
    190a:	5c 93       	st	X, r21
    190c:	17 97       	sbiw	r26, 0x07	; 7
    190e:	08 95       	ret
    1910:	2f 3f       	cpi	r18, 0xFF	; 255
    1912:	31 05       	cpc	r19, r1
    1914:	79 f4       	brne	.+30     	; 0x1934 <__unpack_f+0xc2>
    1916:	41 15       	cp	r20, r1
    1918:	51 05       	cpc	r21, r1
    191a:	61 05       	cpc	r22, r1
    191c:	71 05       	cpc	r23, r1
    191e:	19 f4       	brne	.+6      	; 0x1926 <__unpack_f+0xb4>
    1920:	84 e0       	ldi	r24, 0x04	; 4
    1922:	8c 93       	st	X, r24
    1924:	08 95       	ret
    1926:	64 ff       	sbrs	r22, 4
    1928:	03 c0       	rjmp	.+6      	; 0x1930 <__unpack_f+0xbe>
    192a:	81 e0       	ldi	r24, 0x01	; 1
    192c:	8c 93       	st	X, r24
    192e:	12 c0       	rjmp	.+36     	; 0x1954 <__unpack_f+0xe2>
    1930:	1c 92       	st	X, r1
    1932:	10 c0       	rjmp	.+32     	; 0x1954 <__unpack_f+0xe2>
    1934:	2f 57       	subi	r18, 0x7F	; 127
    1936:	30 40       	sbci	r19, 0x00	; 0
    1938:	13 96       	adiw	r26, 0x03	; 3
    193a:	3c 93       	st	X, r19
    193c:	2e 93       	st	-X, r18
    193e:	12 97       	sbiw	r26, 0x02	; 2
    1940:	83 e0       	ldi	r24, 0x03	; 3
    1942:	8c 93       	st	X, r24
    1944:	87 e0       	ldi	r24, 0x07	; 7
    1946:	44 0f       	add	r20, r20
    1948:	55 1f       	adc	r21, r21
    194a:	66 1f       	adc	r22, r22
    194c:	77 1f       	adc	r23, r23
    194e:	8a 95       	dec	r24
    1950:	d1 f7       	brne	.-12     	; 0x1946 <__unpack_f+0xd4>
    1952:	70 64       	ori	r23, 0x40	; 64
    1954:	14 96       	adiw	r26, 0x04	; 4
    1956:	4d 93       	st	X+, r20
    1958:	5d 93       	st	X+, r21
    195a:	6d 93       	st	X+, r22
    195c:	7c 93       	st	X, r23
    195e:	17 97       	sbiw	r26, 0x07	; 7
    1960:	08 95       	ret

00001962 <__fpcmp_parts_f>:
    1962:	1f 93       	push	r17
    1964:	dc 01       	movw	r26, r24
    1966:	fb 01       	movw	r30, r22
    1968:	9c 91       	ld	r25, X
    196a:	92 30       	cpi	r25, 0x02	; 2
    196c:	08 f4       	brcc	.+2      	; 0x1970 <__fpcmp_parts_f+0xe>
    196e:	47 c0       	rjmp	.+142    	; 0x19fe <__fpcmp_parts_f+0x9c>
    1970:	80 81       	ld	r24, Z
    1972:	82 30       	cpi	r24, 0x02	; 2
    1974:	08 f4       	brcc	.+2      	; 0x1978 <__fpcmp_parts_f+0x16>
    1976:	43 c0       	rjmp	.+134    	; 0x19fe <__fpcmp_parts_f+0x9c>
    1978:	94 30       	cpi	r25, 0x04	; 4
    197a:	51 f4       	brne	.+20     	; 0x1990 <__fpcmp_parts_f+0x2e>
    197c:	11 96       	adiw	r26, 0x01	; 1
    197e:	1c 91       	ld	r17, X
    1980:	84 30       	cpi	r24, 0x04	; 4
    1982:	99 f5       	brne	.+102    	; 0x19ea <__fpcmp_parts_f+0x88>
    1984:	81 81       	ldd	r24, Z+1	; 0x01
    1986:	68 2f       	mov	r22, r24
    1988:	70 e0       	ldi	r23, 0x00	; 0
    198a:	61 1b       	sub	r22, r17
    198c:	71 09       	sbc	r23, r1
    198e:	3f c0       	rjmp	.+126    	; 0x1a0e <__fpcmp_parts_f+0xac>
    1990:	84 30       	cpi	r24, 0x04	; 4
    1992:	21 f0       	breq	.+8      	; 0x199c <__fpcmp_parts_f+0x3a>
    1994:	92 30       	cpi	r25, 0x02	; 2
    1996:	31 f4       	brne	.+12     	; 0x19a4 <__fpcmp_parts_f+0x42>
    1998:	82 30       	cpi	r24, 0x02	; 2
    199a:	b9 f1       	breq	.+110    	; 0x1a0a <__fpcmp_parts_f+0xa8>
    199c:	81 81       	ldd	r24, Z+1	; 0x01
    199e:	88 23       	and	r24, r24
    19a0:	89 f1       	breq	.+98     	; 0x1a04 <__fpcmp_parts_f+0xa2>
    19a2:	2d c0       	rjmp	.+90     	; 0x19fe <__fpcmp_parts_f+0x9c>
    19a4:	11 96       	adiw	r26, 0x01	; 1
    19a6:	1c 91       	ld	r17, X
    19a8:	11 97       	sbiw	r26, 0x01	; 1
    19aa:	82 30       	cpi	r24, 0x02	; 2
    19ac:	f1 f0       	breq	.+60     	; 0x19ea <__fpcmp_parts_f+0x88>
    19ae:	81 81       	ldd	r24, Z+1	; 0x01
    19b0:	18 17       	cp	r17, r24
    19b2:	d9 f4       	brne	.+54     	; 0x19ea <__fpcmp_parts_f+0x88>
    19b4:	12 96       	adiw	r26, 0x02	; 2
    19b6:	2d 91       	ld	r18, X+
    19b8:	3c 91       	ld	r19, X
    19ba:	13 97       	sbiw	r26, 0x03	; 3
    19bc:	82 81       	ldd	r24, Z+2	; 0x02
    19be:	93 81       	ldd	r25, Z+3	; 0x03
    19c0:	82 17       	cp	r24, r18
    19c2:	93 07       	cpc	r25, r19
    19c4:	94 f0       	brlt	.+36     	; 0x19ea <__fpcmp_parts_f+0x88>
    19c6:	28 17       	cp	r18, r24
    19c8:	39 07       	cpc	r19, r25
    19ca:	bc f0       	brlt	.+46     	; 0x19fa <__fpcmp_parts_f+0x98>
    19cc:	14 96       	adiw	r26, 0x04	; 4
    19ce:	8d 91       	ld	r24, X+
    19d0:	9d 91       	ld	r25, X+
    19d2:	0d 90       	ld	r0, X+
    19d4:	bc 91       	ld	r27, X
    19d6:	a0 2d       	mov	r26, r0
    19d8:	24 81       	ldd	r18, Z+4	; 0x04
    19da:	35 81       	ldd	r19, Z+5	; 0x05
    19dc:	46 81       	ldd	r20, Z+6	; 0x06
    19de:	57 81       	ldd	r21, Z+7	; 0x07
    19e0:	28 17       	cp	r18, r24
    19e2:	39 07       	cpc	r19, r25
    19e4:	4a 07       	cpc	r20, r26
    19e6:	5b 07       	cpc	r21, r27
    19e8:	18 f4       	brcc	.+6      	; 0x19f0 <__fpcmp_parts_f+0x8e>
    19ea:	11 23       	and	r17, r17
    19ec:	41 f0       	breq	.+16     	; 0x19fe <__fpcmp_parts_f+0x9c>
    19ee:	0a c0       	rjmp	.+20     	; 0x1a04 <__fpcmp_parts_f+0xa2>
    19f0:	82 17       	cp	r24, r18
    19f2:	93 07       	cpc	r25, r19
    19f4:	a4 07       	cpc	r26, r20
    19f6:	b5 07       	cpc	r27, r21
    19f8:	40 f4       	brcc	.+16     	; 0x1a0a <__fpcmp_parts_f+0xa8>
    19fa:	11 23       	and	r17, r17
    19fc:	19 f0       	breq	.+6      	; 0x1a04 <__fpcmp_parts_f+0xa2>
    19fe:	61 e0       	ldi	r22, 0x01	; 1
    1a00:	70 e0       	ldi	r23, 0x00	; 0
    1a02:	05 c0       	rjmp	.+10     	; 0x1a0e <__fpcmp_parts_f+0xac>
    1a04:	6f ef       	ldi	r22, 0xFF	; 255
    1a06:	7f ef       	ldi	r23, 0xFF	; 255
    1a08:	02 c0       	rjmp	.+4      	; 0x1a0e <__fpcmp_parts_f+0xac>
    1a0a:	60 e0       	ldi	r22, 0x00	; 0
    1a0c:	70 e0       	ldi	r23, 0x00	; 0
    1a0e:	cb 01       	movw	r24, r22
    1a10:	1f 91       	pop	r17
    1a12:	08 95       	ret

00001a14 <__divmodsi4>:
    1a14:	97 fb       	bst	r25, 7
    1a16:	09 2e       	mov	r0, r25
    1a18:	05 26       	eor	r0, r21
    1a1a:	0e d0       	rcall	.+28     	; 0x1a38 <__divmodsi4_neg1>
    1a1c:	57 fd       	sbrc	r21, 7
    1a1e:	04 d0       	rcall	.+8      	; 0x1a28 <__divmodsi4_neg2>
    1a20:	14 d0       	rcall	.+40     	; 0x1a4a <__udivmodsi4>
    1a22:	0a d0       	rcall	.+20     	; 0x1a38 <__divmodsi4_neg1>
    1a24:	00 1c       	adc	r0, r0
    1a26:	38 f4       	brcc	.+14     	; 0x1a36 <__divmodsi4_exit>

00001a28 <__divmodsi4_neg2>:
    1a28:	50 95       	com	r21
    1a2a:	40 95       	com	r20
    1a2c:	30 95       	com	r19
    1a2e:	21 95       	neg	r18
    1a30:	3f 4f       	sbci	r19, 0xFF	; 255
    1a32:	4f 4f       	sbci	r20, 0xFF	; 255
    1a34:	5f 4f       	sbci	r21, 0xFF	; 255

00001a36 <__divmodsi4_exit>:
    1a36:	08 95       	ret

00001a38 <__divmodsi4_neg1>:
    1a38:	f6 f7       	brtc	.-4      	; 0x1a36 <__divmodsi4_exit>
    1a3a:	90 95       	com	r25
    1a3c:	80 95       	com	r24
    1a3e:	70 95       	com	r23
    1a40:	61 95       	neg	r22
    1a42:	7f 4f       	sbci	r23, 0xFF	; 255
    1a44:	8f 4f       	sbci	r24, 0xFF	; 255
    1a46:	9f 4f       	sbci	r25, 0xFF	; 255
    1a48:	08 95       	ret

00001a4a <__udivmodsi4>:
    1a4a:	a1 e2       	ldi	r26, 0x21	; 33
    1a4c:	1a 2e       	mov	r1, r26
    1a4e:	aa 1b       	sub	r26, r26
    1a50:	bb 1b       	sub	r27, r27
    1a52:	fd 01       	movw	r30, r26
    1a54:	0d c0       	rjmp	.+26     	; 0x1a70 <__udivmodsi4_ep>

00001a56 <__udivmodsi4_loop>:
    1a56:	aa 1f       	adc	r26, r26
    1a58:	bb 1f       	adc	r27, r27
    1a5a:	ee 1f       	adc	r30, r30
    1a5c:	ff 1f       	adc	r31, r31
    1a5e:	a2 17       	cp	r26, r18
    1a60:	b3 07       	cpc	r27, r19
    1a62:	e4 07       	cpc	r30, r20
    1a64:	f5 07       	cpc	r31, r21
    1a66:	20 f0       	brcs	.+8      	; 0x1a70 <__udivmodsi4_ep>
    1a68:	a2 1b       	sub	r26, r18
    1a6a:	b3 0b       	sbc	r27, r19
    1a6c:	e4 0b       	sbc	r30, r20
    1a6e:	f5 0b       	sbc	r31, r21

00001a70 <__udivmodsi4_ep>:
    1a70:	66 1f       	adc	r22, r22
    1a72:	77 1f       	adc	r23, r23
    1a74:	88 1f       	adc	r24, r24
    1a76:	99 1f       	adc	r25, r25
    1a78:	1a 94       	dec	r1
    1a7a:	69 f7       	brne	.-38     	; 0x1a56 <__udivmodsi4_loop>
    1a7c:	60 95       	com	r22
    1a7e:	70 95       	com	r23
    1a80:	80 95       	com	r24
    1a82:	90 95       	com	r25
    1a84:	9b 01       	movw	r18, r22
    1a86:	ac 01       	movw	r20, r24
    1a88:	bd 01       	movw	r22, r26
    1a8a:	cf 01       	movw	r24, r30
    1a8c:	08 95       	ret

00001a8e <__prologue_saves__>:
    1a8e:	2f 92       	push	r2
    1a90:	3f 92       	push	r3
    1a92:	4f 92       	push	r4
    1a94:	5f 92       	push	r5
    1a96:	6f 92       	push	r6
    1a98:	7f 92       	push	r7
    1a9a:	8f 92       	push	r8
    1a9c:	9f 92       	push	r9
    1a9e:	af 92       	push	r10
    1aa0:	bf 92       	push	r11
    1aa2:	cf 92       	push	r12
    1aa4:	df 92       	push	r13
    1aa6:	ef 92       	push	r14
    1aa8:	ff 92       	push	r15
    1aaa:	0f 93       	push	r16
    1aac:	1f 93       	push	r17
    1aae:	cf 93       	push	r28
    1ab0:	df 93       	push	r29
    1ab2:	cd b7       	in	r28, 0x3d	; 61
    1ab4:	de b7       	in	r29, 0x3e	; 62
    1ab6:	ca 1b       	sub	r28, r26
    1ab8:	db 0b       	sbc	r29, r27
    1aba:	0f b6       	in	r0, 0x3f	; 63
    1abc:	f8 94       	cli
    1abe:	de bf       	out	0x3e, r29	; 62
    1ac0:	0f be       	out	0x3f, r0	; 63
    1ac2:	cd bf       	out	0x3d, r28	; 61
    1ac4:	19 94       	eijmp

00001ac6 <__epilogue_restores__>:
    1ac6:	2a 88       	ldd	r2, Y+18	; 0x12
    1ac8:	39 88       	ldd	r3, Y+17	; 0x11
    1aca:	48 88       	ldd	r4, Y+16	; 0x10
    1acc:	5f 84       	ldd	r5, Y+15	; 0x0f
    1ace:	6e 84       	ldd	r6, Y+14	; 0x0e
    1ad0:	7d 84       	ldd	r7, Y+13	; 0x0d
    1ad2:	8c 84       	ldd	r8, Y+12	; 0x0c
    1ad4:	9b 84       	ldd	r9, Y+11	; 0x0b
    1ad6:	aa 84       	ldd	r10, Y+10	; 0x0a
    1ad8:	b9 84       	ldd	r11, Y+9	; 0x09
    1ada:	c8 84       	ldd	r12, Y+8	; 0x08
    1adc:	df 80       	ldd	r13, Y+7	; 0x07
    1ade:	ee 80       	ldd	r14, Y+6	; 0x06
    1ae0:	fd 80       	ldd	r15, Y+5	; 0x05
    1ae2:	0c 81       	ldd	r16, Y+4	; 0x04
    1ae4:	1b 81       	ldd	r17, Y+3	; 0x03
    1ae6:	aa 81       	ldd	r26, Y+2	; 0x02
    1ae8:	b9 81       	ldd	r27, Y+1	; 0x01
    1aea:	ce 0f       	add	r28, r30
    1aec:	d1 1d       	adc	r29, r1
    1aee:	0f b6       	in	r0, 0x3f	; 63
    1af0:	f8 94       	cli
    1af2:	de bf       	out	0x3e, r29	; 62
    1af4:	0f be       	out	0x3f, r0	; 63
    1af6:	cd bf       	out	0x3d, r28	; 61
    1af8:	ed 01       	movw	r28, r26
    1afa:	08 95       	ret

00001afc <_exit>:
    1afc:	f8 94       	cli

00001afe <__stop_program>:
    1afe:	ff cf       	rjmp	.-2      	; 0x1afe <__stop_program>
